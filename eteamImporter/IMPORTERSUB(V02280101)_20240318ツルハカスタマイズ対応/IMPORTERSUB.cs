using IMPORTERSUB.DbFactory;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace IMPORTERSUB
{
    public class Import
    {    
    	#region COM GUID
    	//  これらの GUID は、このクラスおよびその COM インターフェイスの COM ID を 
    	//  指定します。この値を変更すると、 
    	//  既存のクライアントはクラスにアクセスできなくなります。
    	public const string ClassId     = "C66AFECE-C6EE-4622-ABBD-1B6DC62B088D";
    	public const string InterfaceId = "24574C2D-C853-4CB3-8E63-EEAF3488354C";    		
    	public const string EventsId    = "7901F894-DB01-498A-B4B7-84DE266310FC";
        #endregion

        #region プログラム独自の例外
        private class MyException : Exception
    	{   
    		private  int M_ErrNo;
    		internal int ErrNo
            {
    			get { return M_ErrNo; }
    			set { M_ErrNo = value; }
    		}
    
    		internal MyException(int number) : base()
    		{
    			this.ErrNo = number;
    		}
    
    		internal MyException(int number, Exception innerException) : base("", innerException)
    		{
    			Trace.WriteLine(innerException.Message);
    			this.ErrNo = number;
    		}    
    	}
        #endregion

        #region メソッド戻り値
        private const int MC_RESULT_OK                  = 0;
    	private const int MC_RESULT_ERR_CCOD            = -1;
    	private const int MC_RESULT_ERR_PRCFLG          = -2;
    	private const int MC_RESULT_ERR_DFUK            = -3;
    	private const int MC_RESULT_ERR_LOGFLG          = -4;
    	private const int MC_RESULT_ERR_PATH            = -5;
    	private const int MC_RESULT_ERR_FNAME           = -6;
    	private const int MC_RESULT_ERR_LOGPATH         = -7;
    	private const int MC_RESULT_ERR_LOGFNAME        = -8;
    	private const int MC_RESULT_ERR_RNO             = -9;

    	private const int MC_RESULT_ERR_KAKUTEI         = -10;
    	private const int MC_RESULT_ERR_FILENOTEXIST    = -11;
    	private const int MC_RESULT_ERR_CCODNOTEXIST    = -12;    		
    	private const int MC_RESULT_ERR_IJPT            = -13;    		
    	private const int MC_RESULT_ERR_KANZANFLG       = -14;    		
    	private const int MC_RESULT_ERR_RirekiUcod      = -15;    		
    	private const int MC_RESULT_ERR_RUcodKaisyaNo   = -16;    		
    	private const int MC_RESULT_ERR_SKUBUN          = -17;    		
    	private const int MC_RESULT_ERR_KEIGEN          = -18;

    	private const int MC_RESULT_ERR_IMPFILEOPEN     = -21;
    	private const int MC_RESULT_ERR_IMPFILEREAD     = -22;
    	private const int MC_RESULT_ERR_LOGFILEOPEN     = -23;
    	private const int MC_RESULT_ERR_LOGFILEWRITE    = -24;
    		
    	private const int MC_RESULT_ERR_IN_ROCK         = -30;
    	private const int MC_RESULT_ERR_DBCONNECT       = -31;
    	private const int MC_RESULT_ERR_DBREAD          = -32;
    	private const int MC_RESULT_ERR_DBWRITE         = -33;    		
    	private const int MC_RESULT_ERR_DBGAIKA_SEIGOU  = -34;    		
    	private const int MC_RESULT_ERR_DBWRITE_Rireki  = -35;    		
    	private const int MC_RESULT_ERR_DBRIREKI_SEIGOU = -36;    		
    	private const int MC_RESULT_ERR_KEIGENKUBUN     = -37;

        private const int MC_RESULT_ERR_DATA            = -41;
    	private const int MC_RESULT_ERR_DCNO            = -42;    		
    	private const int MC_RESULT_ERR_JDFNO           = -43;    		
    	private const int MC_RESULT_ERR_IJPT_NO         = -44;
    		
    	private const int MC_RESULT_ERR_IN_JF_DCNO      = -50;    		
    	private const int MC_RESULT_ERR_IN_DCNO         = -51;    		
    	private const int MC_RESULT_ERR_IN_DIFF_DYMD    = -52;    		
    	private const int MC_RESULT_ERR_IN_MAXDUNO      = -53;    		
    	private const int MC_RESULT_ERR_IN_MAXDCNO      = -54;    		
    	private const int MC_RESULT_ERR_IN_DIPDUNO      = -55;    		
    	private const int MC_RESULT_ERR_IN_LINK         = -56;    		
    	private const int MC_RESULT_ERR_BUNRI_KO_SIWAKE = -57;
    		
    	private const int MC_RESULT_ERR_OTHERS          = -99;
        #endregion

    	#region エラー内容(不良仕訳ログ用)
    	private string MC_ERRLOG_INVALIDDATACOUNT        = "データ項目数が不正です。";
    	private string MC_ERRLOG_INVALIDCHAR             = "不正な文字が含まれています。";
    	private string MC_ERRLOG_INVALIDVALUE            = "不正な値です。";
    	private string MC_ERRLOG_INVALIDDATE             = "日付が不正です。";
    	private string MC_ERRLOG_INVALIDLENGTH           = "桁数オーバーです。";
    	private string MC_ERRLOG_MINYURYOKU              = "必須項目です。";
    	private string MC_ERRLOG_MITOUROKU               = "登録されていません。";
    	private string MC_ERRLOG_INVALIDDYMD             = "入力不可の日付です。";
    	private string MC_ERRLOG_INVALIDDKEI             = "該当の経過月は締更新済みです。";
    	private string MC_ERRLOG_INVALIDDCNO             = "同一伝票番号が他で使用されています。";
    	private string MC_ERRLOG_USERSECCCOD             = "会社の使用が許可されていません。";
    	private string MC_ERRLOG_USERSECDATA             = "データ追加権限がありません。";
    	private string MC_ERRLOG_USERSYONIN              = "承認グループに所属していません。";
    	private string MC_ERRLOG_USERSECPTN              = "セキュリティパターンが設定されていません。";
    	private string MC_ERRLOG_CANNOTUSE               = "使用不可コードです。";
    	private string MC_ERRLOG_INVALIDBCOD             = "集計部門です。";
    	private string MC_ERRLOG_INVALIDZKMK             = "税額対象科目として使用できない科目です。";
    	private string MC_ERRLOG_INVALIDSKIZ             = "支払日＞支払期日になっています。";
    	private string MC_ERRLOG_INVALIDUKIZ             = "回収日＞回収期日になっています。";
    	private string MC_ERRLOG_INVALIDCHILDZKMK        = "分離仕訳の";
    	private string MC_ERRLOG_INVALIDSEIRIM           = "指定の伝票日付は整理月ではありません。";
    	private string MC_ERRLOG_INVALIDNOUSE            = "会社設定で指定項目を使用しない設定です。";
    	private string MC_ERRLOG_JFDNO                   = "自動付番時に取得した伝票番号";
    	private string MC_ERRLOG_INVALIDVALUE_Bunri      = "貸借科目ともに分離区分が登録されています。";
    	private string MC_ERRLOG_INVAL_GAIKA_KAMOKUNO    = "外貨科目が指定されています。";
    	private string MC_ERRLOG_INVAL_GAIKA_HEISYU      = "貸借科目の幣種が異なります。";
//    	private string MC_ERRLOG_INVAL_GAIKA_KAMOKU_SOUI = "貸借科目の幣種が異なります。";
    	private string MC_ERRLOG_INVAL_GAIKA_FUGOU_G     = "外貨金額の符号が不正です。";
    	private string MC_ERRLOG_INVAL_GAIKA_FUGOU_GT    = "外貨対価金額の符号が不正です。";
    	private string MC_ERRLOG_INVAL_GAIKA_KETASU_SYO  = "小数点以下の桁数オーバーです。";
    	private string MC_ERRLOG_INVAL_GAIKA_RATE        = "レートが未入力です。";
    	private string MC_ERRLOG_INVAL_GAIKA_KINGAKU     = "外貨金額が未入力です。";
    	private string MC_ERRLOG_INVALIDLENGTH_KANZAN    = "邦貨換算後の桁数オーバーです。";
    	private string MC_ERRLOG_TAIKA                   = "対価金額の入力は不可です。";
    	private string MC_ERRLOG_TAIKA_G                 = "外貨対価金額の入力は不可です。";
    	private string MC_ERRLOG_TAIKA_HG                = "外貨対価の判断ができません。";
    	private string MC_ERRLOG_GAIKACTL                = "外貨システムを使用しない設定です。";
    	private string MC_Value_ERRLOG                   = "貸借諸口金額がアンマッチです。";
    	private string MC_ERRLOG_INVAL_KKFLG_MISIYO      = "貸借科目ともに消込コードを使用しない設定です。";
    	private string MC_ERRLOG_SEIGYOMOJI              = "項目内に制御文字が含まれています。";
    	private string MC_ERRLOG_INVALIDZKMK_Bunri       = "税科目に対して自動分離を指定しています。";
    	private string MC_ERRLOG_INVALIDKEIGEN           = "使用できない税率です。";    
    	//  ** リンク情報
    	private string MC_ERRLOG_LINK_0                  = "[リンク情報]桁数オーバーです。";
    	private string MC_ERRLOG_LINK_1                  = "[リンク情報]使用できない拡張子です。";
    	private string MC_ERRLOG_LINK_2                  = "[リンク情報]インポート可能なファイルが存在しません。";    
    	private string MC_ERRLOG_LINK_3                  = "[リンク情報]コピー先フォルダを作成できませんでした。";
    	//  ** e文書
    	private string MC_ERRLOG_LINK_4                  = "[リンク情報]e文書はインポートできません。";
    	private string MC_ERRLOG_LINK_5                  = "[リンク情報]e文書番号がセットされていません。";
    	private string MC_ERRLOG_LINK_6                  = "[リンク情報]申請者名称がセットされていません。";
    	private string MC_ERRLOG_LINK_7                  = "[リンク情報]最終承認者名称がセットされていません。";
    	private string MC_ERRLOG_LINK_8                  = "[リンク情報]書類種別が不正です。";
    	private string MC_ERRLOG_LINK_9                  = "[リンク情報]日付が不正です。";
    	private string MC_ERRLOG_LINK_10                 = "[リンク情報]日付がセットされていません。";
    	private string MC_ERRLOG_LINK_11                 = "[リンク情報]金額がセットされていません。";
    	private string MC_ERRLOG_LINK_12                 = "[リンク情報]発行者名称がセットされていません。";

// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応(不要) --->
//    	private string MC_ERRLOG_LINK_13                 = "[リンク情報]品名がセットされていません。";
// <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応(不要)
   	#endregion
    
    	#region エラー内容(不良伝票ログ用)
        //  ** エラー内容(　不良伝票ログ用　― 概　要 ―　)
    	private string MC_DEN_SUM_ERRLOG_FURYO             = "伝票不良";
    	private string MC_DEN_SUM_ERRLOG_KONZAI            = "混在伝票";
    	private string MC_DEN_SUM_ERRLOG_SYOKUTI           = "諸口金額不正";
    	private string MC_DEN_SUM_ERRLOG_TYUDAN            = "処理中断";
    	//  ** エラー内容(　不良伝票ログ用　―コメント―　)
    	private string MC_DEN_COM_ERRLOG_FURYO             = "伝票内に不良仕訳があります。";
    	private string MC_DEN_COM_ERRLOG_KONZAI            = "処理データ内で同一伝票が複数存在します。";
    	private string MC_DEN_COM_ERRLOG_SYOKUTI           = "諸口金額が一致しません。";
    	private string MC_DEN_COM_ERRLOG_SYOKUTI_GS        = "諸口金額が一致しません。（行区切り）";
    	private string MC_DEN_COM_ERRLOG_SUDEDCNO          = "伝票番号がすでに使用されています。";
    	private string MC_DEN_COM_ERRLOG_DIFFDATA          = "処理データ内の同一処理月データに同一伝票番号で異なる伝票日付が存在します。";
    	private string MC_DEN_COM_ERRLOG_DIFFDB            = "該当処理月に同一伝票番号で異なる伝票日付が存在します。";
    	private string MC_DEN_COM_ERRLOG_BREAK_JIDOU_ST    = "自動付番時に取得した伝票番号[";
    	private string MC_DEN_COM_ERRLOG_BREAK_JIDOU_END   = "]はすでに使用されています。この伝票以降は処理されません。";
    	private string MC_DEN_COM_ERRLOG_BREAK_DEN         = "伝票番号はすでに使用されています。この伝票以降は処理されません。";
    	private string MC_DEN_COM_ERRLOG_BREAK_DIFFDB      = "該当処理月に同一伝票番号で異なる伝票日付が存在します。この伝票以降は処理されません。";
    	private string MC_DEN_COM_ERRLOG_BREAK_UP          = "の上限を超えています。この伝票以降は処理されません。";
    	private string MC_DEN_COM_ERRLOG_BREAK_DBRE        = "データベース読込みエラー。この伝票以降は処理されません。";
    	private string MC_DEN_COM_ERRLOG_BREAK_DBWRI       = "データベース書込みエラー。この伝票以降は処理されません。";
    	private string MC_DEN_COM_ERRLOG_BREAK_ELSE        = "その他エラー。この伝票以降は処理されません。";
    	private string MC_DEN_COM_ERRLOG_BREAK_INVALIDDUNO = "受付番号が重複しています。";    		
    	private string MC_DEN_COM_ERRLOG_LINK              = "リンク情報エラー。この伝票以降は処理されません。";
        #endregion

    	#region エラー内容(　処理ログ　)
    	//  <チェック＆取込処理>
    	private string MC_SYORILOG_I_NOALL = "すべてのデータを取込みませんでした。";
    	private string MC_SYORILOG_I_ALL   = "すべてのデータを取込みました。";
    	private string MC_SYORILOG_I_PART  = "一部のデータを除いて取込みました。";
    	//  <チェック処理>
    	private string MC_SYORILOG_C_NOALL = "すべてのデータを取込みできません。";
    	private string MC_SYORILOG_C_ALL   = "すべてのデータを取込みできます。";    		
    	private string MC_SYORILOG_C_PART  = "一部のデータを除いて取込みできます。";
        #endregion

        #region コードチェック用
        // コードチェック用（単一）
    	private const int MC_DinpCheck_Km     = 1;
    	private const int MC_DinpCheck_Bm     = 2;
    	private const int MC_DinpCheck_Tr     = 4;
    	private const int MC_DinpCheck_Pj     = 8;
    	private const int MC_DinpCheck_Sg     = 16;
    	private const int MC_DinpCheck_Kj     = 32;
    	private const int MC_DinpCheck_Ks     = 64;
    	private const int MC_DinpCheck_D1     = 128;
    	private const int MC_DinpCheck_D2     = 256;
    	private const int MC_DinpCheck_D3     = 512;
    	private const int MC_DinpCheck_Ed     = 1024;
    	private const int MC_DinpCheck_Syg    = 2048;
    	private const int MC_DinpCheck_SEd    = 4096;
    	private const int MC_DinpCheck_Tno    = 8192;
    	// コードチェック用（複合（残高チェック用））
    	private const int MC_DinpCheck_ZKm    = 1;
    	private const int MC_DinpCheck_BmKm   = 2;
    	private const int MC_DinpCheck_TrKm   = 4;
    	private const int MC_DinpCheck_PjKm   = 8;
    	private const int MC_DinpCheck_SgKm   = 16;
    	private const int MC_DinpCheck_KjKm   = 32;
    	private const int MC_DinpCheck_KsKm   = 64;
    	private const int MC_DinpCheck_D1Km   = 128;
    	private const int MC_DinpCheck_D2Km   = 256;
    	private const int MC_DinpCheck_D3Km   = 512;
    	private const int MC_DinpCheck_BmKmEd = 1024;
    	private const int MC_DinpCheck_BmTrKm = 2048;
    	private const int MC_DinpCheck_SgTrKm = 4096;
    	// 分離仕訳用
    	private const int MC_DinpCheck_KmEd   = 8192;
    	// 消費税関係
    	private const int MC_DinpCheck_Rzkb   = 2;
    	private const int MC_DinpCheck_Szkb   = 32;
    	private const int MC_DinpCheck_Zzkb   = 512;
    	private const int MC_DinpCheck_Zgyo   = 1024;
    	private const int MC_DinpCheck_Zsre   = 2048;
    	private const int MC_DinpCheck_Bkbn   = 4096;
    	private const int MC_DinpCheck_Zkicd  = 8192;
    	// その他    
    	private const int MC_DinpCheck_Dymd   = 1;
        #endregion

        #region 列挙型(enum)
        // de3レイアウト
    	private enum eIMPDATA
    	{
    		DATA_DYMD = 0,
    		// 伝票日付
    		DATA_SEIRI,
    		// 整理月フラグ
    		DATA_DCNO,
    		// 伝票番号
    		DATA_RBMN,
    		// 借方部門
    		DATA_RTOR,
    		// 借方取引先
    		DATA_RKMK,
    		// 借方科目
    		DATA_REDA,
    		// 借方枝番
    		DATA_RKOJ,
    		// 借方工事№
    		DATA_RKOS,
    		// 借方工種№
    		DATA_RPRJ,
    		// 借方プロジェクト
    		DATA_RSEG,
    		// 借方セグメント
    		DATA_RDM1,
    		// 借方ユニバーサル１
    		DATA_RDM2,
    		// 借方ユニバーサル２
    		DATA_RDM3,
    		// 借方ユニバーサル３
    		DATA_RTKY,
    		// 借方摘要
    		DATA_RTNO,
    		// 借方摘要コード
    		DATA_SBMN,
    		// 貸方部門
    		DATA_STOR,
    		// 貸方取引先
    		DATA_SKMK,
    		// 貸方科目
    		DATA_SEDA,
    		// 貸方枝番
    		DATA_SKOJ,
    		// 貸方工事№
    		DATA_SKOS,
    		// 貸方工種№
    		DATA_SPRJ,
    		// 貸方プロジェクト
    		DATA_SSEG,
    		// 貸方セグメント
    		DATA_SDM1,
    		// 貸方ユニバーサル１
    		DATA_SDM2,
    		// 貸方ユニバーサル２
    		DATA_SDM3,
    		// 貸方ユニバーサル３
    		DATA_EXVL,
    		// 対価金額
    		DATA_VALU,
    		// 金額
    		DATA_ZKMK,
    		// 税対象科目
    		DATA_ZRIT,
    		// 税対象科目 税率
    		DATA_ZZKB,
    		// 税対象科目 課税区分
    		DATA_ZGYO,
    		// 税対象科目 業種区分
    		DATA_ZSRE,
    		// 税対象科目 仕入区分
    		DATA_RRIT,
    		// 借方税率
    		DATA_SRIT,
    		// 貸方税率
    		DATA_RZKB,
    		// 借方課税区分
    		DATA_RGYO,
    		// 借方業種区分
    		DATA_RSRE,
    		// 借方仕入区分
    		DATA_SZKB,
    		// 貸方課税区分
    		DATA_SGYO,
    		// 貸方業種区分
    		DATA_SSRE,
    		// 貸方仕入区分
    		DATA_SYMD,
    		// 支払日
    		DATA_SKBN,
    		// 支払区分
    		DATA_SKIZ,
    		// 支払期日
    		DATA_UYMD,
    		// 回収日
    		DATA_UKBN,
    		// 入金区分
    		DATA_UKIZ,
    		// 回収期日
    		DATA_STEN,
    		// 店券フラグ
    		DATA_DKEC,
    		// 消込コード
    		DATA_KYMD,
    		// 起票年月日
    		DATA_KBMN,
    		// 起票部門
    		DATA_KUSR,
    		// 起票者
    		DATA_FUSR,
    		// 入力者
    		DATA_FSEN,
    		// 付箋番号
    		DATA_SGNO,
    		// 承認グループ№
    		DATA_BKBN,
    		// 自動作成区分
    
    		DATA_RATE,
    		// レート
    		DATA_GEXVL,
    		// 外貨対価
    		DATA_GAIKA,
    		// 外貨金額
    		DATA_GSEP,
    		// 行区切り
    
    		// ** リンク情報
    		DATA_ZLNO,
    
    		// 軽減税率区分
    		DATA_RKEIGEN,
    		DATA_SKEIGEN,
    		DATA_ZKEIGEN,
    
    		DATA_ITEM_COUNT
    		// データ項目数  
    	}
    
    	// SIASレイアウト
    	private enum eIMPDATA_1
    	{
    		DATA_DYMD = 0,    	// 伝票日付
    		DATA_SEIRI,    		// 整理月フラグ
    		DATA_DCNO,    		// 伝票番号
    		DATA_KYMD,    		// 起票年月日
    		DATA_KBMN,    		// 起票部門
    		DATA_KUSR,    		// 起票者
    		DATA_SGNO,    		// 承認グループ№
    		DATA_HF1,    		// ヘッダーフィールド１
    		DATA_HF2,    		// ヘッダーフィールド２
    		DATA_HF3,    		// ヘッダーフィールド３
    		DATA_HF4,    		// ヘッダーフィールド４
    		DATA_HF5,    		// ヘッダーフィールド５
    		DATA_HF6,    		// ヘッダーフィールド６
    		DATA_HF7,    		// ヘッダーフィールド７
    		DATA_HF8,    		// ヘッダーフィールド８
    		DATA_HF9,    		// ヘッダーフィールド９
    		DATA_HF10,    		// ヘッダーフィールド10
    
    		DATA_RBMN,    		// 借方部門
    		DATA_RTOR,    		// 借方取引先
    		DATA_RKMK,    		// 借方科目
    		DATA_REDA,    		// 借方枝番
    		DATA_RKOJ,    		// 借方工事№
    		DATA_RKOS,    		// 借方工種№
    		DATA_RPRJ,    		// 借方プロジェクト
    		DATA_RSEG,    		// 借方セグメント
    		DATA_RDM1,    		// 借方ユニバーサル１
    		DATA_RDM2,    		// 借方ユニバーサル２
    		DATA_RDM3,    		// 借方ユニバーサル３
    		DATA_RDM4,    		// 借方ユニバーサル４
    		DATA_RDM5,    		// 借方ユニバーサル５
    		DATA_RDM6,    		// 借方ユニバーサル６
    		DATA_RDM7,    		// 借方ユニバーサル７
    		DATA_RDM8,    		// 借方ユニバーサル８
    		DATA_RDM9,    		// 借方ユニバーサル９
    		DATA_RDM10,    		// 借方ユニバーサル10
    		DATA_RDM11,    		// 借方ユニバーサル11
    		DATA_RDM12,    		// 借方ユニバーサル12
    		DATA_RDM13,    		// 借方ユニバーサル13
    		DATA_RDM14,    		// 借方ユニバーサル14
    		DATA_RDM15,    		// 借方ユニバーサル15
    		DATA_RDM16,    		// 借方ユニバーサル16
    		DATA_RDM17,    		// 借方ユニバーサル17
    		DATA_RDM18,    		// 借方ユニバーサル18
    		DATA_RDM19,    		// 借方ユニバーサル19
    		DATA_RDM20,    		// 借方ユニバーサル20
    		DATA_RRIT,    		// 借方税率
    		DATA_RZKB,    		// 借方課税区分
    		DATA_RGYO,    		// 借方業種区分
    		DATA_RSRE,    		// 借方仕入区分
    		DATA_RTKY,    		// 借方摘要
    		DATA_RTNO,    		// 借方摘要コード
    
            DATA_SBMN,    		// 貸方部門
    		DATA_STOR,    		// 貸方取引先
    		DATA_SKMK,    		// 貸方科目
    		DATA_SEDA,    		// 貸方枝番
    		DATA_SKOJ,    		// 貸方工事№
    		DATA_SKOS,    		// 貸方工種№
    		DATA_SPRJ,    		// 貸方プロジェクト
    		DATA_SSEG,    		// 貸方セグメント
    		DATA_SDM1,    		// 貸方ユニバーサル１
    		DATA_SDM2,    		// 貸方ユニバーサル２
    		DATA_SDM3,    		// 貸方ユニバーサル３
    		DATA_SDM4,    		// 貸方ユニバーサル４
    		DATA_SDM5,    		// 貸方ユニバーサル５
    		DATA_SDM6,    		// 貸方ユニバーサル６
    		DATA_SDM7,    		// 貸方ユニバーサル７
    		DATA_SDM8,    		// 貸方ユニバーサル８
    		DATA_SDM9,    		// 貸方ユニバーサル９
    		DATA_SDM10,   		// 貸方ユニバーサル10
    		DATA_SDM11,    		// 貸方ユニバーサル11
    		DATA_SDM12,    		// 貸方ユニバーサル12
    		DATA_SDM13,    		// 貸方ユニバーサル13
    		DATA_SDM14,    		// 貸方ユニバーサル14
    		DATA_SDM15,    		// 貸方ユニバーサル15
    		DATA_SDM16,    		// 貸方ユニバーサル16
    		DATA_SDM17,    		// 貸方ユニバーサル17
    		DATA_SDM18,    		// 貸方ユニバーサル18
    		DATA_SDM19,    		// 貸方ユニバーサル19
    		DATA_SDM20,    		// 貸方ユニバーサル20
    		DATA_SRIT,    		// 貸方税率
    		DATA_SZKB,    		// 貸方課税区分
    		DATA_SGYO,    		// 貸方業種区分
    		DATA_SSRE,    		// 貸方仕入区分
    		DATA_STKY,    		// 貸方摘要
    		DATA_STNO,    		// 貸方摘要コード
    
    		DATA_ZKMK,    		// 税対象科目
    		DATA_ZRIT,    		// 税対象科目 税率
    		DATA_ZZKB,    		// 税対象科目 課税区分
    		DATA_ZGYO,    		// 税対象科目 業種区分
    		DATA_ZSRE,    		// 税対象科目 仕入区分
    
            DATA_EXVL,    		// 対価金額
    		DATA_VALU,    		// 金額
    		DATA_SYMD,    		// 支払日
    		DATA_SKBN,    		// 支払区分
    		DATA_SKIZ,    		// 支払期日
    		DATA_UYMD,    		// 回収日
    		DATA_UKBN,    		// 入金区分
    		DATA_UKIZ,    		// 回収期日
    		DATA_DKEC,    		// 消込コード
    		DATA_FUSR,    		// 入力者
    		DATA_FSEN,    		// 付箋番号
    		DATA_TKFLG,         // 貸借別摘要フラグ

   		    DATA_BUNRI,    		// 分離区分
    
    		DATA_HEIC,    		// 幣種
    		DATA_RATE,    		// レート
    		DATA_GEXVL,    		// 外貨対価
    		DATA_GAIKA,    		// 外貨金額
    
    		DATA_GSEP,    		// 行区切り
    
    		// *-リンク情報
    		DATA_ZLNO,    		// リンクNo
    
    		// *-軽減税率区分
    		DATA_RKEIGEN,    	// 借方 軽減税率区分
    		DATA_SKEIGEN,    	// 貸方 軽減税率区分
    		DATA_ZKEIGEN,    	// 税科 軽減税率区分

// Ver02.26.01 インボイス対応 --->
            DATA_RURIZEIKEISAN, // 借方　併用売上税額計算方式
            DATA_SURIZEIKEISAN, // 貸方　併用売上税額計算方式
            DATA_ZURIZEIKEISAN, // 税科　併用売上税額計算方式
            DATA_RMENZEIKEIKA,  // 借方　仕入税額控除経過措置割合
            DATA_SMENZEIKEIKA,  // 貸方　仕入税額控除経過措置割合
            DATA_ZMENZEIKEIKA,  // 税科　仕入税額控除経過措置割合
// <--- Ver02.26.01 インボイス対応
    
    		DATA_ITEM_COUNT    	// データ項目数
    	}
    
    	// ** KAISYA（処理会社情報）テーブル カラム定義
    	private enum eKAISYA
    	{
    		KAISYA_CCOD = 0,
    		KAISYA_CNAM,
    		KAISYA_SYMD,
    		KAISYA_EYMD,
    		KAISYA_KESN,
    		KAISYA_UCOD,
    		KAISYA_GRID,
    		KAISYA_DSOU,
    		KAISYA_SER,
    		KAISYA_SVNM,
    		KAISYA_IPAD,
    		KAISYA_OKNO,
    		KAISYA_FONT,
    		KAISYA_GNNO,
    		KAISYA_MTYP,
    		KAISYA_MKBN
    	}
    
    	// ** USRTBL（ユーザー）テーブル カラム定義
    	private enum eUSRTBL
    	{
    		USRTBL_UCOD = 0,
    		USRTBL_GCOD,
    		USRTBL_PASS,
    		USRTBL_UNAM,
    		USRTBL_UNLD,
    		USRTBL_KFLG,
    		USRTBL_KSEC,
    		USRTBL_DSEC,
    		USRTBL_CSEC,
    		USRTBL_MSEC,
    		USRTBL_FPATH,
    		USRTBL_ENDSW,
    		USRTBL_LOGID,
    		USRTBL_SPAS,
    		USRTBL_DFLG,
    		USRTBL_KANF,
    		USRTBL_FUSR,
    		USRTBL_FMOD,
    		USRTBL_FTIM,
    		USRTBL_LUSR,
    		USRTBL_LMOD,
    		USRTBL_LTIM,
    		USRTBL_RDRV
    	}
    
    	// ** COMCNT（会社単位セキュリティ）テーブル カラム定義
    	private enum eCOMCNT
    	{
    		COMCNT_UCOD = 0,
    		COMCNT_CCOD,
    		COMCNT_FLG1
    	}
    
    	// ** USRSEC（ユーザーセキュリティ）テーブル カラム定義
    	private enum eUSRSEC
    	{
    		USRSEC_UCOD = 0,
    		USRSEC_CCOD,
    		USRSEC_FFLG,
    		USRSEC_MFLG,
    		USRSEC_ZFLG,
    		USRSEC_YFLG,
    		USRSEC_KFLG,
    		USRSEC_DFLG,
    		USRSEC_TNFLG,
    		USRSEC_MTFG,
    		USRSEC_DTFG
    	}
    
    	// ** SRITU（消費税税率）テーブル カラム定義
    	private enum eSRITU
    	{
    		SRITU_SY07 = 0,
    		SRITU_ZRIT,
    		SRITU_SYMD,
    		SRITU_EYMD,
    		SRITU_KEIGEN
    		// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    	}
    
    	// ** VOLUM（会社情報）テーブル カラム定義
    	private enum eVOLUM
    	{
    		VOLUM_KESN = 0,
    		VOLUM_KSNK,
    		VOLUM_APNO,
    		VOLUM_MTYP,
    		VOLUM_MKBN,
    		VOLUM_TTNM,
    		VOLUM_CNAM,
    		VOLUM_GNNO,
    		VOLUM_NENSW,
    		VOLUM_KESM,
    		VOLUM_INST,
    		VOLUM_ISTA,
    		VOLUM_IEND,
    		VOLUM_DHMM,
    		VOLUM_DHKI,
    		VOLUM_MHKI,
    		VOLUM_SSW1,
    		VOLUM_KZSW01,
    		VOLUM_KZSW02,
    		VOLUM_KZSW03,
    		VOLUM_KZSW04,
    		VOLUM_KZSW05,
    		VOLUM_KZSW06,
    		VOLUM_KZSW07,
    		VOLUM_KZSW08,
    		VOLUM_KZSW09,
    		VOLUM_KZSW10,
    		VOLUM_KZSW11,
    		VOLUM_KZSW12,
    		VOLUM_DCHK,
    		VOLUM_KDAY,
    		VOLUM_KBMN,
    		VOLUM_KMAN,
    		VOLUM_SDAY,
    		VOLUM_SHKBN,
    		VOLUM_SKDAY,
    		VOLUM_UDAY,
    		VOLUM_UKKBN,
    		VOLUM_UKDAY,
    		VOLUM_KNDSP,
    		VOLUM_KNPRT,
    		VOLUM_KMMX,
    		VOLUM_KMTY,
    		VOLUM_KMLN,
    		VOLUM_EDFLG,
    		VOLUM_EDMX,
    		VOLUM_EDTY,
    		VOLUM_EDLN,
    		VOLUM_BMFLG,
    		VOLUM_BMMX,
    		VOLUM_BMTY,
    		VOLUM_BMLN,
    		VOLUM_TRFLG,
    		VOLUM_TRMX,
    		VOLUM_TRTY,
    		VOLUM_TRLN,
    		VOLUM_SGFLG,
    		VOLUM_SGMX,
    		VOLUM_SGTY,
    		VOLUM_SGLN,
    		VOLUM_KJFLG,
    		VOLUM_KJMX,
    		VOLUM_KJTY,
    		VOLUM_KJLN,
    		VOLUM_KSFLG,
    		VOLUM_KSMX,
    		VOLUM_KSTY,
    		VOLUM_KSLN,
    		VOLUM_KKFLG,
    		VOLUM_KKMX,
    		VOLUM_KKTY,
    		VOLUM_KKLN,
    		VOLUM_PJFLG,
    		VOLUM_PJMX,
    		VOLUM_PJTY,
    		VOLUM_PJLN,
    		VOLUM_BKMX,
    		VOLUM_JTMX,
    		VOLUM_BKEMX,
    		VOLUM_BKESW,
    		VOLUM_SBMX,
    		VOLUM_TKMX,
    		VOLUM_TKSW,
    		VOLUM_TKEMX,
    		VOLUM_TKESW,
    		VOLUM_BTKMX,
    		VOLUM_BTKSW,
    		VOLUM_BTKEMX,
    		VOLUM_BTKESW,
    		VOLUM_SKMX,
    		VOLUM_SGSW,
    		VOLUM_SKTMX,
    		VOLUM_SKTSW,
    		VOLUM_D1FLG,
    		VOLUM_D1NM,
    		VOLUM_D1MX,
    		VOLUM_D1TY,
    		VOLUM_D1LN,
    		VOLUM_D1SYLN,
    		VOLUM_D1GNNO,
    		VOLUM_D2FLG,
    		VOLUM_D2NM,
    		VOLUM_D2MX,
    		VOLUM_D2TY,
    		VOLUM_D2LN,
    		VOLUM_D2SYLN,
    		VOLUM_D2GNNO,
    		VOLUM_D3FLG,
    		VOLUM_D3NM,
    		VOLUM_D3MX,
    		VOLUM_D3TY,
    		VOLUM_D3LN,
    		VOLUM_D3SYLN,
    		VOLUM_D3GNNO,
    		VOLUM_D1KMX,
    		VOLUM_D1KSW,
    		VOLUM_D2KMX,
    		VOLUM_D2KSW,
    		VOLUM_D3KMX,
    		VOLUM_D3KSW,
    		VOLUM_AIMG,
    		VOLUM_AMHG,
    		VOLUM_RTFLG,
    		VOLUM_ETFLG,
    		VOLUM_JTFLG,
    		VOLUM_KHAS,
    		VOLUM_HRIT,
    		VOLUM_HCAL,
    		VOLUM_HTXT,
    		VOLUM_FLG1,
    		VOLUM_KOUT,
    		VOLUM_SYFLG,
    		VOLUM_KGFLG,
    		VOLUM_DFLG,
    		// Prj312--->
    		VOLUM_DDAY,
    		VOLUM_IDM1,
    		VOLUM_IDM2,
    		VOLUM_IDM3,
    		VOLUM_IDM4,
    		VOLUM_CDM1,
    		VOLUM_CDM2,
    		VOLUM_DUF1FLG,
    		VOLUM_DUF1NM,
    		VOLUM_DUF1MX,
    		VOLUM_DUF1TY,
    		VOLUM_DUF1LN,
    		VOLUM_DUF1SYLN,
    		VOLUM_DUF1GNNO,
    		VOLUM_DUF2FLG,
    		VOLUM_DUF2NM,
    		VOLUM_DUF2MX,
    		VOLUM_DUF2TY,
    		VOLUM_DUF2LN,
    		VOLUM_DUF2SYLN,
    		VOLUM_DUF2GNNO,
    		VOLUM_DUF3FLG,
    		VOLUM_DUF3NM,
    		VOLUM_DUF3MX,
    		VOLUM_DUF3TY,
    		VOLUM_DUF3LN,
    		VOLUM_DUF3SYLN,
    		VOLUM_DUF3GNNO,
    		VOLUM_DUF4FLG,
    		VOLUM_DUF4NM,
    		VOLUM_DUF4MX,
    		VOLUM_DUF4TY,
    		VOLUM_DUF4LN,
    		VOLUM_DUF4SYLN,
    		VOLUM_DUF4GNNO,
    		VOLUM_DUF5FLG,
    		VOLUM_DUF5NM,
    		VOLUM_DUF5MX,
    		VOLUM_DUF5TY,
    		VOLUM_DUF5LN,
    		VOLUM_DUF5SYLN,
    		VOLUM_DUF5GNNO,
    		VOLUM_DUF6FLG,
    		VOLUM_DUF6NM,
    		VOLUM_DUF6MX,
    		VOLUM_DUF6TY,
    		VOLUM_DUF6LN,
    		VOLUM_DUF6SYLN,
    		VOLUM_DUF6GNNO,
    		VOLUM_DUF7FLG,
    		VOLUM_DUF7NM,
    		VOLUM_DUF7MX,
    		VOLUM_DUF7TY,
    		VOLUM_DUF7LN,
    		VOLUM_DUF7SYLN,
    		VOLUM_DUF7GNNO,
    		VOLUM_DUF8FLG,
    		VOLUM_DUF8NM,
    		VOLUM_DUF8MX,
    		VOLUM_DUF8TY,
    		VOLUM_DUF8LN,
    		VOLUM_DUF8SYLN,
    		VOLUM_DUF8GNNO,
    		VOLUM_DUF9FLG,
    		VOLUM_DUF9NM,
    		VOLUM_DUF9MX,
    		VOLUM_DUF9TY,
    		VOLUM_DUF9LN,
    		VOLUM_DUF9SYLN,
    		VOLUM_DUF9GNNO,
    		VOLUM_DUF10FLG,
    		VOLUM_DUF10NM,
    		VOLUM_DUF10MX,
    		VOLUM_DUF10TY,
    		VOLUM_DUF10LN,
    		VOLUM_DUF10SYLN,
    		VOLUM_DUF10GNNO,
    		VOLUM_D4FLG,
    		VOLUM_D4NM,
    		VOLUM_D4MX,
    		VOLUM_D4TY,
    		VOLUM_D4LN,
    		VOLUM_D4SYLN,
    		VOLUM_D4GNNO,
    		VOLUM_D5FLG,
    		VOLUM_D5NM,
    		VOLUM_D5MX,
    		VOLUM_D5TY,
    		VOLUM_D5LN,
    		VOLUM_D5SYLN,
    		VOLUM_D5GNNO,
    		VOLUM_D6FLG,
    		VOLUM_D6NM,
    		VOLUM_D6MX,
    		VOLUM_D6TY,
    		VOLUM_D6LN,
    		VOLUM_D6SYLN,
    		VOLUM_D6GNNO,
    		VOLUM_D7FLG,
    		VOLUM_D7NM,
    		VOLUM_D7MX,
    		VOLUM_D7TY,
    		VOLUM_D7LN,
    		VOLUM_D7SYLN,
    		VOLUM_D7GNNO,
    		VOLUM_D8FLG,
    		VOLUM_D8NM,
    		VOLUM_D8MX,
    		VOLUM_D8TY,
    		VOLUM_D8LN,
    		VOLUM_D8SYLN,
    		VOLUM_D8GNNO,
    		VOLUM_D9FLG,
    		VOLUM_D9NM,
    		VOLUM_D9MX,
    		VOLUM_D9TY,
    		VOLUM_D9LN,
    		VOLUM_D9SYLN,
    		VOLUM_D9GNNO,
    		VOLUM_D10FLG,
    		VOLUM_D10NM,
    		VOLUM_D10MX,
    		VOLUM_D10TY,
    		VOLUM_D10LN,
    		VOLUM_D10SYLN,
    		VOLUM_D10GNNO,
    		VOLUM_D11FLG,
    		VOLUM_D11NM,
    		VOLUM_D11MX,
    		VOLUM_D11TY,
    		VOLUM_D11LN,
    		VOLUM_D11SYLN,
    		VOLUM_D11GNNO,
    		VOLUM_D12FLG,
    		VOLUM_D12NM,
    		VOLUM_D12MX,
    		VOLUM_D12TY,
    		VOLUM_D12LN,
    		VOLUM_D12SYLN,
    		VOLUM_D12GNNO,
    		VOLUM_D13FLG,
    		VOLUM_D13NM,
    		VOLUM_D13MX,
    		VOLUM_D13TY,
    		VOLUM_D13LN,
    		VOLUM_D13SYLN,
    		VOLUM_D13GNNO,
    		VOLUM_D14FLG,
    		VOLUM_D14NM,
    		VOLUM_D14MX,
    		VOLUM_D14TY,
    		VOLUM_D14LN,
    		VOLUM_D14SYLN,
    		VOLUM_D14GNNO,
    		VOLUM_D15FLG,
    		VOLUM_D15NM,
    		VOLUM_D15MX,
    		VOLUM_D15TY,
    		VOLUM_D15LN,
    		VOLUM_D15SYLN,
    		VOLUM_D15GNNO,
    		VOLUM_D16FLG,
    		VOLUM_D16NM,
    		VOLUM_D16MX,
    		VOLUM_D16TY,
    		VOLUM_D16LN,
    		VOLUM_D16SYLN,
    		VOLUM_D16GNNO,
    		VOLUM_D17FLG,
    		VOLUM_D17NM,
    		VOLUM_D17MX,
    		VOLUM_D17TY,
    		VOLUM_D17LN,
    		VOLUM_D17SYLN,
    		VOLUM_D17GNNO,
    		VOLUM_D18FLG,
    		VOLUM_D18NM,
    		VOLUM_D18MX,
    		VOLUM_D18TY,
    		VOLUM_D18LN,
    		VOLUM_D18SYLN,
    		VOLUM_D18GNNO,
    		VOLUM_D19FLG,
    		VOLUM_D19NM,
    		VOLUM_D19MX,
    		VOLUM_D19TY,
    		VOLUM_D19LN,
    		VOLUM_D19SYLN,
    		VOLUM_D19GNNO,
    		VOLUM_D20FLG,
    		VOLUM_D20NM,
    		VOLUM_D20MX,
    		VOLUM_D20TY,
    		VOLUM_D20LN,
    		VOLUM_D20SYLN,
    		VOLUM_D20GNNO,
    		VOLUM_IFRS,
    		VOLUM_STRHJ
    		// <---
    	}
    
    	// ** SVOLUM（消費税ボリューム）テーブル カラム定義
    	private enum eSVOLUM
    	{
    		SVOLUM_KESN = 0,
    		SVOLUM_SVER,
    		SVOLUM_KZSW,
    		SVOLUM_ANBN,
    		SVOLUM_FKBN,
    		SVOLUM_FSW1,
    		SVOLUM_FSW2,
    		SVOLUM_FSW3,
    		SVOLUM_FSW4,
    		SVOLUM_FSW5,
    		SVOLUM_SKBN,
    		SVOLUM_KBN1,
    		SVOLUM_KBN2,
    		SVOLUM_KBN3,
    		SVOLUM_KBN4,
    		SVOLUM_BMSW,
    		SVOLUM_HSSW,
    		SVOLUM_SSW1,
    		SVOLUM_SSW2,
    		SVOLUM_SSW3,
    		SVOLUM_SSW4,
    		SVOLUM_SSW5,
    		SVOLUM_SSW6,
    		SVOLUM_SSW7,
    		SVOLUM_SSW8,
    		SVOLUM_SSW9,
    		SVOLUM_SSW10,
    		SVOLUM_ZISW,
    		SVOLUM_KUF1,
    		SVOLUM_KUF4,
    		SVOLUM_KBF2,
    		SVOLUM_KBF3,
    		SVOLUM_KBF4,
    		SVOLUM_ZERO,
    		SVOLUM_ZTKCHK,
    		SVOLUM_FSW6,
    
    		// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    		SVOLUM_TKSIRE,
    		// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End

// Ver02.26.01 インボイス対応 --->
            SVOLUM_URIAGEZEIKEISAN,
            SVOLUM_SHIIREZEIKEIKA
// <--- Ver02.26.01 インボイス対応    
    	}
    
    	// ** JFCTL（自動付番初期設定）テーブル カラム定義
    	private enum eJFCTL
    	{
    		JFCTL_KESN = 0,
    		JFCTL_JUSE,
    		JFCTL_IDM1
    	}
    
    	// ** VOLUM2（会社情報月別）テーブル カラム定義
    	private enum eVOLUM2
    	{
    		VOLUM2_KESN = 0,
    		VOLUM2_CKEI,
    		VOLUM2_SYMD,
    		VOLUM2_EYMD,
    		VOLUM2_CKS0,
    		VOLUM2_CKS3,
    		VOLUM2_CKS4,
    		VOLUM2_CKS5,
    		// Ver01.11.01 -->　取得していない情報を宣言から削除
    		// VOLUM2_CKS6
    		// Ver01.11.01 <--
    		VOLUM2_SYU_BKE,
    		VOLUM2_SYU_TK,
    		VOLUM2_SYU_TKE,
    		VOLUM2_SYU_BKT,
    		VOLUM2_SYU_BKTE,
    		VOLUM2_SYU_SK,
    		VOLUM2_SYU_SKT,
    		VOLUM2_SYU_D1K,
    		VOLUM2_SYU_D2K,
    		VOLUM2_SYU_D3K,
    		VOLUM2_DTMX,
    		VOLUM2_NINZ,
    		VOLUM2_GKDT,
    		VOLUM2_GKTI,
    		VOLUM2_GKS1,
    		VOLUM2_GKS2,
    		VOLUM2_DTUS,
    		VOLUM2_ARRT,
    		VOLUM2_DTDL,
    		VOLUM2_DTAC,
    		VOLUM2_IMGNO,
    		VOLUM2_FLG1,
    		VOLUM2_FLG2,
    		VOLUM2_IDM1,
    		VOLUM2_IDM2,
    		VOLUM2_IDM3,
    		VOLUM2_IDM4,
    		VOLUM2_SYU_D4K,
    		VOLUM2_SYU_D5K,
    		VOLUM2_SYU_D6K,
    		VOLUM2_SYU_D7K,
    		VOLUM2_SYU_D8K,
    		VOLUM2_SYU_D9K,
    		VOLUM2_SYU_D10K,
    		VOLUM2_SYU_D11K,
    		VOLUM2_SYU_D12K,
    		VOLUM2_SYU_D13K,
    		VOLUM2_SYU_D14K,
    		VOLUM2_SYU_D15K,
    		VOLUM2_SYU_D16K,
    		VOLUM2_SYU_D17K,
    		VOLUM2_SYU_D18K,
    		VOLUM2_SYU_D19K,
    		VOLUM2_SYU_D20K,
    		VOLUM2_DENC,
    		VOLUM2_BDENC,
    		VOLUM2_DENDL,
    		VOLUM2_DENAC,
    		VOLUM2_CKS5_USR
    	}
    
    	// ** KNAME（科目名称）テーブル カラム定義
    	private enum eKNAME
    	{
    		KNAME_KESN = 0,
    		KNAME_KICD,
    		KNAME_KCOD,
    		KNAME_BKBN,
    		KNAME_KNLD,
    		KNAME_KOCD,
    		KNAME_KATT,
    		KNAME_KC01,
    		KNAME_GSW1,
    		KNAME_GSW2,
    		KNAME_SY01,
    		KNAME_SY02,
    		KNAME_SY03,
    		KNAME_SY04,
    		KNAME_SY05,
    		KNAME_SY06,
    		KNAME_SY07,
    		KNAME_SY08,
    		KNAME_KE01,
    		KNAME_KE02,
    		KNAME_KT01,
    		KNAME_KT02,
    		KNAME_KB01,
    		KNAME_KB02,
    		KNAME_BKE01,
    		KNAME_BKE02,
    		KNAME_SG01,
    		KNAME_SG02,
    		KNAME_PJ01,
    		KNAME_PJ02,
    		KNAME_DM11,
    		KNAME_DM12,
    		KNAME_DM21,
    		KNAME_DM22,
    		KNAME_DM31,
    		KNAME_DM32,
    		KNAME_KJ01,
    		KNAME_KJ02,
    		KNAME_KS01,
    		KNAME_KS02,
    		KNAME_KK01,
    		KNAME_KK02,
    		KNAME_TK02,
    		KNAME_BTK01,
    		KNAME_BTKE01,
    		KNAME_TKE01,
    		KNAME_STK01,
    		KNAME_AA01,
    		KNAME_AA02,
    		KNAME_KO11,
    		KNAME_KO12,
    		KNAME_KO13,
    		KNAME_KO14,
    		KNAME_KO15,
    		KNAME_KO16,
    		KNAME_KNMX,
    		KNAME_KNAM,
    		KNAME_GTNK,
    		// Prj312--->
    		KNAME_IDM1,
    		KNAME_IDM2,
    		KNAME_IDM3,
    		KNAME_IDM4,
    		KNAME_CDM1,
    		KNAME_CDM2,
    		// <---
    		KNAME_GRCD,
    		KNAME_FUSR,
    		KNAME_FMOD,
    		KNAME_FTIM,
    		KNAME_LUSR,
    		KNAME_LMOD,
    		KNAME_LTIM,
    		// Prj312--->
    		KNAME_DM41,
    		KNAME_DM42,
    		KNAME_DM51,
    		KNAME_DM52,
    		KNAME_DM61,
    		KNAME_DM62,
    		KNAME_DM71,
    		KNAME_DM72,
    		KNAME_DM81,
    		KNAME_DM82,
    		KNAME_DM91,
    		KNAME_DM92,
    		KNAME_DM101,
    		KNAME_DM102,
    		KNAME_DM111,
    		KNAME_DM112,
    		KNAME_DM121,
    		KNAME_DM122,
    		KNAME_DM131,
    		KNAME_DM132,
    		KNAME_DM141,
    		KNAME_DM142,
    		KNAME_DM151,
    		KNAME_DM152,
    		KNAME_DM161,
    		KNAME_DM162,
    		KNAME_DM171,
    		KNAME_DM172,
    		KNAME_DM181,
    		KNAME_DM182,
    		KNAME_DM191,
    		KNAME_DM192,
    		KNAME_DM201,
    		KNAME_DM202,
    		KNAME_GAFLG
    	}
    
    	// ** SUBJECT（支払・回収科目）テーブル カラム定義
    	private enum eSUBJECT
    	{
    		SUBJECT_KESN = 0,
    		SUBJECT_KFLG,
    		SUBJECT_KICD,
    		SUBJECT_HFLG
    	}
    
    	// ** SNCTL（承認初期設定）テーブル カラム定義
    	private enum eSNCTL
    	{
    		SNCTL_KESN = 0,
    		SNCTL_SUSE,
    		SNCTL_STAN
    	}
    
    	// ** TANTOU（担当者）テーブル カラム定義
    	private enum eTANTOU
    	{
    		TANTOU_TCOD = 0,
    		TANTOU_TNAM,
    		TANTOU_TNLD,
    		TANTOU_TFLG,
    		TANTOU_FUSR,
    		TANTOU_FMOD,
    		TANTOU_FTIM,
    		TANTOU_LUSR,
    		TANTOU_LMOD,
    		TANTOU_LTIM
    	}
    
    	// ** DCNO（伝票番号管理）テーブル カラム定義
    	private enum eDCNO
    	{
    		DCNO_KESN = 0,
    		DCNO_DKEI,
    		DCNO_DCNO,
    		DCNO_DYMD
    	}
    
    	// *-リンク情報
    	// ** KAISYA（処理会社情報）テーブル カラム定義
    	private enum eLink
    	{
    		DATA_LNO,
    		DATA_LNAM,
    		DATA_FLG1,
    		DATA_LINK,
    
    		// *-e文書
    		DATA_EDOC,
    		DATA_SYUBETSU,
    		DATA_SYMD,
    		DATA_SVALU,
    		DATA_STRNAM,
    		DATA_NUSR,
    		DATA_SUSR,
// ---> Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
    		DATA_HINMEI,
// <--- Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
// Ver01.17.04　2019/02/28　hirano　AI-OCR対応 --->
    		DATA_BIKO,
// --->Ver01.17.04
    
    		DATA_ITEM_COUNT
    	}
    	// -*
    
    	// *-AI-OCR
    	private enum eAIOCR
    	{
    		DATA_EDOC,
    		DATA_ITMID,
    		DATA_ITMODR,
    		DATA_OCRTEXT,
    
    		DATA_ITEM_COUNT
    	}

    	// ** 処理区分
    	private enum eSKUBUN
    	{
    		// 人事給与区分
    		SKUBUN_KYUYO = 21,
    		// Prj312
    		// '予算執行区分
    		// SKUBUN_YOSAN_SIKKOU = 31
    		// ワークフロー
    		SKUBUN_WORK_FLOW = 41,
    		// BtoBプラットフォーム連携 Ver 01.16.01　←　個別対応Ver01.03.02.01より 
    		SKUBUN_INFOMART = 51,
    		// <---Ver01.17.04　2019/02/28　hirano　AI-OCR対応
    		SKUBUN_AIOCR = 61
    		// --->Ver01.17.04
    	}
    	#endregion
    
    	#region 構造体(struct)
    	// ** 仕訳データレイアウト
    	// Prj312 仕訳データの持ち方変更に対応
    	private struct structZDATA
    	{
    		// 伝票
    		public short   Kesn_h;
    		public short   Dkei_h;
    		public int     Dseq_h;
    		public int     Dymd_h;
    		public int     Dcno_h;
    		public short   Dfuk_h;
    		public short   Ijpt_h;
    		public int     Kymd_h;
    		public string  Kbmn_h;
    		public string  Kusr_h;
    		public int     Fmod_h;
    		public int     Ftim_h;
    		public int     Fusr_h;
    		public int     Fway_h;
    		public int     Lmod_h;
    		public int     Ltim_h;
    		public int     Lusr_h;
    		public int     Lway_h;
    		public short   Delf_h;
    		public short   Cprt_h;
    		public short   Dprt_h;
    		public int     Duno_h;
    		public int     Kday_h;
    		public short   Fprt_h;
    		public int     Sgno_h;
    		public short   Hjno_h;
    		public short   Sflg_h;
    		public short   Smnt_h;
    		public int     Sn01_h;
    		public short   Sf01_h;
    		public int     Sn02_h;
    		public short   Sf02_h;
    		public int     Sn03_h;
    		public short   Sf03_h;
    		public int     Sn04_h;
    		public short   Sf04_h;
    		public int     Sn05_h;
    		public short   Sf05_h;
    		public int     Sn06_h;
    		public short   Sf06_h;
    		public int     Sn07_h;
    		public short   Sf07_h;
    		public int     Sn08_h;
    		public short   Sf08_h;
    		public int     Sn09_h;
    		public short   Sf09_h;
    		public int     Sn10_h;
    		public short   Sf10_h;
    		public int     Idm1_h;
    		public int     Idm2_h;
    		public int     Idm3_h;
    		public string  Duf1_h;
    		public string  Duf2_h;
    		public string  Duf3_h;
    		public string  Duf4_h;
    		public string  Duf5_h;
    		public string  Duf6_h;
    		public string  Duf7_h;
    		public string  Duf8_h;
    		public string  Duf9_h;
    		public string  Duf10_h;
    		public string  Bflg_h;
    		public string  Hsflg_h;
    		public string  Hgflg_h;
    		// 仕訳
    		public short   Kesn;
    		public short   Dkei;
    		public int     Dseq;
    		public int     Sseq;
    		public int     Pseq;
    		public short   Pflg;
    		public short   Bkbn;
    		// Dim Dymd As Integer
    		// Dim Dcno As Integer
    		public int     Grno;
    		public int     Dcpg;
    		public int     Dlin;
    		// Dim Dfuk As Short
    		public short  Dflg;
    		// Dim Ijpt As Short
    		public string  Rbmn;
    		public string  Rtor;
    		public string  Rkmk;
    		public string  Reda;
    		public string  Rkoj;
    		public string  Rkos;
    		public string  Rprj;
    		public string  Rseg;
    		public string  Rdm1;
    		public string  Rdm2;
    		public string  Rdm3;
    		public string  Rtky;
    		public short   Rtno;
    		public int     Rimg;
    		public string  Sbmn;
    		public string  Stor;
    		public string  Skmk;
    		public string  Seda;
    		public string  Skoj;
    		public string  Skos;
    		public string  Sprj;
    		public string  Sseg;
    		public string  Sdm1;
    		public string  Sdm2;
    		public string  Sdm3;
    		public string  Stky;
    		public short   Stno;
    		public int     Simg;
    		public short   Tflg;
    		public decimal Exvl;
    		public decimal Zkvl;
    		public decimal Valu;
    		public string  Zkmk;
    		public int     Zrit;
    		public short   Zzkb;
    		public short   Zgyo;
    		public short   Zsre;
    		public int     Rrit;
    		public int     Srit;
    		public short   Rzkb;
    		public short   Rgyo;
    		public short   Rsre;
    		public short   Szkb;
    		public short   Sgyo;
    		public short   Ssre;
    		public short   Ifri;
    		public int     Symd;
    		public short   Skbn;
    		public int     Skiz;
    		public int     Uymd;
    		public short   Ukbn;
    		public int     Ukiz;
    		public short   Sexp;
    		public short   Sten;
    		public string  Dkec;
    		public short   Pcsw;
    		public short   Upsw;
    		public short   Zrsw;
    		public string  Gpcd;
    		// Dim Kymd As Integer
    		// Dim Kbmn As String
    		// Dim Kusr As String
    		public int     Fmod;
    		public int     Ftim;
    		public int     Fusr;
    		public int     Fway;
    		public int     Lmod;
    		public int     Ltim;
    		public int     Lusr;
    		public int     Lway;
    		public short   Delf;
    		public short   Cprt;
    		// Dim Dprt As Short
    		public short   Fsen;
    		public short   Smnt;
    		public int     Idm4;
    		public string  Rhei_cd;
    		public string  Shei_cd;
    		public decimal Rate;
    		public decimal Gaika;
    		public decimal Gexvl;
    		public decimal Gzkvl;
    		public int     Smexp;
    		public string  Rdm4;
    		public string  Rdm5;
    		public string  Rdm6;
    		public string  Rdm7;
    		public string  Rdm8;
    		public string  Rdm9;
    		public string  Rdm10;
    		public string  Rdm11;
    		public string  Rdm12;
    		public string  Rdm13;
    		public string  Rdm14;
    		public string  Rdm15;
    		public string  Rdm16;
    		public string  Rdm17;
    		public string  Rdm18;
    		public string  Rdm19;
    		public string  Rdm20;
    		public string  Sdm4;
    		public string  Sdm5;
    		public string  Sdm6;
    		public string  Sdm7;
    		public string  Sdm8;
    		public string  Sdm9;
    		public string  Sdm10;
    		public string  Sdm11;
    		public string  Sdm12;
    		public string  Sdm13;
    		public string  Sdm14;
    		public string  Sdm15;
    		public string  Sdm16;
    		public string  Sdm17;
    		public string  Sdm18;
    		public string  Sdm19;
    		public string  Sdm20;
    		public string  Rsseqai;
    		public string  Ssseqai;
    		public short   Tekiflg;
    		public short   Hflg;
    		public short   Swgflg;
    		public short   Swiflg;
    		// *-リンク情報
    		public int     LNO;
    		// -*
    		public string  OrgDcno;
    		// <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    		public string  Rkeigen;
    		public string  Skeigen;
    		public string  Zkeigen;
            // --->Ver01.16.02

// 2019/12/26 Ver01.19.05.9901 貸借行番号追加 --->
            public int     R_Dlin2;
            public int     S_Dlin2;
// <--- 2019/12/26 Ver01.19.05.9901 貸借行番号追加 

// Ver02.26.01 インボイス対応 --->
            public short Rurizeikeisan;
            public short Surizeikeisan;
            public short Zurizeikeisan;
            public short Rmenzeikeika;
            public short Smenzeikeika;
            public short Zmenzeikeika;
// <--- Ver02.26.01 インボイス対応

        }

        // ** 伝票管理情報レイアウト
        private struct structDENPYO
    	{
    		public short  KESN;
    		public short  DKEI;
    		public int    DYMD;
    		public string OrgDcno;
    		public int    KYMD;
    		public string KBMN;
    		public string KUSR;
    		public int    FUSR;
    		public int    DCNO;
    		public int    GRNO;
    		public int    DLIN;
    		public int    DUNO;
            // *-Prj312追加
            public int    SGNO;
            public int    DSEQ;
            public string HF1;
            public string HF2;
            public string HF3;
            public string HF4;
            public string HF5;
            public string HF6;
            public string HF7;
            public string HF8;
            public string HF9;
            public string HF10;
            public int    FMOD;
            public int    FTIM;
            public int    LMOD;
            public int    LTIM;
            // -*

            // 行区切り対応
            public long   R_ValueTotal;
    		public long   S_ValueTotal;
    		public string GSEP;
    		public bool   GSEP_FLG;
    	}
    
    	// ** 不正データ情報レイアウト(不良仕訳ログ用)
    	private struct structERRORLOG
    	{
    		public int    ItemNo;
    		public string Value;
    		public string Description;
    	}
    
    	// ** 不正データ情報レイアウト(伝票不良ログ用)
    	private struct structDEN_ERRORLOG
    	{
    		public long   Value;
    		public string Summary;
    		public string Description;
    	}
    
    	// *-リンク情報
    	private struct strucERRORLOGLINK
    	{
    		public int    LKNO;
    		public int    ItemNo;
    		public string ItemName;
    		public string Value;
    		public string Value2;
    		public string Description;
    	}
    
    	// ** 伝票情報レイアウト
    	private struct structDEN_INFO
    	{
    		public string DYMD;
    		public short  CKEI;
    		public string DCNO;
    		public int    STNO;
    		public int    EDNO;
    		public long   R_Value;
    		public long   S_Value;
    
    		public bool   ERR_FLG;
    		// 行区切り対応
    		public long   R_ValueTotal;
    		public long   S_ValueTotal;
    		public string GSEP;
    		public bool   GSEP_FLG;
    	}
    
    	// ** 消費税科目情報レイアウト
    	private struct structSVOLKM
    	{
    		public string strKCOD;
    		public string strKICD;
    		public int    nSY01;
    		public int    nSY02;
    		public int    nSY03;
    		public int    nSY04;
    		public int    nSY05;
    		public int    nSY06;
    		public int    nSY07;
    		public int    nSY08;
    		public int    nKK01;
    		public int    nBKE01;
    		public int    nBTK01;
    		public int    nBTKE01;
    		public int    nTKE01;
    		public int    nSTK01;
    		public int    nInp;
    	}
    
    	// ** 起動履歴レイアウト
    	private struct structACCLOG
    	{
    		public int    nSYMD;
    		public int    nSHMS;
    		public int    nUCOD;
    		public string sPCNM;
    		public string sLOGID;
    		public string sJOBS;
    		public string sJOBN;
    		public string sAPNO;
    		public string sJOBID;
    		public int    nTYPE;
    		public string sKAKU;
    		public string sPATH;
    		public int    nHPRO;
    		public string sHIKI;
    		public int    nSUBID;
    		public string sCCOD;
    		public string sCNAM;
    		public string sCPID;
    		public string sCDM1;
    		public string sCDM2;
    		public string sCDM3;
    		public string sCDM4;
    		public int    nIMD1;
    		public int    nIMD2;
    		public int    nIMD3;
    
    		public int    nIMD4;
    	}
    
    	// *-リンク情報
    	private struct structLink
    	{
    		public int    LNO;
    		public string LNAM;
    		public short  FLG1;
    
    		public string LINK;
    		// *-e文書
    		public string EDOC;
    		public string NUSR;
    		public string SUSR;
    		public short  SYUBETSU;
    		public int    SYMD;
    		public long   SVALU;
    		public string STRNAM;
    		// ---> Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
    		public string HINMEI;
    		// <--- Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
    		// <---Ver01.17.04　2019/02/28　hirano　AI-OCR対応
    		public string BIKO;
    		// --->Ver01.17.04
    		// -*e文書
    
    	}
    	#endregion

        #region 部門情報クラス
        private class BumonInfo
    	{
    		public short  Bflg { get; set; }
    		public string Code { get; set; }
    		public string Name { get; set; }
    		public short  DefaultSiireKubun {
    			get {
    				if (!this._defaultSiireKubun.HasValue) {
    					return 0;
    				}
    				return this._defaultSiireKubun.Value;
    			}
    		}
    
    		private const int syukeiBumonValue  = 1;    
    		private const int notExistsValue    = -1;
    		private const int kyouUriInZdata    = 3;
    		private const int kyouUriInBumon    = 0;    
    		private const int taisyougaiInZdata = 0;

    		private short? _defaultSiireKubun;

    		/// <summary>
    		/// 初期化
    		/// </summary>
    		public void Initialize()
    		{
    			this.Bflg               = notExistsValue;
    			this.Code               = "";
    			this.Name               = "";
    			this._defaultSiireKubun = null;
    		}

    		// / <summary>
    		// / DBからデータ読込
    		// / </summary>
    		public void LoadDataFromDb(IDbConnection kaisyaDbConnection, short kesn, string bcod)
    		{
                IDbCommand command = null;

    			try
                {
    				using (command = kaisyaDbConnection.CreateCommand())
                    {
    					command.CommandText = "SELECT BFLG , SY05 FROM BNAME WHERE KESN = :p AND BCOD = :p";
    					command.Parameters.Clear();
    					Import.AddParameter_FNC(ref command, "@KESN", DbType.Int32,  kesn);
    					Import.AddParameter_FNC(ref command, "@BCOD", DbType.String, bcod);

    					if (Import.G_IsOracle == false)
                        {
    						Import.ReplacePlaceHolder_FNC(ref command);
    					}
    					using (IDataReader reader = command.ExecuteReader())
                        {
    						if (reader.Read())
                            {
    							object[] values = new object[2];
    							reader.GetValues(values);

    							this.Code = bcod;
    							this.Bflg = Convert.ToInt16(values[0]);

// 2021/01/15 Ver02.22.08 不具合対応（科目仕入区分参照） --->
//                              this._defaultSiireKubun = DBNull.Value.Equals(values[1]) ? null : Convert.ToInt16(values[1]);
                                if (!DBNull.Value.Equals(values[1]))
                                {
                                    this._defaultSiireKubun = Convert.ToInt16(values[1]);
                                }
                                else
                                {
                                    this._defaultSiireKubun = null;
                                }
// <--- 2021/01/15 Ver02.22.08 不具合対応（科目仕入区分参照）
                            }
                            else
                            {
    							this.Initialize();
    						}
    						reader.Close();
    					}
    				}
    			}
                catch (Exception ex)
                {
    				this.Initialize();
    				throw new MyException(Import.MC_RESULT_ERR_DBREAD, ex);
    			}
    		}

    		// / <summary>
    		// / 仕入区分設定チェック
    		// / </summary>
    		public bool HasDefaultSiireKubun()
    		{
    			if (this.Bflg == notExistsValue || this.Bflg == syukeiBumonValue)
                {
    				return false;
    			}
                else if (this._defaultSiireKubun == null)
                {
    				return false;
    			}
                else
                {
    				return true;
    			}
    		}

    		// / <summary>
    		// / 仕訳テーブルの仕入区分の値取得
    		// / </summary>
    		public int GetSiireKubunInZdata()
    		{
    			if (HasDefaultSiireKubun())
                {
    				return Convert.ToInt32(this._defaultSiireKubun == kyouUriInBumon ? kyouUriInZdata : this._defaultSiireKubun);
    			}
                else
                {
    				return taisyougaiInZdata;
    			}
    		}   
    	}
        #endregion

        #region 枝番情報クラス
        private class EdabanInfo
    	{
    		public string Kicd { get; set; }
    		public string Ecod { get; set; }

    		/// <summary>
    		/// 枝番存在チェック
    		/// </summary>
    		public bool IsExists
            {
    			get { return this.Ecod.Length > 0; }
    		}

    		public short DefaultKazeiKubun
            {
    			get {
    				if (!this._defaultKazeiKubun.HasValue) {
    					return 0;
    				}
    				return this._defaultKazeiKubun.Value;
    			}
    		}
    		public short DefaultBunriKubun
            {
    			get
                {
    				if (!this._defaultBunriKubun.HasValue)
                    {
    					return 0;
    				}
    				return this._defaultBunriKubun.Value;
    			}
    		}
    
    		private short? _defaultKazeiKubun;  // 枝番課税区分
    		private short? _defaultBunriKubun;  // 枝番分離区分

    		/// <summary>
    		/// 初期化
    		/// </summary>
    		public void Initialize()
    		{
    			this.Kicd               = "";
    			this.Ecod               = "";
    			this._defaultKazeiKubun = null;
    			this._defaultBunriKubun = null;
    		}

    		/// <summary>
    		/// DBからデータ読込
    		/// </summary>
    		public void LoadDataFromDb(IDbConnection kaisyaDbConnection, short kesn, string kicd, string ecod)
    		{
                IDbCommand command = null;

    			try
                {
    				using (command = kaisyaDbConnection.CreateCommand())
                    {
    					command.CommandText = "SELECT ECOD, SY03 ,SY04 FROM ENAME WHERE KESN = :p AND KICD = :p AND ECOD = :p";
    					command.Parameters.Clear();
    					Import.AddParameter_FNC(ref command, "@KESN", DbType.Int32,  kesn);
    					Import.AddParameter_FNC(ref command, "@KICD", DbType.String, kicd);
    					Import.AddParameter_FNC(ref command, "@ECOD", DbType.String, ecod);
    					if (Import.G_IsOracle == false)
                        {
    						Import.ReplacePlaceHolder_FNC(ref command);
    					}
    					using (IDataReader reader = command.ExecuteReader())
                        {
    						if (reader.Read())
                            {
    							object[] values = new object[3];
    							reader.GetValues(values);

    							this.Kicd               = kicd;
    							this.Ecod               = ecod;
    							this._defaultKazeiKubun = DBNull.Value.Equals(values[1]) ? (short?)null : Convert.ToInt16(values[1]);
                                this._defaultBunriKubun = DBNull.Value.Equals(values[2]) ? (short?)null : Convert.ToInt16(values[2]);
    						}
                            else
                            {
    							this.Initialize();
    						}
    						reader.Close();
    					}
    				}
    			}
                catch (Exception ex)
                {
    				this.Initialize();
    				throw new MyException(Import.MC_RESULT_ERR_DBREAD, ex);
    			}
    		}

    		/// <summary>
    		/// 課税区分設定チェック
    		/// </summary>
    		public bool HasDefaultKazeiKubun()
    		{
    			if (!this.IsExists) {
    				return false;
    			}
    			return this._defaultKazeiKubun.HasValue;
    		}

    		/// <summary>
    		/// 分離区分設定チェック
    		/// </summary>
    		public bool HasDefaultBunriKubun()
    		{
    			if (!this.IsExists) {
    				return false;
    			}
    			return this._defaultBunriKubun.HasValue;
    		}
    	}
        #endregion

    	#region モジュール変数
    	//  マスタ権限の状態
    	//  2:追加変更以下ではレコードを作成しない    
    	private int nUsrSecMFLG;
        // Prj312
    	static bool    G_IsOracle;
    	private string G_ServerName;
    	private string G_KaisyaDb;
    	// Ver01.01.01--->
    	private string G_ServerPort;
        // <---

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
        static  bool       G_IsPostgre;
        static  IDbFactory G_DbFactory;
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
    
    	// リンクファイル格納先
    	static string G_LinkPass;
    	// e文書ファイル格納先    
    	static string G_EdocPass;    

// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応 --->
        // e文書(電子取引)(タイムスタンプなし)ファイル格納先
        static string G_EdocNaPass;
// <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応


    	// 履歴
    	private int access_rireki = -1;
    	// 電子帳簿保存
    	private Dictionary<int, int> volum_dflg = null;
    	// 消込対象科目    
    	Dictionary<int, List<string>> kskmk;

        // レイアウト項目名
    	private string[] M_ItemName = {
    		"全般",
    		"伝票日付",
    		"整理月フラグ",
    		"伝票番号",
    		"借方部門",
    		"借方取引先",
    		"借方科目",
    		"借方枝番",
    		"借方工事№",
    		"借方工種№",
    		"借方プロジェクト",
    		"借方セグメント",
    		"借方ユニバーサル１",
    		"借方ユニバーサル２",
    		"借方ユニバーサル３",
    		"借方摘要",
    		"借方摘要コード",
    		"貸方部門",
    		"貸方取引先",
    		"貸方科目",
    		"貸方枝番",
    		"貸方工事№",
    		"貸方工種№",
    		"貸方プロジェクト",
    		"貸方セグメント",
    		"貸方ユニバーサル１",
    		"貸方ユニバーサル２",
    		"貸方ユニバーサル３",
    		"対価金額",
    		"金額",
    		"税対象科目",
    		"税対象科目 税率",
    		"税対象科目 課税区分",
    		"税対象科目 業種区分",
    		"税対象科目 仕入区分",
    		"借方税率",
    		"貸方税率",
    		"借方課税区分",
    		"借方業種区分",
    		"借方仕入区分",
    		"貸方課税区分",
    		"貸方業種区分",
    		"貸方仕入区分",
    		"支払日",
    		"支払区分",
    		"支払期日",
    		"回収日",
    		"入金区分",
    		"回収期日",
    		"店券フラグ",
    		"消込コード",
    		"起票年月日",
    		"起票部門",
    		"起票者",
    		"入力者",
    		"付箋番号",
    		"承認グループ№",
    		"分離区分",
    		"レート",
    		"外貨対価金額",
    		"外貨金額",
    		"行区切り"
    
    	};
    	// 内部統制対応
    	private bool P_JSOX;
    	// 自動付番(部署入出力処理伝票番号自動付番対応)
    	private short P_Juse;
    
    	private short P_IDM1;
    	//  仕訳履歴を残す場合True
    	private bool P_ShiwakeRireki;
    	// 対価が0円で入力された場合に、消費税子仕訳を作成するかチェックします。
    	private short[] P_ZeroSiwake = new short[2];
    
    	// 課税区分自動判定フラグ（18・19・49）が指定された場合に課税区分を変更します。
    	private int[] P_ZeiAuto = new int[2];
    
    	// 消費税マスタテーブル
    	private DataRow P_SvolumRow;
    
    	private string P_Save_Tkyo;
    	// Prj312--->
    	private short P_Save_Tekiflg;
    	// <---
    	private int P_Save_Dflg;
    
    	private bool P_DlinSetFlg;
    	// 伝票入力パターン    
    	private int P_IJPT;
    	// 外貨仕訳関数使用判断フラグ TRUE:外貨関数使用　FALSE:旧関数使用
    	private bool P_b_GaikaFC;
    	// 会社別サブシステムの外貨使用フラグを取得 TRUE:使用する　FALSE:使用しない
    	private bool P_b_GaikaSUB;
    	// 処理期別の外貨システム　初期設定
    	private DataTable P_GaiCtl;
    	// 会社DBが外貨対応済みDBであるかどうかの判断フラグ　TRUE:対応済み　FALSE:未対応
    
    	private bool P_b_GaikaTable_Flg;
    	// 外貨換算フラグ TRUE:換算処理を行う FALSE:行わない
    	private bool P_b_Kanzan_Flg;
    	// 外貨金額換算単位(USEHEI.TANI)
    	private int P_Int_GaikaTani;
    	// 外貨金額少数以下桁数(USEHEI.SYOSU)
    
    	private int P_Int_GaikaSyosu;
    	// 貸借金額アンマッチチェック
    	decimal PDec_R_Goukei;
    
    	decimal PDec_S_Goukei;
    	// 自動諸口チェック用
    
    	string PStr_Chk_SaveTkyo;
    	// 0円消費税作成区分の判断を追加
    
    	int P_Int_ZERO;
    	// プログラム起動時間
    
    	string P_Str_KidouDate = "";
    	// 会社別ｻﾌﾞｼｽﾃﾑの使用ﾁｪｯｸを追加
    	int P_Int_Sub900 = 0;
    
    	int P_Int_Sub901 = 0;
    
// ↓ 分離仕訳の事前未入力・未登録チェック対応 ↓
//  　  分離子仕訳で未登録があった場合、Valueには分離区分の値がセットされるため
//  　  未登録のマスターコードを保持する変数    
    	private string[] Bunri_ErrVal = null;
// ↑ 分離仕訳の事前未入力・未登録チェック対応 ↑
    
    	private int P_SKUBUN = 0;
    
    	private int P_RUCOD = 0;

    	// 行区切り対応    		
    	private bool P_b_GsepFC;  // 行区切り使用判断フラグ
        // 外貨なし項目数
    	private int P_DataLen = 0;
    
    	private int P_Save_Grno;
    	// <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    	// 税率の扱い
    	private int P_Keigen = 0;
    	// 軽減税率8％レコード
    	private DataRow[] SRITU_Rows;
    	// --->Ver01.16.02
// ▼ ツルハ様カスタマイズ ▼
        private string P_SYBMNCD = "";
// ▲ ツルハ様カスタマイズ ▲
    
    	// Prj312--->
    	// サブシステム未入力チェック対応
    	// サブシステムから転記する際の未入力チェック
    	private int P_SUB_TENK = 0;
    	// 起票者未入力チェック
    	private int P_KIHYOSYA_MI = 0;
    	// 起票部門未入力チェック
    	private int P_KIHYOBMN_MI = 0;
    	// HF未入力チェック
    	private int P_HF1_MI  = 0;
    	private int P_HF2_MI  = 0;
    	private int P_HF3_MI  = 0;
    	private int P_HF4_MI  = 0;
    	private int P_HF5_MI  = 0;
    	private int P_HF6_MI  = 0;
    	private int P_HF7_MI  = 0;
    	private int P_HF8_MI  = 0;
    	private int P_HF9_MI  = 0;
    	private int P_HF10_MI = 0;
    	// *-リンク情報
    	private int    P_PDF              = 0;
    	private int    P_XPS              = 0;
    	private int    P_OXPS             = 0;
    	private int    P_DOCDOCX          = 0;
    	private int    P_XLSXLSX          = 0;

// 2022/04/11 Ver02.24.01 MSG拡張子対応 --->
        private int    P_MSG              = 0;
// <--- 2022/04/11 Ver02.24.01 MSG拡張子対応

    	private int    G_Index_Link_Count = -1;
    	private int    G_Index_LNO        = -1;
    	private string G_Index_LNAM       = "";
    	private short  G_Index_FLG1       = -1;
    
    	private string G_Index_LINK = "";
    	// *-e文書
    	private int    P_Int_SubEDOC      = 0;
    	private string G_Index_E_EDOC     = "";
    	private string G_Index_E_NUSR     = "";
    	private string G_Index_E_SUSR     = "";
    	private short  G_Index_E_SYUBETSU = 0;
    	private int    G_Index_E_SYMD     = 0;
    	private long   G_Index_E_SVALU    = 0;
    	private string G_Index_E_STRNAM   = "";
// ---> Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
    	private string G_Index_E_HINMEI   = "";
// <--- Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
// <---Ver01.17.04　2019/02/28　hirano　AI-OCR対応
    	private string G_Index_E_BIKO     = "";
// --->Ver01.17.04    
    	// -*e文書    
    	// -*

// <---Ver01.17.04　2019/02/28　hirano　AI-OCR対応
    	List<int> TimeStampStartDate = new List<int>();
    	List<int> TimeStampEndDate   = new List<int>();
    	int       CurrentDate        = 0;
// --->Ver01.17.04

// 2022/04/11 Ver02.24.01 e文書必須項目変更等対応 --->
        List<int>    P_LinkDate             = new List<int>(new int[] { 0, 0, 0, 0, 0, 0, 0, 0 });    // 日付
        List<int>    P_LinkAmount           = new List<int>(new int[] { 0, 0, 0, 0, 0, 0, 0, 0 });    // 金額
        List<int>    P_LinkPublisher        = new List<int>(new int[] { 0, 0, 0, 0, 0, 0, 0, 0 });    // 発行者名称
        // 書類種別Index、KEYNM2Index、書類種別名、KEYNM2値 確認用
        List<int>    oLinkIdx               = new List<int>(new int[] { 0, 1, 2, 3, 4, 5, 6, 7 });
        List<string> oLinkIdxNm             = new List<string>(new string[] { "領収書", "請求書", "契約書", "納品書", "注文書", "見積書", "領収書控", "請求書控" });
        List<int>    oLinkKeynm2Idx         = new List<int>(new int[] { 5, 7, 1, 3, 0, 2, 4, 6 });
        List<string> oLinkKeynm2            = new List<string>(new string[] { "RYOSHUSHO", "SEIKYUSHO", "KEIYAKUSHO", "NOUHINSHO", "CHUMONSHO", "MITSUMORISHO", "RYOSHUHIKAE", "SEIKYUHIKAE" });
        #region Ver02.24.01 現時点では不要
        // 部署入出力以外でもe文書を添付
        int          P_BusyoIgaieDocument   = 0;
        // e文書の保存要件チェック
        int          P_EdocumentHozonYouken = 0;
        #endregion
// <--- 2022/04/11 Ver02.24.01 e文書必須項目変更等対応

        private int G_Index_DYMD       = -1;
    	private int G_Index_SEIRI      = -1;
    	private int G_Index_DCNO       = -1;
    	private int G_Index_KYMD       = -1;
    	private int G_Index_KBMN       = -1;
    	private int G_Index_KUSR       = -1;
    	private int G_Index_SGNO       = -1;
    	private int G_Index_HF1        = -1;
    	private int G_Index_HF2        = -1;
    	private int G_Index_HF3        = -1;
    	private int G_Index_HF4        = -1;
    	private int G_Index_HF5        = -1;
    	private int G_Index_HF6        = -1;
    	private int G_Index_HF7        = -1;
    	private int G_Index_HF8        = -1;
    	private int G_Index_HF9        = -1;
    
    	private int G_Index_HF10       = -1;
    	private int G_Index_RBMN       = -1;
    	private int G_Index_RTOR       = -1;
    	private int G_Index_RKMK       = -1;
    	private int G_Index_REDA       = -1;
    	private int G_Index_RKOJ       = -1;
    	private int G_Index_RKOS       = -1;
    	private int G_Index_RPRJ       = -1;
    	private int G_Index_RSEG       = -1;
    	private int G_Index_RDM1       = -1;
    	private int G_Index_RDM2       = -1;
    	private int G_Index_RDM3       = -1;
    	private int G_Index_RDM4       = -1;
    	private int G_Index_RDM5       = -1;
    	private int G_Index_RDM6       = -1;
    	private int G_Index_RDM7       = -1;
    	private int G_Index_RDM8       = -1;
    	private int G_Index_RDM9       = -1;
    	private int G_Index_RDM10      = -1;
    	private int G_Index_RDM11      = -1;
    	private int G_Index_RDM12      = -1;
    	private int G_Index_RDM13      = -1;
    	private int G_Index_RDM14      = -1;
    	private int G_Index_RDM15      = -1;
    	private int G_Index_RDM16      = -1;
    	private int G_Index_RDM17      = -1;
    	private int G_Index_RDM18      = -1;
    	private int G_Index_RDM19      = -1;
    	private int G_Index_RDM20      = -1;
    	private int G_Index_RRIT       = -1;
    	private int G_Index_RZKB       = -1;
    	private int G_Index_RGYO       = -1;
    	private int G_Index_RSRE       = -1;
    	private int G_Index_RTKY       = -1;
    
    	private int G_Index_RTNO       = -1;
    	private int G_Index_SBMN       = -1;
    	private int G_Index_STOR       = -1;
    	private int G_Index_SKMK       = -1;
    	private int G_Index_SEDA       = -1;
    	private int G_Index_SKOJ       = -1;
    	private int G_Index_SKOS       = -1;
    	private int G_Index_SPRJ       = -1;
    	private int G_Index_SSEG       = -1;
    	private int G_Index_SDM1       = -1;
    	private int G_Index_SDM2       = -1;
    	private int G_Index_SDM3       = -1;
    	private int G_Index_SDM4       = -1;
    	private int G_Index_SDM5       = -1;
    	private int G_Index_SDM6       = -1;
    	private int G_Index_SDM7       = -1;
    	private int G_Index_SDM8       = -1;
    	private int G_Index_SDM9       = -1;
    	private int G_Index_SDM10      = -1;
    	private int G_Index_SDM11      = -1;
    	private int G_Index_SDM12      = -1;
    	private int G_Index_SDM13      = -1;
    	private int G_Index_SDM14      = -1;
    	private int G_Index_SDM15      = -1;
    	private int G_Index_SDM16      = -1;
    	private int G_Index_SDM17      = -1;
    	private int G_Index_SDM18      = -1;
    	private int G_Index_SDM19      = -1;
    	private int G_Index_SDM20      = -1;
    	private int G_Index_SRIT       = -1;
    	private int G_Index_SZKB       = -1;
    	private int G_Index_SGYO       = -1;
    	private int G_Index_SSRE       = -1;
    	private int G_Index_STKY       = -1;
    
    	private int G_Index_STNO       = -1;
    	private int G_Index_ZKMK       = -1;
    	private int G_Index_ZRIT       = -1;
    	private int G_Index_ZZKB       = -1;
    	private int G_Index_ZGYO       = -1;
    
    	private int G_Index_ZSRE       = -1;
    	private int G_Index_EXVL       = -1;
    	private int G_Index_VALU       = -1;
    	private int G_Index_SYMD       = -1;
    	private int G_Index_SKBN       = -1;
    	private int G_Index_SKIZ       = -1;
    	private int G_Index_UYMD       = -1;
    	private int G_Index_UKBN       = -1;
    	private int G_Index_UKIZ       = -1;
    	private int G_Index_DKEC       = -1;
    	private int G_Index_FUSR       = -1;
    	private int G_Index_FSEN       = -1;
    	private int G_Index_TKFLG      = -1;
    
    	private int G_Index_BUNRI      = -1;
    	private int G_Index_HEIC       = -1;
    	private int G_Index_RATE       = -1;
    	private int G_Index_GEXVL      = -1;
    
    	private int G_Index_GAIKA      = -1;
    	// 行区切り    
    	private int G_Index_GSEP       = -1;
    	// *-リンク情報
    	private int G_Index_ZLNO       = -1;
    	// -*
    
// <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    	private int G_Index_RKEIGEN    = -1;
    	private int G_Index_SKEIGEN    = -1;
    	private int G_Index_ZKEIGEN    = -1;
// --->Ver01.16.02
    
    	private int G_Index_ITEM_COUNT = -1;
        // <---

// Ver02.26.01 インボイス対応 --->
        private int    G_Index_RURIZEIKEISAN           = -1;
        private int    G_Index_SURIZEIKEISAN           = -1;
        private int    G_Index_ZURIZEIKEISAN           = -1;
        private int    G_Index_RMENZEIKEIKA            = -1;
        private int    G_Index_SMENZEIKEIKA            = -1;
        private int    G_Index_ZMENZEIKEIKA            = -1;

        private bool   isUserAllowedImportKarisimetuki = false;
        private bool   isNewLayout                     = false;
        private int    newLayoutGaikaItemCount         = 4;
        private int    keigenZeirituItemCount          = 3;
        private int    invoiceItemCount                = 6;
        private short  exceptNewLayout2_rMenzeikeika   = 0;
        private short  exceptNewLayout2_sMenzeikeika   = 0;
        private HashSet<string> menzeiZigyousyaTrcdList;
// <--- Ver02.26.01 インボイス対応
// Ver02.26.02 摘要120バイト対応(変更) --->
        private bool siasInvoice = false;
// <--- Ver02.26.02 摘要120バイト対応(変更)


// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
        Logger mLogger = null;           
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
    	#endregion

        #region 外部呼出関数
        // *===========================================================================================*
    	// 【説明】
    	//    仕訳データインポート処理
    	// --------------------------------------------------------------------------------------------
        // 【転記先】
        //    日次処理
        // --------------------------------------------------------------------------------------------
    	// 【戻り値】
    	//    基本は既存関数を参照してください。
    	// *===========================================================================================*
// ▼ ツルハ様カスタマイズ ▼
//    	public int Imp_SubSiwake_M(string CCOD, int PrcFlg, int DFUK, int LogFlg, ref C_SetData Siwake, string LogPath, string LogFname, int RNo, int RUCOD, int SKUBUN,
//                                 int IJPT = 0, int Kanzan = 0, int Keigen = 0)
        public int Imp_SubSiwake_M(string CCOD, int PrcFlg, int DFUK, int LogFlg, ref C_SetData Siwake, string LogPath, string LogFname, int RNo, int RUCOD, int SKUBUN,
                                   int IJPT = 0, int Kanzan = 0, int Keigen = 0, string SYBMNCD = "")
// ▲ ツルハ様カスタマイズ ▲
        { 
    		P_b_GaikaFC = true;
    		P_Keigen    = Keigen;

            // 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
            mLogger = Logger.GetInstance(LogPath);
            mLogger.LogWrite(Logger.Level.INFO, "処理開始");
            //*
            mLogger.LogClose();
            //*
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

    		return ImpMain_M_FNC(CCOD, PrcFlg, DFUK, LogFlg, ref Siwake, LogPath, LogFname, RNo, RUCOD, SKUBUN, false, IJPT, Kanzan, "", SYBMNCD);   
    	}
    
    	// *===========================================================================================*
    	// 【説明】
    	//    仕訳データインポート処理
    	// --------------------------------------------------------------------------------------------
        // 【転記先】
        //    部署入出力処理
        // --------------------------------------------------------------------------------------------
    	// 【戻り値】
    	//    基本は既存関数を参照してください。
    	// *===========================================================================================*
// ▼ ツルハ様カスタマイズ ▼
//    	public int Imp_SubSiwake_K_M(string CCOD, int PrcFlg, int DFUK, int LogFlg, ref C_SetData Siwake, string LogPath, string LogFname, int RNo, int RUCOD, int SKUBUN,
//    	                             int IJPT = 0, int Kanzan = 0, string Kakutei = "", int Keigen = 0)
        public int Imp_SubSiwake_K_M(string CCOD, int PrcFlg, int DFUK, int LogFlg, ref C_SetData Siwake, string LogPath, string LogFname, int RNo, int RUCOD, int SKUBUN,
    	                             int IJPT = 0, int Kanzan = 0, string Kakutei = "", int Keigen = 0, string SYBMNCD = "")
// ▲ ツルハ様カスタマイズ ▲
    	{
    		P_b_GaikaFC = true;
    		P_Keigen    = Keigen;

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
            mLogger = Logger.GetInstance(LogPath);
            mLogger.LogWrite(Logger.Level.INFO, "処理開始");
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

    		return ImpMain_M_FNC(CCOD, PrcFlg, DFUK, LogFlg, ref Siwake, LogPath, LogFname, RNo, RUCOD, SKUBUN, true, IJPT, Kanzan, Kakutei, SYBMNCD);    
    	}
        #endregion

        #region 消費税（分離）関連
        // *===========================================================================================*
        //    使用できる分離区分チェック
        // *===========================================================================================*
        private void SyoBunri_Check_SUB(DataRow H_drSvolum, ref int H_BunriOk, string H_Bkbn, int H_JSy01, string H_JSy03, int H_ASy01, string H_ASy03, int H_ASy04, string H_SY02, string H_Exvl,
                                        short H_Zero, ref short H_ZeroSiwake)
    	{
    		int L_lvChkBkbn = 0;
    		int L_lvUseBkbn = 0;
    
    		// 分離区分セット
    		L_lvChkBkbn = Convert.ToInt32(H_Bkbn);
    		// 使用できる分離区分をセット
    		L_lvUseBkbn = SvolumDefBunri_FNC(H_drSvolum, H_JSy01, L_lvChkBkbn, Convert.ToInt32(H_JSy03), H_ASy01, Convert.ToInt32(H_ASy03), H_ASy04);
    		// 分離区分チェック(レコードの分離区分と使用できる分離区分が一致しなければエラー)
    		if (L_lvChkBkbn == L_lvUseBkbn)
            {
    			if (L_lvUseBkbn == 0)
                {
    				H_BunriOk    = 0;
    				H_ZeroSiwake = 0;
    			}
                else
                {
    				H_BunriOk = 1;
    				if (ChkTaika_FNC(Convert.ToInt32(H_SY02), Convert.ToInt16(H_Bkbn), Convert.ToInt16(H_JSy03)) == true)
                    {
    					if ((H_Exvl == "0" || string.IsNullOrEmpty(H_Exvl)) && H_Zero == 0)
                        {
    						H_ZeroSiwake = 0;
    					}
                        else
                        {
    						H_ZeroSiwake = 1;
    					}
    				}
                    else
                    {
    					H_ZeroSiwake = 1;
    				}
    			}    
    		}
            else if (L_lvUseBkbn != 0 && L_lvChkBkbn == 0)
            {
    			H_BunriOk    = 3;
    			H_ZeroSiwake = 0;
    		}
            else if (L_lvUseBkbn == 0)
            {
    			//  仮受・仮払消費税の場合は、必ずエラー
    			if (H_JSy01 == 21 || H_JSy01 == 22)
                {
    				H_BunriOk = -1;
    			}
                else
                {
    				H_BunriOk = 0;
    			}
    			H_ZeroSiwake = 0;
    		}
            else
            {
    			H_BunriOk    = 0;
    			H_ZeroSiwake = 0;
    		}    
    	}
    
    	// *===========================================================================================*
    	//    科目フラグと課税フラグから分離区分を取得
    	// *===========================================================================================*
    	private int SvolumDefBunri_FNC(DataRow H_drSvolum, int H_PSY01, int H_PSY04, int H_PFlg, int H_PAiteSY01, int H_PAiteFlg, int H_PAiteBunri)
    	{
    		int[] L_LBnrFlg = null;
    		int   L_LBnrCnt = 0;
    		int   L_LCount  = 0;
    
    		// 選択可能区分
    		L_LBnrCnt = SvolumDefSelBunri_FNC(H_drSvolum, H_PSY01, H_PFlg, H_PAiteSY01, H_PAiteFlg, H_PAiteBunri, ref L_LBnrFlg);
    		L_LCount  = 0;
    		while (L_LCount < L_LBnrCnt)
            {
    			if (L_LBnrFlg[L_LCount] == H_PSY04)
                {
    				return H_PSY04;
    			}
    			L_LCount = L_LCount + 1;
    		}
    		// 分離区分に選択肢がない場合
    		if (L_LBnrCnt == 1)
            {
    			return L_LBnrFlg[0];
    		}
    		return 0;
    	}
    
    	// *===========================================================================================*
    	//    科目フラグと課税区分から選択可能な分離区分を取得
    	// *===========================================================================================*
    	private int SvolumDefSelBunri_FNC(DataRow H_drSvolum, int H_PSY01, int H_PFlg, int H_PAiteSY01, int H_PAiteFlg, int H_PAiteBunri, ref int[] H_RBunri)
    	{
    		int   L_LCount  = 0;
    		int   L_LCount2 = 0;
    		int   L_LKbnNo  = 0;
    		int   L_LKbn    = 0;
    		int[] L_LBuff   = null;
    
    		// 分離しない
    		H_RBunri    = new int[2];
    		H_RBunri[0] = 0;
    		L_LBuff     = new int[2];
    		L_LBuff[0]  = 0;
    		L_LCount    = 1;
    
    		// 相手科目の処理グループ
    		if ((H_PAiteSY01 == 21) || (H_PAiteSY01 == 22))
            {
    			return L_LCount;
    		}
    
    		// 相手科目の課税区分
    		if (H_PAiteFlg != 0 && H_PAiteFlg != 99 && H_PAiteFlg != 100)
            {
    			// 相手分離区分無し
    			if (!((H_PAiteBunri == 1) || (H_PAiteBunri == 2) || (H_PAiteBunri == 3)))
                {
    				return L_LCount;
    			}
            }

            #region 税抜処理
            if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1)
            {
    			L_LKbnNo = -1;
    			// 資産
    			if (H_PSY01 == 2) { L_LKbnNo = 0; }
    			// 負債
    			if (H_PSY01 == 3) { L_LKbnNo = 1; }
    			// 売上
    			if (H_PSY01 == 4) { L_LKbnNo = 1; }
    			// 仕入
    			if (H_PSY01 == 5) { L_LKbnNo = 2; }
    			// 経費
    			if (H_PSY01 == 6) { L_LKbnNo = 3; }
    			// 混在
    			if (H_PSY01 == 7)
                {
    				// 売上と仕入が同じ経理方式
    				if (H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1] == H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2] && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0)
                    {
    					L_LKbnNo = 1;
    				}
                    else
                    {
    					// 経理方式（売上：税抜）
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0)
                        {
    						// 課込売上
    						if (H_PFlg == 12)
                            {
    							L_LCount = 0;
    							if (L_LBuff.Length != L_LCount + 1)
                                {
    								// 配列サイズが違うので拡張する
    								Array.Resize(ref L_LBuff, L_LCount + 2);
    							}
    							L_LBuff[L_LCount] = 1;
    							L_LCount          = L_LCount + 1;
    						}
    						// 課抜売上
    						if (H_PFlg == 14)
                            {
    							if (L_LBuff.Length != L_LCount + 1)
                                {
    								// 配列サイズが違うので拡張する
    								Array.Resize(ref L_LBuff, L_LCount + 2);
    							}
    							L_LBuff[L_LCount] = 3;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    					// 経理方式（仕入：税抜）
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0)
                        {
    						// 課込仕入
    						if (H_PFlg == 11)
                            {
    							L_LCount = 0;
    							if (L_LBuff.Length != L_LCount + 1)
                                {
    								// 配列サイズが違うので拡張する
    								Array.Resize(ref L_LBuff, L_LCount + 2);
    							}
    							L_LBuff[L_LCount] = 1;
    							L_LCount          = L_LCount + 1;
    						}
    						// 課抜仕入
    						if (H_PFlg == 13)
                            {
    							if (L_LBuff.Length != L_LCount + 1)
                                {
    								// 配列サイズが違うので拡張する
    								Array.Resize(ref L_LBuff, L_LCount + 2);
    							}
    							L_LBuff[L_LCount] = 3;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
    			}
    			// 有価証券
    			if (H_PSY01 == 8)  { L_LKbnNo = 0; }
    			// 売上値引
    			if (H_PSY01 == 9)  { L_LKbnNo = 1; }
    			// 仕入値引
    			if (H_PSY01 == 10) { L_LKbnNo = 2; }
    
    			// 選択値のセット
    			if (L_LKbnNo >= 0)
                {
    				// 経理方式（税抜）
    				switch (L_LKbnNo)
                    {
    					case 0:
    						L_LKbn = Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]);
    						break;
    					case 1:
    						L_LKbn = Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]);
    						break;
    					case 2:
    						L_LKbn = Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]);
    						break;
    					case 3:
    						L_LKbn = Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN4]);
    						break;
    				}
    				if (L_LKbn == 0)
                    {
    					// 税込、課込仕入、課込売上、貸倒損込、貸倒回込
    					if ((H_PFlg == 1) || (H_PFlg == 11) || (H_PFlg == 12) || (H_PFlg == 21) || (H_PFlg == 23))
                        {
    						// 自動分離以外は使用不可
    						L_LCount = 0;
    						if (L_LBuff.Length != L_LCount + 1) {
    							// 配列サイズが違うので拡張する
    							Array.Resize(ref L_LBuff, L_LCount + 2);
    						}
    						L_LBuff[L_LCount] = 1;
    						L_LCount          = L_LCount + 1;
    					}
    					// 税抜、課抜仕入、課抜売上、貸倒損抜、貸倒回抜
    					if ((H_PFlg == 2) || (H_PFlg == 13) || (H_PFlg == 14) || (H_PFlg == 22) || (H_PFlg == 24))
                        {
    						if (L_LBuff.Length != L_LCount + 1)
                            {
    							// 配列サイズが違うので拡張する
    							Array.Resize(ref L_LBuff, L_LCount + 2);
    						}
    						L_LBuff[L_LCount] = 3;
    						L_LCount          = L_LCount + 1;
    					}
    				}
    			}
            }
            #endregion
            #region 一括税抜き
            if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2)
            {
    			// 税込、課込仕入、課込売上、貸倒損込、貸倒回込
    			if ((H_PFlg == 1) || (H_PFlg == 11) || (H_PFlg == 12) || (H_PFlg == 21) || (H_PFlg == 23))
                {
    				// 自動分離以外は使用不可
    				if (L_LBuff.Length != L_LCount + 1) {
    					// 配列サイズが違うので拡張する
    					Array.Resize(ref L_LBuff, L_LCount + 2);
    				}
    				L_LBuff[L_LCount] = 1;
    				L_LCount          = L_LCount + 1;
    				if (L_LBuff.Length != L_LCount + 1) {
    					// 配列サイズが違うので拡張する
    					Array.Resize(ref L_LBuff, L_LCount + 2);
    				}
    				L_LBuff[L_LCount] = 2;
    				L_LCount          = L_LCount + 1;
    			}
    			// 税抜、課抜仕入、課抜売上、貸倒損抜、貸倒回抜
    			if ((H_PFlg == 2) || (H_PFlg == 13) || (H_PFlg == 14) || (H_PFlg == 22) || (H_PFlg == 24)) {
    				if (L_LBuff.Length != L_LCount + 1) {
    					// 配列サイズが違うので拡張する
    					Array.Resize(ref L_LBuff, L_LCount + 2);
    				}
    				L_LBuff[L_LCount] = 3;
    				L_LCount          = L_LCount + 1;
    			}
    		}
    		if (!((H_PAiteBunri == 1) || (H_PAiteBunri == 2) || (H_PAiteBunri == 3))) {
    			// 相手分離区分無し
    			L_LCount2 = 0;
    			while (L_LCount2 < L_LCount) {
    				if (H_RBunri.Length != L_LCount2 + 1)
                    {
    					// 配列サイズが違うので拡張する
    					Array.Resize(ref H_RBunri, L_LCount2 + 2);
    				}
    				H_RBunri[L_LCount2] = L_LBuff[L_LCount2];
    				L_LCount2 = L_LCount2 + 1;
    			}
    		} else {
    			// 相手分離区分有り
    			L_LCount2 = 0;
    			while (L_LCount2 < L_LCount) {
    				if (L_LBuff[L_LCount2] == H_PAiteBunri) {
    					H_RBunri[0] = H_PAiteBunri;
    					break; //  TODO: might not be correct. Was : Exit Do
    				}
    				L_LCount2 = L_LCount2 + 1;
    			}
    			// フラグ件数は１固定（無し、相手分離区分と同じ区分）
    			L_LCount = 1;
            }
            #endregion

            return L_LCount;
    	}
    
    	// *===========================================================================================*
    	//    消費税マスタ税抜/税込を判断する
    	// 	H_drSvolum　消費税マスタ
    	// 	H_PSY01		処理グループ
    	// 	H_PSY03		課税区分	
    	//    返値		0:税抜処理-経理方式税抜　1：税抜処理-経理方式税込 10:税込処理 20:一括税抜き
    	// 	※税抜処理（混在を除く）以外は暫定未使用です
    	// *===========================================================================================*
    	private int ChkZeinuki_FNC(DataRow H_drSvolum, int H_PSY01, int H_PSY03)
    	{
    		int L_LKbn = 0;
    
    		L_LKbn = -1;

            #region 税抜処理
            if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1)
            {
    			switch (H_PSY01)
                {
    				case 2:
    				case 8:
    					// 資産,有価証券
    					L_LKbn = Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]);
    					// 資産
    					break;    
    				case 3:
    				case 4:
    				case 9:
    					// 負債,売上,売上値引
    					L_LKbn = Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]);
    					// 売上
    					break;    
    				case 5:
    				case 10:
    					// 仕入,仕入値引
    					L_LKbn = Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]);
    					// 仕入
    					break;    
    				case 6:
    					// 経費
    					L_LKbn = Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN4]);
    					// 経費
    					break;    
    				case 7:
    					// 混在
    					// 経理方式（売上）
    					// 課込売上/課抜売上
    					if ((H_PSY03 == 12) || (H_PSY03 == 14)) {
    						L_LKbn = 10 + Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]);
    						// 売上
    					}
    					// 経理方式（仕入）
    					// 課込仕入/課抜仕入
    					if ((H_PSY03 == 11) || (H_PSY03 == 13)) {
    						L_LKbn = 10 + Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]);
    						// 仕入
    					}
    
    					break;
    			}
            }
            #endregion
            #region 税込処理
            else if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 0)
            {
    			L_LKbn = 10; 
            }
            #endregion
            #region 一括税抜
            else if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2)
            {
    			L_LKbn = 20;
            }
            #endregion

            return L_LKbn;
    	}
    
    	// *===========================================================================================*
    	//    分離区分に応じて親仕訳から子仕訳のレコードを作成　+　未登録・未入力チェック
    	// 		【パラメータ】
    	// 		  1.IDbConnection
    	// 		　2.親仕訳カラム
    	// 		　3.分離区分（1：自動分離、2：振替作成、3：税作成）
    	// 		　4.分離対象（0：借方、1：貸方）
    	// 		  5.分離対象側の消費税グループ（SY0）
    	// 		  6.分離対象側の対価入力フラグ（SY02）070418 add
    	// 		  7.子仕訳カラム（リターン）
    	// 		  8.未入力エラー（リターン）
    	// 		　9.未登録エラー（リターン）（残高の組合せ）
    	// 		 10.分離後の親仕訳の金額（リターン）
    	// 		 11.分離後の税込金額（リターン）
    	// 		 12.外貨仕訳フラグ（0：邦貨仕訳、1：借方のみ外貨、2：貸方のみ外貨、3：貸借両外貨科目）
    	// 		 13.外貨の小数点桁数
    	// 		 14.分離後の親仕訳の外貨金額（リターン）
    	// 		 15.分離後の税込金額（リターン）
    	// 		 16.外貨対価金額（リターン）
    	//           .消込使用フラグ（0：借方　1：貸方　2：貸借両方）  Ver01.23.01 消込コード対応
    	// 		     .自動分離子仕訳エラーメッセージ（リターン） 2019/06/24 Ver.01.13.01 自動分離子仕訳エラー対応
    	// 		【返送値】
    	// 		　 ＯＫ：TRUE
    	// 		　 エラーあり：FALSE
    	// 
    	// *===========================================================================================*
// ▼ ツルハ様カスタマイズ ▼
//    	private bool ZData_Bunri_FNC(IDbConnection H_Con, ref structZDATA H_ZData, string H_BKbn, int H_KrKs, int H_Sy0, int H_SY02, ref structZDATA H_ZDataBunri, ref int H_InpErr, ref int H_RegErr, ref string H_ValuOya,
//    	                             ref string H_ValuZei, DataRow H_drSvolum, DataTable H_dtKname, structSVOLKM[] H_SVolumKm, DataRow H_drVolum, ref structERRORLOG[] H_ErrLog, int H_PnGaiSiwake, int H_PnGaiSyosu,
//                                   ref decimal H_GValuOya, ref decimal H_GValuZei, ref decimal H_GValutai, int H_PnUseDkec, ref int H_Lno, ref string[] H_ErrMsg)
        private bool ZData_Bunri_FNC(IDbConnection H_Con, ref structZDATA H_ZData, string H_BKbn, int H_KrKs, int H_Sy0, int H_SY02, ref structZDATA H_ZDataBunri, ref int H_InpErr, ref int H_RegErr, ref string H_ValuOya,
    	                             ref string H_ValuZei, DataRow H_drSvolum, DataTable H_dtKname, structSVOLKM[] H_SVolumKm, DataRow H_drVolum, ref structERRORLOG[] H_ErrLog, int H_PnGaiSiwake, int H_PnGaiSyosu,
                                     ref decimal H_GValuOya, ref decimal H_GValuZei, ref decimal H_GValutai, int H_PnUseDkec, ref int H_Lno, ref string[] H_ErrMsg, short H_Touki)
// ▲ ツルハ様カスタマイズ ▲
        {
            #region 変数初期化
            string  L_lvChildKicd       = null;
    		// 消費税属性
    		int[]   L_ChildSyo          = new int[9];
    		int     L_ChildKk           = 0;
    		int[]   L_ChildUse          = new int[6];
    		int     L_ChildInp          = 0;
    		// 税額計算用の変数
    		decimal L_ValuMain          = default(decimal);
    		decimal L_ValuZei           = default(decimal);
    		// 子仕訳に付く貸借のコード関係の変数(ダミーは除く)
    		string  L_lvOyaKicd         = null;
    		string  L_lvOyaKicdAite     = null;
    		string  L_lvOyaBcod         = null;
    		string  L_lvOyaTrcd         = null;
    		string  L_lvOyaEcod         = null;
    		string  L_lvOyaKjcd         = null;
    		string  L_lvOyaKscd         = null;
    		string  L_lvOyaPjcd         = null;
    		string  L_lvOyaSgcd         = null;
    		string  L_lvOyaZrit         = null;
    		string  L_lvOyaZkbn         = null;
    		string  L_lvOyaZgyo         = null;
    		string  L_lvOyaZsre         = null;
    		int     L_lvOyaKeigen       = 0;    		// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
// Ver02.26.01 インボイス対応 --->
            short   L_lvOyaUrizeikeisan = 0;
            short   L_lvOyaMenzeikeika  = 0;
// <--- Ver02.26.01 インボイス対応

    		// ユニバーサルフィールドと摘要の未入力チェック用
    		string  L_lvOyaDmy1         = null;
    		string  L_lvOyaDmy2         = null;
    		string  L_lvOyaDmy3         = null;
    		string  L_lvOyaTno          = null;
    		// 外貨税額を算出する際のべき乗値
    		double  L_GaiCalq           = 0;
    		// 分離する際の相手科目が外貨かどうか
    		bool    L_bAiteGaika        = false;
    		// 分離する際の自分科目が外貨かどうか
    		bool    L_bJibnGaika        = false;
    
    		double  L_GValuMain         = 0;
    		double  L_GValuZei          = 0;
            #endregion

            if (H_BKbn == "0")
            {
    			return true;    
    		}

    		// 初期化
    		H_InpErr = 0;
    		H_RegErr = 0;
    
    		H_ZDataBunri = new structZDATA();
    
    		// 外貨税額を算出する際のべき乗値をセット
    		if (H_PnGaiSiwake > 0)
            {
    			L_GaiCalq = Math.Pow(10, H_PnGaiSyosu);
    		}
            else
            {
    			L_GaiCalq = 1;
            }

            #region 共通値のセット
            // 貸借無関係の値セット
            H_ZDataBunri.Kesn = H_ZData.Kesn;
    		H_ZDataBunri.Dkei = H_ZData.Dkei;
    		H_ZDataBunri.Dseq = H_ZData.Dseq;
    		H_ZDataBunri.Pseq = H_ZData.Pseq;
    		// 分離区分は子仕訳の場合「2」固定
    		H_ZDataBunri.Pflg = 2;
    		H_ZDataBunri.Grno = H_ZData.Grno;
    		H_ZDataBunri.Dcpg = H_ZData.Dcpg;
// Ver02.26.02 振替作成時の消費税仕訳貸借フラグ不具合対応
            // .Dfuk = H_ZData.Dfuk
            if (H_BKbn == "2") {                    // 振替作成
                H_ZDataBunri.Dflg = 0;
            } else {                                // 自動分離・税作成
                H_ZDataBunri.Dflg = H_ZData.Dflg;
            }
// Ver02.26.02 振替作成時の消費税仕訳貸借フラグ不具合対応
            // .Ijpt = H_ZData.Ijpt
            // .Zkvl = H_ZData.Zkvl
            H_ZDataBunri.Sexp = H_ZData.Sexp;
    		H_ZDataBunri.Dkec = H_ZData.Dkec;
    		H_ZDataBunri.Pcsw = H_ZData.Pcsw;
    		H_ZDataBunri.Upsw = H_ZData.Upsw;
    		H_ZDataBunri.Zrsw = H_ZData.Zrsw;
    		H_ZDataBunri.Gpcd = H_ZData.Gpcd;
    		H_ZDataBunri.Delf = H_ZData.Delf;
    		H_ZDataBunri.Cprt = H_ZData.Cprt;
    		// .Dprt = H_ZData.Dprt
    		H_ZDataBunri.Fusr = H_ZData.Fusr;
    		H_ZDataBunri.Fway = H_ZData.Fway;
    		H_ZDataBunri.Fmod = H_ZData.Fmod;
    		H_ZDataBunri.Ftim = H_ZData.Ftim;
    		H_ZDataBunri.Lusr = H_ZData.Lusr;
    		H_ZDataBunri.Lway = H_ZData.Lway;
    		H_ZDataBunri.Lmod = H_ZData.Lmod;
    		H_ZDataBunri.Ltim = H_ZData.Ltim;
    		// .Kday = H_ZData.Kday
    		// .Fprt = H_ZData.Fprt
    		// .Sgno = H_ZData.Sgno
    		// .Hjno = H_ZData.Hjno
    		// .Sflg = H_ZData.Sflg
    		// .Dymd = H_ZData.Dymd
    		// .Dcno = H_ZData.Dcno
    		// .Duno = H_ZData.Duno
    		H_ZDataBunri.Dlin = H_ZData.Dlin;
    		H_ZDataBunri.Bkbn = H_ZData.Bkbn;
    		H_ZDataBunri.Ifri = H_ZData.Ifri;
    		// 対価フラグ
    		H_ZDataBunri.Tflg = 0;
    		// 対価金額
    		H_ZDataBunri.Exvl = 0;
    		// 税込金額
    		H_ZDataBunri.Zkvl = H_ZData.Zkvl;
    		H_ZDataBunri.Rtky = H_ZData.Rtky;
    		H_ZDataBunri.Rtno = H_ZData.Rtno;
    		H_ZDataBunri.Stno = H_ZData.Stno;
    		H_ZDataBunri.Stky = H_ZData.Stky;
    		H_ZDataBunri.Fsen = H_ZData.Fsen;
    		// .Kusr = H_ZData.Kusr
    		// .Kymd = H_ZData.Kymd
    		// .Kbmn = H_ZData.Kbmn
    		H_ZDataBunri.Idm4 = 0;

    		// ODC履歴
    		H_ZDataBunri.Rdm4    = null;
    		H_ZDataBunri.Rdm5    = null;
    		H_ZDataBunri.Rdm6    = null;
    		H_ZDataBunri.Rdm7    = null;
    		H_ZDataBunri.Rdm8    = null;
    		H_ZDataBunri.Rdm9    = null;
    		H_ZDataBunri.Rdm10   = null;
    		H_ZDataBunri.Rdm11   = null;
    		H_ZDataBunri.Rdm12   = null;
    		H_ZDataBunri.Rdm13   = null;
    		H_ZDataBunri.Rdm14   = null;
    		H_ZDataBunri.Rdm15   = null;
    		H_ZDataBunri.Rdm16   = null;
    		H_ZDataBunri.Rdm17   = null;
    		H_ZDataBunri.Rdm18   = null;
    		H_ZDataBunri.Rdm19   = null;
    		H_ZDataBunri.Rdm20   = null;
    		H_ZDataBunri.Sdm4    = null;
    		H_ZDataBunri.Sdm5    = null;
    		H_ZDataBunri.Sdm6    = null;
    		H_ZDataBunri.Sdm7    = null;
    		H_ZDataBunri.Sdm8    = null;
    		H_ZDataBunri.Sdm9    = null;
    		H_ZDataBunri.Sdm10   = null;
    		H_ZDataBunri.Sdm11   = null;
    		H_ZDataBunri.Sdm12   = null;
    		H_ZDataBunri.Sdm13   = null;
    		H_ZDataBunri.Sdm14   = null;
    		H_ZDataBunri.Sdm15   = null;
    		H_ZDataBunri.Sdm16   = null;
    		H_ZDataBunri.Sdm17   = null;
    		H_ZDataBunri.Sdm18   = null;
    		H_ZDataBunri.Sdm19   = null;
    		H_ZDataBunri.Sdm20   = null;
    		H_ZDataBunri.Rsseqai = "0";
    		H_ZDataBunri.Ssseqai = "0";
    		H_ZDataBunri.Swgflg  = 0;
    		H_ZDataBunri.Swiflg  = 0;
    		H_ZDataBunri.Tekiflg = 0;
    		H_ZDataBunri.Hflg    = 0;
    		// *-リンク情報
    		H_ZDataBunri.LNO     = 0;
            // -*
            #endregion

            #region 元からコメントアウト
            // '外貨DB対応時にダミー項目に値をセット
    		// If P_b_GaikaTable_Flg = True Then
    		//     '.Ndm1 = 0
    		//     '.Ndm2 = 0
    		//     .Rdm14 = "0"
    		//     .Rdm15 = "0"
    		//     .Rdm16 = "0"
    		//     .Rdm17 = "0"
    		//     .Sdm14 = "0"
    		//     .Sdm15 = "0"
    		//     .Sdm16 = "0"
    		//     .Sdm17 = "0"
    		//     '旧関数使用&外貨DB対応時は外貨項目に初期値をセット
    		//     If P_b_GaikaFC = False Then
    		//         .Rhei_cd = ""
    		//         .Shei_cd = ""
    		//         .Rate = 0
    		//         .Gaika = 0
    		//         .Gexvl = 0
    		//         .Gzkvl = 0
    		//     End If
            // End If
            #endregion

            #region 貸借別値のセット
            #region 借方を分離
            if (H_KrKs == 0)
            {
    			L_lvOyaKicd     = H_ZData.Rkmk;
    			L_lvOyaKicdAite = H_ZData.Skmk;
    			L_lvOyaBcod     = H_ZData.Rbmn;
    			L_lvOyaTrcd     = H_ZData.Rtor;
    			L_lvOyaEcod     = H_ZData.Reda;
    			L_lvOyaKjcd     = H_ZData.Rkoj;
    			L_lvOyaKscd     = H_ZData.Rkos;
    			L_lvOyaPjcd     = H_ZData.Rprj;
    			L_lvOyaSgcd     = H_ZData.Rseg;
    			L_lvOyaZrit     = H_ZData.Rrit.ToString();
    			L_lvOyaZkbn     = H_ZData.Rzkb.ToString();
    			L_lvOyaZgyo     = H_ZData.Rgyo.ToString();
    			L_lvOyaZsre     = H_ZData.Rsre.ToString();
    			L_lvOyaKeigen   = Convert.ToInt32(H_ZData.Rkeigen);             // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
// Ver02.26.01 インボイス対応 --->
                L_lvOyaUrizeikeisan = H_ZData.Rurizeikeisan;
                L_lvOyaMenzeikeika  = H_ZData.Rmenzeikeika;
// <--- Ver02.26.01 インボイス対応

    			L_lvOyaDmy1     = "";
    			L_lvOyaDmy2     = "";
    			L_lvOyaDmy3     = "";

    			if (((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1FLG]) == 2) || (Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1FLG]) == 3)))
                {
    				L_lvOyaDmy1 = H_ZData.Rdm1;
    			}
    			if (((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2FLG]) == 2) || (Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2FLG]) == 3)))
                {
    				L_lvOyaDmy2 = H_ZData.Rdm2;
    			}
    			if (((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D3FLG]) == 2) || (Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D3FLG]) == 3)))
                {
    				L_lvOyaDmy3 = H_ZData.Rdm3;
    			}
    			L_lvOyaTno = H_ZData.Rtno.ToString();
    
    			// 外貨対応
    			if (H_PnGaiSiwake > 0)
                {
    				// 振替作成
    				if (H_BKbn == "2")
                    {
    					// 自分科目（借方）が外貨の場合のみ必要な項目をコピー
                        if (!string.IsNullOrEmpty(H_ZData.Rhei_cd))
                        {
                            // 貸方通貨コード（振替作成の場合は、貸借逆転でセット）
                            H_ZDataBunri.Shei_cd = H_ZData.Rhei_cd;
                            // レート
                            H_ZDataBunri.Rate = H_ZData.Rate;
                            // 自分自身が外貨科目の場合のフラグ
                            L_bJibnGaika = true;
                        }   					
    				}
                    // 自動分離・税作成
                    else
                    {
    					// 相手科目（貸方）が外貨の場合のみ必要な項目をコピー
    					if (!string.IsNullOrEmpty(H_ZData.Shei_cd)) {
    						// 貸方通貨コード
    						H_ZDataBunri.Shei_cd = H_ZData.Shei_cd;
    						// レート
    						H_ZDataBunri.Rate = H_ZData.Rate;
    						// 自分自身が外貨科目の場合のフラグ
    						L_bAiteGaika = true;
    					}
    
    				}
    			}

            }
            #endregion
            #region 貸方を分離
            else
            {    			
    			L_lvOyaKicd     = H_ZData.Skmk;
    			L_lvOyaKicdAite = H_ZData.Rkmk;
    			L_lvOyaBcod     = H_ZData.Sbmn;
    			L_lvOyaTrcd     = H_ZData.Stor;
    			L_lvOyaEcod     = H_ZData.Seda;
    			L_lvOyaKjcd     = H_ZData.Skoj;
    			L_lvOyaKscd     = H_ZData.Skos;
    			L_lvOyaPjcd     = H_ZData.Sprj;
    			L_lvOyaSgcd     = H_ZData.Sseg;
    			L_lvOyaZrit     = H_ZData.Srit.ToString();
    			L_lvOyaZkbn     = H_ZData.Szkb.ToString();
    			L_lvOyaZgyo     = H_ZData.Sgyo.ToString();
    			L_lvOyaZsre     = H_ZData.Ssre.ToString();
    			L_lvOyaKeigen   = Convert.ToInt32(H_ZData.Skeigen);             // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応

// Ver02.26.01 インボイス対応 --->
                L_lvOyaUrizeikeisan = H_ZData.Surizeikeisan;
                L_lvOyaMenzeikeika  = H_ZData.Smenzeikeika;
// <--- Ver02.26.01 インボイス対応

    			L_lvOyaDmy1 = "";
    			L_lvOyaDmy2 = "";
    			L_lvOyaDmy3 = "";
    			// de2-7931⑤ インポート処理で分離仕訳の作成で処理期の設定を使用するように修正
    			if (((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1FLG]) == 2) || (Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1FLG]) == 3)))
                {
    				L_lvOyaDmy1 = H_ZData.Sdm1;
    			}
    			if (((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2FLG]) == 2) || (Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2FLG]) == 3)))
                {
    				L_lvOyaDmy2 = H_ZData.Sdm2;
    			}
    			if (((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D3FLG]) == 2) || (Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D3FLG]) == 3)))
                {
    				L_lvOyaDmy3 = H_ZData.Sdm3;
    			}
    			L_lvOyaTno = H_ZData.Stno.ToString();
    
    			// 外貨対応
    			if (H_PnGaiSiwake > 0)
                {
    				// 振替作成
    				if (H_BKbn == "2")
                    {
    					// 自分科目（貸方）が外貨の場合のみ必要な項目をコピー
    					if (!string.IsNullOrEmpty(H_ZData.Shei_cd))
                        {
    						// 借方通貨コード（振替作成の場合は、貸借逆転でセット）
    						H_ZDataBunri.Rhei_cd = H_ZData.Shei_cd;
    						// レート
    						H_ZDataBunri.Rate = H_ZData.Rate;
    						// 自分自身が外貨科目の場合のフラグ
    						L_bJibnGaika = true;
    					}    					
    				}
                    // 自動分離・税作成
                    else
                    {
    					// 相手科目（借方）が外貨の場合のみ必要な項目をコピー
    					if (!string.IsNullOrEmpty(H_ZData.Rhei_cd))
                        {
    						// 貸方通貨コード
    						H_ZDataBunri.Rhei_cd = H_ZData.Rhei_cd;
    						// レート
    						H_ZDataBunri.Rate = H_ZData.Rate;
    						// 自分自身が外貨科目の場合のフラグ
    						L_bAiteGaika = true;
    					}    
    				}
    			}
            }
            #endregion
            #endregion

            #region 子仕訳(振替作成・自動分離・税作成)データセット
            if (H_BKbn == "2")
            {
                #region 振替作成
                // 科目（科目が存在しなければ、以下のエラーは対処しない）
    			SvolumGetBnrKmk_FNC(H_drSvolum, H_SVolumKm, H_Sy0, Convert.ToInt32(L_lvOyaZkbn), ref L_lvChildKicd, ref L_ChildSyo, ref L_ChildKk, ref L_ChildUse, ref L_ChildInp);
    			if (!string.IsNullOrEmpty(L_lvChildKicd))
                {
                    #region 借方
                    if (H_KrKs == 0)
                    {
    					// 借方科目
    					H_ZDataBunri.Rkmk = L_lvChildKicd;
    					// 借方部門
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_BMFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaBcod)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW1]) == 1)) {
    						H_ZDataBunri.Rbmn = L_lvOyaBcod;
    					}
    					// 借方取引先
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_TRFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaTrcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW2]) == 1)) {
    						H_ZDataBunri.Rtor = L_lvOyaTrcd;
    					}
    					// 借方枝番
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_EDFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaEcod)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW3]) == 1)) {
    						H_ZDataBunri.Reda = L_lvOyaEcod;
    					}
    					// 借方プロジェクト
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_PJFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaPjcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW4]) == 1)) {
    						H_ZDataBunri.Rprj = L_lvOyaPjcd;
    					}
    					// 借方セグメント
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_SGFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaSgcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW5]) == 1)) {
    						H_ZDataBunri.Rseg = L_lvOyaSgcd;
    					}
    					// 借方工事
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_KJFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaKjcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW6]) == 1)) {
    						H_ZDataBunri.Rkoj = L_lvOyaKjcd;
    					}
    					// 借方工種
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_KSFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaKscd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW7]) == 1)) {
    						H_ZDataBunri.Rkos = L_lvOyaKscd;
    					}
    					// 借方ユニバーサル１
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1FLG]) != 0 && !string.IsNullOrEmpty(L_lvOyaDmy1) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW8]) == 1)) {
    						H_ZDataBunri.Rdm1 = L_lvOyaDmy1;
    					}
    					// 借方ユニバーサル２
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2FLG]) != 0 && !string.IsNullOrEmpty(L_lvOyaDmy2) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW9]) == 1)) {
    						H_ZDataBunri.Rdm2 = L_lvOyaDmy2;
    					}
    					// 借方ユニバーサル３
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D3FLG]) != 0 && !string.IsNullOrEmpty(L_lvOyaDmy3) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW10]) == 1)) {
    						H_ZDataBunri.Rdm3 = L_lvOyaDmy3;
    					}
    					// 借方課税区分・税率
    					switch (L_ChildSyo[0]) {
    						case 21:
    							H_ZDataBunri.Rrit          = Convert.ToInt32(L_lvOyaZrit);
    							H_ZDataBunri.Rzkb          = 100;
    							H_ZDataBunri.Rkeigen       = L_lvOyaKeigen.ToString();    	// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = L_lvOyaUrizeikeisan;           // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = L_lvOyaMenzeikeika;            // Ver02.26.01  インボイス対応
    							break;
    						case 22:
    							H_ZDataBunri.Rrit          = Convert.ToInt32(L_lvOyaZrit);
    							H_ZDataBunri.Rzkb          = 100;
    							H_ZDataBunri.Rkeigen       = L_lvOyaKeigen.ToString();    	// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = L_lvOyaUrizeikeisan;           // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = L_lvOyaMenzeikeika;            // Ver02.26.01  インボイス対応
    							break;
    						case 2:
    							H_ZDataBunri.Rrit          = -1;
    							// (NULL)
    							H_ZDataBunri.Rzkb          = 0;
    							H_ZDataBunri.Rkeigen       = "0";						    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    							break;
    						case 3:
    							H_ZDataBunri.Rrit          = -1;
    							// (NULL)
    							H_ZDataBunri.Rzkb          = 0;
    							H_ZDataBunri.Rkeigen       = "0";						    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    							break;
    						case 4:
    							H_ZDataBunri.Rrit          = -1;
    							// (NULL)
    							H_ZDataBunri.Rzkb          = 0;
    							H_ZDataBunri.Rkeigen       = "0";    					    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    							break;
    						case 5:
    							H_ZDataBunri.Rrit          = -1;
    							// (NULL)
    							H_ZDataBunri.Rzkb          = 0;
    							H_ZDataBunri.Rkeigen       = "0";    					    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    							break;
    						case 6:
    							H_ZDataBunri.Rrit          = -1;
    							// (NULL)
    							H_ZDataBunri.Rzkb          = 0;
    							H_ZDataBunri.Rkeigen       = "0";    					    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    							break;
    						case 7:
    							H_ZDataBunri.Rrit          = -1;
    							// (NULL)
    							H_ZDataBunri.Rzkb          = 0;
    							H_ZDataBunri.Rkeigen       = "0";    					    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    							break;
    						case 8:
    							H_ZDataBunri.Rrit          = -1;
    							// (NULL)
    							H_ZDataBunri.Rzkb          = 0;
    							H_ZDataBunri.Rkeigen       = "0";    					    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    							break;
    						case 9:
    							H_ZDataBunri.Rrit          = -1;
    							// (NULL)
    							H_ZDataBunri.Rzkb          = 0;
    							H_ZDataBunri.Rkeigen       = "0";    					    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    							break;
    						case 10:
    							H_ZDataBunri.Rrit          = -1;
    							// (NULL)
    							H_ZDataBunri.Rzkb          = 0;  
    							H_ZDataBunri.Rkeigen       = "0";    					    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    							break;
    						default:
    							H_ZDataBunri.Rrit          = -1;
    							// (NULL)
    							H_ZDataBunri.Rzkb          = 100;
    							H_ZDataBunri.Rkeigen       = "0";    					    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    							break;
    					}
    					// 借方業種区分
    					H_ZDataBunri.Rgyo = 0;
    					// 借方仕入区分
    					H_ZDataBunri.Rsre = 0;
    
    					// ------ 相手側 -------
    					// 部門～ダミーまで
    					// *-01.04.01
    					H_ZDataBunri.Sbmn          = H_ZData.Rbmn;
    					H_ZDataBunri.Stor          = H_ZData.Rtor;
    					H_ZDataBunri.Skmk          = H_ZData.Rkmk;
    					H_ZDataBunri.Seda          = H_ZData.Reda;
    					H_ZDataBunri.Skoj          = H_ZData.Rkoj;
    					H_ZDataBunri.Skos          = H_ZData.Rkos;
    					H_ZDataBunri.Sprj          = H_ZData.Rprj;
    					H_ZDataBunri.Sseg          = H_ZData.Rseg;
    					H_ZDataBunri.Sdm1          = H_ZData.Rdm1;
    					H_ZDataBunri.Sdm2          = H_ZData.Rdm2;
    					H_ZDataBunri.Sdm3          = H_ZData.Rdm3;
    					H_ZDataBunri.Srit          = H_ZData.Rrit;
    					H_ZDataBunri.Szkb          = H_ZData.Rzkb;
    					H_ZDataBunri.Sgyo          = H_ZData.Rgyo;
    					H_ZDataBunri.Ssre          = H_ZData.Rsre;
    					H_ZDataBunri.Skeigen       = H_ZData.Rkeigen;    			        // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                        H_ZDataBunri.Rurizeikeisan = H_ZData.Rurizeikeisan;                 // Ver02.26.01  インボイス対応
                        H_ZDataBunri.Rmenzeikeika  = H_ZData.Rmenzeikeika;                  // Ver02.26.01  インボイス対応
    					H_ZDataBunri.Stno          = H_ZData.Rtno;
    					H_ZDataBunri.Stky          = H_ZData.Rtky;
// Ver02.26.01 インボイス対応 --->
//   					if (H_Lno == 1) {
                        if (isNewLayout == true) {  
    						H_ZDataBunri.Sdm4  = H_ZData.Rdm4;
    						H_ZDataBunri.Sdm5  = H_ZData.Rdm5;
    						H_ZDataBunri.Sdm6  = H_ZData.Rdm6;
    						H_ZDataBunri.Sdm7  = H_ZData.Rdm7;
    						H_ZDataBunri.Sdm8  = H_ZData.Rdm8;
    						H_ZDataBunri.Sdm9  = H_ZData.Rdm9;
    						H_ZDataBunri.Sdm10 = H_ZData.Rdm10;
    						H_ZDataBunri.Sdm11 = H_ZData.Rdm11;
    						H_ZDataBunri.Sdm12 = H_ZData.Rdm12;
    						H_ZDataBunri.Sdm13 = H_ZData.Rdm13;
    						H_ZDataBunri.Sdm14 = H_ZData.Rdm14;
    						H_ZDataBunri.Sdm15 = H_ZData.Rdm15;
    						H_ZDataBunri.Sdm16 = H_ZData.Rdm16;
    						H_ZDataBunri.Sdm17 = H_ZData.Rdm17;
    						H_ZDataBunri.Sdm18 = H_ZData.Rdm18;
    						H_ZDataBunri.Sdm19 = H_ZData.Rdm19;
    						H_ZDataBunri.Sdm20 = H_ZData.Rdm20;
    					}
// <--- Ver02.26.01 インボイス対応
    					// -*01.04.01
    					// 税率
    					H_ZDataBunri.Srit = -1;
    					// 課税区分
    					H_ZDataBunri.Szkb = 0;
    					// 業種区分
    					H_ZDataBunri.Sgyo = 0;
    					// 仕入区分
    					H_ZDataBunri.Ssre = 0;
    					H_ZDataBunri.Skeigen = "0";	    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                        // 売上税額計算方式
                        H_ZDataBunri.Surizeikeisan = 0; // Ver02.26.01  インボイス対応
                        // 仕入税額控除経過措置割合                        
                        H_ZDataBunri.Smenzeikeika  = 0; // Ver02.26.01  インボイス対応
    					// 税対象科目関係
    					if (L_ChildSyo[0] == 21 | L_ChildSyo[0] == 22) {
    						H_ZDataBunri.Zkmk          = L_lvOyaKicd;
    						H_ZDataBunri.Zrit          = Convert.ToInt32(L_lvOyaZrit);
    						H_ZDataBunri.Zzkb          = Convert.ToInt16(L_lvOyaZkbn);
    						H_ZDataBunri.Zgyo          = Convert.ToInt16(L_lvOyaZgyo);
    						H_ZDataBunri.Zsre          = Convert.ToInt16(L_lvOyaZsre);
    						H_ZDataBunri.Zkeigen       = L_lvOyaKeigen.ToString();	    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                            H_ZDataBunri.Zurizeikeisan = L_lvOyaUrizeikeisan;           // Ver02.26.01  インボイス対応
                            H_ZDataBunri.Zmenzeikeika  = L_lvOyaMenzeikeika;            // Ver02.26.01  インボイス対応
    					} else {
    						H_ZDataBunri.Zkmk          = "0";
    						H_ZDataBunri.Zrit          = -1;
    						H_ZDataBunri.Zzkb          = 100;
    						H_ZDataBunri.Zgyo          = 0;
    						H_ZDataBunri.Zsre          = 0;
    						H_ZDataBunri.Zkeigen       = "0";         					// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                            H_ZDataBunri.Zurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                            H_ZDataBunri.Zmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    					}
                        
// 2021/09/01 Ver02.22.12 親仕訳の支払日が自動作成される子仕訳の支払日に反映しない対応 --->
//                        // 支払区分関係
//                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "0", H_ZData.Skbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1) {
//    						H_ZDataBunri.Symd = H_ZData.Symd;
//    						H_ZDataBunri.Skbn = H_ZData.Skbn;
//    						H_ZDataBunri.Skiz = H_ZData.Skiz;
//     					  } else {
//    						H_ZDataBunri.Symd = 0;
//    						H_ZDataBunri.Skbn = 0;
//    						H_ZDataBunri.Skiz = 0;
//    					  }
//      2021/09/03 Ver02.22.12.01 期日可否対応 --->
                        // 支払日・支払期日
                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "0", H_ZData.Skbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1) {
                            H_ZDataBunri.Symd = H_ZData.Symd;
                            H_ZDataBunri.Skiz = H_ZData.Skiz;
                        } else {
                            H_ZDataBunri.Symd = 0;
                            H_ZDataBunri.Skiz = 0;
                        }
                        // 支払区分
                        if (CheckPAYWAY_FNC(H_Con, "0", H_ZData.Skbn.ToString()) == 1) {
                            H_ZDataBunri.Skbn = H_ZData.Skbn;
//                          H_ZDataBunri.Skiz = H_ZData.Skiz;
                        } else {
                            H_ZDataBunri.Skbn = 0;
//                          H_ZDataBunri.Skiz = 0;
                        }
//      <--- 2021/09/03 Ver02.22.12.01 期日可否対応
// <--- 2021/09/01 Ver02.22.12 親仕訳の支払日が自動作成される子仕訳の支払日に反映しない対応

// 2021/09/03 Ver02.22.12.01 期日可否対応 --->
//                        // 入金区分関係
//                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "1", H_ZData.Ukbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1) {
//    						H_ZDataBunri.Uymd = H_ZData.Uymd;
//    						H_ZDataBunri.Ukbn = H_ZData.Ukbn;
//    						H_ZDataBunri.Ukiz = H_ZData.Ukiz;
//    					  } else {
//    						H_ZDataBunri.Uymd = 0;
//    						H_ZDataBunri.Ukbn = 0;
//    						H_ZDataBunri.Ukiz = 0;
//    					  }
                        // 回収日・回収期日
                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "1", H_ZData.Ukbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1)
                        {
                            H_ZDataBunri.Uymd = H_ZData.Uymd;
                            H_ZDataBunri.Ukiz = H_ZData.Ukiz;
                        }
                        else
                        {
                            H_ZDataBunri.Uymd = 0;
                            H_ZDataBunri.Ukiz = 0;
                        }
                        // 入金区分
                        if (CheckPAYWAY_FNC(H_Con, "1", H_ZData.Ukbn.ToString()) == 1) {
                            H_ZDataBunri.Ukbn = H_ZData.Ukbn;
                        } else {
                            H_ZDataBunri.Ukbn = 0;

                        }
// <--- 2021/09/03 Ver02.22.12.01 期日可否対応

                        // 店券フラグ
                        H_ZDataBunri.Sten = 0;
    					// 金額
                        decimal RdecL_GValuMain = 0;
                        decimal RdecL_GValuZei  = 0;
                        RdecL_GValuMain = Convert.ToDecimal(L_GValuMain);
                        RdecL_GValuZei  = Convert.ToDecimal(L_GValuZei);

    					if (H_ZData.Bkbn == 2 && ChkTaika_FNC(H_SY02, Convert.ToInt16(H_BKbn), H_ZData.Rzkb) == true)
                        {
// Ver02.26.01 インボイス対応 --->
//    						SvolumZeiCalq_SUB(H_ZData.Exvl, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), ref L_ValuMain, ref L_ValuZei);
                            SvolumZeiCalq_SUB(H_ZData.Exvl, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), 
                                              Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref L_ValuMain, ref L_ValuZei);
// <--- Ver02.26.01 インボイス対応

    						H_ZDataBunri.Valu = L_ValuZei;
    						H_ValuOya         = H_ZData.Valu.ToString();
    						H_ValuZei         = H_ZData.Valu.ToString();
    
    						if (H_PnGaiSiwake > 0) {
// Ver02.26.01 インボイス対応 --->
//    							SvolumZeiCalq_SUB(H_ZData.Gexvl * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),                                                                     
//                                    ref RdecL_GValuMain, ref RdecL_GValuZei);
                                SvolumZeiCalq_SUB(H_ZData.Gexvl * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),                                                                     
                                                  Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref RdecL_GValuMain, ref RdecL_GValuZei);
// <--- Ver02.26.01 インボイス対応

    							// 税額計算時に小数点桁数分べき乗した値をもとに戻す
    							L_GValuMain = L_GValuMain / L_GaiCalq;
    							L_GValuZei  = L_GValuZei  / L_GaiCalq;
    							// 自分が外貨科目の場合のみ子仕訳の外貨金額をセット
    							if (L_bJibnGaika == true) {
    								H_ZDataBunri.Gaika = RdecL_GValuZei;
    							}
    							H_GValutai = RdecL_GValuMain;
    							H_GValuZei = RdecL_GValuMain;
    						}
    					} else {
// Ver02.26.01 インボイス対応 --->
//    						SvolumZeiCalq_SUB(H_ZData.Valu, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), ref L_ValuMain, ref L_ValuZei);
                            SvolumZeiCalq_SUB(H_ZData.Valu, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), 
                                              Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref L_ValuMain, ref L_ValuZei);
// <--- Ver02.26.01 インボイス対応

    						H_ZDataBunri.Valu = L_ValuZei;
    						H_ValuOya         = H_ZData.Valu.ToString();
    						H_ValuZei         = H_ZData.Valu.ToString();
    
    						if (H_PnGaiSiwake > 0) {
// Ver02.26.01 インボイス対応 --->
//    							SvolumZeiCalq_SUB(H_ZData.Gaika * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
//                                                ref RdecL_GValuMain, ref RdecL_GValuZei);
                                SvolumZeiCalq_SUB(H_ZData.Gaika * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
                                                  Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref RdecL_GValuMain, ref RdecL_GValuZei);
// <--- Ver02.26.01 インボイス対応

    							// 税額計算時に小数点桁数分べき乗した値をもとに戻す
    							L_GValuMain = L_GValuMain / L_GaiCalq;
    							L_GValuZei  = L_GValuZei  / L_GaiCalq;
    							// 自分が外貨科目の場合のみ子仕訳の外貨金額をセット
    							if (L_bJibnGaika == true)
                                {
    								H_ZDataBunri.Gaika = RdecL_GValuZei;
    							}
    							H_GValuOya = RdecL_GValuMain;
    							H_GValuZei = RdecL_GValuMain;
    						}
    					}
    
    					// 消込コード対応
    					if (!string.IsNullOrEmpty(H_ZData.Dkec))
                        {
    						if (H_PnUseDkec == 0 || H_PnUseDkec == 2)
                            {
    							H_ZDataBunri.Dkec = H_ZData.Dkec;
    						}
    					}
                    }
                    #endregion
                    #region 貸方
                    else
                    {
    					// 貸方科目
    					H_ZDataBunri.Skmk = L_lvChildKicd;
    					// 貸方部門
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_BMFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaBcod)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW1]) == 1)) {
    						H_ZDataBunri.Sbmn = L_lvOyaBcod;
    					}
    					// 貸方取引先
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_TRFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaTrcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW2]) == 1)) {
    						H_ZDataBunri.Stor = L_lvOyaTrcd;
    					}
    					// 貸方枝番
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_EDFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaEcod)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW3]) == 1)) {
    						H_ZDataBunri.Seda = L_lvOyaEcod;
    					}
    					// 貸方プロジェクト
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_PJFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaPjcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW4]) == 1)) {
    						H_ZDataBunri.Sprj = L_lvOyaPjcd;
    					}
    					// 貸方セグメント
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_SGFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaSgcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW5]) == 1)) {
    						H_ZDataBunri.Sseg = L_lvOyaSgcd;
    					}
    					// 貸方工事
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_KJFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaKjcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW6]) == 1)) {
    						H_ZDataBunri.Skoj = L_lvOyaKjcd;
    					}
    					// 貸方工種
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_KSFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaKscd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW7]) == 1)) {
    						H_ZDataBunri.Skos = L_lvOyaKscd;
    					}
    					// 貸方ユニバーサル１
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1FLG]) != 0 && !string.IsNullOrEmpty(L_lvOyaDmy1) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW8]) == 1)) {
    						H_ZDataBunri.Sdm1 = L_lvOyaDmy1;
    					}
    					// 貸方ユニバーサル２
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2FLG]) != 0 && !string.IsNullOrEmpty(L_lvOyaDmy2) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW9]) == 1)) {
    						H_ZDataBunri.Sdm2 = L_lvOyaDmy2;
    					}
    					// 貸方ユニバーサル３
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D3FLG]) != 0 && !string.IsNullOrEmpty(L_lvOyaDmy3) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW10]) == 1)) {
    						H_ZDataBunri.Sdm3 = L_lvOyaDmy3;
    					}
    					// 貸方課税区分・税率
    					switch (L_ChildSyo[0]) {
    						case 21:
                            case 22:
    							H_ZDataBunri.Srit          = Convert.ToInt32(L_lvOyaZrit);
    							H_ZDataBunri.Szkb          = 100;
    							H_ZDataBunri.Skeigen       = L_lvOyaKeigen.ToString();    						// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Surizeikeisan = L_lvOyaUrizeikeisan;                               // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Smenzeikeika  = L_lvOyaMenzeikeika;                                // Ver02.26.01  インボイス対応
    							break;
    						case  2:
                            case  3:
                            case  4:
                            case  5:
                            case  6:
                            case  7:
                            case  8:
                            case  9:
                            case 10:
                            default:
    							H_ZDataBunri.Srit          = -1;
    							// (NULL)
    							H_ZDataBunri.Szkb          = 0;
    							H_ZDataBunri.Skeigen       = "0";    							                // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Surizeikeisan = 0;                                                 // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Smenzeikeika  = 0;                                                 // Ver02.26.01  インボイス対応
    							break;
                            #region 同じなのでcase文をまとめる(コメントアウト) Ver02.26.01
////                          case 3:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 4:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 5:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 6:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 7:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 8:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 9:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 10:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						default:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 100;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
                                #endregion
                        }
                        // 借方業種区分
                        H_ZDataBunri.Rgyo = 0;
    					// 借方仕入区分
    					H_ZDataBunri.Rsre = 0;
    
    					// ------ 相手側 -------
    					// 部門～ダミーまで
    					// *-01.04.01
    					// (貸方→借方)
    					H_ZDataBunri.Rbmn          = H_ZData.Sbmn;
    					H_ZDataBunri.Rtor          = H_ZData.Stor;
    					H_ZDataBunri.Rkmk          = H_ZData.Skmk;
    					H_ZDataBunri.Reda          = H_ZData.Seda;
    					H_ZDataBunri.Rkoj          = H_ZData.Skoj;
    					H_ZDataBunri.Rkos          = H_ZData.Skos;
    					H_ZDataBunri.Rprj          = H_ZData.Sprj;
    					H_ZDataBunri.Rseg          = H_ZData.Sseg;
    					H_ZDataBunri.Rdm1          = H_ZData.Sdm1;
    					H_ZDataBunri.Rdm2          = H_ZData.Sdm2;
    					H_ZDataBunri.Rdm3          = H_ZData.Sdm3;
    					H_ZDataBunri.Rrit          = H_ZData.Srit;
    					H_ZDataBunri.Rzkb          = H_ZData.Szkb;
    					H_ZDataBunri.Rgyo          = H_ZData.Sgyo;
    					H_ZDataBunri.Rsre          = H_ZData.Ssre;
    					H_ZDataBunri.Rkeigen       = H_ZData.Skeigen;           // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                        H_ZDataBunri.Rurizeikeisan = H_ZData.Surizeikeisan;     // Ver02.26.01  インボイス対応
                        H_ZDataBunri.Rmenzeikeika  = H_ZData.Smenzeikeika;      // Ver02.26.01  インボイス対応
    					H_ZDataBunri.Rtno          = H_ZData.Stno;
    					H_ZDataBunri.Rtky          = H_ZData.Stky;
// Ver02.26.01 インボイス対応 --->
//    					if (H_Lno == 1)
                        if (isNewLayout == true)
// <--- Ver02.26.01 インボイス対応
                        {
    						H_ZDataBunri.Rdm4  = H_ZData.Sdm4;
    						H_ZDataBunri.Rdm5  = H_ZData.Sdm5;
    						H_ZDataBunri.Rdm6  = H_ZData.Sdm6;
    						H_ZDataBunri.Rdm7  = H_ZData.Sdm7;
    						H_ZDataBunri.Rdm8  = H_ZData.Sdm8;
    						H_ZDataBunri.Rdm9  = H_ZData.Sdm9;
    						H_ZDataBunri.Rdm10 = H_ZData.Sdm10;
    						H_ZDataBunri.Rdm11 = H_ZData.Sdm11;
    						H_ZDataBunri.Rdm12 = H_ZData.Sdm12;
    						H_ZDataBunri.Rdm13 = H_ZData.Sdm13;
    						H_ZDataBunri.Rdm14 = H_ZData.Sdm14;
    						H_ZDataBunri.Rdm15 = H_ZData.Sdm15;
    						H_ZDataBunri.Rdm16 = H_ZData.Sdm16;
    						H_ZDataBunri.Rdm17 = H_ZData.Sdm17;
    						H_ZDataBunri.Rdm18 = H_ZData.Sdm18;
    						H_ZDataBunri.Rdm19 = H_ZData.Sdm19;
    						H_ZDataBunri.Rdm20 = H_ZData.Sdm20;
    					}
    					// -*01.04.01
    					// 税率
    					H_ZDataBunri.Rrit          = -1;
    					// 課税区分
    					H_ZDataBunri.Rzkb          = 0;
    					// 業種区分
    					H_ZDataBunri.Rgyo          = 0;
    					// 仕入区分
    					H_ZDataBunri.Rsre          = 0;
                        // 軽減税率区分
    					H_ZDataBunri.Rkeigen       = "0";   // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                        // 売上税額計算方式
                        H_ZDataBunri.Rurizeikeisan = 0;     // Ver02.26.01  インボイス対応
                        // 仕入税額控除経過措置割合
                        H_ZDataBunri.Rmenzeikeika  = 0;     // Ver02.26.01  インボイス対応
    
    					// 税対象科目関係
    					if (L_ChildSyo[0] == 21 || L_ChildSyo[0] == 22) {
    						H_ZDataBunri.Zkmk          = L_lvOyaKicd;
    						H_ZDataBunri.Zrit          = Convert.ToInt32(L_lvOyaZrit);
    						H_ZDataBunri.Zzkb          = Convert.ToInt16(L_lvOyaZkbn);
    						H_ZDataBunri.Zgyo          = Convert.ToInt16(L_lvOyaZgyo);
    						H_ZDataBunri.Zsre          = Convert.ToInt16(L_lvOyaZsre);
    						H_ZDataBunri.Zkeigen       = L_lvOyaKeigen.ToString();    		// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                            H_ZDataBunri.Zurizeikeisan = L_lvOyaUrizeikeisan;               // Ver02.26.01  インボイス対応
                            H_ZDataBunri.Zmenzeikeika  = L_lvOyaMenzeikeika;                // Ver02.26.01  インボイス対応
    					} else {
    						H_ZDataBunri.Zkmk          = "0";
    						H_ZDataBunri.Zrit          = -1;
    						H_ZDataBunri.Zzkb          = 100;
    						H_ZDataBunri.Zgyo          = 0;
    						H_ZDataBunri.Zsre          = 0;
    						H_ZDataBunri.Zkeigen       = "0";    						    // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                            H_ZDataBunri.Zurizeikeisan = 0;                                 // Ver02.26.01  インボイス対応
                            H_ZDataBunri.Zmenzeikeika  = 0;                                 // Ver02.26.01  インボイス対応
    					}

// 2021/09/01 Ver02.22.12 親仕訳の支払日が自動作成される子仕訳の支払日に反映しない対応 --->
//                        // 支払区分関係
//                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "0", H_ZData.Skbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1)
//                        {
//    						H_ZDataBunri.Symd = H_ZData.Symd;
//    						H_ZDataBunri.Skbn = H_ZData.Skbn;
//    						H_ZDataBunri.Skiz = H_ZData.Skiz;
//    					  } else {
//    						H_ZDataBunri.Symd = 0;
//    						H_ZDataBunri.Skbn = 0;
//    						H_ZDataBunri.Skiz = 0;
//    					  }
//      2021/09/03 Ver02.22.12.01 期日可否対応 --->
                        // 支払日・支払期日
                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "0", H_ZData.Skbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1) {
                            H_ZDataBunri.Symd = H_ZData.Symd;
                            H_ZDataBunri.Skiz = H_ZData.Skiz;
                        } else {
                            H_ZDataBunri.Symd = 0;
                            H_ZDataBunri.Skiz = 0;
                        }
                        // 支払区分
                        if (CheckPAYWAY_FNC(H_Con, "0", H_ZData.Skbn.ToString()) == 1) {
                            H_ZDataBunri.Skbn = H_ZData.Skbn;
//                   H_ZDataBunri.Skiz = H_ZData.Skiz;
                        } else {
                            H_ZDataBunri.Skbn = 0;
//                   H_ZDataBunri.Skiz = 0;
                        }
//      <--- 2021/09/03 Ver02.22.12.01 期日可否対応
// <--- 2021/09/01 Ver02.22.12 親仕訳の支払日が自動作成される子仕訳の支払日に反映しない対応

// 2021/09/03 Ver02.22.12.01 期日可否対応 --->
//                        // 入金区分関係
//                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "1", H_ZData.Ukbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1) {
//    						H_ZDataBunri.Uymd = H_ZData.Uymd;
//    						H_ZDataBunri.Ukbn = H_ZData.Ukbn;
//    						H_ZDataBunri.Ukiz = H_ZData.Ukiz;
//    					  } else {
//    						H_ZDataBunri.Uymd = 0;
//    						H_ZDataBunri.Ukbn = 0;
//    						H_ZDataBunri.Ukiz = 0;
//    					  }
                        // 回収日・回収期日
                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "1", H_ZData.Ukbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1)
                        {
                            H_ZDataBunri.Uymd = H_ZData.Uymd;
                            H_ZDataBunri.Ukiz = H_ZData.Ukiz;
                        }
                        else
                        {
                            H_ZDataBunri.Uymd = 0;
                            H_ZDataBunri.Ukiz = 0;
                        }
                        // 入金区分
                        if (CheckPAYWAY_FNC(H_Con, "1", H_ZData.Ukbn.ToString()) == 1) {
                            H_ZDataBunri.Ukbn = H_ZData.Ukbn;
                        } else {
                            H_ZDataBunri.Ukbn = 0;

                        }
// <--- 2021/09/03 Ver02.22.12.01 期日可否対応

    					// 店券フラグ
    					H_ZDataBunri.Sten = 0;
    					// 金額
                        decimal SdecL_GValuMain = 0;
                        decimal SdecL_GValuZei  = 0;
                        SdecL_GValuMain = Convert.ToDecimal(L_GValuMain);
                        SdecL_GValuZei  = Convert.ToDecimal(L_GValuZei);

    					if (H_BKbn == "2" && ChkTaika_FNC(H_SY02, Convert.ToInt16(H_BKbn), H_ZData.Szkb) == true)
                        {
// Ver02.26.01 インボイス対応 --->
//    						SvolumZeiCalq_SUB(H_ZData.Exvl, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), ref L_ValuMain, ref L_ValuZei);
                            SvolumZeiCalq_SUB(H_ZData.Exvl, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), 
                                              Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref L_ValuMain, ref L_ValuZei);
// <--- Ver02.26.01 インボイス対応

    						H_ZDataBunri.Valu = L_ValuZei;
    						H_ValuOya         = H_ZData.Valu.ToString();
    						H_ValuZei         = H_ZData.Valu.ToString();
    
    						if (H_PnGaiSiwake > 0) {
// Ver02.26.01 インボイス対応 --->
//    							SvolumZeiCalq_SUB(H_ZData.Gexvl * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
//                                                ref SdecL_GValuMain, ref SdecL_GValuZei);
                                SvolumZeiCalq_SUB(H_ZData.Gexvl * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
                                                  Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref SdecL_GValuMain, ref SdecL_GValuZei);
// <--- Ver02.26.01 インボイス対応

    							// 税額計算時に小数点桁数分べき乗した値をもとに戻す
    							L_GValuMain = L_GValuMain / L_GaiCalq;
    							L_GValuZei  = L_GValuZei  / L_GaiCalq;
    							// 自分が外貨科目の場合のみ子仕訳の外貨金額をセット
    							if (L_bJibnGaika == true) {
    								H_ZDataBunri.Gaika = Convert.ToDecimal(L_GValuZei);
    							}
    							H_GValutai = SdecL_GValuMain;
    							H_GValuZei = SdecL_GValuMain;
    						}
    
    					} else {
// Ver02.26.01 インボイス対応 --->
//    						SvolumZeiCalq_SUB(H_ZData.Valu, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), ref L_ValuMain, ref L_ValuZei);
                            SvolumZeiCalq_SUB(H_ZData.Valu, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), 
                                              Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref L_ValuMain, ref L_ValuZei);
// <--- Ver02.26.01 インボイス対応

    						H_ZDataBunri.Valu = L_ValuZei;
    						H_ValuOya = H_ZData.Valu.ToString();
    						H_ValuZei = H_ZData.Valu.ToString();
    						if (H_PnGaiSiwake > 0) {
// Ver02.26.01 インボイス対応 --->
//    							SvolumZeiCalq_SUB(H_ZData.Gaika * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
//                                                ref SdecL_GValuMain, ref SdecL_GValuZei);
                                SvolumZeiCalq_SUB(H_ZData.Gaika * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
                                                  Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref SdecL_GValuMain, ref SdecL_GValuZei);

// <--- Ver02.26.01 インボイス対応

    							// 税額計算時に小数点桁数分べき乗した値をもとに戻す
    							L_GValuMain = L_GValuMain / L_GaiCalq;
    							L_GValuZei = L_GValuZei / L_GaiCalq;
    							// 自分が外貨科目の場合のみ子仕訳の外貨金額をセット
    							if (L_bJibnGaika == true) {
    								H_ZDataBunri.Gaika = Convert.ToDecimal(L_GValuZei);
    							}
    							H_GValuOya = SdecL_GValuMain;
    							H_GValuZei = SdecL_GValuMain;
    						}
    					}
    					// Ver01.23.01 消込コード対応
    					if (!string.IsNullOrEmpty(H_ZData.Dkec)) {
    						if (H_PnUseDkec == 1 || H_PnUseDkec == 2) {
    							H_ZDataBunri.Dkec = H_ZData.Dkec;
    						}
    					}    
    				}
                    #endregion
                }
                #endregion
            }            
            else
            {
                #region 自動分離　+　税作成
                // 科目（科目が存在しなければ、以下のエラーは対処しない）
    			SvolumGetBnrKmk_FNC(H_drSvolum, H_SVolumKm, H_Sy0, Convert.ToInt32(L_lvOyaZkbn), ref L_lvChildKicd, ref L_ChildSyo, ref L_ChildKk, ref L_ChildUse, ref L_ChildInp);
    			if (!string.IsNullOrEmpty(L_lvChildKicd))
                {
                    #region 借方
                    if (H_KrKs == 0)
                    {
    					// 借方科目
    					H_ZDataBunri.Rkmk = L_lvChildKicd;
    					// 借方部門
// ▼ ツルハ様カスタマイズ ▼
//    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_BMFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaBcod)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW1]) == 1)) {
//    						H_ZDataBunri.Rbmn = L_lvOyaBcod;
//    					}
                        if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_BMFLG]) == 1) && (!string.IsNullOrEmpty(P_SYBMNCD)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW1]) == 1))
                        {
                            H_ZDataBunri.Rbmn = P_SYBMNCD;
                        }
// ▲ ツルハ様カスタマイズ ▲
                        // 借方取引先
                        if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_TRFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaTrcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW2]) == 1)) {
    						H_ZDataBunri.Rtor = L_lvOyaTrcd;
    					}
    					// 借方枝番
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_EDFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaEcod)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW3]) == 1)) {
    						H_ZDataBunri.Reda = L_lvOyaEcod;
    					}
    					// 借方プロジェクト
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_PJFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaPjcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW4]) == 1)) {
    						H_ZDataBunri.Rprj = L_lvOyaPjcd;
    					}
    					// 借方セグメント
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_SGFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaSgcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW5]) == 1)) {
    						H_ZDataBunri.Rseg = L_lvOyaSgcd;
    					}
    					// 借方工事
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_KJFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaKjcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW6]) == 1)) {
    						H_ZDataBunri.Rkoj = L_lvOyaKjcd;
    					}
    					// 借方工種
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_KSFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaKscd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW7]) == 1)) {
    						H_ZDataBunri.Rkos = L_lvOyaKscd;
    					}
    					// Ver03.04.02--->
    					// 借方ユニバーサル１
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1FLG]) != 0 && !string.IsNullOrEmpty(L_lvOyaDmy1) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW8]) == 1)) {
    						H_ZDataBunri.Rdm1 = L_lvOyaDmy1;
    					}
    					// 借方ユニバーサル２
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2FLG]) != 0 && !string.IsNullOrEmpty(L_lvOyaDmy2) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW9]) == 1)) {
    						H_ZDataBunri.Rdm2 = L_lvOyaDmy2;
    					}
    					// 借方ユニバーサル３
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D3FLG]) != 0 && !string.IsNullOrEmpty(L_lvOyaDmy3) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW10]) == 1)) {
    						H_ZDataBunri.Rdm3 = L_lvOyaDmy3;
    					}
    					// <---
    					// 借方課税区分・税率
    					switch (L_ChildSyo[0]) {
    						case 21:
                            case 22:
    							H_ZDataBunri.Rrit          = Convert.ToInt32(L_lvOyaZrit);
    							H_ZDataBunri.Rzkb          = 100;
    							H_ZDataBunri.Rkeigen       = L_lvOyaKeigen.ToString();    		// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = L_lvOyaUrizeikeisan;               // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = L_lvOyaMenzeikeika;                // Ver02.26.01  インボイス対応
    							break;
//    						case 22:
//    							H_ZDataBunri.Rrit = Convert.ToInt32(L_lvOyaZrit);
//    							H_ZDataBunri.Rzkb = 100;
//    							H_ZDataBunri.Rkeigen = L_lvOyaKeigen.ToString();
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
    						case  2:
                            case  3:
                            case  4:
                            case  5:
                            case  6:
                            case  7:
                            case  8:
                            case  9:
                            case 10:
                            default:
    							H_ZDataBunri.Rrit          = -1;
    							// (NULL)
    							H_ZDataBunri.Rzkb          = 0;
    							H_ZDataBunri.Rkeigen       = "0";    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Rurizeikeisan = 0;                                 // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Rmenzeikeika  = 0;                                 // Ver02.26.01  インボイス対応
    							break;
                            #region Ver02.26.01 case文をまとめる(コメントアウト)
//    						case 3:
//    							H_ZDataBunri.Rrit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Rzkb = 0;
//    							H_ZDataBunri.Rkeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 4:
//    							H_ZDataBunri.Rrit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Rzkb = 0;
//    							H_ZDataBunri.Rkeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 5:
//    							H_ZDataBunri.Rrit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Rzkb = 0;
//    							H_ZDataBunri.Rkeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 6:
//    							H_ZDataBunri.Rrit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Rzkb = 0;
//    							H_ZDataBunri.Rkeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 7:
//    							H_ZDataBunri.Rrit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Rzkb = 0;
//    							H_ZDataBunri.Rkeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 8:
//    							H_ZDataBunri.Rrit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Rzkb = 0;
//    							H_ZDataBunri.Rkeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 9:
//    							H_ZDataBunri.Rrit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Rzkb = 0;
//    							H_ZDataBunri.Rkeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 10:
//    							H_ZDataBunri.Rrit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Rzkb = 0;
//    							H_ZDataBunri.Rkeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						default:
//    							H_ZDataBunri.Rrit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Rzkb = 100;
//    							H_ZDataBunri.Rkeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
                        #endregion
    					}
                        // 借方摘要
                        H_ZDataBunri.Rtky = H_ZData.Rtky;
                        // 借方摘要コード
                        H_ZDataBunri.Rtno = H_ZData.Rtno;
    					// 借方業種区分
    					H_ZDataBunri.Rgyo = 0;
    					// 借方仕入区分
    					H_ZDataBunri.Rsre = 0;
    
    					// ------ 相手側 -------
    					// 部門～ダミーまで
    					// *-01.04.01
    					H_ZDataBunri.Sbmn          = H_ZData.Sbmn;
    					H_ZDataBunri.Stor          = H_ZData.Stor;
    					H_ZDataBunri.Skmk          = H_ZData.Skmk;
    					H_ZDataBunri.Seda          = H_ZData.Seda;
    					H_ZDataBunri.Skoj          = H_ZData.Skoj;
    					H_ZDataBunri.Skos          = H_ZData.Skos;
    					H_ZDataBunri.Sprj          = H_ZData.Sprj;
    					H_ZDataBunri.Sseg          = H_ZData.Sseg;
    					H_ZDataBunri.Sdm1          = H_ZData.Sdm1;
    					H_ZDataBunri.Sdm2          = H_ZData.Sdm2;
    					H_ZDataBunri.Sdm3          = H_ZData.Sdm3;
    					H_ZDataBunri.Srit          = H_ZData.Srit;
    					H_ZDataBunri.Szkb          = H_ZData.Szkb;
    					H_ZDataBunri.Sgyo          = H_ZData.Sgyo;
    					H_ZDataBunri.Ssre          = H_ZData.Ssre;
    					H_ZDataBunri.Skeigen       = H_ZData.Skeigen;    		// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                        H_ZDataBunri.Surizeikeisan = H_ZData.Surizeikeisan;     // Ver02.26.01  インボイス対応
                        H_ZDataBunri.Smenzeikeika  = H_ZData.Smenzeikeika;      // Ver02.26.01  インボイス対応
    					H_ZDataBunri.Stno          = H_ZData.Stno;
    					H_ZDataBunri.Stky          = H_ZData.Stky;
// Ver02.26.01 インボイス対応 --->
//    					if (H_Lno == 1)
                        if (isNewLayout == true)
// <--- Ver02.26.01 インボイス対応
                        {
    						H_ZDataBunri.Sdm4  = H_ZData.Sdm4;
    						H_ZDataBunri.Sdm5  = H_ZData.Sdm5;
    						H_ZDataBunri.Sdm6  = H_ZData.Sdm6;
    						H_ZDataBunri.Sdm7  = H_ZData.Sdm7;
    						H_ZDataBunri.Sdm8  = H_ZData.Sdm8;
    						H_ZDataBunri.Sdm9  = H_ZData.Sdm9;
    						H_ZDataBunri.Sdm10 = H_ZData.Sdm10;
    						H_ZDataBunri.Sdm11 = H_ZData.Sdm11;
    						H_ZDataBunri.Sdm12 = H_ZData.Sdm12;
    						H_ZDataBunri.Sdm13 = H_ZData.Sdm13;
    						H_ZDataBunri.Sdm14 = H_ZData.Sdm14;
    						H_ZDataBunri.Sdm15 = H_ZData.Sdm15;
    						H_ZDataBunri.Sdm16 = H_ZData.Sdm16;
    						H_ZDataBunri.Sdm17 = H_ZData.Sdm17;
    						H_ZDataBunri.Sdm18 = H_ZData.Sdm18;
    						H_ZDataBunri.Sdm19 = H_ZData.Sdm19;
    						H_ZDataBunri.Sdm20 = H_ZData.Sdm20;
    					}
    					// -*01.04.01
    
    					// 税対象科目関係
    					if (L_ChildSyo[0] == 21 || L_ChildSyo[0] == 22) {
    						H_ZDataBunri.Zkmk          = L_lvOyaKicd;
    						H_ZDataBunri.Zrit          = Convert.ToInt32(L_lvOyaZrit);
    						H_ZDataBunri.Zzkb          = Convert.ToInt16(L_lvOyaZkbn);
    						H_ZDataBunri.Zgyo          = Convert.ToInt16(L_lvOyaZgyo);
    						H_ZDataBunri.Zsre          = Convert.ToInt16(L_lvOyaZsre);
    						H_ZDataBunri.Zkeigen       = L_lvOyaKeigen.ToString();		// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                            H_ZDataBunri.Zurizeikeisan = L_lvOyaUrizeikeisan;           // Ver02.26.01  インボイス対応
                            H_ZDataBunri.Zmenzeikeika  = L_lvOyaMenzeikeika;            // Ver02.26.01  インボイス対応
    					} else {
    						H_ZDataBunri.Zkmk          = "0";
    						H_ZDataBunri.Zrit          = -1;
    						H_ZDataBunri.Zzkb          = 100;
    						H_ZDataBunri.Zgyo          = 0;
    						H_ZDataBunri.Zsre          = 0;
    						H_ZDataBunri.Zkeigen       = "0";    						// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                            H_ZDataBunri.Zurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                            H_ZDataBunri.Zmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    					}

// 2021/09/01 Ver02.22.12 親仕訳の支払日が自動作成される子仕訳の支払日に反映しない対応 --->
//                        // 支払区分関係
//                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "0", H_ZData.Skbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1)
//                        {
//    						H_ZDataBunri.Symd = H_ZData.Symd;
//    						H_ZDataBunri.Skbn = H_ZData.Skbn;
//    						H_ZDataBunri.Skiz = H_ZData.Skiz;
//    					  } else {
//    						H_ZDataBunri.Symd = 0;
//    						H_ZDataBunri.Skbn = 0;
//    						H_ZDataBunri.Skiz = 0;
//    					  }
//      2021/09/03 Ver02.22.12.01 期日可否対応 --->
                        // 支払日・支払期日
                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "0", H_ZData.Skbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1) {
                            H_ZDataBunri.Symd = H_ZData.Symd;
                            H_ZDataBunri.Skiz = H_ZData.Skiz;
                        } else {
                            H_ZDataBunri.Symd = 0;
                            H_ZDataBunri.Skiz = 0;
                        }
                        // 支払区分
                        if (CheckPAYWAY_FNC(H_Con, "0", H_ZData.Skbn.ToString()) == 1) {
                            H_ZDataBunri.Skbn = H_ZData.Skbn;
//                          H_ZDataBunri.Skiz = H_ZData.Skiz;
                        } else {
                            H_ZDataBunri.Skbn = 0;
//                          H_ZDataBunri.Skiz = 0;
                        }
//      <--- 2021/09/03 Ver02.22.12.01 期日可否対応
// <--- 2021/09/01 Ver02.22.12 親仕訳の支払日が自動作成される子仕訳の支払日に反映しない対応

// 2021/09/03 Ver02.22.12.01 期日可否対応 --->
//                        // 入金区分関係
//                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "1", H_ZData.Ukbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1) {
//    						H_ZDataBunri.Uymd = H_ZData.Uymd;
//    						H_ZDataBunri.Ukbn = H_ZData.Ukbn;
//    						H_ZDataBunri.Ukiz = H_ZData.Ukiz;
//    					  } else {
//    						H_ZDataBunri.Uymd = 0;
//    						H_ZDataBunri.Ukbn = 0;
//    						H_ZDataBunri.Ukiz = 0;
//    					  }
                        // 回収日・回収期日
                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "1", H_ZData.Ukbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1)
                        {
                            H_ZDataBunri.Uymd = H_ZData.Uymd;
                            H_ZDataBunri.Ukiz = H_ZData.Ukiz;
                        }
                        else
                        {
                            H_ZDataBunri.Uymd = 0;
                            H_ZDataBunri.Ukiz = 0;
                        }
                        // 入金区分
                        if (CheckPAYWAY_FNC(H_Con, "1", H_ZData.Ukbn.ToString()) == 1) {
                            H_ZDataBunri.Ukbn = H_ZData.Ukbn;
                        } else {
                            H_ZDataBunri.Ukbn = 0;

                        }
// <--- 2021/09/03 Ver02.22.12.01 期日可否対応

    					// 店券フラグ
    					H_ZDataBunri.Sten = 0;
    					// 金額
                        decimal RdecL_GValuMain = 0;
                        decimal RdecL_GValuZei  = 0;
                        RdecL_GValuMain = Convert.ToDecimal(L_GValuMain);
                        RdecL_GValuZei  = Convert.ToDecimal(L_GValuZei);

    					if (ChkTaika_FNC(H_SY02, Convert.ToInt16(H_BKbn), H_ZData.Rzkb) == true) {
// Ver02.26.01 インボイス対応 --->
//    						SvolumZeiCalq_SUB(H_ZData.Exvl, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), ref L_ValuMain, ref L_ValuZei);
    						SvolumZeiCalq_SUB(H_ZData.Exvl, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), 
                                              Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref L_ValuMain, ref L_ValuZei);
// <--- Ver02.26.01 インボイス対応

    						H_ZDataBunri.Valu = L_ValuZei;
    						if (H_BKbn == "1") {
    							// 自動分離
    							if (ChkTaika_FNC(H_SY02, Convert.ToInt16(H_BKbn), H_ZData.Rzkb) == true)
                                {
    								H_ValuOya = H_ZData.Valu.ToString();
    								H_ValuZei = H_ZData.Exvl.ToString();
    							} else {
    								H_ValuOya = L_ValuMain.ToString();
    								H_ValuZei = H_ZData.Valu.ToString();
    							}
    						} else if (H_BKbn == "3") {
    							// 税作成
    							H_ValuOya = H_ZData.Valu.ToString();
    							H_ValuZei = (L_ValuMain + L_ValuZei).ToString();
    						}
    						if (H_PnGaiSiwake > 0) {
// Ver02.26.01 インボイス対応 --->
//    							SvolumZeiCalq_SUB(H_ZData.Gexvl * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
//                                                  ref RdecL_GValuMain, ref RdecL_GValuZei);
    							SvolumZeiCalq_SUB(H_ZData.Gexvl * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
                                                  Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref RdecL_GValuMain, ref RdecL_GValuZei);

// <--- Ver02.26.01 インボイス対応

    							// 税額計算時に小数点桁数分べき乗した値をもとに戻す
    							L_GValuMain = L_GValuMain / L_GaiCalq;
    							L_GValuZei  = L_GValuZei  / L_GaiCalq;
    							// 自分が外貨科目の場合のみ子仕訳の外貨金額をセット
    							if (L_bAiteGaika == true) {
    								H_ZDataBunri.Gaika = Convert.ToDecimal(L_GValuZei);
    							}
    							if (H_BKbn == "1") {
    								// 自動分離
    								H_GValutai = RdecL_GValuMain;
    								H_GValuZei = H_ZData.Gexvl;
    							} else if (H_BKbn == "3") {
    								// 税作成
    								H_GValutai = H_ZData.Gexvl;
    								H_GValuZei = RdecL_GValuMain + RdecL_GValuZei;
    							}
    
    						}
    
    					} else {
// Ver02.26.01 インボイス対応 --->
//    						SvolumZeiCalq_SUB(H_ZData.Valu, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), ref L_ValuMain, ref L_ValuZei);
                            SvolumZeiCalq_SUB(H_ZData.Valu, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), 
                                              Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref L_ValuMain, ref L_ValuZei);
// <--- Ver02.26.01 インボイス対応

    						H_ZDataBunri.Valu = L_ValuZei;
    						if (H_BKbn == "1") {
    							// 自動分離
    							if (ChkTaika_FNC(H_SY02, Convert.ToInt16(H_BKbn), H_ZData.Rzkb) == true)
                                {
    								H_ValuOya = H_ZData.Valu.ToString();
    								H_ValuZei = H_ZData.Exvl.ToString();
                                } else {
    								H_ValuOya = L_ValuMain.ToString();
    								H_ValuZei = H_ZData.Valu.ToString();
    							}
    						} else if (H_BKbn == "3") {
    							// 税作成
    							H_ValuOya = H_ZData.Valu.ToString();
    							H_ValuZei = (L_ValuMain + L_ValuZei).ToString();
    						}
    
    						if (H_PnGaiSiwake > 0) {
// Ver02.26.01 インボイス対応 --->
//    							SvolumZeiCalq_SUB(H_ZData.Gaika * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
//                                                  ref RdecL_GValuMain, ref RdecL_GValuZei);
    							SvolumZeiCalq_SUB(H_ZData.Gaika * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
                                                  Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref RdecL_GValuMain, ref RdecL_GValuZei);
// <--- Ver02.26.01 インボイス対応

    							// 税額計算時に小数点桁数分べき乗した値をもとに戻す
    							L_GValuMain = L_GValuMain / L_GaiCalq;
    							L_GValuZei  = L_GValuZei  / L_GaiCalq;
    							// 自分が外貨科目の場合のみ子仕訳の外貨金額をセット
    							if (L_bAiteGaika == true) {
    								H_ZDataBunri.Gaika = Convert.ToDecimal(L_GValuZei);
    							}
    							if (H_BKbn == "1") {
    								// 自動分離
    								H_GValuOya = RdecL_GValuMain;
    								H_GValuZei = H_ZData.Gaika;
    							} else if (H_BKbn == "3") {
    								// 税作成
    								// H_ValuOya = H_ZData.Valu
    								H_GValuOya = H_ZData.Gaika;
    								H_GValuZei = RdecL_GValuMain + RdecL_GValuZei;
    							}
    						}
    					}
    					// 消込コード対応
    					if (!string.IsNullOrEmpty(H_ZData.Dkec)) {
    						if (H_PnUseDkec == 1 || H_PnUseDkec == 2) {
    							H_ZDataBunri.Dkec = H_ZData.Dkec;
    						}
    					}
                    }
                    #endregion
                    #region 貸方
                    else
                    {
    					// 貸方科目
    					H_ZDataBunri.Skmk = L_lvChildKicd;
    					// 貸方部門
// ▼ ツルハ様カスタマイズ ▼
//    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_BMFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaBcod)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW1]) == 1)) {
//    						H_ZDataBunri.Sbmn = L_lvOyaBcod;
//    					}
                        if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_BMFLG]) == 1) && (!string.IsNullOrEmpty(P_SYBMNCD)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW1]) == 1))
                        {
                            H_ZDataBunri.Sbmn = P_SYBMNCD;
                        }
// ▲ ツルハ様カスタマイズ ▲
                        // 貸方取引先
                        if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_TRFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaTrcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW2]) == 1)) {
    						H_ZDataBunri.Stor = L_lvOyaTrcd;
    					}
    					// 貸方枝番
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_EDFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaEcod)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW3]) == 1)) {
    						H_ZDataBunri.Seda = L_lvOyaEcod;
    					}
    					// 貸方プロジェクト
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_PJFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaPjcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW4]) == 1)) {
    						H_ZDataBunri.Sprj = L_lvOyaPjcd;
    					}
    					// 貸方セグメント
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_SGFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaSgcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW5]) == 1)) {
    						H_ZDataBunri.Sseg = L_lvOyaSgcd;
    					}
    					// 貸方工事
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_KJFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaKjcd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW6]) == 1)) {
    						H_ZDataBunri.Skoj = L_lvOyaKjcd;
    					}
    					// 貸方工種
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_KSFLG]) == 1) && (!string.IsNullOrEmpty(L_lvOyaKscd)) && (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW7]) == 1)) {
    						H_ZDataBunri.Skos = L_lvOyaKscd;
    					}
    					// 貸方ユニバーサル１
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1FLG]) != 0 && !string.IsNullOrEmpty(L_lvOyaDmy1) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW8]) == 1)) {
    						H_ZDataBunri.Sdm1 = L_lvOyaDmy1;
    					}
    					// 貸方ユニバーサル２
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2FLG]) != 0 && !string.IsNullOrEmpty(L_lvOyaDmy2) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW9]) == 1)) {
    						H_ZDataBunri.Sdm2 = L_lvOyaDmy2;
    					}
    					// 貸方ユニバーサル３
    					if ((Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D3FLG]) != 0 && !string.IsNullOrEmpty(L_lvOyaDmy3) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW10]) == 1)) {
    						H_ZDataBunri.Sdm3 = L_lvOyaDmy3;
    					}
    					// 貸方課税区分・税率
    					switch (L_ChildSyo[0]) {
    						case 21:
                            case 22:
    							H_ZDataBunri.Srit          = Convert.ToInt32(L_lvOyaZrit);
    							H_ZDataBunri.Szkb          = 100;
    							H_ZDataBunri.Skeigen       = L_lvOyaKeigen.ToString();				// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Surizeikeisan = L_lvOyaUrizeikeisan;                   // Ver02.26.01　インボイス対応
                                H_ZDataBunri.Smenzeikeika  = L_lvOyaMenzeikeika;                    // Ver02.26.01　インボイス対応
    							break;
//    						case 22:
//    							H_ZDataBunri.Srit = Convert.ToInt32(L_lvOyaZrit);
//    							H_ZDataBunri.Szkb = 100;
//    							H_ZDataBunri.Skeigen = L_lvOyaKeigen.ToString();
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
// Ver02.26.01 インボイス対応(caseをまとめる)
    						case  2:
                            case  3:
                            case  4:
                            case  5:
                            case  6:
                            case  7:
                            case  8:
                            case  9:
                            case 10:
                            default:
    							H_ZDataBunri.Srit          = -1;
    							// (NULL)
    							H_ZDataBunri.Szkb          = 0;
    							H_ZDataBunri.Skeigen       = "0";       							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                                H_ZDataBunri.Surizeikeisan = 0;                                     // Ver02.26.01  インボイス対応
                                H_ZDataBunri.Smenzeikeika  = 0;                                     // Ver02.26.01  インボイス対応
    							break;
                            #region Ver02.26.01 インボイス対応(caseをまとめる→コメントアウト)
//                            case 3:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 4:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 5:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 6:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 7:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 8:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 9:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						case 10:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 0;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
//    						default:
//    							H_ZDataBunri.Srit = -1;
//    							// (NULL)
//    							H_ZDataBunri.Szkb = 100;
//    							H_ZDataBunri.Skeigen = "0";
//    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
//    							break;
                                #endregion
                        }
                        // 借方業種区分
                        H_ZDataBunri.Rgyo = 0;
    					// 借方仕入区分
    					H_ZDataBunri.Rsre = 0;
    
    					// ------ 相手側 -------
    					// 部門～ダミーまで
    					// *-01.04.01
    					H_ZDataBunri.Rbmn          = H_ZData.Rbmn;
    					H_ZDataBunri.Rtor          = H_ZData.Rtor;
    					H_ZDataBunri.Rkmk          = H_ZData.Rkmk;
    					H_ZDataBunri.Reda          = H_ZData.Reda;
    					H_ZDataBunri.Rkoj          = H_ZData.Rkoj;
    					H_ZDataBunri.Rkos          = H_ZData.Rkos;
    					H_ZDataBunri.Rprj          = H_ZData.Rprj;
    					H_ZDataBunri.Rseg          = H_ZData.Rseg;
    					H_ZDataBunri.Rdm1          = H_ZData.Rdm1;
    					H_ZDataBunri.Rdm2          = H_ZData.Rdm2;
    					H_ZDataBunri.Rdm3          = H_ZData.Rdm3;
    					H_ZDataBunri.Rrit          = H_ZData.Rrit;
    					H_ZDataBunri.Rzkb          = H_ZData.Rzkb;
    					H_ZDataBunri.Rgyo          = H_ZData.Rgyo;
    					H_ZDataBunri.Rsre          = H_ZData.Rsre;
    					H_ZDataBunri.Rkeigen       = H_ZData.Rkeigen; 	        // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                        H_ZDataBunri.Rurizeikeisan = H_ZData.Rurizeikeisan;     // Ver02.26.01  インボイス対応
                        H_ZDataBunri.Rmenzeikeika  = H_ZData.Rmenzeikeika;      // Ver02.26.01  インボイス対応
    					H_ZDataBunri.Rtno          = H_ZData.Rtno;
    					H_ZDataBunri.Rtky          = H_ZData.Rtky;
// Ver02.26.01 インボイス対応 --->
//    					if (H_Lno == 1)
//                      {
                        if (isNewLayout == true) { 
// <--- Ver02.26.01 インボイス対応
    						H_ZDataBunri.Rdm4  = H_ZData.Rdm4;
    						H_ZDataBunri.Rdm5  = H_ZData.Rdm5;
    						H_ZDataBunri.Rdm6  = H_ZData.Rdm6;
    						H_ZDataBunri.Rdm7  = H_ZData.Rdm7;
    						H_ZDataBunri.Rdm8  = H_ZData.Rdm8;
    						H_ZDataBunri.Rdm9  = H_ZData.Rdm9;
    						H_ZDataBunri.Rdm10 = H_ZData.Rdm10;
    						H_ZDataBunri.Rdm11 = H_ZData.Rdm11;
    						H_ZDataBunri.Rdm12 = H_ZData.Rdm12;
    						H_ZDataBunri.Rdm13 = H_ZData.Rdm13;
    						H_ZDataBunri.Rdm14 = H_ZData.Rdm14;
    						H_ZDataBunri.Rdm15 = H_ZData.Rdm15;
    						H_ZDataBunri.Rdm16 = H_ZData.Rdm16;
    						H_ZDataBunri.Rdm17 = H_ZData.Rdm17;
    						H_ZDataBunri.Rdm18 = H_ZData.Rdm18;
    						H_ZDataBunri.Rdm19 = H_ZData.Rdm19;
    						H_ZDataBunri.Rdm20 = H_ZData.Rdm20;
    					}
    					// -*01.04.01
    
    					// 税対象科目関係
    					if (L_ChildSyo[0] == 21 || L_ChildSyo[0] == 22)
                        {
    						H_ZDataBunri.Zkmk          = L_lvOyaKicd;
    						H_ZDataBunri.Zrit          = Convert.ToInt32(L_lvOyaZrit);
    						H_ZDataBunri.Zzkb          = Convert.ToInt16(L_lvOyaZkbn);
    						H_ZDataBunri.Zgyo          = Convert.ToInt16(L_lvOyaZgyo);
    						H_ZDataBunri.Zsre          = Convert.ToInt16(L_lvOyaZsre);
    						H_ZDataBunri.Zkeigen       = L_lvOyaKeigen.ToString();      // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                            H_ZDataBunri.Zurizeikeisan = L_lvOyaUrizeikeisan;           // Ver02.26.01  インボイス対応
                            H_ZDataBunri.Zmenzeikeika  = L_lvOyaMenzeikeika;            // Ver02.26.01  インボイス対応
    					} else {
    						H_ZDataBunri.Zkmk          = "0";
    						H_ZDataBunri.Zrit          = -1;
    						H_ZDataBunri.Zzkb          = 100;
    						H_ZDataBunri.Zgyo          = 0;
    						H_ZDataBunri.Zsre          = 0;
    						H_ZDataBunri.Zkeigen       = "0";    						// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                            H_ZDataBunri.Zurizeikeisan = 0;                             // Ver02.26.01  インボイス対応
                            H_ZDataBunri.Zmenzeikeika  = 0;                             // Ver02.26.01  インボイス対応
    					}

// 2021/09/01 Ver02.22.12 親仕訳の支払日が自動作成される子仕訳の支払日に反映しない対応 --->
//                        // 支払区分関係
//                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "0", H_ZData.Skbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1)
//                        {
//    						H_ZDataBunri.Symd = H_ZData.Symd;
//    						H_ZDataBunri.Skbn = H_ZData.Skbn;
//    						H_ZDataBunri.Skiz = H_ZData.Skiz;
//    					  } else {
//    						H_ZDataBunri.Symd = 0;
//    						H_ZDataBunri.Skbn = 0;
//    						H_ZDataBunri.Skiz = 0;
//    					  }
//      2021/09/03 Ver02.22.12.01 期日可否対応 --->
                        // 支払日・支払期日
                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "0", H_ZData.Skbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1) {
                            H_ZDataBunri.Symd = H_ZData.Symd;
                            H_ZDataBunri.Skiz = H_ZData.Skiz;
                        } else {
                            H_ZDataBunri.Symd = 0;
                            H_ZDataBunri.Skiz = 0;
                        }
                        // 支払区分
                        if (CheckPAYWAY_FNC(H_Con, "0", H_ZData.Skbn.ToString()) == 1) {
                            H_ZDataBunri.Skbn = H_ZData.Skbn;
//                          H_ZDataBunri.Skiz = H_ZData.Skiz;
                        } else {
                            H_ZDataBunri.Skbn = 0;
//                          H_ZDataBunri.Skiz = 0;
                        }
//      <--- 2021/09/03 Ver02.22.12.01 期日可否対応
// <--- 2021/09/01 Ver02.22.12 親仕訳の支払日が自動作成される子仕訳の支払日に反映しない対応

// 2021/09/03 Ver02.22.12.01 期日可否対応 --->
//                        // 入金区分関係
//                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "1", H_ZData.Ukbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1) {
//    						H_ZDataBunri.Uymd = H_ZData.Uymd;
//    						H_ZDataBunri.Ukbn = H_ZData.Ukbn;
//    						H_ZDataBunri.Ukiz = H_ZData.Ukiz;
//    					  } else {
//    						H_ZDataBunri.Uymd = 0;
//    						H_ZDataBunri.Ukbn = 0;
//    						H_ZDataBunri.Ukiz = 0;
//    					  }
                        // 回収日・回収期日
                        if (CheckSubject_FNC(H_Con, H_ZData.Kesn, "1", H_ZData.Ukbn.ToString(), L_lvChildKicd, L_lvOyaKicdAite) == 1)
                        {
                            H_ZDataBunri.Uymd = H_ZData.Uymd;
                            H_ZDataBunri.Ukiz = H_ZData.Ukiz;
                        }
                        else
                        {
                            H_ZDataBunri.Uymd = 0;
                            H_ZDataBunri.Ukiz = 0;
                        }
                        // 入金区分
                        if (CheckPAYWAY_FNC(H_Con, "1", H_ZData.Ukbn.ToString()) == 1) {
                            H_ZDataBunri.Ukbn = H_ZData.Ukbn;
                        } else {
                            H_ZDataBunri.Ukbn = 0;

                        }
// <--- 2021/09/03 Ver02.22.12.01 期日可否対応

    					// 店券フラグ
    					H_ZDataBunri.Sten = 0;
    					// 金額
                        decimal SdecL_GValuMain = 0;
                        decimal SdecL_GValuZei  = 0;
                        SdecL_GValuMain = Convert.ToDecimal(L_GValuMain);
                        SdecL_GValuZei  = Convert.ToDecimal(L_GValuZei);

    					if (ChkTaika_FNC(H_SY02, Convert.ToInt16(H_BKbn), H_ZData.Szkb) == true)
                        {
// Ver02.26.01 インボイス対応 --->
//    						SvolumZeiCalq_SUB(H_ZData.Exvl, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), ref L_ValuMain, ref L_ValuZei);
        					SvolumZeiCalq_SUB(H_ZData.Exvl, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), 
                                              Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref L_ValuMain, ref L_ValuZei);
// <--- Ver02.26.01 インボイス対応

    						H_ZDataBunri.Valu = L_ValuZei;
    						if (H_BKbn == "1") {
    							// 自動分離
    							if (ChkTaika_FNC(H_SY02, Convert.ToInt16(H_BKbn), H_ZData.Szkb) == true)
                                {
    								H_ValuOya = H_ZData.Valu.ToString();
    								H_ValuZei = H_ZData.Exvl.ToString();
    							} else {
    								H_ValuOya = L_ValuMain.ToString();
    								H_ValuZei = H_ZData.Valu.ToString();
    							}
    						} else if (H_BKbn == "3") {
    							// 税作成
    							H_ValuOya = H_ZData.Valu.ToString();
    							H_ValuZei = (L_ValuMain + L_ValuZei).ToString();
    						}
    
    						if (H_PnGaiSiwake > 0) {
// Ver02.26.01 インボイス対応 --->
//    							SvolumZeiCalq_SUB(H_ZData.Gexvl * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
//                                                  ref SdecL_GValuMain, ref SdecL_GValuZei);
                                SvolumZeiCalq_SUB(H_ZData.Gexvl * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
                                                  Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref SdecL_GValuMain, ref SdecL_GValuZei);
// Ver02.26.01 インボイス対応

    							// 税額計算時に小数点桁数分べき乗した値をもとに戻す
    							L_GValuMain = L_GValuMain / L_GaiCalq;
    							L_GValuZei = L_GValuZei / L_GaiCalq;
    							// 自分が外貨科目の場合のみ子仕訳の外貨金額をセット
    							if (L_bAiteGaika == true) {
    								H_ZDataBunri.Gaika = SdecL_GValuZei;
    							}
    							if (H_BKbn == "1") {
    								// 自動分離
    								H_GValutai = SdecL_GValuMain;
    								H_GValuZei = H_ZData.Gexvl;
    							} else if (H_BKbn == "3") {
    								// 税作成
    								H_GValutai = H_ZData.Gexvl;
    								H_GValuZei = SdecL_GValuMain + SdecL_GValuZei;
    							}
    						}
    					} else {
// Ver02.26.01 インボイス対応 --->
//    						SvolumZeiCalq_SUB(H_ZData.Valu, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), ref L_ValuMain, ref L_ValuZei);
                            SvolumZeiCalq_SUB(H_ZData.Valu, Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]), 
                                              Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref L_ValuMain, ref L_ValuZei);
// <--- Ver02.26.01 インボイス対応

    						H_ZDataBunri.Valu = L_ValuZei;
    						if (H_BKbn == "1") {
    							// 自動分離
    							if (ChkTaika_FNC(H_SY02, Convert.ToInt16(H_BKbn), H_ZData.Szkb) == true) {
    								H_ValuOya = H_ZData.Valu.ToString();
    								H_ValuZei = H_ZData.Exvl.ToString();
    							} else {
    								H_ValuOya = L_ValuMain.ToString();
    								H_ValuZei = H_ZData.Valu.ToString();
    							}
    						} else if (H_BKbn == "3") {
    							// 税作成
    							H_ValuOya = H_ZData.Valu.ToString();
    							H_ValuZei = (L_ValuMain + L_ValuZei).ToString();
    						}
    
    						if (H_PnGaiSiwake > 0) {
// Ver02.26.01 インボイス対応 --->
//    							SvolumZeiCalq_SUB(H_ZData.Gaika * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
//                                                  ref SdecL_GValuMain, ref SdecL_GValuZei);
                                SvolumZeiCalq_SUB(H_ZData.Gaika * Convert.ToDecimal(L_GaiCalq), Convert.ToDecimal(H_BKbn), Convert.ToDecimal(L_lvOyaZrit), Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_HSSW]),
                                                  Convert.ToInt16(H_drSvolum[(int)eSVOLUM.SVOLUM_SHIIREZEIKEIKA]), L_lvOyaMenzeikeika, ref SdecL_GValuMain, ref SdecL_GValuZei);
// <--- Ver02.26.01 インボイス対応

    							// 税額計算時に小数点桁数分べき乗した値をもとに戻す
    							L_GValuMain = L_GValuMain / L_GaiCalq;
    							L_GValuZei  = L_GValuZei  / L_GaiCalq;
    							// 自分が外貨科目の場合のみ子仕訳の外貨金額をセット
    							if (L_bAiteGaika == true) {
    								H_ZDataBunri.Gaika = SdecL_GValuZei;
    							}
    							if (H_BKbn == "1") {
    								// 自動分離
    								H_GValuOya = SdecL_GValuMain;
    								H_GValuZei = H_ZData.Gaika;
    							} else if (H_BKbn == "3") {
    								// 税作成
    								// H_ValuOya = H_ZData.Valu
    								H_GValuOya = H_ZData.Gaika;
    								H_GValuZei = SdecL_GValuMain + SdecL_GValuZei;
    							}
    						}
    					}
    					// 消込コード対応
    					if (!string.IsNullOrEmpty(H_ZData.Dkec)) {
    						if (H_PnUseDkec == 0 || H_PnUseDkec == 2) {
    							H_ZDataBunri.Dkec = H_ZData.Dkec;
    						}
    					}
                    }
                    #endregion
                }
                #endregion
            }
            #endregion

            #region --- 消費税側の未入力　+　未登録チェック ---
            // メッセージ(配列)初期化
            H_ErrMsg = new string[12];
            Bunri_ErrVal = new string[7];
            int i = 0;
            // 科目（科目が存在しない場合は、以降のチェックは行わない）
    		if (string.IsNullOrEmpty(L_lvChildKicd))
            {
    			H_RegErr = H_RegErr | MC_DinpCheck_ZKm;
    		}
            else
            {
                #region ----未入力チェック----
// 2021/01/28 Ver02.22.09 ①　サブシステム未入力チェック設定参照追加 --->
                if (P_SUB_TENK == 1)
                {
// <--- 2021/01/28 Ver02.22.09 ①　サブシステム未入力チェック設定参照追加
                    //  部門
                    if (string.IsNullOrEmpty(L_lvOyaBcod) || Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW1]) != 1)
                    {
                        if ((L_ChildInp & MC_DinpCheck_Bm) == MC_DinpCheck_Bm)
                        {
                            H_InpErr = H_InpErr | MC_DinpCheck_Bm;
                            H_ErrMsg[i] = "部門が未入力です。";
                            // 2019/06/24 Ver.01.19.01 urata
                            i++;
                        }
                    }
                    //  取引先
                    if (string.IsNullOrEmpty(L_lvOyaTrcd) || Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW2]) != 1)
                    {
                        if ((L_ChildInp & MC_DinpCheck_Tr) == MC_DinpCheck_Tr)
                        {
                            H_InpErr = H_InpErr | MC_DinpCheck_Tr;
                            H_ErrMsg[i] = "取引先が未入力です。";
                            // 2019/06/24 Ver.01.19.01 urata
                            i++;
                        }
                    }
                    //  枝番
                    if (string.IsNullOrEmpty(L_lvOyaEcod) || Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW3]) != 1)
                    {
                        if ((L_ChildInp & MC_DinpCheck_Ed) == MC_DinpCheck_Ed)
                        {
                            H_InpErr = H_InpErr | MC_DinpCheck_Ed;
                            H_ErrMsg[i] = "枝番が未入力です。";
                            // 2019/06/24 Ver.01.19.01 urata
                            i++;
                        }
                    }

// 2021/01/28 Ver02.22.09 ②　内部統制：使用する 場合のみ未入力チェック --->
                    if (P_JSOX == true)
                    {
// <--- 2021/01/28 Ver02.22.09 ②　内部統制：使用する 場合のみ未入力チェック
                        //  プロジェクト
                        if (string.IsNullOrEmpty(L_lvOyaPjcd) || Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW4]) != 1)
                        {
                            if ((L_ChildInp & MC_DinpCheck_Pj) == MC_DinpCheck_Pj)
                            {
                                H_InpErr = H_InpErr | MC_DinpCheck_Pj;
                                H_ErrMsg[i] = "プロジェクトが未入力です。";
                                // 2019/06/24 Ver.01.19.01 urata
                                i++;
                            }
                        }
                        //  セグメント
                        if (string.IsNullOrEmpty(L_lvOyaSgcd) | Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW5]) != 1)
                        {
                            if ((L_ChildInp & MC_DinpCheck_Sg) == MC_DinpCheck_Sg)
                            {
                                H_InpErr = H_InpErr | MC_DinpCheck_Sg;
                                H_ErrMsg[i] = "セグメントが未入力です。";
                                // 2019/06/24 Ver.01.19.01 urata
                                i++;
                            }
                        }
                        //  工事
                        if (string.IsNullOrEmpty(L_lvOyaKjcd) || Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW6]) != 1)
                        {
                            if ((L_ChildInp & MC_DinpCheck_Kj) == MC_DinpCheck_Kj)
                            {
                                H_InpErr = H_InpErr | MC_DinpCheck_Kj;
                                H_ErrMsg[i] = "工事が未入力です。";
                                // 2019/06/24 Ver.01.19.01 urata
                                i++;
                            }
                        }
                        //  工種
                        if (string.IsNullOrEmpty(L_lvOyaKscd) || Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW7]) != 1)
                        {
                            if ((L_ChildInp & MC_DinpCheck_Ks) == MC_DinpCheck_Ks)
                            {
                                H_InpErr = H_InpErr | MC_DinpCheck_Ks;
                                H_ErrMsg[i] = "工種が未入力です。";
                                // 2019/06/24 Ver.01.19.01 urata
                                i++;
                            }
                        }

                        // ＵＦは「マスタ参照する」又は「残高作成する」の場合に未入力ﾁｪｯｸを行う
                        //  ユニバーサルフィールド１
                        if ((string.IsNullOrEmpty(L_lvOyaDmy1) || Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW8]) != 1) &&
                            (Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1FLG]) == 2 || Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1FLG]) == 3))
                        {
                            if ((L_ChildInp & MC_DinpCheck_D1) == MC_DinpCheck_D1)
                            {
                                H_InpErr = H_InpErr | MC_DinpCheck_D1;
                                H_ErrMsg[i] = "ユニバーサルフィールド１が未入力です。";
                                // 2019/06/24 Ver.01.19.01 urata
                                i++;
                            }
                        }
                        //  ユニバーサルフィールド２
                        if ((string.IsNullOrEmpty(L_lvOyaDmy2) || Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW9]) != 1) &&
                            (Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2FLG]) == 2 || Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2FLG]) == 3))
                        {
                            if ((L_ChildInp & MC_DinpCheck_D2) == MC_DinpCheck_D2)
                            {
                                H_InpErr = H_InpErr | MC_DinpCheck_D2;
                                H_ErrMsg[i] = "ユニバーサルフィールド２が未入力です。";
                                // 2019/06/24 Ver.01.19.01 urata
                                i++;
                            }
                        }
                        //  ユニバーサルフィールド３
                        if ((string.IsNullOrEmpty(L_lvOyaDmy3) || Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW10]) != 1) &&
                            (Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D3FLG]) == 2 || Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D3FLG]) == 3))
                        {
                            if ((L_ChildInp & MC_DinpCheck_D3) == MC_DinpCheck_D3)
                            {
                                H_InpErr = H_InpErr | MC_DinpCheck_D3;
                                H_ErrMsg[i] = "ユニバーサルフィールド３が未入力です。";
                                // 2019/06/24 Ver.01.19.01 urata
                                i++;
                            }
                        }
                        //  摘要コード
                        // de2差分対応 03.07.02 摘要コードが未入力時は、当業務の使用により[-1]になっている
                        // if (string.IsNullOrEmpty(L_lvOyaTno) || L_lvOyaTno == "-1")  <--- 条件追加
                        if (string.IsNullOrEmpty(L_lvOyaTno) || L_lvOyaTno == "-1" || L_lvOyaTno == "0")
                        {
                            if ((L_ChildInp & MC_DinpCheck_Tno) == MC_DinpCheck_Tno)
                            {
                                H_InpErr = H_InpErr | MC_DinpCheck_Tno;
                                H_ErrMsg[i] = "摘要コードが未入力です。";
                                // 2019/06/24 Ver.01.19.01 urata
                                i++;
                            }
                        }
                    }
                }
                #endregion

                #region ----未登録チェック----(単一コードは親でチェックしているので行わない)
// ▼ ツルハ様カスタマイズ ▼
                //  部門科目
                #region 消費税科目は固定部門付加のためコメントアウト
//              if (!string.IsNullOrEmpty(L_lvOyaBcod) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW1]) == 1)
//              {
////  分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↓
//   			    if (ChkCodeType_FNC(L_lvOyaBcod, Convert.ToInt16(H_drVolum[(int)eVOLUM.VOLUM_BMTY])))
//                  {
//   				    if (L_lvOyaBcod.Length <= Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_BMLN]))
//                      {
//   					    L_lvOyaBcod = EditCode_FNC(L_lvOyaBcod, (H_drVolum[(int)eVOLUM.VOLUM_BMTY]).ToString(), Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_BMLN]));
////  分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↑
//   					    if (!(BkzanExists_FNC(H_Con, H_ZData.Kesn, L_lvOyaBcod, L_lvChildKicd)))
//                          {
//   						    H_RegErr = H_RegErr | MC_DinpCheck_BmKm;
//   						    H_ErrMsg[i] = "部門科目が未登録です。";
//   						    // 2019/06/24 Ver.01.19.01 urata
////  分離仕訳の事前未入力・未登録チェック対応 ↓
//                              Bunri_ErrVal[i] = L_lvOyaBcod;
//                              i++;
////  分離仕訳の事前未入力・未登録チェック対応 ↑
//   					    }
//   				    }
//   			    }
//   		    }
                #endregion
                if (!string.IsNullOrEmpty(P_SYBMNCD) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW1]) == 1)
                {
                    if (ChkCodeType_FNC(P_SYBMNCD, Convert.ToInt16(H_drVolum[(int)eVOLUM.VOLUM_BMTY])))
                    {
                        if (P_SYBMNCD.Length <= Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_BMLN]))
                        {
                            P_SYBMNCD = EditCode_FNC(P_SYBMNCD, (H_drVolum[(int)eVOLUM.VOLUM_BMTY]).ToString(), Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_BMLN]));

                            if (!(BkzanExists_FNC(H_Con, H_ZData.Kesn, P_SYBMNCD, L_lvChildKicd)))
                            {
                                MakeBKZANRecord(H_Con, H_ZData.Kesn, H_Touki, P_SYBMNCD, L_lvChildKicd);
                            }
                        }
                    }
                }

                //  取引先科目
                if (!string.IsNullOrEmpty(L_lvOyaTrcd) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW2]) == 1) {
//  ↓ 分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↓
    				if (ChkCodeType_FNC(L_lvOyaTrcd, Convert.ToInt16(H_drVolum[(int)eVOLUM.VOLUM_TRTY]))) {
    					if (L_lvOyaTrcd.Length <= Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_TRLN]))
                        {
    						L_lvOyaTrcd = EditCode_FNC(L_lvOyaTrcd, (H_drVolum[(int)eVOLUM.VOLUM_TRTY]).ToString(), Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_TRLN]));
//  ↑ 分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↑
//▼ツルハ様カスタマイズ▼
//    						if (!(TrzanExists_FNC(H_Con, H_ZData.Kesn, L_lvOyaTrcd, L_lvChildKicd))) {
//    							H_RegErr = H_RegErr | MC_DinpCheck_TrKm;
//    							H_ErrMsg[i] = "取引先科目が未登録です。";
//    							// 2019/06/24 Ver.01.19.01 urata
//    //  ↓ 分離仕訳の事前未入力・未登録チェック対応 ↓
//    							Bunri_ErrVal[i] = L_lvOyaTrcd;
//                              i++;
//    //  ↑ 分離仕訳の事前未入力・未登録チェック対応 ↑
//    						}
                            if (!(TrzanExists_FNC(H_Con, H_ZData.Kesn, L_lvOyaTrcd, L_lvChildKicd))) 
                            {
                                MakeTRZANRecord(H_Con, H_ZData.Kesn, H_Touki, L_lvOyaTrcd, L_lvChildKicd);
                            }
// ▲ ツルハ様カスタマイズ ▲
    					}
    				}
    			}

    			//  セグメント科目
    			if (!string.IsNullOrEmpty(L_lvOyaSgcd) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW5]) == 1)
                {
//  ↓ 分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↓
    				if (ChkCodeType_FNC(L_lvOyaSgcd, Convert.ToInt16(H_drVolum[(int)eVOLUM.VOLUM_SGTY])))
                    {
    					if (L_lvOyaSgcd.Length <= Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_SGLN]))
                        {
    						L_lvOyaSgcd = EditCode_FNC(L_lvOyaSgcd, (H_drVolum[(int)eVOLUM.VOLUM_SGTY]).ToString(), Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_SGLN]));
//  ↑ 分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↑
    						if (!(SgkzanExists_FNC(H_Con, H_ZData.Kesn, L_lvOyaSgcd, L_lvChildKicd))) {
    							H_RegErr = H_RegErr | MC_DinpCheck_SgKm;
    							H_ErrMsg[i] = "セグメント科目が未登録です。";
    							// 2019/06/24 Ver.01.19.01 urata
//  ↓ 分離仕訳の事前未入力・未登録チェック対応 ↓
    							Bunri_ErrVal[i] = L_lvOyaSgcd;
                                i++;
//  ↑ 分離仕訳の事前未入力・未登録チェック対応 ↑
    						}
    					}
    				}
    			}
    
    			//  科目枝番
    			if (!string.IsNullOrEmpty(L_lvOyaEcod) && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW3]) == 1) {
//  ↓ 分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↓
    				if (ChkCodeType_FNC(L_lvOyaEcod, Convert.ToInt16(H_drVolum[(int)eVOLUM.VOLUM_EDTY])))
                    {
    					if (L_lvOyaEcod.Length <= Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_EDLN]))
                        {
    						L_lvOyaEcod = EditCode_FNC(L_lvOyaEcod, (H_drVolum[(int)eVOLUM.VOLUM_EDTY]).ToString(), Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_EDLN]));
//  ↑ 分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↑
    						if (!(EnameExists_FNC(H_Con, H_ZData.Kesn, L_lvChildKicd, L_lvOyaEcod)))
                            {
    							H_RegErr = H_RegErr | MC_DinpCheck_KmEd;
    							H_ErrMsg[i] = "科目枝番が未登録です。";
    							// 2019/06/24 Ver.01.19.01 urata
//  ↓ 分離仕訳の事前未入力・未登録チェック対応 ↓
    							Bunri_ErrVal[i] = L_lvOyaEcod;
                                i++;
//  ↑ 分離仕訳の事前未入力・未登録チェック対応 ↑
    						}
    					}
    				}
    			}

                #region 分離仕訳の３コード自動登録対応(コメントアウト)
//  ↓ 分離仕訳の３コード自動登録対応 ↓
    			//  *---------------------------------------------------------------------------*
    			//   自動登録により未登録は不要となるため、コメントアウト
    			//  *---------------------------------------------------------------------------*
    			//  部門科目枝番
    			// If (H_drVolum[(int)eVOLUM.VOLUM_BKEMX) > 1) And (L_ChildUse(0) = 1) And (L_lvOyaBcod <> "") And (L_lvOyaEcod <> "") _
    			//  And Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW1) = 1 And Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW3) = 1 Then
    			//     If Not (BkezanExists_FNC(H_Con, H_ZData.Kesn, L_lvOyaBcod, L_lvChildKicd, L_lvOyaEcod)) Then
    			//         H_RegErr = H_RegErr Or MC_DinpCheck_BmKmEd
    			//         H_ErrMsg[i] = "部門科目枝番が未登録です。"   '2019/06/24 Ver.01.19.01 urata
    			//     End If
    			// End If
    			// ' 部門取引先科目
    			// If (H_drVolum[(int)eVOLUM.VOLUM_BTKMX) > 1) And (L_ChildUse(1) = 1) And (L_lvOyaBcod <> "") And (L_lvOyaTrcd <> "") _
    			//  And Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW1) = 1 And Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW2) = 1 Then
    			//     If Not (BtkzanExists_FNC(H_Con, H_ZData.Kesn, L_lvOyaBcod, L_lvOyaTrcd, L_lvChildKicd)) Then
    			//         H_RegErr = H_RegErr Or MC_DinpCheck_BmTrKm
    			//         H_ErrMsg[i] = "部門取引先科目が未登録です。"   '2019/06/24 Ver.01.19.01 urata
    			//     End If
    			// End If
    			// ' セグメント取引先科目
    			// If (H_drVolum[(int)eVOLUM.VOLUM_SKTMX) > 1) And (L_ChildUse(4) = 1) And (L_lvOyaSgcd <> "") And (L_lvOyaTrcd <> "") _
    			//  And Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW2) = 1 And Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW5) = 1 Then
    			//     If Not (StkzanExists_FNC(H_Con, H_ZData.Kesn, L_lvOyaSgcd, L_lvOyaTrcd, L_lvChildKicd)) Then
    			//         H_RegErr = H_RegErr Or MC_DinpCheck_SgTrKm
    			//         H_ErrMsg[i] = "セグメント取引先科目が未登録です。"   '2019/06/24 Ver.01.19.01 urata
    			//     End If
    			// End If
//  ↑ 分離仕訳の３コード自動登録対応 ↑
                #endregion

    			// ユニバーサル１
    			if ((!string.IsNullOrEmpty(L_lvOyaDmy1) && Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1FLG]) == 3 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW8]) == 1))
                {
//  ↓ 分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↓
    				if (ChkCodeType_FNC(L_lvOyaDmy1, Convert.ToInt16(H_drVolum[(int)eVOLUM.VOLUM_D1TY])))
                    {
    					if (L_lvOyaDmy1.Length <= Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1LN]))
                        {
    						L_lvOyaDmy1 = EditCode_FNC(L_lvOyaDmy1, (H_drVolum[(int)eVOLUM.VOLUM_D1TY]).ToString(), Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1LN]));
//  ↑ 分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↑
    						if (!(DummyZanExists_FNC(1, H_Con, H_ZData.Kesn, L_lvOyaDmy1, L_lvChildKicd)))
                            {
    							H_RegErr = H_RegErr | MC_DinpCheck_D1Km;
    							H_ErrMsg[i] = "ユニバーサル１が未登録です。";
    							// 2019/06/24 Ver.01.19.01 urata
//  ↓ 分離仕訳の事前未入力・未登録チェック対応 ↓
    							Bunri_ErrVal[i] = L_lvOyaDmy1;
                                i++;
//  ↑ 分離仕訳の事前未入力・未登録チェック対応 ↑
    						}
    					}
    				}
    			}
    			// ユニバーサル２
    			if ((!string.IsNullOrEmpty(L_lvOyaDmy2) && Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2FLG]) == 3 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW9]) == 1))
                {
//  ↓ 分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↓
    				if (ChkCodeType_FNC(L_lvOyaDmy2, Convert.ToInt16(H_drVolum[(int)eVOLUM.VOLUM_D1TY])))
                    {
    					if (L_lvOyaDmy2.Length <= Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2LN]))
                        {
    						L_lvOyaDmy2 = EditCode_FNC(L_lvOyaDmy2, (H_drVolum[(int)eVOLUM.VOLUM_D2TY]).ToString(), Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D2LN]));
//  ↑ 分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↑
    						if (!(DummyZanExists_FNC(2, H_Con, H_ZData.Kesn, L_lvOyaDmy2, L_lvChildKicd)))
                            {
    							H_RegErr = H_RegErr | MC_DinpCheck_D2Km;
    							H_ErrMsg[i] = "ユニバーサル２が未登録です。";
    							// 2019/06/24 Ver.01.19.01 urata
//  ↓ 分離仕訳の事前未入力・未登録チェック対応 ↓
    							Bunri_ErrVal[i] = L_lvOyaDmy2;
                                i++;
//  ↑ 分離仕訳の事前未入力・未登録チェック対応 ↑
    						}
    					}
    				}
    			}
    			// ユニバーサル３
    			//  de2差分対応 Ver03.07.02 変数名間違いを修正
    			if ((!string.IsNullOrEmpty(L_lvOyaDmy3) && Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D3FLG]) == 3 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SSW10]) == 1))
                {
//  ↓ 分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↓
    				if (ChkCodeType_FNC(L_lvOyaDmy3, Convert.ToInt16(H_drVolum[(int)eVOLUM.VOLUM_D3TY])))
                    {
    					if (L_lvOyaDmy1.Length <= Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D1LN]))
                        {
    						L_lvOyaDmy3 = EditCode_FNC(L_lvOyaDmy3, (H_drVolum[(int)eVOLUM.VOLUM_D3TY]).ToString(), Convert.ToInt32(H_drVolum[(int)eVOLUM.VOLUM_D3LN]));
//  ↑ 分離仕訳の事前未入力・未登録チェック対応(英数マスタ桁数未満対応) ↑
    						if (!(DummyZanExists_FNC(3, H_Con, H_ZData.Kesn, L_lvOyaDmy3, L_lvChildKicd)))
                            {
    							H_RegErr = H_RegErr | MC_DinpCheck_D3Km;
    							H_ErrMsg[i] = "ユニバーサル３が未登録です。";
    							// 2019/06/24 Ver.01.19.01 urata
//  ↓ 分離仕訳の事前未入力・未登録チェック対応 ↓
    							Bunri_ErrVal[i] = L_lvOyaDmy3;
                                i++;
//  ↑ 分離仕訳の事前未入力・未登録チェック対応 ↑
    						}
    					}
    				}
                }
                #endregion
            }
            #endregion

            if (H_InpErr == 0 && H_RegErr == 0)
            {
    			return true;
    		}
            else
            {
    			return false;
    		}    
    	}
    
        // *===========================================================================================*
    	//    自動分離・振替作成・税作成時の本体金額＋税額計算
    	// *===========================================================================================*
    	private void SvolumZeiCalq_SUB(decimal H_PVal, decimal H_PSY04, decimal H_PRitu, int H_HSSW, short H_PSiireZeikeika, short H_PMenzeiKeika, ref decimal H_RMainVal, ref decimal H_RZeiVal)
    	{
    		decimal L_LZei   = default(decimal);
    		decimal L_LAbs   = default(decimal);
    		decimal L_LBunbo = default(decimal);
    
    		H_RMainVal = 0;
    		H_RZeiVal  = 0;

            if (H_PVal == 0 || H_PRitu == 0)                  { return; }
    		if (H_PSY04 != 1 && H_PSY04 != 2 && H_PSY04 != 3) { return; }
    		// 税額分離（込み金額　→　抜き金額、税額）
    		if (H_PSY04 == 1) { L_LBunbo = 100 + H_PRitu / 10000; }
    		// 振替作成（込み金額　→　込み金額、税額）
    		if (H_PSY04 == 2) { L_LBunbo = 100 + H_PRitu / 10000; }
    		// 税作成　（抜き金額　→　抜き金額、税額）
    		if (H_PSY04 == 3) { L_LBunbo = 100;                   }
    
    		// 税額(小数点１位まで計算)
    		L_LZei = H_PVal * (H_PRitu / 10000) / L_LBunbo;
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    		L_LZei = Conversion.Fix(L_LZei * 10) / 10;
    // 2023/10/20 Ver02.27.01 免税計算不具合対応(関数移動) --->
    //		L_LZei = Math.Truncate(L_LZei * 10) / 10;
    // <--- 2023/10/20 Ver02.27.01 免税計算不具合対応(関数移動)
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
// Ver02.26.01 インボイス対応 --->
            if (H_PSiireZeikeika == 0)
            {
                if (H_PMenzeiKeika == 1)
                {
                    L_LZei = L_LZei * 8 / 10;
                }
                else if (H_PMenzeiKeika == 2)
                {
                    L_LZei = L_LZei * 5 / 10;
                }
            }
    // 2023/10/20 Ver02.27.01 免税計算不具合対応(関数移動) --->
            L_LZei = Math.Truncate(L_LZei * 10) / 10;
    // <--- 2023/10/20 Ver02.27.01 免税計算不具合対応(関数移動)
// <--- Ver02.26.01 インボイス対応

    		// 絶対値
    		L_LAbs = Math.Abs(L_LZei);

    		// 端数処理
    		switch (H_HSSW)
            {
    			case 1:   // 切上    				
    				if (L_LAbs != 0) { L_LAbs = L_LAbs + (decimal)0.4; }
    				break;
    			case 2:   // 四捨五入
    				break;    			
    			default:  // 切捨    				
    				if (L_LAbs != 0) { L_LAbs = L_LAbs - (decimal)0.5; }
    				break;
    		}

            // 税額確定
            #region 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    		if (L_LZei > 0) 
//            {
//    			H_RZeiVal = Conversion.Fix(L_LAbs + (decimal)0.5 * Math.Sign(L_LAbs));
//    		}
//            else
//            {
//    			H_RZeiVal = Conversion.Fix(L_LAbs + (decimal)0.5 * Math.Sign(L_LAbs)) * (-1);
//    		}
            #endregion
            if (L_LZei > 0) 
            {
    			H_RZeiVal = Math.Truncate(L_LAbs + (decimal)0.5 * Math.Sign(L_LAbs));
    		}
            else
            {
    			H_RZeiVal = Math.Truncate(L_LAbs + (decimal)0.5 * Math.Sign(L_LAbs)) * (-1);
    		}
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応

    		// 税額分離（込み金額　→　抜き金額、税額）
    		if (H_PSY04 == 1) { H_RMainVal = H_PVal - H_RZeiVal; }
    		// 振替作成（込み金額　→　込み金額、税額）
    		if (H_PSY04 == 2) { H_RMainVal = H_PVal;             }
    		// 税作成　（抜き金額　→　抜き金額、税額）
    		if (H_PSY04 == 3) { H_RMainVal = H_PVal;             }
    	}
        #endregion

        #region 支払・入金関連
        // *===========================================================================================*
        //    支払区分・入金区分が使用できる科目かどうかをチェック
        // 		【パラメータ】
        // 		  1.IDbConnection
        //          2.内部決算期
        // 		　3.支払・受取区分
        // 		　4.区分番号
        // 		　5.借方　科目内部コード
        // 		　6.貸方　科目内部コード
        // 		【返送値】
        // 		　　-1：エラー　
        // 		　　 0：区分使用不可
        // 		　　 1：区分使用可
        // 
        // *===========================================================================================*
        private int CheckSubject_FNC(IDbConnection H_Con, int H_prKESN, string H_prKFLG, string H_prKBNO, string H_prKICD_R, string H_prKICD_S)
    	{
    		IDbDataAdapter L_Adapter = default(IDbDataAdapter);
    		string         L_SQL     = "";
    		DataSet        L_ds      = new DataSet();
    		DataTable      L_Table   = new DataTable();

            #region 借方
            L_SQL = "SELECT HFLG FROM SUBJECT " + " WHERE KESN = " + H_prKESN + " AND KFLG = " + H_prKFLG + " AND KICD ='" + H_prKICD_R + "'";

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    		if (G_IsOracle)
//          {
////    			L_Adapter = new OleDb.OleDbDataAdapter();
////    			L_Adapter.SelectCommand = new SqlCommand(L_SQL, H_Con);
//    		}
//          else
//          {                
//    			L_Adapter               = new SqlDataAdapter();
//    			L_Adapter.SelectCommand = new SqlCommand(L_SQL, S_Con);
//    		}
            L_Adapter = G_DbFactory.CreateDbDataAdapterAndSelectCommand(H_Con, L_SQL);
            L_ds      = new DataSet();
    		L_Table   = new DataTable();
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0)
            {
    			L_Table = L_ds.Tables[0];
    		}
    		if (L_Table.Rows.Count > 0)
            {
    			switch (Convert.ToInt32(L_Table.Rows[0][0]))
                {
    				case 1:
    				case 3:
// 2021/09/01 Ver02.22.12 分離支払日不具合対応(支払区分チェックは別) --->
//    					if (CheckPAYWAY_FNC(H_Con, H_prKFLG, H_prKBNO) == 1)
//                        {
    						return 1;
//    					}
//                        break;
// <--- 2021/09/01 Ver02.22.12 分離支払日不具合対応(支払区分チェックは別)
                }
            }
    		L_ds.Dispose();
    		L_Table.Dispose();
            #endregion
            #region 貸方
            L_SQL = "SELECT HFLG FROM SUBJECT " + " WHERE KESN = " + H_prKESN + " AND KFLG = " + H_prKFLG + " AND KICD ='" + H_prKICD_S + "'";

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    		if (G_IsOracle)
//            {
////    			L_Adapter = new OleDb.OleDbDataAdapter();
////    			L_Adapter.SelectCommand = new SqlCommand(L_SQL, H_Con);
//    		}
//            else
//            {
//    			L_Adapter = new SqlDataAdapter();
//    			L_Adapter.SelectCommand = new SqlCommand(L_SQL, S_Con);
//    		}
            L_Adapter = G_DbFactory.CreateDbDataAdapterAndSelectCommand(H_Con, L_SQL);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
            
    		L_ds    = new DataSet();
    		L_Table = new DataTable();

    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0)
            {
    			L_Table = L_ds.Tables[0];
    		}
    		if (L_Table.Rows.Count > 0)
            {
    			switch (Convert.ToInt32(L_Table.Rows[0][0]))
                {
    				case 2:
    				case 3:
// 2021/09/01 Ver02.22.12 分離支払日不具合対応(支払区分チェックは別) --->
//                        if (CheckPAYWAY_FNC(H_Con, H_prKFLG, H_prKBNO) == 1)
//                        {
    						return 1;
//    					  } 
//                        else
//                        {
//    						return 0;
//    					  }
    				default:
    					return 0;
// <--- 2021/09/01 Ver02.22.12 分離支払日不具合対応(支払区分チェックは別)
                }
            }
    		L_Table.Dispose();
            #endregion

            return 1;
    	}
    
    	// *===========================================================================================*
    	//    支払・入金区分チェック
    	// 		【パラメータ】
    	// 		  1.IDbConnection
    	// 		　2.支払・受取区分
    	// 		　3.区分NO
    	// 		【返送値】
    	// 		　　-1：エラー　
    	// 		　　 0：該当レコードなし
    	// 		　　 1：区分ＯＫ
    	// 
    	// *===========================================================================================*
    	private int CheckPAYWAY_FNC(IDbConnection H_Con, string H_prKFLG, string H_prKBNO)
    	{
    
    		IDbDataAdapter L_Adapter = default(IDbDataAdapter);
    		string         L_SQL     = null;
    		DataSet        L_ds      = default(DataSet);
    		DataTable      L_Table   = default(DataTable);

//            SqlConnection S_Con = (SqlConnection)H_Con;

            // 借方
            L_SQL = "SELECT KBNO FROM PAYWAY WHERE KFLG = " + H_prKFLG;

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    		if (G_IsOracle)
//          {
////    			L_Adapter = new OleDb.OleDbDataAdapter();
////    			L_Adapter.SelectCommand = new SqlCommand(L_SQL, H_Con);
//    		}
//          else
//          {
//    			L_Adapter = new SqlDataAdapter();
//    			L_Adapter.SelectCommand = new SqlCommand(L_SQL, S_Con);
//    		}
            L_Adapter = G_DbFactory.CreateDbDataAdapterAndSelectCommand(H_Con, L_SQL);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

    		L_ds    = new DataSet();
    		L_Table = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch
            {
    			return -1;
    		}

    		if (L_ds.Tables.Count > 0)  { L_Table = L_ds.Tables[0]; }

    		if (L_Table.Rows.Count > 0) { return 1; }
            else                        { return 0; }
    	}
        #endregion

        private int SvolumGetBnrKmk_FNC(DataRow H_drSvolum, structSVOLKM[] H_SVolumKm, int H_nPOyaSY01, int H_nPOyaZeik, ref string H_strRKicd, ref int[] H_nRSY00, ref int H_nRKK01, ref int[] H_nRXX01, ref int H_nRXX02)
    	{
    		int L_Ret = 0;
    
    		L_Ret = -1;

    		switch (H_nPOyaSY01)
            {
    			case 3:
    				// 負債       ------------ 仮受系
    				// 仮受消費税(売上)
    				L_Ret = 0;
    				break;
    			case 4:
    				// 売上
    				// 仮受消費税(売上)
    				L_Ret = 0;
    				break;
    			case 9:
    				// 売上値引
    				// 仮受消費税(売上)
    				L_Ret = 0;
    				break;
    			case 5:
    				// 仕入       ------------ 仮払系
    				// 仮払消費税(仕入)
    				L_Ret = 5;
    				break;
    			case 10:
    				// 仕入値引
    				// 仮払消費税(仕入)
    				L_Ret = 5;
    				break;
    			case 6:
    				// 経費
    				// 仮払消費税(経費)
    				L_Ret = 6;
    				break;
    			case 7:
    				// 混在       ------------ 課税区分で判断
    				if (H_nPOyaZeik == 11 || H_nPOyaZeik == 13) { L_Ret = 5; }  // 仮払消費税(仕入)
    				if (H_nPOyaZeik == 12 || H_nPOyaZeik == 14) { L_Ret = 0; }  // 仮受消費税(売上)    				
    				break;
    			case 2:
    				// 資産
    				if (H_nPOyaZeik == 11 || H_nPOyaZeik == 13) { L_Ret = 7; }  // 仮払消費税(資産)    				
    				if (H_nPOyaZeik == 12 || H_nPOyaZeik == 14 ||
                        H_nPOyaZeik == 21 || H_nPOyaZeik == 22 ||
                        H_nPOyaZeik == 23 || H_nPOyaZeik == 24) { L_Ret = 3; }  // 仮受消費税(資産)   				
    				break;
    			case 8:
    				// 有価証券
    				if (H_nPOyaZeik == 11 || H_nPOyaZeik == 13) { L_Ret = 7; }  // 仮払消費税(資産)    				
    				if (H_nPOyaZeik == 12 || H_nPOyaZeik == 14 ||
                        H_nPOyaZeik == 21 || H_nPOyaZeik == 22 ||
                        H_nPOyaZeik == 23 || H_nPOyaZeik == 24) { L_Ret = 3; }	// 仮受消費税(資産)    			
    				break;
    			default:    
    				break;
    		}
    
    		// 再チェック
    		if (L_Ret != -1)
            {
    			// 該当科目が存在しない
    			if (string.IsNullOrEmpty(H_SVolumKm[L_Ret].strKCOD))
                {
    				L_Ret = -1;
    			}
                else
                {
    				switch (L_Ret)
                    {
    					case 0:
    						H_strRKicd = (H_drSvolum[(int)eSVOLUM.SVOLUM_KUF1]).ToString();
    						break;
    					case 3:
    						H_strRKicd = (H_drSvolum[(int)eSVOLUM.SVOLUM_KUF4]).ToString();
    						break;
    					case 5:
    						H_strRKicd = (H_drSvolum[(int)eSVOLUM.SVOLUM_KBF2]).ToString();
    						break;
    					case 6:
    						H_strRKicd = (H_drSvolum[(int)eSVOLUM.SVOLUM_KBF3]).ToString();
    						break;
    					case 7:
    						H_strRKicd = (H_drSvolum[(int)eSVOLUM.SVOLUM_KBF4]).ToString();
    						break;
    					default:
    						H_strRKicd = "";
    						break;
    				}
    
    				H_nRSY00[0] = H_SVolumKm[L_Ret].nSY01;
    				H_nRSY00[1] = H_SVolumKm[L_Ret].nSY02;
    				H_nRSY00[2] = H_SVolumKm[L_Ret].nSY03;
    				H_nRSY00[3] = H_SVolumKm[L_Ret].nSY04;
    				H_nRSY00[4] = H_SVolumKm[L_Ret].nSY05;
    				H_nRSY00[5] = H_SVolumKm[L_Ret].nSY06;
    				H_nRSY00[6] = H_SVolumKm[L_Ret].nSY07;
    				H_nRSY00[7] = H_SVolumKm[L_Ret].nSY08;
    
    				H_nRKK01    = H_SVolumKm[L_Ret].nKK01;
    
    				H_nRXX01[0] = H_SVolumKm[L_Ret].nBKE01;
    				H_nRXX01[1] = H_SVolumKm[L_Ret].nBTK01;
    				H_nRXX01[2] = H_SVolumKm[L_Ret].nBTKE01;
    				H_nRXX01[3] = H_SVolumKm[L_Ret].nTKE01;
    				H_nRXX01[4] = H_SVolumKm[L_Ret].nSTK01;
    
    				H_nRXX02    = H_SVolumKm[L_Ret].nInp;
    			}
    		}
    		return L_Ret;
    	}    

    	// *===========================================================================================*
    	//    パラメータチェック
    	// *===========================================================================================*
    	private int ChkPara_FNC(string H_CCOD, int H_PrcFlg, int H_DFUK, int H_LogFlg, string H_Path, string H_Fname, string H_LogPath, string H_LogFname, int H_RNo, int H_IJPT = 0,
    	                        int H_Kanzan = 0, string H_Kakutei = "", string H_SYBMNCD = "", int H_RUCOD = 0, int H_NonePathCheck = 1)
    	{
    		int functionReturnValue = 0;
    
    		string[] L_Name   = null;
    		int      L_Ubound = 0;
    
            #region ** 会社コード
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//    		if (Strings.Len(H_CCOD) == 4)
            if (H_CCOD.Length == 4)
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応
            { }
            else
            {
    			functionReturnValue = MC_RESULT_ERR_CCOD;
    			return functionReturnValue;
    		}
            #endregion
            #region ** 処理区分
    		switch (H_PrcFlg)
            {
    			case 0:
    			case 1:
    				break;
    			default:
    				functionReturnValue = MC_RESULT_ERR_PRCFLG;
    				return functionReturnValue;
    		}
            #endregion
            #region ** 伝票形式
    		switch (H_DFUK) {
    			case 0:
    			case 2:
    			case 1:
    				break;
    			default:
    				functionReturnValue = MC_RESULT_ERR_DFUK;
    				return functionReturnValue;
    		}
            #endregion
            #region ** ログ出力ファイル
    		switch (H_LogFlg)
            {
    			case 0:
    			case 1:
    			case 11:
    				break;
    			default:
    				functionReturnValue = MC_RESULT_ERR_LOGFLG;
    				return functionReturnValue;
    		}
            #endregion
    
            #region インポートファイルパスチェック
    		// メモリ渡しではパスのチェックを行わない    
    		if (H_NonePathCheck == 1)
            {
    			// ** インポートファイルパス
    			if (string.IsNullOrEmpty(H_Path))
                {
    				functionReturnValue = MC_RESULT_ERR_PATH;
    				return functionReturnValue;
    			}
    			if (Directory.Exists(H_Path) == false)
                {
    				functionReturnValue = MC_RESULT_ERR_PATH;
    				return functionReturnValue;
    			}

                // ** インポートファイル名(拡張子(SWK)チェック)
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//                L_Name = Strings.Split(H_Fname, ".");
//    			L_Ubound = Information.UBound(L_Name);
//    			if ((!string.IsNullOrEmpty(L_Name[0])) && (L_Ubound > 0) && (Strings.StrComp(L_Name[L_Ubound], "SWK", CompareMethod.Text) == 0))
                L_Name   = Regex.Split(H_Fname, ".");
                L_Ubound = L_Name.Length - 1;
                if ((!string.IsNullOrEmpty(L_Name[0])) && (L_Ubound > 0) && (string.Compare(L_Name[L_Ubound], "SWK") == 0))
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                { }
                else
                {
    				functionReturnValue = MC_RESULT_ERR_FNAME;
    				return functionReturnValue;
    			}
    			L_Name = null;    
    		}
            #endregion
            #region ログファイルパスチェック
    		if ((H_PrcFlg != 2) && (H_LogFlg == 1))
            {
    			// ** ログファイルパス
    			if (string.IsNullOrEmpty(H_LogPath))
                {
    				functionReturnValue = MC_RESULT_ERR_LOGPATH;
    				return functionReturnValue;
    			}
    			if (Directory.Exists(H_LogPath) == false)
                {
    				functionReturnValue = MC_RESULT_ERR_LOGPATH;
    				return functionReturnValue;
    			}

                // ** ログファイル名(拡張子(LOG)チェック)
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//                L_Name = Strings.Split(H_LogFname, ".");
//    			L_Ubound = Information.UBound(L_Name);
//                if ((!string.IsNullOrEmpty(L_Name[0])) && (L_Ubound > 0) && (Strings.StrComp(L_Name[L_Ubound], "LOG", CompareMethod.Text) == 0))
                L_Name = Regex.Split(H_Fname, ".");
                L_Ubound = L_Name.Length - 1;
                //if ((!string.IsNullOrEmpty(L_Name[0])) && (L_Ubound > 0) && (string.Compare(L_Name[L_Ubound], "LOG") == 0))
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応
                //{ }
       //         else
       //         {
    			//	functionReturnValue = MC_RESULT_ERR_LOGFNAME;
    			//	return functionReturnValue;
    			//}
    			L_Name = null;    
    		}
            #endregion

            #region ** レイアウトNo
            isNewLayout = H_RNo == 1 || H_RNo == 2;     // Ver02.26.01 インボイス対応
            #region de3(旧)レイアウト
            if (H_RNo == 0)
            {
    			G_Index_DYMD       = (int)eIMPDATA.DATA_DYMD;
    			G_Index_SEIRI      = (int)eIMPDATA.DATA_SEIRI;
    			G_Index_DCNO       = (int)eIMPDATA.DATA_DCNO;
    			G_Index_KYMD       = (int)eIMPDATA.DATA_KYMD;
    			G_Index_KBMN       = (int)eIMPDATA.DATA_KBMN;
    			G_Index_KUSR       = (int)eIMPDATA.DATA_KUSR;
    			G_Index_SGNO       = (int)eIMPDATA.DATA_SGNO;
    			G_Index_HF1        = -1;
    			G_Index_HF2        = -1;
    			G_Index_HF3        = -1;
    			G_Index_HF4        = -1;
    			G_Index_HF5        = -1;
    			G_Index_HF6        = -1;
    			G_Index_HF7        = -1;
    			G_Index_HF8        = -1;
    			G_Index_HF9        = -1;
    			G_Index_HF10       = -1;
    
    			G_Index_RBMN       = (int)eIMPDATA.DATA_RBMN;
    			G_Index_RTOR       = (int)eIMPDATA.DATA_RTOR;
    			G_Index_RKMK       = (int)eIMPDATA.DATA_RKMK;
    			G_Index_REDA       = (int)eIMPDATA.DATA_REDA;
    			G_Index_RKOJ       = (int)eIMPDATA.DATA_RKOJ;
    			G_Index_RKOS       = (int)eIMPDATA.DATA_RKOS;
    			G_Index_RPRJ       = (int)eIMPDATA.DATA_RPRJ;
    			G_Index_RSEG       = (int)eIMPDATA.DATA_RSEG;
    			G_Index_RDM1       = (int)eIMPDATA.DATA_RDM1;
    			G_Index_RDM2       = (int)eIMPDATA.DATA_RDM2;
    			G_Index_RDM3       = (int)eIMPDATA.DATA_RDM3;
    			G_Index_RDM4       = -1;
    			G_Index_RDM5       = -1;
    			G_Index_RDM6       = -1;
    			G_Index_RDM7       = -1;
    			G_Index_RDM8       = -1;
    			G_Index_RDM9       = -1;
    			G_Index_RDM10      = -1;
    			G_Index_RDM11      = -1;
    			G_Index_RDM12      = -1;
    			G_Index_RDM13      = -1;
    			G_Index_RDM14      = -1;
    			G_Index_RDM15      = -1;
    			G_Index_RDM16      = -1;
    			G_Index_RDM17      = -1;
    			G_Index_RDM18      = -1;
    			G_Index_RDM19      = -1;
    			G_Index_RDM20      = -1;
    			G_Index_RRIT       = (int)eIMPDATA.DATA_RRIT;
    			G_Index_RZKB       = (int)eIMPDATA.DATA_RZKB;
    			G_Index_RGYO       = (int)eIMPDATA.DATA_RGYO;
    			G_Index_RSRE       = (int)eIMPDATA.DATA_RSRE;
    			G_Index_RTKY       = (int)eIMPDATA.DATA_RTKY;
    			G_Index_RTNO       = (int)eIMPDATA.DATA_RTNO;
    
    			G_Index_SBMN       = (int)eIMPDATA.DATA_SBMN;
    			G_Index_STOR       = (int)eIMPDATA.DATA_STOR;
    			G_Index_SKMK       = (int)eIMPDATA.DATA_SKMK;
    			G_Index_SEDA       = (int)eIMPDATA.DATA_SEDA;
    			G_Index_SKOJ       = (int)eIMPDATA.DATA_SKOJ;
    			G_Index_SKOS       = (int)eIMPDATA.DATA_SKOS;
    			G_Index_SPRJ       = (int)eIMPDATA.DATA_SPRJ;
    			G_Index_SSEG       = (int)eIMPDATA.DATA_SSEG;
    			G_Index_SDM1       = (int)eIMPDATA.DATA_SDM1;
    			G_Index_SDM2       = (int)eIMPDATA.DATA_SDM2;
    			G_Index_SDM3       = (int)eIMPDATA.DATA_SDM3;
    			G_Index_SDM4       = -1;
    			G_Index_SDM5       = -1;
    			G_Index_SDM6       = -1;
    			G_Index_SDM7       = -1;
    			G_Index_SDM8       = -1;
    			G_Index_SDM9       = -1;
    			G_Index_SDM10      = -1;
    			G_Index_SDM11      = -1;
    			G_Index_SDM12      = -1;
    			G_Index_SDM13      = -1;
    			G_Index_SDM14      = -1;
    			G_Index_SDM15      = -1;
    			G_Index_SDM16      = -1;
    			G_Index_SDM17      = -1;
    			G_Index_SDM18      = -1;
    			G_Index_SDM19      = -1;
    			G_Index_SDM20      = -1;
    			G_Index_SRIT       = (int)eIMPDATA.DATA_SRIT;
    			G_Index_SZKB       = (int)eIMPDATA.DATA_SZKB;
    			G_Index_SGYO       = (int)eIMPDATA.DATA_SGYO;
    			G_Index_SSRE       = (int)eIMPDATA.DATA_SSRE;
    			G_Index_STKY       = (int)eIMPDATA.DATA_RTKY;
    			G_Index_STNO       = (int)eIMPDATA.DATA_RTNO;
    
    			G_Index_ZKMK       = (int)eIMPDATA.DATA_ZKMK;
    			G_Index_ZRIT       = (int)eIMPDATA.DATA_ZRIT;
    			G_Index_ZZKB       = (int)eIMPDATA.DATA_ZZKB;
    			G_Index_ZGYO       = (int)eIMPDATA.DATA_ZGYO;
    			G_Index_ZSRE       = (int)eIMPDATA.DATA_ZSRE;
    
    			G_Index_EXVL       = (int)eIMPDATA.DATA_EXVL;
    			G_Index_VALU       = (int)eIMPDATA.DATA_VALU;
    			G_Index_SYMD       = (int)eIMPDATA.DATA_SYMD;
    			G_Index_SKBN       = (int)eIMPDATA.DATA_SKBN;
    			G_Index_SKIZ       = (int)eIMPDATA.DATA_SKIZ;
    			G_Index_UYMD       = (int)eIMPDATA.DATA_UYMD;
    			G_Index_UKBN       = (int)eIMPDATA.DATA_UKBN;
    			G_Index_UKIZ       = (int)eIMPDATA.DATA_UKIZ;
    			G_Index_DKEC       = (int)eIMPDATA.DATA_DKEC;
    			G_Index_FUSR       = (int)eIMPDATA.DATA_FUSR;
    			G_Index_FSEN       = (int)eIMPDATA.DATA_FSEN;
    			G_Index_TKFLG      = -1;
    			G_Index_BUNRI      = (int)eIMPDATA.DATA_BKBN;
    
    			G_Index_HEIC       = -1;
    			G_Index_RATE       = (int)eIMPDATA.DATA_RATE;
    			G_Index_GEXVL      = (int)eIMPDATA.DATA_GEXVL;
    			G_Index_GAIKA      = (int)eIMPDATA.DATA_GAIKA;
    
    			G_Index_GSEP       = (int)eIMPDATA.DATA_GSEP;
    
    			// *-リンク情報
    			G_Index_ZLNO       = (int)eIMPDATA.DATA_ZLNO;
    			// -*
    
    			// <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    			G_Index_RKEIGEN    = (int)eIMPDATA.DATA_RKEIGEN;
    			G_Index_SKEIGEN    = (int)eIMPDATA.DATA_SKEIGEN;
    			G_Index_ZKEIGEN    = (int)eIMPDATA.DATA_ZKEIGEN;
    			// --->Ver01.16.02
    
    			G_Index_ITEM_COUNT = (int)eIMPDATA.DATA_ITEM_COUNT;
    			// <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    			// M_ItemName = {"全般", "伝票日付", "整理月フラグ", "伝票番号", "借方部門", _
    			//                       "借方取引先", "借方科目", "借方枝番", "借方工事№", "借方工種№", _
    			//                       "借方プロジェクト", "借方セグメント", "借方ユニバーサル１", "借方ユニバーサル２", "借方ユニバーサル３", _
    			//                       "借方摘要", "借方摘要コード", "貸方部門", "貸方取引先", "貸方科目", _
    			//                       "貸方枝番", "貸方工事№", "貸方工種№", "貸方プロジェクト", "貸方セグメント", _
    			//                       "貸方ユニバーサル１", "貸方ユニバーサル２", "貸方ユニバーサル３", "対価金額", "金額", _
    			//                       "税対象科目", "税対象科目 税率", "税対象科目 課税区分", "税対象科目 業種区分", "税対象科目 仕入区分", _
    			//                       "借方税率", "貸方税率", "借方課税区分", "借方業種区分", "借方仕入区分", _
    			//                       "貸方課税区分", "貸方業種区分", "貸方仕入区分", "支払日", "支払区分", _
    			//                       "支払期日", "回収日", "入金区分", "回収期日", "店券フラグ", _
    			//                       "消込コード", "起票年月日", "起票部門", "起票者", "入力者", _
    			//                       "付箋番号", "承認グループ№", "分離区分", "レート", "外貨対価金額", "外貨金額", "行区切り", "リンクNo"}
    			M_ItemName = new string[]{
    				"全般",
    				"伝票日付",
    				"整理月フラグ",
    				"伝票番号",
    				"借方部門",
    				"借方取引先",
    				"借方科目",
    				"借方枝番",
    				"借方工事№",
    				"借方工種№",
    				"借方プロジェクト",
    				"借方セグメント",
    				"借方ユニバーサル１",
    				"借方ユニバーサル２",
    				"借方ユニバーサル３",
    				"借方摘要",
    				"借方摘要コード",
    				"貸方部門",
    				"貸方取引先",
    				"貸方科目",
    				"貸方枝番",
    				"貸方工事№",
    				"貸方工種№",
    				"貸方プロジェクト",
    				"貸方セグメント",
    				"貸方ユニバーサル１",
    				"貸方ユニバーサル２",
    				"貸方ユニバーサル３",
    				"対価金額",
    				"金額",
    				"税対象科目",
    				"税対象科目 税率",
    				"税対象科目 課税区分",
    				"税対象科目 業種区分",
    				"税対象科目 仕入区分",
    				"借方税率",
    				"貸方税率",
    				"借方課税区分",
    				"借方業種区分",
    				"借方仕入区分",
    				"貸方課税区分",
    				"貸方業種区分",
    				"貸方仕入区分",
    				"支払日",
    				"支払区分",
    				"支払期日",
    				"回収日",
    				"入金区分",
    				"回収期日",
    				"店券フラグ",
    				"消込コード",
    				"起票年月日",
    				"起票部門",
    				"起票者",
    				"入力者",
    				"付箋番号",
    				"承認グループ№",
    				"分離区分",
    				"レート",
    				"外貨対価金額",
    				"外貨金額",
    				"行区切り",
    				"リンクNo",
    				"借方　軽減税率区分",
    				"貸方　軽減税率区分",
    				"税対象科目　軽減税率区分"
    			};
    			// --->Ver01.16.02
            }
            #endregion
            #region SIAS(新)レイアウト
// Ver02.26.01 インボイス対応 --->
//          else if (H_RNo == 1)
//          {
            else if (isNewLayout) {    
// <--- Ver02.26.01 インボイス対応

    			G_Index_DYMD       = (int)eIMPDATA_1.DATA_DYMD;
    			G_Index_SEIRI      = (int)eIMPDATA_1.DATA_SEIRI;
    			G_Index_DCNO       = (int)eIMPDATA_1.DATA_DCNO;
    			G_Index_KYMD       = (int)eIMPDATA_1.DATA_KYMD;
    			G_Index_KBMN       = (int)eIMPDATA_1.DATA_KBMN;
    			G_Index_KUSR       = (int)eIMPDATA_1.DATA_KUSR;
    			G_Index_SGNO       = (int)eIMPDATA_1.DATA_SGNO;
    			G_Index_HF1        = (int)eIMPDATA_1.DATA_HF1;
    			G_Index_HF2        = (int)eIMPDATA_1.DATA_HF2;
    			G_Index_HF3        = (int)eIMPDATA_1.DATA_HF3;
    			G_Index_HF4        = (int)eIMPDATA_1.DATA_HF4;
    			G_Index_HF5        = (int)eIMPDATA_1.DATA_HF5;
    			G_Index_HF6        = (int)eIMPDATA_1.DATA_HF6;
    			G_Index_HF7        = (int)eIMPDATA_1.DATA_HF7;
    			G_Index_HF8        = (int)eIMPDATA_1.DATA_HF8;
    			G_Index_HF9        = (int)eIMPDATA_1.DATA_HF9;
    			G_Index_HF10       = (int)eIMPDATA_1.DATA_HF10;
    
    			G_Index_RBMN       = (int)eIMPDATA_1.DATA_RBMN;
    			G_Index_RTOR       = (int)eIMPDATA_1.DATA_RTOR;
    			G_Index_RKMK       = (int)eIMPDATA_1.DATA_RKMK;
    			G_Index_REDA       = (int)eIMPDATA_1.DATA_REDA;
    			G_Index_RKOJ       = (int)eIMPDATA_1.DATA_RKOJ;
    			G_Index_RKOS       = (int)eIMPDATA_1.DATA_RKOS;
    			G_Index_RPRJ       = (int)eIMPDATA_1.DATA_RPRJ;
    			G_Index_RSEG       = (int)eIMPDATA_1.DATA_RSEG;
    			G_Index_RDM1       = (int)eIMPDATA_1.DATA_RDM1;
    			G_Index_RDM2       = (int)eIMPDATA_1.DATA_RDM2;
    			G_Index_RDM3       = (int)eIMPDATA_1.DATA_RDM3;
    			G_Index_RDM4       = (int)eIMPDATA_1.DATA_RDM4;
    			G_Index_RDM5       = (int)eIMPDATA_1.DATA_RDM5;
    			G_Index_RDM6       = (int)eIMPDATA_1.DATA_RDM6;
    			G_Index_RDM7       = (int)eIMPDATA_1.DATA_RDM7;
    			G_Index_RDM8       = (int)eIMPDATA_1.DATA_RDM8;
    			G_Index_RDM9       = (int)eIMPDATA_1.DATA_RDM9;
    			G_Index_RDM10      = (int)eIMPDATA_1.DATA_RDM10;
    			G_Index_RDM11      = (int)eIMPDATA_1.DATA_RDM11;
    			G_Index_RDM12      = (int)eIMPDATA_1.DATA_RDM12;
    			G_Index_RDM13      = (int)eIMPDATA_1.DATA_RDM13;
    			G_Index_RDM14      = (int)eIMPDATA_1.DATA_RDM14;
    			G_Index_RDM15      = (int)eIMPDATA_1.DATA_RDM15;
    			G_Index_RDM16      = (int)eIMPDATA_1.DATA_RDM16;
    			G_Index_RDM17      = (int)eIMPDATA_1.DATA_RDM17;
    			G_Index_RDM18      = (int)eIMPDATA_1.DATA_RDM18;
    			G_Index_RDM19      = (int)eIMPDATA_1.DATA_RDM19;
    			G_Index_RDM20      = (int)eIMPDATA_1.DATA_RDM20;
    			G_Index_RRIT       = (int)eIMPDATA_1.DATA_RRIT;
    			G_Index_RZKB       = (int)eIMPDATA_1.DATA_RZKB;
    			G_Index_RGYO       = (int)eIMPDATA_1.DATA_RGYO;
    			G_Index_RSRE       = (int)eIMPDATA_1.DATA_RSRE;
    			G_Index_RTKY       = (int)eIMPDATA_1.DATA_RTKY;
    			G_Index_RTNO       = (int)eIMPDATA_1.DATA_RTNO;
    
    			G_Index_SBMN       = (int)eIMPDATA_1.DATA_SBMN;
    			G_Index_STOR       = (int)eIMPDATA_1.DATA_STOR;
    			G_Index_SKMK       = (int)eIMPDATA_1.DATA_SKMK;
    			G_Index_SEDA       = (int)eIMPDATA_1.DATA_SEDA;
    			G_Index_SKOJ       = (int)eIMPDATA_1.DATA_SKOJ;
    			G_Index_SKOS       = (int)eIMPDATA_1.DATA_SKOS;
    			G_Index_SPRJ       = (int)eIMPDATA_1.DATA_SPRJ;
    			G_Index_SSEG       = (int)eIMPDATA_1.DATA_SSEG;
    			G_Index_SDM1       = (int)eIMPDATA_1.DATA_SDM1;
    			G_Index_SDM2       = (int)eIMPDATA_1.DATA_SDM2;
    			G_Index_SDM3       = (int)eIMPDATA_1.DATA_SDM3;
    			G_Index_SDM4       = (int)eIMPDATA_1.DATA_SDM4;
    			G_Index_SDM5       = (int)eIMPDATA_1.DATA_SDM5;
    			G_Index_SDM6       = (int)eIMPDATA_1.DATA_SDM6;
    			G_Index_SDM7       = (int)eIMPDATA_1.DATA_SDM7;
    			G_Index_SDM8       = (int)eIMPDATA_1.DATA_SDM8;
    			G_Index_SDM9       = (int)eIMPDATA_1.DATA_SDM9;
    			G_Index_SDM10      = (int)eIMPDATA_1.DATA_SDM10;
    			G_Index_SDM11      = (int)eIMPDATA_1.DATA_SDM11;
    			G_Index_SDM12      = (int)eIMPDATA_1.DATA_SDM12;
    			G_Index_SDM13      = (int)eIMPDATA_1.DATA_SDM13;
    			G_Index_SDM14      = (int)eIMPDATA_1.DATA_SDM14;
    			G_Index_SDM15      = (int)eIMPDATA_1.DATA_SDM15;
    			G_Index_SDM16      = (int)eIMPDATA_1.DATA_SDM16;
    			G_Index_SDM17      = (int)eIMPDATA_1.DATA_SDM17;
    			G_Index_SDM18      = (int)eIMPDATA_1.DATA_SDM18;
    			G_Index_SDM19      = (int)eIMPDATA_1.DATA_SDM19;
    			G_Index_SDM20      = (int)eIMPDATA_1.DATA_SDM20;
    			G_Index_SRIT       = (int)eIMPDATA_1.DATA_SRIT;
    			G_Index_SZKB       = (int)eIMPDATA_1.DATA_SZKB;
    			G_Index_SGYO       = (int)eIMPDATA_1.DATA_SGYO;
    			G_Index_SSRE       = (int)eIMPDATA_1.DATA_SSRE;
    			G_Index_STKY       = (int)eIMPDATA_1.DATA_STKY;
    			G_Index_STNO       = (int)eIMPDATA_1.DATA_STNO;
    
    			G_Index_ZKMK       = (int)eIMPDATA_1.DATA_ZKMK;
    			G_Index_ZRIT       = (int)eIMPDATA_1.DATA_ZRIT;
    			G_Index_ZZKB       = (int)eIMPDATA_1.DATA_ZZKB;
    			G_Index_ZGYO       = (int)eIMPDATA_1.DATA_ZGYO;
    			G_Index_ZSRE       = (int)eIMPDATA_1.DATA_ZSRE;
    
    			G_Index_EXVL       = (int)eIMPDATA_1.DATA_EXVL;
    			G_Index_VALU       = (int)eIMPDATA_1.DATA_VALU;
    			G_Index_SYMD       = (int)eIMPDATA_1.DATA_SYMD;
    			G_Index_SKBN       = (int)eIMPDATA_1.DATA_SKBN;
    			G_Index_SKIZ       = (int)eIMPDATA_1.DATA_SKIZ;
    			G_Index_UYMD       = (int)eIMPDATA_1.DATA_UYMD;
    			G_Index_UKBN       = (int)eIMPDATA_1.DATA_UKBN;
    			G_Index_UKIZ       = (int)eIMPDATA_1.DATA_UKIZ;
    			G_Index_DKEC       = (int)eIMPDATA_1.DATA_DKEC;
    			G_Index_FUSR       = (int)eIMPDATA_1.DATA_FUSR;
    			G_Index_FSEN       = (int)eIMPDATA_1.DATA_FSEN;
    			G_Index_TKFLG      = (int)eIMPDATA_1.DATA_TKFLG;
    			G_Index_BUNRI      = (int)eIMPDATA_1.DATA_BUNRI;
    
    			G_Index_HEIC       = (int)eIMPDATA_1.DATA_HEIC;
    			G_Index_RATE       = (int)eIMPDATA_1.DATA_RATE;
    			G_Index_GEXVL      = (int)eIMPDATA_1.DATA_GEXVL;
    			G_Index_GAIKA      = (int)eIMPDATA_1.DATA_GAIKA;
    
    
    			G_Index_GSEP       = (int)eIMPDATA_1.DATA_GSEP;
    
    			// *-リンク情報
    			G_Index_ZLNO       = (int)eIMPDATA_1.DATA_ZLNO;
    			// -*
    
    			// <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    			G_Index_RKEIGEN    = (int)eIMPDATA_1.DATA_RKEIGEN;
    			G_Index_SKEIGEN    = (int)eIMPDATA_1.DATA_SKEIGEN;
    			G_Index_ZKEIGEN    = (int)eIMPDATA_1.DATA_ZKEIGEN;
    			// --->Ver01.16.02
    
    			G_Index_ITEM_COUNT = (int)eIMPDATA_1.DATA_ITEM_COUNT;

    			M_ItemName = new string[]
                {
    				"全般",
    				"伝票日付",
    				"整理月フラグ",
    				"伝票番号",
    				"起票年月日",
    				"起票部門",
    				"起票者",
    				"承認グループ№",
    				"ヘッダーフィールド１",
    				"ヘッダーフィールド２",
    				"ヘッダーフィールド３",
    				"ヘッダーフィールド４",
    				"ヘッダーフィールド５",
    				"ヘッダーフィールド６",
    				"ヘッダーフィールド７",
    				"ヘッダーフィールド８",
    				"ヘッダーフィールド９",
    				"ヘッダーフィールド１０",
    				"借方部門",
    				"借方取引先",
    				"借方科目",
    				"借方枝番",
    				"借方工事№",
    				"借方工種№",
    				"借方プロジェクト",
    				"借方セグメント",
    				"借方ユニバーサル１",
    				"借方ユニバーサル２",
    				"借方ユニバーサル３",
    				"借方ユニバーサル４",
    				"借方ユニバーサル５",
    				"借方ユニバーサル６",
    				"借方ユニバーサル７",
    				"借方ユニバーサル８",
    				"借方ユニバーサル９",
    				"借方ユニバーサル１０",
    				"借方ユニバーサル１１",
    				"借方ユニバーサル１２",
    				"借方ユニバーサル１３",
    				"借方ユニバーサル１４",
    				"借方ユニバーサル１５",
    				"借方ユニバーサル１６",
    				"借方ユニバーサル１７",
    				"借方ユニバーサル１８",
    				"借方ユニバーサル１９",
    				"借方ユニバーサル２０",
    				"借方税率",
    				"借方課税区分",
    				"借方業種区分",
    				"借方仕入区分",
    				"借方摘要",
    				"借方摘要コード",
    				"貸方部門",
    				"貸方取引先",
    				"貸方科目",
    				"貸方枝番",
    				"貸方工事№",
    				"貸方工種№",
    				"貸方プロジェクト",
    				"貸方セグメント",
    				"貸方ユニバーサル１",
    				"貸方ユニバーサル２",
    				"貸方ユニバーサル３",
    				"貸方ユニバーサル４",
    				"貸方ユニバーサル５",
    				"貸方ユニバーサル６",
    				"貸方ユニバーサル７",
    				"貸方ユニバーサル８",
    				"貸方ユニバーサル９",
    				"貸方ユニバーサル１０",
    				"貸方ユニバーサル１１",
    				"貸方ユニバーサル１２",
    				"貸方ユニバーサル１３",
    				"貸方ユニバーサル１４",
    				"貸方ユニバーサル１５",
    				"貸方ユニバーサル１６",
    				"貸方ユニバーサル１７",
    				"貸方ユニバーサル１８",
    				"貸方ユニバーサル１９",
    				"貸方ユニバーサル２０",
    				"貸方税率",
    				"貸方課税区分",
    				"貸方業種区分",
    				"貸方仕入区分",
    				"貸方摘要",
    				"貸方摘要コード",
    				"税対象科目",
    				"税対象科目 税率",
    				"税対象科目 課税区分",
    				"税対象科目 業種区分",
    				"税対象科目 仕入区分",
    				"対価金額",
    				"金額",
    				"支払日",
    				"支払区分",
    				"支払期日",
    				"回収日",
    				"入金区分",
    				"回収期日",
    				"消込コード",
    				"入力者",
    				"付箋番号",
    				"貸借別摘要フラグ",
    				"分離区分",
    				"幣種",
    				"レート",
    				"外貨対価金額",
    				"外貨金額",
    				"行区切り",
    				"リンクNo",
    				"借方　軽減税率区分",
    				"貸方　軽減税率区分",
    				"税対象科目　軽減税率区分"
    			};
    			// --->Ver01.16.02
// Ver02.26.01 インボイス対応 --->
                if (H_RNo == 2)
                {
                    Array.Resize(ref M_ItemName, 119);
                    M_ItemName[113] = "借方　併用売上税額計算方式";
                    M_ItemName[114] = "貸方　併用売上税額計算方式";
                    M_ItemName[115] = "税対象科目　併用売上税額計算方式";
                    M_ItemName[116] = "借方　仕入税額控除経過措置割合";
                    M_ItemName[117] = "貸方　仕入税額控除経過措置割合";
                    M_ItemName[118] = "税対象科目　仕入税額控除経過措置割合";
                    G_Index_RURIZEIKEISAN = (int)eIMPDATA_1.DATA_RURIZEIKEISAN;
                    G_Index_SURIZEIKEISAN = (int)eIMPDATA_1.DATA_SURIZEIKEISAN;
                    G_Index_ZURIZEIKEISAN = (int)eIMPDATA_1.DATA_ZURIZEIKEISAN;
                    G_Index_RMENZEIKEIKA  = (int)eIMPDATA_1.DATA_RMENZEIKEIKA;
                    G_Index_SMENZEIKEIKA  = (int)eIMPDATA_1.DATA_SMENZEIKEIKA;
                    G_Index_ZMENZEIKEIKA  = (int)eIMPDATA_1.DATA_ZMENZEIKEIKA;

                    //NewMaxCount = G_Index_ITEM_COUNT;
                    G_Index_ITEM_COUNT = (int)eIMPDATA_1.DATA_ITEM_COUNT;
                }
// <--- Ver02.26.01 インボイス対応
            }
            #endregion
            else
            {
    			// エラー処理
    			functionReturnValue = MC_RESULT_ERR_RNO;
    			return functionReturnValue;
    		}
            // -*01.04.01
            #endregion

            #region ** 伝票入力パターン№
            if (H_IJPT < 0 || H_IJPT > 99)
            {
    			functionReturnValue = MC_RESULT_ERR_IJPT;
    			return functionReturnValue;
            }
            #endregion
            #region ** 入力確定日
            if (string.IsNullOrEmpty(H_Kakutei))
            {
    		}
            else
            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			if (Information.IsDate(H_Kakutei) == false)
    			if (DateTime.TryParse(H_Kakutei, out DateTime dt) == false)
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                {
    				functionReturnValue = MC_RESULT_ERR_KAKUTEI;
    				return functionReturnValue;
    			}
            }
            #endregion

            #region 外貨換算フラグ
            //  メモリでのデータの受け渡しでは以下のチェックのタイミングをずらす    
            if (H_NonePathCheck == 1)
            {
    			// 外貨換算フラグ
    			if (P_b_GaikaFC == true)
                {
    				if (!(H_Kanzan == 0 || H_Kanzan == 1))
                    {
    					functionReturnValue = MC_RESULT_ERR_KANZANFLG;
    					return functionReturnValue;
    				}
    			}    
    		}
            #endregion

            // <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
            #region ** 税率の扱い
            if (P_Keigen < 0 || 2 < P_Keigen)
            {
    			functionReturnValue = MC_RESULT_ERR_KEIGEN;
    			return functionReturnValue;
    		}
            // --->Ver01.16.02
            #endregion

            // ツルハ様カスタマイズ
            #region 消費税科目固定部門コード（ツルハ様カスタマイズ）
// ▼ ツルハ様カスタマイズ ▼
            if (!string.IsNullOrEmpty(H_SYBMNCD))
            {
                P_SYBMNCD = H_SYBMNCD;
            }
// ▲ ツルハ様カスタマイズ ▲
            #endregion

            #region リンク・e文書
            // *-リンク情報
            G_Index_LNO  = (int)eLink.DATA_LNO;
    		G_Index_LNAM = ((int)eLink.DATA_LNAM).ToString();
    		G_Index_FLG1 = (int)eLink.DATA_FLG1;
    		G_Index_LINK = ((int)eLink.DATA_LINK).ToString();
    
    		// *-e文書
    		G_Index_E_EDOC     = ((int)eLink.DATA_EDOC).ToString();
    		G_Index_E_NUSR     = ((int)eLink.DATA_NUSR).ToString();
    		G_Index_E_SUSR     = ((int)eLink.DATA_SUSR).ToString();
    		G_Index_E_SYUBETSU = (int)eLink.DATA_SYUBETSU;
    		G_Index_E_SYMD     = (int)eLink.DATA_SYMD;
    		G_Index_E_SVALU    = (int)eLink.DATA_SVALU;
            G_Index_E_STRNAM   = ((int)eLink.DATA_STRNAM).ToString();
            // ---> Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
            G_Index_E_HINMEI   = ((int)eLink.DATA_HINMEI).ToString();
    		// <--- Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
    		// <---Ver01.17.04　2019/02/28　hirano　AI-OCR対応
    		G_Index_E_BIKO     = ((int)eLink.DATA_BIKO).ToString();
    		// --->Ver01.17.04
    		// -*e文書    
            // -*
            #endregion

            functionReturnValue = MC_RESULT_OK;
    		return functionReturnValue;    
    	}

    	// 電子帳簿保存
    	private void InitVolumDflg(IDbConnection H_Con)
    	{
    		IDbCommand  L_Cmd    = null;
    		IDataReader L_Reader = default(IDataReader);
    
    		if (volum_dflg == null)
            {
    			volum_dflg        = new System.Collections.Generic.Dictionary<int, int>();
    			L_Cmd             = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT KESN, DFLG FROM VOLUM ORDER BY KESN";
    			L_Reader          = L_Cmd.ExecuteReader();
    			while (L_Reader.Read())
                {
    				volum_dflg.Add(Convert.ToInt32(L_Reader[0]), Convert.ToInt32(L_Reader[1]));
    			}
    			L_Reader.Close();
    		}
    	}

        #region 財務情報取得
        // *===========================================================================================*
    	//    会社情報取得
    	// *===========================================================================================*
    	private DataTable GetKaisyaInfo_FNC(IDbConnection P_Con, string H_CCOD)
    	{
    		IDbDataAdapter L_Adapter  = default(IDbDataAdapter);
    		string         L_SQL      = null;
    		DataTable      L_Table    = new DataTable();    
    		int            L_yyyyMMdd = 0;
    		int            L_HHmmssff = 0;
    		DataSet        L_ds       = new DataSet();
    
    		L_SQL = "SELECT CCOD,CNAM,SYMD,EYMD,KESN,UCOD,GRID,DSOU,SER,SVNM," + "IPAD,OKNO,FONT,GNNO,MTYP,MKBN" + " FROM KAISYA WHERE CCOD='" + H_CCOD + "'";

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    		if (G_IsOracle)
//          {
//    			L_Adapter = new OleDb.OleDbDataAdapter();
//    			L_Adapter.SelectCommand = new OleDb.OleDbCommand(L_SQL, P_Con);
//    		}
//          else
//          {
//              SqlConnection S_Con     = (SqlConnection)P_Con;
//    			L_Adapter               = new SqlDataAdapter();
//    			L_Adapter.SelectCommand = new SqlCommand(L_SQL, S_Con);
//    		}
            L_Adapter = G_DbFactory.CreateDbDataAdapterAndSelectCommand(P_Con, L_SQL);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

    		try
            {
    			L_Adapter.Fill(L_ds);
                if (L_ds.Tables.Count > 0)
                {
    		    	L_Table = L_ds.Tables[0];
    	    	}
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}
    
//    		if (L_ds.Tables.Count > 0)
//          {
//    			L_Table = L_ds.Tables[0];
//    		}
    
    		Get_DBTime(P_Con, ref L_yyyyMMdd, ref L_HHmmssff);
    
    		return L_Table;   
    	}
    
    	// *===========================================================================================*
    	//    ユーザー一覧・税率取得
    	// *===========================================================================================*
    	private void GetUsrAndSritu_SUB(IDbConnection H_Con, string H_CCOD, ref DataTable H_dtUsrtbl, ref DataTable H_dtComcnt, ref DataTable H_dtUsrsec, ref DataTable H_dtSritu, DataTable H_dtKaisya,
                                        int H_RUCOD, ref int H_RirekiChk, bool H_Kakutyo, bool H_ImpFlg)
    	{
    		IDbTransaction L_Trans    = null;
    		IDbDataAdapter L_Adapter  = default(IDbDataAdapter);
    		string         L_SQL      = "";
    		IDbCommand     L_Cmd      = default(IDbCommand);
    		DataSet        L_ds       =  new DataSet();
    		DataRow[]      L_UserRows = null;
    		string         L_SqlMsg   = "";
    		structACCLOG   L_ACC      = new structACCLOG();

            #region 2020/03/06 Ver02.19.05.9901 PostgreSQL対応(ユーザー一覧 に移動) --->    
            //    		if (G_IsOracle)
            //            {
            ////    			L_Adapter = new OleDb.OleDbDataAdapter();
            ////    			L_Adapter.SelectCommand = new OleDb.OleDbCommand();
            ////    			L_Adapter.SelectCommand.Connection = H_Con;
            //    		}
            //            else
            //            {
            //    			L_Adapter = new SqlDataAdapter();
            //    			L_Adapter.SelectCommand = new SqlCommand();
            //    			L_Adapter.SelectCommand.Connection = H_Con;
            //            }
            // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
            #endregion

            mLogger.LogWrite(Logger.Level.INFO, "ユーザー一覧・税率・ユーザーセキュリティの取得");
            //*
            mLogger.LogClose();
            //*


            #region ** ユーザー一覧
            L_SQL = "SELECT UCOD,GCOD,PASS,UNAM,UNLD,KFLG,KSEC,DSEC,CSEC,MSEC," + "FPATH,ENDSW,LOGID,SPAS,DFLG,KANF,FUSR,FMOD,FTIM,LUSR," + "LMOD,LTIM,RDRV " +
                    "FROM USRTBL WHERE  DFLG = 0 ORDER BY UCOD";        // <--- 2020/06/04 Ver02.22.03 エラーにより、不要スペースの削除

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->    		
            L_Adapter = G_DbFactory.CreateDbDataAdapterAndSelectCommand(H_Con, L_SQL);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

    		L_ds       = new DataSet();
    		H_dtUsrtbl = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
                mLogger.LogWrite(Logger.Level.NG, "ユーザー一覧・税率・ユーザーセキュリティの取得\r\n" + ex.Message);
                //*
                mLogger.LogClose();
                //*

                throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0)
            {
    			H_dtUsrtbl = L_ds.Tables[0];
            }
            #endregion

            #region ** 会社単位セキュリティ
            L_SQL = "SELECT UCOD,CCOD,FLG1 FROM COMCNT WHERE CCOD = '" + H_CCOD + "' ORDER BY UCOD";
    		L_Adapter.SelectCommand.CommandText = L_SQL;
    		L_ds       = new DataSet();
    		H_dtComcnt = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0)
            {
    			H_dtComcnt = L_ds.Tables[0];
            }
            #endregion

            #region ** ユーザーセキュリティ
            L_SQL = "SELECT UCOD,CCOD,FFLG,MFLG,ZFLG,YFLG,KFLG,DFLG,TNFLG,MTFG,DTFG" + " FROM USRSEC WHERE CCOD = '" + H_CCOD + "' ORDER BY UCOD";
    		L_Adapter.SelectCommand.CommandText = L_SQL;
    		L_ds       = new DataSet();
    		H_dtUsrsec = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0)
            {
    			H_dtUsrsec = L_ds.Tables[0];
            }
            #endregion

            #region ** 税率
            // <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    		// L_SQL = "SELECT SY07,ZRIT,SYMD,EYMD FROM SRITU ORDER BY SY07"
    		L_SQL = "SELECT SY07,ZRIT,SYMD,EYMD,KEIGEN FROM SRITU ORDER BY SY07";
    		// --->Ver01.16.02
    		L_Adapter.SelectCommand.CommandText = L_SQL;
    		L_ds      = new DataSet();
    		H_dtSritu = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0)
            {
    			H_dtSritu = L_ds.Tables[0];
            }
            #endregion

            #region 業務起動履歴の保存
            H_RirekiChk = 0;
    		CheckAccessRireki(H_Con);
    		try
            {
    			// 共通DBの内部統制開始設定にて処理する場合のみ
    			if (ChkJSOX_Common_FNC(H_Con) == false && (access_rireki > 0) == false)
                {
    				// 起動ユーザー保持
    				P_RUCOD = H_RUCOD;
    				return;
    			}
    			// 起動ユーザー不正
    			if (H_RUCOD == 0)
                {
    				H_RirekiChk = -1;
    				return;
    			}
    			L_UserRows = H_dtUsrtbl.Select("UCOD = " + H_RUCOD);
    			if (L_UserRows.Length == 0)
                {
    				H_RirekiChk = -1;
    				return;
    			}
    			L_UserRows = null;
    
    			// ユーザーセキュリティ
    			L_UserRows = H_dtUsrtbl.Select("UCOD = " + H_RUCOD);
    			if (L_UserRows.Length > 0)
                {
    				switch (ChkUsrSec_FNC(H_RUCOD, L_UserRows[0], H_dtComcnt, H_dtUsrsec))
                    {
    					case 0:
    						break;
    					case -1:
    						// 会社制限
    						H_RirekiChk = -2;
    						break;
    					// Case -2
                        //     break;
    					// 'データ権限については、入力者にて判定する。
    				}
    			}
    			L_UserRows = null;
    
    			// 起動ユーザー保持
    			P_RUCOD = H_RUCOD;
    
    			// 処理位置変更
    			// チェック＆取り込み処理の場合のみアクセス履歴を保存
    			if (H_ImpFlg == false) { return; }
    
    			// 起動履歴保存情報を取得
    			Get_MathineNado_Info_FNC(H_Con, ref L_ACC, H_RUCOD, H_CCOD, H_Kakutyo, H_dtKaisya);
    
    			// ** トランザクション開始
    			L_Trans = H_Con.BeginTransaction(IsolationLevel.Serializable);
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.Transaction = L_Trans;
    
    			// 起動履歴テーブル更新処理
// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応(INTO 追加) --->
    			L_SqlMsg = " INSERT INTO ACCLOG (SYMD,SHMS,UCOD,PCNM,LOGID,JOBS,JOBN,APNO,JOBID,TYPE,KAKU,PATH,HPRO,HIKI,SUBID,CCOD,CNAM,CPID,CDM1,CDM2,CDM3,CDM4,IDM1,IDM2,IDM3,IDM4 )" +
                           " VALUES( " + L_ACC.nSYMD + ", " + L_ACC.nSHMS + "," + L_ACC.nUCOD + ",'" + L_ACC.sPCNM + "','" + L_ACC.sLOGID + "','" + L_ACC.sJOBS + "','" +
                                         L_ACC.sJOBN + "'," + "''" + "," + "''" + "," + "NULL" + "," + "''" + "," + "''" + "," + "NULL" + "," + "''" + "," + "NULL" + ",'" +
                                         L_ACC.sCCOD + "','" + L_ACC.sCNAM + "'," + "''" + "," + "''" + "," + "''" + "," + "''" + "," + "''" + "," + L_ACC.nIMD1 + "," +
                                         L_ACC.nIMD2 + "," + L_ACC.nIMD3 + "," + L_ACC.nIMD4 +
                                  " ) ";
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
    
    			L_Cmd.CommandText = L_SqlMsg;
    			L_Cmd.ExecuteNonQuery();
    
    			// ** 正常終了
    			L_Trans.Commit();    
    		}
            catch
            {
    			// ** ロールバック         
    			L_Trans.Rollback();
    			H_RirekiChk = -10;
            }
            #endregion

            mLogger.LogWrite(Logger.Level.OK, "ユーザー一覧・税率・ユーザーセキュリティの取得");
            //*
            mLogger.LogClose();
            //*

        }

        // *===========================================================================================*
        //    消費税税率テーブル（SRITU）に、軽減税率区分（KEIGEN）カラムが追加されているか、
        //    仕訳テーブル（ZDATA）に軽減税率用カラム(RKEIGEN,SKEIGEN,ZKEIGEN)が追加されているかチェック
        // *===========================================================================================*    
        private void CheckKeigen(IDbConnection H_ConCommon, IDbConnection H_Con, bool Kakutyo, ref bool SiwakeColumnFlg, ref bool SRITUColumnFlg)
    	{
    		string      SiwakeTable = "";
    		IDbCommand  L_Cmd       = null;
    		IDataReader L_Reader    = default(IDataReader);
    
    		// 消費税税率テーブル（SRITU）に、軽減税率区分（KEIGEN）カラムが追加されているかどうか
    		L_Cmd = H_ConCommon.CreateCommand();

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    		L_Cmd.CommandText = "SELECT COUNT(SC.column_id) FROM sys.tables ST INNER JOIN sys.columns SC ON ST.object_id = SC.object_id WHERE ST.name = 'SRITU' AND SC.name = 'KEIGEN'";
            if (G_IsPostgre)
            {
                L_Cmd.CommandText = " SELECT COUNT(ORDINAL_POSITION) FROM information_schema.columns WHERE table_name = 'sritu' AND column_name = 'keigen' ";
            }
            else
            {
                L_Cmd.CommandText = " SELECT COUNT(SC.column_id) FROM sys.tables ST INNER JOIN sys.columns SC ON ST.object_id = SC.object_id WHERE ST.name = 'SRITU' AND SC.name = 'KEIGEN' ";
            }
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

    		L_Reader = L_Cmd.ExecuteReader();

    		if (L_Reader.Read())
            {
    			if (Convert.ToInt32(L_Reader[0]) == 0)
                {
    				SRITUColumnFlg = false;
    			}
                else
                {
    				SRITUColumnFlg = true;
    			}
    		}
    		L_Reader.Close();
    
    		// 部署入出力
    		if (Kakutyo == true)
            {
    			SiwakeTable = "SJDAT";
    		}
            // 日次処理
            else
            {
    			SiwakeTable = "ZDATA";
    		}
    
    		// 仕訳テーブルに軽減税率用のカラムが追加されているかどうかをチェック
    		L_Cmd             = H_Con.CreateCommand();

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    		L_Cmd.CommandText = "SELECT COUNT(SC.column_id) FROM sys.tables ST INNER JOIN sys.columns SC ON ST.object_id = SC.object_id WHERE ST.name = '" + SiwakeTable + "' and (SC.name = 'RKEIGEN' or SC.name = 'SKEIGEN' or SC.name = 'ZKEIGEN')";
            if (G_IsPostgre)
            {
                L_Cmd.CommandText = " SELECT COUNT(ORDINAL_POSITION) FROM information_schema.columns WHERE table_name = '" + SiwakeTable.ToLower() + "' and (column_name = 'rkeigen' or column_name = 'skeigen' or column_name = 'zkeigen') ";
            }
            else
            {
                L_Cmd.CommandText = " SELECT COUNT(SC.column_id) FROM sys.tables ST INNER JOIN sys.columns SC ON ST.object_id = SC.object_id WHERE ST.name = '" + SiwakeTable + "' and (SC.name = 'RKEIGEN' or SC.name = 'SKEIGEN' or SC.name = 'ZKEIGEN')";
            }
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

    		L_Reader          = L_Cmd.ExecuteReader();
    		if (L_Reader.Read())
            {
    			if (Convert.ToInt32(L_Reader[0]) == 3)
                {
    				SiwakeColumnFlg = true;
    			}
                else
                {
    				// １つでもなかったらエラー
    				SiwakeColumnFlg = false;
    			}
    		}
    		L_Reader.Close();    
    	}
    
    	// *===========================================================================================*
    	//    担当者一覧取得
    	// *===========================================================================================*
    	private DataTable GetTantou_FNC(IDbConnection H_Con)
    	{    
    		IDbDataAdapter L_Adapter = default(IDbDataAdapter);
    		string         L_SQL     = "";
    		DataSet        L_ds      = default(DataSet);
    		DataTable      L_Table   = default(DataTable);
    
    		L_SQL = "SELECT TCOD,TNAM,TNLD,TFLG,FUSR,FMOD,FTIM,LUSR,LMOD,LTIM FROM TANTOU WHERE TFLG = 0 ORDER BY TCOD";

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    		if (G_IsOracle) {
//    			L_Adapter = new OleDb.OleDbDataAdapter();
//    			L_Adapter.SelectCommand = new OleDb.OleDbCommand(L_SQL, H_Con);
//    		} else {
//                SqlConnection S_Con = (SqlConnection)H_Con;
//    			L_Adapter = new SqlDataAdapter();
//    			L_Adapter.SelectCommand = new SqlCommand(L_SQL, S_Con);
//    		}
            L_Adapter = G_DbFactory.CreateDbDataAdapterAndSelectCommand(H_Con, L_SQL);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
    
    		L_ds    = new DataSet();
    		L_Table = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0)
            {
    			L_Table = L_ds.Tables[0];
    		}
    
    		return L_Table;
    	}

    	// *===========================================================================================*
    	//    決算期情報・月情報・科目一覧取得
    	// *===========================================================================================*    
    	private void GetKiInfo_SUB(IDbConnection H_Con, short H_Touki, ref DataTable H_dtVolum, ref DataTable H_dtSvolum, ref DataTable H_dtJfctl, ref DataTable H_dtVolum2, ref DataTable H_dtKname, ref DataTable H_dtSubject)
    	{
    		IDbDataAdapter L_Adapter = default(IDbDataAdapter);
    		string         L_SQL     = null;
    		int            FlgTKSIRE = 0;
    		DataSet        L_ds      = default(DataSet);

            #region 2020/03/06 Ver02.19.05.9901 PostgreSQL対応(コメントアウト)
//            SqlConnection S_Con = (SqlConnection)H_Con;
    
//    		if (G_IsOracle) {
////    			L_Adapter = new OleDb.OleDbDataAdapter();
////    			L_Adapter.SelectCommand = new OleDb.OleDbCommand();
//    		}
//            else
//            {
//    			L_Adapter = new SqlDataAdapter();
//    			L_Adapter.SelectCommand = new SqlCommand();
//    		}
//    		L_Adapter.SelectCommand.Connection = H_Con;
            #endregion

            L_SQL = "SELECT " + "KESN,    KSNK,   APNO,   MTYP,   MKBN,   TTNM,     CNAM,     " + "GNNO,     NENSW,   KESM,    INST,    ISTA,    IEND,      DHMM,   DHKI,   " +
                                "MHKI,    SSW1,   KZSW01, KZSW02, KZSW03, KZSW04,   KZSW05,   " + "KZSW06,   KZSW07,  KZSW08,  KZSW09,  KZSW10,  KZSW11,    KZSW12, "         +
                                "DCHK,    KDAY,   KBMN,   KMAN,   SDAY,   SHKBN,    SKDAY,    " + "UDAY,     UKKBN,   UKDAY,   KNDSP,   KNPRT,   KMMX,      KMTY,   KMLN,   " +
                                "EDFLG,   EDMX,   EDTY,   EDLN,   BMFLG,  BMMX,     BMTY,     " + "BMLN,     TRFLG,   TRMX,    TRTY,    TRLN,    SGFLG,     SGMX,   SGTY,   " +
                                "SGLN,    KJFLG,  KJMX,   KJTY,   KJLN,   KSFLG,    KSMX,     " + "KSTY,     KSLN,    KKFLG,   KKMX,    KKTY,    KKLN,      PJFLG,  PJMX,   " +
                                "PJTY,    PJLN,   BKMX,   JTMX,   BKEMX,  BKESW,    SBMX,     " + "TKMX,     TKSW,    TKEMX,   TKESW,   BTKMX,   BTKSW,     BTKEMX, BTKESW, " +
                                "SKMX,    SGSW,   SKTMX,  SKTSW, "                              +
                                "D1FLG,   D1NM,   D1MX,   D1TY,   D1LN,   D1SYLN,   D1GNNO,   " + "D2FLG,    D2NM,    D2MX,    D2TY,    D2LN,    D2SYLN,    D2GNNO, "         +
                                "D3FLG,   D3NM,   D3MX,   D3TY,   D3LN,   D3SYLN,   D3GNNO,   " + "D1KMX,    D1KSW,   D2KMX,   D2KSW,   D3KMX,   D3KSW, "                     +
                                "AIMG,    AMHG,   RTFLG,  ETFLG,  JTFLG,  KHAS,     HRIT,     " + "HCAL,     HTXT,    FLG1,    KOUT,    SYFLG,   KGFLG,     DFLG,   "         +
                                "DDAY,    IDM1,   IDM2,   IDM3,   IDM4,   CDM1,     CDM2,     " +
                                "DUF1FLG, DUF1NM, DUF1MX, DUF1TY, DUF1LN, DUF1SYLN, DUF1GNNO, " + "DUF2FLG,  DUF2NM,  DUF2MX,  DUF2TY,  DUF2LN,  DUF2SYLN,  DUF2GNNO,  "      +
                                "DUF3FLG, DUF3NM, DUF3MX, DUF3TY, DUF3LN, DUF3SYLN, DUF3GNNO, " + "DUF4FLG,  DUF4NM,  DUF4MX,  DUF4TY,  DUF4LN,  DUF4SYLN,  DUF4GNNO,  "      +
                                "DUF5FLG, DUF5NM, DUF5MX, DUF5TY, DUF5LN, DUF5SYLN, DUF5GNNO, " + "DUF6FLG,  DUF6NM,  DUF6MX,  DUF6TY,  DUF6LN,  DUF6SYLN,  DUF6GNNO,  "      +
                                "DUF7FLG, DUF7NM, DUF7MX, DUF7TY, DUF7LN, DUF7SYLN, DUF7GNNO, " + "DUF8FLG,  DUF8NM,  DUF8MX,  DUF8TY,  DUF8LN,  DUF8SYLN,  DUF8GNNO,  "      +
                                "DUF9FLG, DUF9NM, DUF9MX, DUF9TY, DUF9LN, DUF9SYLN, DUF9GNNO, " + "DUF10FLG, DUF10NM, DUF10MX, DUF10TY, DUF10LN, DUF10SYLN, DUF10GNNO, "      +
                                "D4FLG,   D4NM,   D4MX,   D4TY,   D4LN,   D4SYLN,   D4GNNO,   " + "D5FLG,    D5NM,    D5MX,    D5TY,    D5LN,    D5SYLN,    D5GNNO,    "      +
                                "D6FLG,   D6NM,   D6MX,   D6TY,   D6LN,   D6SYLN,   D6GNNO,   " + "D7FLG,    D7NM,    D7MX,    D7TY,    D7LN,    D7SYLN,    D7GNNO,    "      +
                                "D8FLG,   D8NM,   D8MX,   D8TY,   D8LN,   D8SYLN,   D8GNNO,   " + "D9FLG,    D9NM,    D9MX,    D9TY,    D9LN,    D9SYLN,    D9GNNO,    "      +
                                "D10FLG,  D10NM,  D10MX,  D10TY,  D10LN,  D10SYLN,  D10GNNO,  " + "D11FLG,   D11NM,   D11MX,   D11TY,   D11LN,   D11SYLN,   D11GNNO,   "      +
                                "D12FLG,  D12NM,  D12MX,  D12TY,  D12LN,  D12SYLN,  D12GNNO,  " + "D13FLG,   D13NM,   D13MX,   D13TY,   D13LN,   D13SYLN,   D13GNNO,   "      +
                                "D14FLG,  D14NM,  D14MX,  D14TY,  D14LN,  D14SYLN,  D14GNNO,  " + "D15FLG,   D15NM,   D15MX,   D15TY,   D15LN,   D15SYLN,   D15GNNO,   "      +
                                "D16FLG,  D16NM,  D16MX,  D16TY,  D16LN,  D16SYLN,  D16GNNO,  " + "D17FLG,   D17NM,   D17MX,   D17TY,   D17LN,   D17SYLN,   D17GNNO,   "      +
                                "D18FLG,  D18NM,  D18MX,  D18TY,  D18LN,  D18SYLN,  D18GNNO, "  + "D19FLG,   D19NM,   D19MX,   D19TY,   D19LN,   D19SYLN,   D19GNNO,   "      +
                                "D20FLG,  D20NM,  D20MX,  D20TY,  D20LN,  D20SYLN,  D20GNNO, "  + "D4KMX,    D4KSW,   D5KMX,   D5KSW,   D6KMX,   D6KSW,  "                    + 
                                "D7KMX,   D7KSW,  D8KMX,  D8KSW,  D9KMX,  D9KSW,  "             + "D10KMX,   D10KSW,  D11KMX,  D11KSW,  D12KMX,  D12KSW, "                    +
                                "D13KMX,  D13KSW, D14KMX, D14KSW, D15KMX, D15KSW, "             + "D16KMX,   D16KSW,  D17KMX,  D17KSW,  D18KMX,  D18KSW, "                    +
                                "D19KMX,  D19KSW, D20KMX, D20KSW, IFRS,   STRHJ   "             +
                    " FROM VOLUM WHERE KESN >= " + H_Touki +
                    " ORDER BY KESN";

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    		L_Adapter.SelectCommand.CommandText = L_SQL;
            L_Adapter = G_DbFactory.CreateDbDataAdapterAndSelectCommand(H_Con, L_SQL);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

    		L_ds      = new DataSet();
    		H_dtVolum = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0)
            {
    			H_dtVolum = L_ds.Tables[0];
    		}

            // 特定仕入れ(SVOLUM.TKSIRE)の存在チェック
            #region 2020/03/06 Ver02.19.05.9901 PostgreSQL対応(コメントアウト) --->
//            try {
//    			if (G_IsOracle) {
////    				using (OleDb.OleDbCommand c = new OleDb.OleDbCommand(" SELECT COUNT(COLUMN_NAME) FROM ALL_TAB_COLUMNS WHERE TABLE_NAME = 'SVOLUM' AND COLUMN_NAME = 'TKSIRE' AND OWNER = (SELECT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') FROM DUAL) ", H_Con)) {
////    					using (OleDb.OleDbDataReader r = c.ExecuteReader()) {
////    						if (r.Read()) {
////    							FlgTKSIRE = Convert.ToInt32(r(0));
////    						}
////    					}
////    				}
//    			}
//                else
//                {
//    				using (SqlCommand c = new SqlCommand(" SELECT COUNT(SC.column_id) FROM sys.tables ST INNER JOIN sys.columns SC ON ST.object_id = SC.object_id WHERE ST.name = 'SVOLUM' AND SC.name = 'TKSIRE' ", S_Con))
//                    {
//    					using (SqlDataReader r = c.ExecuteReader())
//                        {
//    						if (r.Read())
//                            {
//    							FlgTKSIRE = Convert.ToInt32(r[0]);
//    						}
//    					}
//    				}
//    			}
                #endregion
            try
            {
                string sql;
                if (G_IsPostgre)
                {
                   sql = " SELECT COUNT(ORDINAL_POSITION) FROM information_schema.columns WHERE table_name = 'svolum' AND column_name = 'tksire' ";
                }
                else
                {
                   sql = " SELECT COUNT(SC.column_id) FROM sys.tables ST INNER JOIN sys.columns SC ON ST.object_id = SC.object_id WHERE ST.name = 'SVOLUM' AND SC.name = 'TKSIRE' ";
                }

                using (IDbCommand c = H_Con.CreateCommand())
                {
                    c.CommandText = sql;
                    using (IDataReader r = c.ExecuteReader())
                    {
                        if (r.Read())
                        {
                            FlgTKSIRE = Convert.ToInt32(r[0]);
                        }
                    }
                }
            }
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
            catch
            {
    			FlgTKSIRE = 0;
    		}

            // 消費税マスタ取得
    		L_SQL = "SELECT KESN,SVER,KZSW,ANBN,FKBN,FSW1,FSW2, FSW3,FSW4,FSW5," + "SKBN,KBN1,KBN2,KBN3,KBN4,BMSW,HSSW,SSW1,SSW2,SSW3," +
                           "SSW4,SSW5,SSW6,SSW7,SSW8,SSW9,SSW10,ZISW,KUF1,KUF4," + "KBF2,KBF3,KBF4,ZERO,ZTKCHK,FSW6";
    		if (FlgTKSIRE > 0)
            {
    			L_SQL = L_SQL + ",TKSIRE";
    			// SVOLUM.TKSIREが存在する場合は取得
    		}
            else
            {
    			L_SQL = L_SQL + ",0";
    			// SVOLUM.TKSIREが存在しない場合は0固定
    		}
// Ver02.26.01 インボイス対応 --->
            // *** AT-OCRは財務とセットのため考慮不要だが、WFでは財務がインボイス未対応も考慮して要条件分岐
            L_SQL = L_SQL + ", URIAGEZEIKEISAN, SHIIREZEIKEIKA ";    
// <--- Ver02.26.01 インボイス対応

    		L_SQL                               = L_SQL + " FROM SVOLUM WHERE KESN >= " + H_Touki + " ORDER BY KESN";    
    		L_Adapter.SelectCommand.CommandText = L_SQL;
    		L_ds                                = new DataSet();
    		H_dtSvolum                          = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0) { H_dtSvolum = L_ds.Tables[0]; }

    		// 部署入出力処理伝票番号自動付番
    		L_SQL                               = "SELECT KESN,JUSE,IDM1 FROM JFCTL WHERE KESN >= " + H_Touki + " ORDER BY KESN";
    		L_Adapter.SelectCommand.CommandText = L_SQL;
    		L_ds                                = new DataSet();
    		H_dtJfctl                           = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0) { H_dtJfctl = L_ds.Tables[0]; }


            // 会社月別情報(VOLUM2)取得
    		L_SQL                               = "SELECT " + "KESN, CKEI, SYMD, EYMD, CKS0, CKS3, CKS4, CKS5, SYU_BKE, SYU_TK, " + "SYU_TKE, SYU_BKT, SYU_BKTE, SYU_SK, SYU_SKT, SYU_D1K, SYU_D2K, SYU_D3K, DTMX, " +
                                                              "NINZ, GKDT, GKTI, GKS1, GKS2, DTUS, ARRT, DTDL, DTAC,    IMGNO, "  + "FLG1, FLG2, IDM1, IDM2, IDM3, IDM4, SYU_D4K, SYU_D5K, SYU_D6K, SYU_D7K, " +
                                                              "SYU_D8K, SYU_D9K, SYU_D10K, SYU_D11K, SYU_D12K, SYU_D13K, SYU_D14K, SYU_D15K, SYU_D16K, SYU_D17K, " +
                                                              "SYU_D18K, SYU_D19K, SYU_D20K, DENC, BDENC, DENDL, DENAC, CKS5_USR " +
                                                  "FROM VOLUM2 WHERE KESN >= " + H_Touki +
                                                 " ORDER BY KESN,CKEI";
    		L_Adapter.SelectCommand.CommandText = L_SQL;
    		L_ds                                = new DataSet();
    		H_dtVolum2                          = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0) { H_dtVolum2 = L_ds.Tables[0]; }

    		// 会社情報設定登録の伝票修正設定取得
    		GetCCINFOMNTOption_SUB(H_Con);

// 2022/04/11 Ver02.24.01 e文書任意項目対応 --->
            // 日次処理への転記でもe文書オプションを確認
//            GetTimeStampData(L_Adapter.SelectCommand);
// <--- 2022/04/11 Ver02.24.01 e文書任意項目対応

    		// 起票者未入力チェックしない(固定)
    		P_KIHYOSYA_MI = 0;
    		// 起票部門未入力チェックしない(固定)
    		P_KIHYOBMN_MI = 0;
    
    		// 科目情報取得
    		L_SQL                               = "SELECT " + "KESN,  KICD,  KCOD,  BKBN,  KNLD,   KOCD,  KATT,  KC01,  GSW1,  GSW2, " + "SY01, SY02, SY03, SY04, SY05, SY06, SY07, SY08, KE01, KE02, " +
                                                              "KT01,  KT02,  KB01,  KB02,  BKE01,  BKE02, SG01,  SG02,  PJ01,  PJ02, " + "DM11, DM12, DM21, DM22, DM31, DM32, KJ01, KJ02, KS01, KS02, " +
                                                              "KK01,  KK02,  TK02,  BTK01, BTKE01, TKE01, STK01, AA01,  AA02,  KO11, " + "KO12, KO13, KO14, KO15, KO16, KNMX, KNAM, GTNK, IDM1, IDM2, " +
                                                              "IDM3,  IDM4,  CDM1,  CDM2,  GRCD,   FUSR,  FMOD,  FTIM,  LUSR,  LMOD, LTIM, " + "DM41, DM42, DM51, DM52, DM61, DM62, DM71, DM72, DM81, DM82, " +
                                                              "DM91,  DM92,  DM101, DM102, DM111,  DM112, DM121, DM122, DM131, DM132, " + "DM141, DM142, DM151, DM152, DM161, DM162, DM171, DM172, DM181, DM182, " +
                                                              "DM191, DM192, DM201, DM202, GAFLG " +
                                                  "FROM KNAME WHERE KESN >= " + H_Touki + " AND BKBN = 5 " +
                                                  "ORDER BY KESN, KICD ";
    		L_Adapter.SelectCommand.CommandText = L_SQL;
    		L_ds                                = new DataSet();
    		H_dtKname                           = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0) { H_dtKname = L_ds.Tables[0]; }

            // 支払・入金科目取得
    		L_SQL                               = "SELECT KESN,KFLG,KICD,HFLG FROM SUBJECT WHERE KESN >= " + H_Touki + " ORDER BY KESN,KFLG,KICD";
    		L_Adapter.SelectCommand.CommandText = L_SQL;
    		L_ds                                = new DataSet();
    		H_dtSubject                         = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0) { H_dtSubject = L_ds.Tables[0]; }
    	}
    
    	// *===========================================================================================*
    	//    承認初期設定取得
    	// *===========================================================================================*
    	private DataTable GetSnctl_FNC(IDbConnection H_Con, short H_Touki)
    	{    
    		IDbDataAdapter L_Adapter = default(IDbDataAdapter);
    		string         L_SQL     = "";
    		DataSet        L_ds      = default(DataSet);
    		DataTable      L_Table   = default(DataTable);

//            SqlConnection S_Con = (SqlConnection)H_Con;
    
    		L_SQL = "SELECT KESN,SUSE,STAN FROM SNCTL WHERE KESN >= " + H_Touki + " ORDER BY KESN";

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    		if (G_IsOracle) {
////    			L_Adapter = new OleDb.OleDbDataAdapter();
////    			L_Adapter.SelectCommand = new OleDb.OleDbCommand(L_SQL, H_Con);
//    		}
//            else
//            {
//    			L_Adapter = new SqlDataAdapter();
//    			L_Adapter.SelectCommand = new SqlCommand(L_SQL, S_Con);
//    		}
            L_Adapter = G_DbFactory.CreateDbDataAdapterAndSelectCommand(H_Con, L_SQL);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

    		L_ds    = new DataSet();
    		L_Table = new DataTable();

    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0) { L_Table = L_ds.Tables[0]; }

    		return L_Table;    
    	}
        #endregion

        // *===========================================================================================*
    	//    インポートデータチェック
    	// *===========================================================================================*
    	private int ChkImpData_FNC(string[] H_Data, IDbConnection H_Con, short H_Touki, DataTable H_dtVolum, DataTable H_dtSvolum, DataTable H_dtJfctl, DataTable H_dtVolum2, DataTable H_dtKname, DataTable H_dtSubject,
                                   DataTable H_dtTantou, DataTable H_dtUsrtbl, DataTable H_dtComcnt, DataTable H_dtUsrsec, DataTable H_dtSritu, DataTable H_dtDcno, ref structERRORLOG[] H_ErrLog, bool H_Kakutyo,
                                   ref int H_BunriOk_R, ref int H_BunriOk_S, ref structSVOLKM[] H_SVolumKm, ref string[] H_Zkbn, ref short H_Dkei, ref short H_Kesn, short H_DFUK, int H_Lno, bool H_CsvFlg,
                                   DataTable H_dtSnctl = null, int H_IsAuto = 0)
        {
            #region 変数初期化
            int functionReturnValue = 0;
    
    		int            L_ErrCnt          = 0;
    		short          L_Kesn            = 0;
    		short          L_Dkei            = 0;
    		int            L_Dymd            = 0;
    		int            L_Dcno            = 0;
    		DataRow[]      L_Volum2Rows      = null;
    		DataRow        L_VolumRow        = default(DataRow);
    		DataRow        L_SvolumRow       = default(DataRow);
    		DataRow[]      L_KnameRow        = new DataRow[2];
    		short          L_Juse            = 0;
    		short          L_IDM1            = 0;
    		int            L_User            = 0;
    		bool           L_Syonin          = false;
    		bool           L_KmkSec          = false;
    		bool           L_BmnSec          = false;
    		bool           L_EdaSec          = false;
    		bool           L_ToriSec         = false;
    		int            L_SecPtn          = 0;
    		string[]       L_Kicd            = new string[2];
    		string         L_Bcod            = null;
    		string         L_Trcd            = null;
    		string         L_Ecod            = null;
    		string         L_Sgcd            = null;
    		string[]       L_Zkbn            = new string[2];
    		short[]        L_SGrp            = new short[2];
    		decimal[]      L_Zrit            = new decimal[2];
    		short          L_ZeiKmkKatt      = 0;
    		string         L_KicdZ           = null;
    		DataRow        L_KnameRowZ       = null;
    		string         L_ZkbnZ           = null;
    		decimal        L_ZritZ           = default(decimal);
    		bool           L_Flag            = false;
    		short          L_Katt            = 0;
    		int            L_ColIdx          = 0;
    		string         L_Text            = null;
    		int            L_Day             = 0;
    		DataRow[]      L_Rows            = null;
    		DataRow        L_NewRow          = default(DataRow);
    		int            L_I               = 0;
    		structSVOLKM[] L_SVolumKm        = new structSVOLKM[9];
    		string         L_SKiCd           = null;
    		int            L_DateCheck       = 0;
    		int            L_SyoCheck        = 0;
    		int            L_TaikaOk_R       = 0;
    		int            L_TaikaOk_S       = 0;
    		DataRow[]      L_Rows_R          = null;
    		DataRow[]      L_Rows_S          = null;
    		int            L_PSY07_R         = 0;
    		int            L_PSY07_S         = 0;
    		bool           L_Sire_Kyouri_Chk = false;
// **-- 2019/11/14 分離子仕訳の未入力・未登録チェック対応
    		int            L_InpErr          = 0;
    		int            L_RegErr          = 0;
    		short          L_PnUseDkec       = 2;
    		string         L_ValuOya         = null;
    		string         L_ValuZei         = null;
            string[]       L_OyaVal          = new string[1];
    		string[]       L_ErrMsg          = null;
    		decimal        L_GVal_Gai        = default(decimal);
    		decimal        L_GVal_Tai        = default(decimal);
    		decimal        L_GVal_Zei        = default(decimal);
    		structZDATA    L_ZData           = new structZDATA();
    		structZDATA    L_ZdataBunri      = new structZDATA();
// --**
    
    		// 課税区分自動判定後エラーが発生した際の処理対応
    		string         L_SaveRZKB        = null;
    		string         L_SaveSZKB        = null;
    
    		string         L_SaveZZKB        = null;
    
    		bool           L_DefBunri_Flg    = false;
    
    		DataRow[]      L_Rows_Zei        = null;
    		DataRow[]      L_Rows2           = null;
    
    		// 外貨システム初期設定を取得
    		DataRow[]      L_Rows_GaiCtl     = null;
    		bool           L_Gaikactl        = false;
    		// 該当仕訳行の伝票日付の属する処理期における、外貨システム初期設定の使用フラグ。
    		int            L_HSSW            = 0;
    
    		int            L_ItemCount_Sel   = 0;
    		// 関数の使用状態によって処理を分ける
    		int            L_GaikaKamoku_Sel = 0;
    		// 外貨科目の入力状況を取得
    		long           L_ChkNum          = 0;
    		string         L_HEI_CD          = null;
//    		bool           L_GaicutUse       = false;
            int            L_GaicutUse       = 0;
    
    
    		short[]        L_SY08            = new short[2];
    		// 貸借科目の特殊表示区分保存用
    
    		int            L_SY02Dmy         = 0;
    		// ＳＢ対応用
    
    		// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 START
    		string         L_TextRrit        = null;
    		string         L_TextSrit        = null;
    		decimal        L_DecRrit         = default(decimal);
    		decimal        L_DecSrit         = default(decimal);
    		// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 END
    		// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 START
    		string[]       L_NewZKB          = new string[2];
    		// 自動判別した税率を退避　
    		// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 END
    		// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    		// (de2-15768関連)税抜処理で経理方式が税抜の科目の税込仕訳を登録出来る不具合を修正
    		string         S_SaveBKBN        = null;
    		string         S_OldBKBN         = null;
    		// 編集前のインポートデータ（分離区分）
    		bool           B_DubleErrKBN     = false;
    		// エラーが重複して出力される現象を回避するフラグ
    		// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    		// IMPORTER.dll差分対応 de3-9633 Ver.12.09.01 2015.03.06 START
    		bool           B_KazeiFlg        = false;
    		// 借方の税率存在チェックでエラーとなったか判断するフラグ　true:エラーとなった
    		// IMPORTER.dll差分対応 de3-9633 Ver.12.09.01 2015.03.06 END
    		BumonInfo[]    bumonInfo         = new BumonInfo[2];
    		EdabanInfo[]   edabanInfo        = new EdabanInfo[2];
    		bool           L_Ret             = false;
    		// <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    		string OldRrit = "";
    		int[] ZeirituNo = {
    			G_Index_RRIT,
    			G_Index_SRIT,
    			G_Index_ZRIT
    		};
    		int[] KeigenNo = {
    			G_Index_RKEIGEN,
    			G_Index_SKEIGEN,
    			G_Index_ZKEIGEN
    		};
    		bool KeigenErrFlg = false;
            // --->Ver01.16.02
            #endregion

            try
            {
    			S_SaveBKBN     = "";
    			S_OldBKBN      = "";
    			B_DubleErrKBN  = false;
    			L_ErrCnt       = 0;
    			H_BunriOk_R    = 0;
    			H_BunriOk_S    = 0;    
    			L_DefBunri_Flg = true;
    
    			bumonInfo[0]   = new BumonInfo();
    			bumonInfo[1]   = new BumonInfo();
                               
    			edabanInfo[0]  = new EdabanInfo();
    			edabanInfo[1]  = new EdabanInfo();

                #region 課税区分
                // 頭0を削除
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//    			L_Text = Strings.Trim(H_Data[G_Index_RZKB]).TrimStart('0');
//              if (string.IsNullOrEmpty(L_Text) && Strings.Right(H_Data[G_Index_RZKB], 1) == "0")
//              {
                L_Text = (H_Data[G_Index_RZKB].Trim()).TrimStart('0');
                if (string.IsNullOrEmpty(L_Text) && H_Data[G_Index_RZKB] != "")
                { 
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応

                    H_Data[G_Index_RZKB] = "0";
    			}
                else
                {
    				H_Data[G_Index_RZKB] = L_Text;
    			}
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//              L_Text = Strings.Trim(H_Data[G_Index_SZKB]).TrimStart('0');
//    			if (string.IsNullOrEmpty(L_Text) && Strings.Right(H_Data[G_Index_SZKB], 1) == "0")
//              {
                L_Text = (H_Data[G_Index_SZKB].Trim()).TrimStart('0');
                if (string.IsNullOrEmpty(L_Text) && H_Data[G_Index_SZKB] != "")
                {
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応

                    H_Data[G_Index_SZKB] = "0";
    			}
                else
                {
    				H_Data[G_Index_SZKB] = L_Text;
    			}
    
    			// 課税区分の自動判定用
    			L_SaveRZKB = H_Data[G_Index_RZKB];
    			L_SaveSZKB = H_Data[G_Index_SZKB];
                #endregion

                #region 項目数チェック
                L_ItemCount_Sel = G_Index_ITEM_COUNT;

    			if (H_Data.Length != L_ItemCount_Sel)
                {
    				SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, -1, MC_ERRLOG_INVALIDDATACOUNT);
    				functionReturnValue = 1;

    				return functionReturnValue;
                }
                #endregion

                #region ** 伝票日付
                L_Dymd = 0;
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//              L_Text = Strings.Trim(H_Data[G_Index_DYMD]);
                L_Text = H_Data[G_Index_DYMD].Trim();
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応
                if (string.IsNullOrEmpty(L_Text))
                {
    				SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DYMD, MC_ERRLOG_MINYURYOKU);
    				L_DateCheck = L_DateCheck | MC_DinpCheck_Dymd;
    				// Prj312--->
    			}
                else if (ChkControlChars_FNC(L_Text))
                {
    				SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DYMD, MC_ERRLOG_SEIGYOMOJI);
    				L_DateCheck = L_DateCheck | MC_DinpCheck_Dymd;
    				// <---
    			}
                else
                {
    				// 整理月が未指定であった場合は通常月でインポート
    				// スペースも通常月として扱う
    				if (string.IsNullOrEmpty(H_Data[G_Index_SEIRI].Trim()))
                    {
    					H_Data[G_Index_SEIRI] = "0";
    				}
    
    				if (ChkHiduke_FNC(L_Text) == true)
                    {
    					L_Volum2Rows = H_dtVolum2.Select("SYMD <= " + L_Text + " AND EYMD >= " + L_Text, "KESN,CKEI");
    					switch (L_Volum2Rows.Length)
                        {
    						case 0:
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DYMD, MC_ERRLOG_INVALIDDYMD);
    							L_DateCheck = L_DateCheck | MC_DinpCheck_Dymd;
    							break;
    						case 1:
    							L_Kesn = Convert.ToInt16(L_Volum2Rows[0][(int)eVOLUM2.VOLUM2_KESN]);
    							L_Dkei = Convert.ToInt16(L_Volum2Rows[0][(int)eVOLUM2.VOLUM2_CKEI]);
    							L_Dymd = Convert.ToInt32(L_Text);
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//    							if (H_Data[G_Index_SEIRI].Trim() == "1" && Strings.Right(L_Dkei.ToString(), 1) == "0")
                                if (H_Data[G_Index_SEIRI].Trim() == "1" && L_Dkei.ToString().Substring(L_Dkei.ToString().Length - 1, 1) == "0")
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応
                                {
                                    SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SEIRI, MC_ERRLOG_INVALIDSEIRIM);
    								L_DateCheck = L_DateCheck | MC_DinpCheck_Dymd;
    							}
                                else
                                {
    								if (!CheckSeiriFlag(H_Data[G_Index_SEIRI], L_Volum2Rows))
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SEIRI, MC_ERRLOG_INVALIDVALUE);
    								}
    							}
    							break;
    						default:
    							// ** 整理月フラグ
    							// Prj312--->
    							if (ChkControlChars_FNC(H_Data[G_Index_SEIRI].Trim()))
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SEIRI, MC_ERRLOG_SEIGYOMOJI);
    							}
                                else
                                {
    								if (GetSeirituki_FNC(H_Data[G_Index_SEIRI], L_Volum2Rows, ref L_Kesn, ref L_Dkei) == true)
                                    {
    									L_Dymd = Convert.ToInt32(L_Text);
    								}
                                    else
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SEIRI, MC_ERRLOG_INVALIDVALUE);
    								}
    							}
    							break;
    						// If GetSeirituki_FNC(H_Data(G_Index_SEIRI), L_Volum2Rows, L_Kesn, L_Dkei) = True Then
    						//     L_Dymd = CInt(L_Text)
    						// Else
    						//     SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_SEIRI, MC_ERRLOG_INVALIDVALUE)
    						//     L_DateCheck = L_DateCheck Or MC_DinpCheck_Dymd
    						// End If
    						// <---
    					}
    					L_Volum2Rows = null;
    					// 伝票単位の取込処理用に該当仕訳の経過月及び決算期間を返送
    					H_Dkei = L_Dkei;
    					H_Kesn = L_Kesn;
    				}
                    else
                    {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DYMD, MC_ERRLOG_INVALIDDATE);
    					L_DateCheck = L_DateCheck | MC_DinpCheck_Dymd;
    				}
                }
                #endregion

                #region ** 入力可能月チェック
                if (L_Dymd != 0)
                {
    				// 入力可能月チェック処理を追加
    				L_VolumRow = H_dtVolum.Select("KESN = " + L_Kesn)[0];
    				if (((L_Kesn == H_Touki + 1) && (L_Dkei > 60)) || ((Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_ISTA]) > L_Dkei) || (Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_IEND]) < L_Dkei)))
                    {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DYMD, MC_ERRLOG_INVALIDDYMD);
    				}
                    else
                    {
    					L_Volum2Rows = H_dtVolum2.Select("KESN = " + L_Kesn + " AND CKEI = " + L_Dkei);
    					// Ver01.11.01 --> 月締め(FLG2)の判定を修正（SIASでは[1:仮締め、9:月締め]）
    					// If (L_Volum2Rows(0)[(int)eVOLUM2.VOLUM2_FLG1) = 1) Or (L_Volum2Rows(0)[(int)eVOLUM2.VOLUM2_FLG2) = 1) Then
    					if ((Convert.ToInt32(L_Volum2Rows[0][(int)eVOLUM2.VOLUM2_FLG1]) == 1) || (Convert.ToInt32(L_Volum2Rows[0][(int)eVOLUM2.VOLUM2_FLG2]) != 0))
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DYMD, MC_ERRLOG_INVALIDDKEI);
    					}
    					// Ver01.11.01 <--
    					L_Volum2Rows = null;
    				}
    			}
                else
                {
    				L_Kesn       = H_Touki;
    				L_Volum2Rows = H_dtVolum2.Select("KESN = " + L_Kesn + " AND CKEI = 10");
    				L_Dymd       = Convert.ToInt32(L_Volum2Rows[0][(int)eVOLUM2.VOLUM2_SYMD]);
    				L_Volum2Rows = null;
    			}
    
    			L_VolumRow  = H_dtVolum.Select( "KESN = " + L_Kesn)[0];
    			L_SvolumRow = H_dtSvolum.Select("KESN = " + L_Kesn)[0];
    			P_SvolumRow = L_SvolumRow;
    
    			L_Rows = H_dtJfctl.Select("KESN = " + L_Kesn);
    			if (L_Rows.Length == 0)
                {
    				L_Juse = 0;
    				// 部署入出力処理伝票番号自動付番対応--->
    				L_IDM1 = 0;
    				// <---
    			}
                else
                {
    				L_Juse = Convert.ToInt16(L_Rows[0][(int)eJFCTL.JFCTL_JUSE]);
    				P_Juse = L_Juse;
    				// 部署入出力処理伝票番号自動付番対応--->
    				L_IDM1 = Convert.ToInt16(L_Rows[0][(int)eJFCTL.JFCTL_IDM1]);
    				P_IDM1 = L_IDM1;
    				// <---
    			}
    			L_Rows = null;
                #endregion

                #region ** 伝票番号
                L_Dcno = 0;
    			// 自動付番使用しないとき
    			if (L_Juse == 0)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_DCNO]);
    				L_Text = H_Data[G_Index_DCNO].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (string.IsNullOrEmpty(L_Text))
                    {
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DCHK]) == 0)
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DCNO, MC_ERRLOG_MINYURYOKU);
    					}
    					// Prj312--->
    				}
                    else if (ChkControlChars_FNC(L_Text))
                    {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DCNO, MC_ERRLOG_SEIGYOMOJI);
    				}
                    else
                    {
    					if (IsNumeric_FNC(L_Text) == true)
                        {
    						if (Convert.ToInt32(L_Text) == 0)
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DCNO, MC_ERRLOG_INVALIDVALUE);
    						}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//                          else if (Strings.Len(L_Text) > 8)
                            else if (L_Text.Length > 8)
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DCNO, MC_ERRLOG_INVALIDLENGTH);
    						}
    					}
                        else
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DCNO, MC_ERRLOG_INVALIDCHAR);
    					}
    				}    
    			}
                else
                {
    				// 自動付番を使用する場合(値として正しいかチェック)
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_DCNO]);
    				L_Text = H_Data[G_Index_DCNO].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				// Prj312--->
    				if (ChkControlChars_FNC(L_Text))
                    {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DCNO, MC_ERRLOG_SEIGYOMOJI);
    				}
                    else
                    {
    					if (!string.IsNullOrEmpty(L_Text))
                        {
    						if (IsNumeric_FNC(L_Text) == true)
                            {
    							if (Convert.ToInt32(L_Text) == 0)
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DCNO, MC_ERRLOG_INVALIDVALUE);
    							}
    						}
                            else
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DCNO, MC_ERRLOG_INVALIDCHAR);
    						}
    					}
    				}
    				// If L_Text <> "" Then
    				//     If IsNumeric_FNC(L_Text) = True Then
    				//         If CInt(L_Text) = 0 Then
    				//             SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_DCNO, MC_ERRLOG_INVALIDVALUE)
    				//         End If
    				//     Else
    				//         SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_DCNO, MC_ERRLOG_INVALIDCHAR)
    				//     End If
    				// End If
    				// <---
                }
                #endregion

                #region ** ユーザー番号
                L_User = -1;
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			L_Text = Strings.Trim(H_Data[G_Index_FUSR]);
    			L_Text = H_Data[G_Index_FUSR].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			if (string.IsNullOrEmpty(L_Text))
                {
    				SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_FUSR, MC_ERRLOG_MINYURYOKU);
    				// Prj312--->
    			}
                else if (ChkControlChars_FNC(L_Text))
                {
    				SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_FUSR, MC_ERRLOG_SEIGYOMOJI);
    				// <---
    			}
                else
                {
    				if (IsNumeric_FNC(L_Text) == true)
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Strings.Len(L_Text) <= 4) {
    					if (L_Text.Length <= 4)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						L_Rows = H_dtUsrtbl.Select("UCOD = " + L_Text);
    						if (L_Rows.Length > 0)
                            {
    							L_User = Convert.ToInt32(L_Text);
    							// ** ユーザーセキュリティチェック
    							switch (ChkUsrSec_FNC(L_User, L_Rows[0], H_dtComcnt, H_dtUsrsec))
                                {
    								case 0:
    									break;
    								case -1:
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_FUSR, MC_ERRLOG_USERSECCCOD);
    									L_User = -1;
    									break;
    								case -2:
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_FUSR, MC_ERRLOG_USERSECDATA);
    									break;
    							}
    						}
                            else
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_FUSR, MC_ERRLOG_MITOUROKU);
    						}
    						L_Rows = null;
    					}
                        else
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_FUSR, MC_ERRLOG_INVALIDLENGTH);
    					}
    				}
                    else
                    {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_FUSR, MC_ERRLOG_INVALIDCHAR);
    				}
                }
                #endregion

                #region ** 部署入出力データの場合
                if (H_Kakutyo == true)
                {
                    #region ** セキュリティ情報取得
                    // 会社別ｻﾌﾞｼｽﾃﾑ登録のﾁｪｯｸ
                    if (L_User >= 0 && P_Int_Sub900 == 1)
                    {
    					GetSecInfo_SUB(H_Con, L_Kesn, L_User, ref L_KmkSec, ref L_BmnSec, ref L_EdaSec, ref L_ToriSec, ref L_SecPtn);
    					// ** 入力セキュリティ使用する場合は、パターン有無チェック
    					if ((L_KmkSec == true) || (L_BmnSec == true) || (L_EdaSec == true) || (L_ToriSec == true))
                        {
    						if (L_SecPtn < 0)
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_FUSR, MC_ERRLOG_USERSECPTN);
    							L_KmkSec  = false;
    							L_BmnSec  = false;
    							L_EdaSec  = false;
    							L_ToriSec = false;
    						}
    					}
    				}
                    else
                    {
    					L_KmkSec  = false;
    					L_BmnSec  = false;
    					L_EdaSec  = false;
    					L_ToriSec = false;
    					L_SecPtn  = 0;
    				}
                    #endregion
                    #region ** 承認使用する場合は、承認グループ所属チェック
                    if (L_User >= 0)
                    {
    					L_Syonin = false;
    					// 会社別ｻﾌﾞｼｽﾃﾑ登録のﾁｪｯｸ
    					if ((H_dtSnctl != null) && P_Int_Sub901 == 1)
                        {
    						L_Rows = H_dtSnctl.Select("KESN = " + L_Kesn);
    						if (L_Rows.Length > 0)
                            {
    							L_Syonin = Convert.ToBoolean(Convert.ToInt32(L_Rows[0][(int)eSNCTL.SNCTL_SUSE]) != 0);
    						}
    						L_Rows = null;
    					}
    					if (L_Syonin == true)
                        {
    						if (GetSgno_FNC(H_Con, L_Kesn, L_User) < 1)
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_FUSR, MC_ERRLOG_USERSYONIN);
    						}
    					}
    				}
                    #endregion
                }
                #endregion

                #region ** 外貨システムの使用状況を取得 **
                L_Gaikactl = false;
    			if (P_b_GaikaSUB == true && (P_GaiCtl != null))
                {
    				L_Rows_GaiCtl = P_GaiCtl.Select(" KESN = " + L_Kesn + " AND F_USE = 1 ");
    				// Ver01.12.01 -->
    				// If L_Rows_GaiCtl(0]).ItemArray(1) = 1 Then
    				if (L_Rows_GaiCtl.Length > 0)
                    {
    					L_HSSW = Convert.ToInt32(L_Rows_GaiCtl[0].ItemArray[2]);
    					L_Gaikactl = true;
    				}
    				// Ver01.12.01 <--
    			}
                else
                {
    				L_Gaikactl = false;
                }
                #endregion

                #region ヘッダーフィールド1～10
                // *-01.04.01
// Ver02.26.01 インボイス対応 --->
//    			if (H_Lno == 1) {
                if (isNewLayout) { 
// <--- Ver02.26.01 インボイス対応

    				// ヘッダフィールド１～１０
    				L_ColIdx = G_Index_HF1;
    				for (L_I = 1; L_I <= 10; L_I++)
                    {
    					if (ChkControlChars_FNC(H_Data[L_ColIdx]))
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_SEIGYOMOJI);
    					}
                        else
                        {
    						L_Text = H_Data[L_ColIdx];
    						switch (ChkHF_FNC((short)L_I, L_Text, H_Con, L_Kesn, L_VolumRow, H_CsvFlg))
                            {
    							case -1:
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDCHAR);
    								break;
    							case -2:
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDLENGTH);
    								break;
    							case -3:
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MINYURYOKU);
    								break;
    							case -4:
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MITOUROKU);
    								break;
    							case -6:
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDDATE);
    								break;
    							case -7:
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDNOUSE);
    								break;
    							case -8:
    								// 数字タイプ、コード0は不正値として処理
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    								break;
    						}
    					}
    					L_ColIdx = L_ColIdx + 1;
    				}
    			}
                // -*01.04.01
                #endregion

                // ** 各種コードのチェック    
    			for (L_Katt = 0; L_Katt <= 1; L_Katt++)
                {
                    #region ** 科目
                    L_Kicd[L_Katt] = "";
    				L_ColIdx = (L_Katt == 0 ? G_Index_RKMK : G_Index_SKMK);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[L_ColIdx]);
    				L_Text = H_Data[L_ColIdx].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (string.IsNullOrEmpty(L_Text))
                    {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MINYURYOKU);
    					// Prj312--->
    				}
                    else if (ChkControlChars_FNC(L_Text))
                    {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_SEIGYOMOJI);
    					// <---
    				}
                    else
                    {
    					if (ChkCodeType_FNC(L_Text, Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KMTY])) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Strings.Len(L_Text) <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMLN]))
    						if (L_Text.Length <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMLN]))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                            {
    							L_Text = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_KMTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMLN]));
    							L_Rows = H_dtKname.Select("KESN = " + L_Kesn + " AND KCOD = '" + L_Text + "'");
    							if (L_Rows.Length > 0)
                                {
    								L_KnameRow[L_Katt] = L_Rows[0];
    								L_Kicd[L_Katt]     = (L_KnameRow[L_Katt][(int)eKNAME.KNAME_KICD]).ToString();
    							}
                                else
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MITOUROKU);
    							}
    							L_Rows = null;
    						}
                            else
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDLENGTH);
    						}
    					}
                        else
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDCHAR);
    					}
    				}
    				if ((H_Kakutyo == true) && (!string.IsNullOrEmpty(L_Kicd[L_Katt])) && (L_KmkSec == true))
                    {
    					if (ChkKmkSec_FNC(H_Con, L_Kesn, L_SecPtn, L_Kicd[L_Katt]) == false)
                        {
    						L_Kicd[L_Katt] = "";
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_CANNOTUSE);
    					}
    				}
//    				L_GaicutUse = false;
                    L_GaicutUse = 0;
    				// 旧関数使用時(該当科目が不良仕訳の場合はﾁｪｯｸしない)＆伝票日付の処理期にて外貨を使用すると設定&外貨科目が指定されていた場合はエラー
    				// If P_b_GaikaFC = False Then 
    				if (P_b_GaikaFC == false && !string.IsNullOrEmpty(L_Kicd[L_Katt]))
                    {
    					if (P_b_GaikaTable_Flg == true && (P_GaiCtl != null))
                        {
    						L_Rows_GaiCtl = P_GaiCtl.Select(" KESN = " + L_Kesn + " AND F_USE = 1 ");
    						// Ver01.12.01 -->
    						// If L_Rows_GaiCtl(0]).ItemArray(1) = 1 Then
    						if (L_Rows_GaiCtl.Length > 0)
                            {
//    							L_GaicutUse = true;
                                L_GaicutUse = 1;
    							if (ChkGaika_Kamoku_FNC(H_Con, L_Kesn.ToString(), L_Kicd[L_Katt]) == false)
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVAL_GAIKA_KAMOKUNO);
    							}
    						}
    						// Ver01.12.01 <--
    					}
                    }
                    #endregion
                    #region ** 部門
                    L_Bcod = "";
    				// マスタ使用不可でコードを指定されていた場合はエラー処理
    				L_ColIdx = (L_Katt == 0 ? G_Index_RBMN : G_Index_SBMN);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text   = Strings.Trim(H_Data[L_ColIdx]);
    				L_Text   = H_Data[L_ColIdx].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				bumonInfo[L_Katt].Initialize();
    
    				if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMFLG]) == 1)
                    {
    					if (string.IsNullOrEmpty(L_Text)) {
    						// *-01.07.01
    						if (P_SUB_TENK == 1) {
    							if (!string.IsNullOrEmpty(L_Kicd[L_Katt])) {
    								if (Convert.ToInt32(L_KnameRow[L_Katt][(int)eKNAME.KNAME_KB02]) == 1)
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MINYURYOKU);
    								}
    							}
    						}
    						// -*01.07.01
    						// Prj312--->
    					} else if (ChkControlChars_FNC(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_SEIGYOMOJI);
    						// <---
    					} else {
    						if (ChkCodeType_FNC(L_Text, Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_BMTY])) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMLN]))
    							if (L_Text.Length <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMLN]))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								L_Text = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_BMTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMLN]));
    								bumonInfo[L_Katt].LoadDataFromDb(H_Con, L_Kesn, L_Text);
    								switch (bumonInfo[L_Katt].Bflg) {
    									case 0:
    										// <---Ver01.18.01　2019/03/01　hirano　部門使用期間対応
    										if (BnameExists_FNC(H_Con, L_Text, L_Dymd) == true) {
    											// --->Ver01.18.01
    											L_Bcod = L_Text;
    											// <---Ver01.18.01　2019/03/01　hirano　部門使用期間対応
    										} else {
    											SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MITOUROKU);
    										}
    										break;
    									// --->Ver01.18.01
    									case 1:
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDBCOD);
    										break;
    									case -1:
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MITOUROKU);
    										break;
    								}
    							} else {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDLENGTH);
    							}
    						} else {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDCHAR);
    						}
    					}
    					if ((H_Kakutyo == true) && (!string.IsNullOrEmpty(L_Bcod)) && (L_BmnSec == true)) {
    						if (ChkBmnSec_FNC(H_Con, L_Kesn, L_SecPtn, L_Bcod) == false) {
    							L_Bcod = "";
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_CANNOTUSE);
    						}
    					}
    					if ((!string.IsNullOrEmpty(L_Bcod)) && (!string.IsNullOrEmpty(L_Kicd[L_Katt]))) {
    						if (BkzanExists_FNC(H_Con, L_Kesn, L_Bcod, L_Kicd[L_Katt]) == false) {
// ▼ ツルハ様カスタマイズ ▼
//    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, "部門科目が" + MC_ERRLOG_MITOUROKU);
                                MakeBKZANRecord(H_Con, L_Kesn, H_Touki, L_Bcod, L_Kicd[L_Katt]);
// ▲ ツルハ様カスタマイズ ▲
    						}
    					}
    				}
                    else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMFLG]) == 0)
                    {
    					if (!string.IsNullOrEmpty(L_Text))
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDNOUSE);
    					}
                    }
                    #endregion
                    #region ** 取引先
                    L_Trcd = "";
    				// マスタ使用不可でコードを指定されていた場合はエラー処理
    				L_ColIdx = (L_Katt == 0 ? G_Index_RTOR : G_Index_STOR);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text   = Strings.Trim(H_Data[L_ColIdx]);
    				L_Text   = H_Data[L_ColIdx].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRFLG]) == 1)
                    {
    					if (string.IsNullOrEmpty(L_Text))
                        {
    						// *-01.07.01
    						if (P_SUB_TENK == 1)
                            {
    							if (!string.IsNullOrEmpty(L_Kicd[L_Katt]))
                                {
    								if (Convert.ToInt32(L_KnameRow[L_Katt][(int)eKNAME.KNAME_KT02]) == 1)
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MINYURYOKU);
    								}
    							}
    						}
    						// -*01.07.01
    						// Prj312--->
    					}
                        else if (ChkControlChars_FNC(L_Text))
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_SEIGYOMOJI);
    						// <---
    					}
                        else
                        {
    						if (ChkCodeType_FNC(L_Text, Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_TRTY])) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRLN]))
    							if (L_Text.Length <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRLN]))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								L_Text = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_TRTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRLN]));
    								if (TrnamExists_FNC(H_Con, L_Text, L_Dymd) == true)
                                    {
    									L_Trcd = L_Text;
    								}
                                    else
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MITOUROKU);
    								}
    							}
                                else
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDLENGTH);
    							}
    						}
                            else
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDCHAR);
    						}
    					}
    					if ((H_Kakutyo == true) && (!string.IsNullOrEmpty(L_Trcd)) && (L_ToriSec == true))
                        {
    						if (ChkToriSec_FNC(H_Con, L_Kesn, L_SecPtn, L_Trcd) == false)
                            {
    							L_Trcd = "";
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_CANNOTUSE);
    						}
    					}
    					if ((!string.IsNullOrEmpty(L_Trcd)) && (!string.IsNullOrEmpty(L_Kicd[L_Katt])))
                        {
    						if (TrzanExists_FNC(H_Con, L_Kesn, L_Trcd, L_Kicd[L_Katt]) == false)
                            {
// ▼ ツルハ様カスタマイズ ▼
//    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, "取引先科目が" + MC_ERRLOG_MITOUROKU);
                                MakeTRZANRecord(H_Con, L_Kesn, H_Touki, L_Trcd, L_Kicd[L_Katt]);
// ▲ ツルハ様カスタマイズ ▲
                            }
    						if ((!string.IsNullOrEmpty(L_Bcod)) && (Convert.ToInt32(L_KnameRow[L_Katt][(int)eKNAME.KNAME_BTK01]) == 1))
                            {
    							//  判定追加 - 未登録であっても「自動登録する」のであればエラーにしない
    							if (BtkzanExists_FNC(H_Con, L_Kesn, L_Bcod, L_Trcd, L_Kicd[L_Katt]) == false && H_IsAuto == 0)
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, "部門取引先科目が" + MC_ERRLOG_MITOUROKU);
    							}
    						}
    					}
    				}
                    else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRFLG]) == 0)
                    {
    					if (!string.IsNullOrEmpty(L_Text))
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDNOUSE);
    					}
                    }
                    #endregion
                    #region ** 枝番
                    L_Ecod = "";
    				// マスタ使用不可でコードを指定されていた場合はエラー処理
    				L_ColIdx = (L_Katt == 0 ? G_Index_REDA : G_Index_SEDA);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text   = Strings.Trim(H_Data[L_ColIdx]);
    				L_Text   = H_Data[L_ColIdx].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    
    				edabanInfo[L_Katt].Initialize();
    
    				if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDFLG]) == 1)
                    {
    					if (string.IsNullOrEmpty(L_Text)) {
    						// *-01.07.01
    						if (P_SUB_TENK == 1) {
    							if (!string.IsNullOrEmpty(L_Kicd[L_Katt])) {
    								if (Convert.ToInt32(L_KnameRow[L_Katt][(int)eKNAME.KNAME_KE02]) == 1)
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MINYURYOKU);
    								}
    							}
    						}
    						// -*01.07.01
    						// Prj312--->
    					} else if (ChkControlChars_FNC(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_SEIGYOMOJI);
    						// <---
    					} else {
    						if (ChkCodeType_FNC(L_Text, Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_EDTY])) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDLN]))
    							if (L_Text.Length <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDLN]))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								if (!string.IsNullOrEmpty(L_Kicd[L_Katt])) {
    									L_Text = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_EDTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDLN]));
    									edabanInfo[L_Katt].LoadDataFromDb(H_Con, L_Kesn, L_Kicd[L_Katt], L_Text);
    									if (edabanInfo[L_Katt].IsExists)
                                        {
    										L_Ecod = L_Text;
    									}
                                        else
                                        {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MITOUROKU);
    									}
    								}
    							} else {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDLENGTH);
    							}
    						} else {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDCHAR);
    						}
    					}
    					if ((H_Kakutyo == true) && (!string.IsNullOrEmpty(L_Kicd[L_Katt])) && (!string.IsNullOrEmpty(L_Ecod)) && (L_EdaSec == true)) {
    						if (ChkEdaSec_FNC(H_Con, L_Kesn, L_SecPtn, L_Kicd[L_Katt], L_Ecod) == false) {
    							L_Ecod = "";
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_CANNOTUSE);
    						}
    					}
    					if ((!string.IsNullOrEmpty(L_Kicd[L_Katt])) && (!string.IsNullOrEmpty(L_Ecod))) {
    						if ((!string.IsNullOrEmpty(L_Bcod)) && (Convert.ToInt32(L_KnameRow[L_Katt][(int)eKNAME.KNAME_BKE01]) == 1))
                            {
    							//  判定追加 - 未登録であっても「自動登録する」のであればエラーにしない
    							if (BkenmExists_FNC(H_Con, L_Kesn, L_Bcod, L_Kicd[L_Katt], L_Ecod) == false && H_IsAuto == 0) {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, "部門科目枝番が" + MC_ERRLOG_MITOUROKU);
    							}
    						}
    					}
    				} else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDFLG]) == 0)
                    {
    					if (!string.IsNullOrEmpty(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDNOUSE);
    					}
                    }
                    #endregion
                    #region ** 工事
                    // マスタ使用不可でコードを指定されていた場合はエラー処理
    				L_ColIdx = (L_Katt == 0 ? G_Index_RKOJ : G_Index_SKOJ);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[L_ColIdx]);
    				L_Text = H_Data[L_ColIdx].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KJFLG]) == 1)
                    {
    					if (string.IsNullOrEmpty(L_Text)) {
    						// *-01.07.01
    						if (P_SUB_TENK == 1 && P_JSOX == true) {
    							if (!string.IsNullOrEmpty(L_Kicd[L_Katt])) {
    								if (Convert.ToInt32(L_KnameRow[L_Katt][(int)eKNAME.KNAME_KJ02]) == 1)
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MINYURYOKU);
    								}
    							}
    						}
    						// -*01.07.01
    						// Prj312--->
    					} else if (ChkControlChars_FNC(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_SEIGYOMOJI);
    						// <---
    					} else {
    						if (ChkCodeType_FNC(L_Text, Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KJTY])) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KJLN]))
    							if (L_Text.Length <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KJLN]))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								L_Text = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_KJTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KJLN]));
    								if (KjnameExists_FNC(H_Con, L_Kesn, L_Text) == false)
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MITOUROKU);
    								}
    							} else {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDLENGTH);
    							}
    						} else {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDCHAR);
    						}
    					}
    				} else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KJFLG]) == 0)
                    {
    					if (!string.IsNullOrEmpty(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDNOUSE);
    					}
                    }
                    #endregion
                    #region ** 工種
                    // マスタ使用不可でコードを指定されていた場合はエラー処理
    				L_ColIdx = (L_Katt == 0 ? G_Index_RKOS : G_Index_SKOS);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text   = Strings.Trim(H_Data[L_ColIdx]);
    				L_Text   = H_Data[L_ColIdx].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KSFLG]) == 1)
                    {
    					if (string.IsNullOrEmpty(L_Text)) {
    						// *-01.07.01
    						if (P_SUB_TENK == 1 && P_JSOX == true) {
    							if (!string.IsNullOrEmpty(L_Kicd[L_Katt])) {
    								if (Convert.ToInt32(L_KnameRow[L_Katt][(int)eKNAME.KNAME_KS02]) == 1)
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MINYURYOKU);
    								}
    							}
    						}
    						// -*01.07.01
    						// Prj312--->
    					} else if (ChkControlChars_FNC(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_SEIGYOMOJI);
    						// <---
    					} else {
    						if (ChkCodeType_FNC(L_Text, Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KSTY])) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KSLN]))
    							if (L_Text.Length <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KSLN]))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								L_Text = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_KSTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KSLN]));
    								if (KjsnameExists_FNC(H_Con, L_Kesn, L_Text) == false) {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MITOUROKU);
    								}
    							} else {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDLENGTH);
    							}
    						} else {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDCHAR);
    						}
    					}
    				} else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KSFLG]) == 0)
                    {
    					if (!string.IsNullOrEmpty(L_Text))
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDNOUSE);
    					}
                    }
                    #endregion
                    #region ** プロジェクト
                    // マスタ使用不可でコードを指定されていた場合はエラー処理
    				L_ColIdx = (L_Katt == 0 ? G_Index_RPRJ : G_Index_SPRJ);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text   = Strings.Trim(H_Data[L_ColIdx]);
    				L_Text   = H_Data[L_ColIdx].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_PJFLG]) == 1)
                    {
    					if (string.IsNullOrEmpty(L_Text)) {
    						// *-01.07.01
    						if (P_SUB_TENK == 1 && P_JSOX == true) {
    							if (!string.IsNullOrEmpty(L_Kicd[L_Katt])) {
    								if (Convert.ToInt32(L_KnameRow[L_Katt][(int)eKNAME.KNAME_PJ02]) == 1)
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MINYURYOKU);
    								}
    							}
    						}
    						// -*01.07.01
    						// Prj312--->
    					} else if (ChkControlChars_FNC(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_SEIGYOMOJI);
    						// <---
    					} else {
    						if (ChkCodeType_FNC(L_Text, Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_PJTY])) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_PJLN]))
    							if (L_Text.Length <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_PJLN]))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								L_Text = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_PJTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_PJLN]));
    								if (PrjnamExists_FNC(H_Con, L_Kesn, L_Text) == false) {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MITOUROKU);
    								}
    							} else {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDLENGTH);
    							}
    						} else {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDCHAR);
    						}
    					}
    				} else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_PJFLG]) == 0)
                    {
    					if (!string.IsNullOrEmpty(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDNOUSE);
    					}
                    }
                    #endregion
                    #region ** セグメント
                    L_Sgcd   = "";
    				// マスタ使用不可でコードを指定されていた場合はエラー処理
    				L_ColIdx = (L_Katt == 0 ? G_Index_RSEG : G_Index_SSEG);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text   = Strings.Trim(H_Data[L_ColIdx]);
    				L_Text   = H_Data[L_ColIdx].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGFLG]) == 1)
                    {
    					if (string.IsNullOrEmpty(L_Text)) {
    						// *-01.07.01
    						if (P_SUB_TENK == 1 && P_JSOX == true) {
    							if (!string.IsNullOrEmpty(L_Kicd[L_Katt])) {
    								if (Convert.ToInt32(L_KnameRow[L_Katt][(int)eKNAME.KNAME_SG02]) == 1)
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MINYURYOKU);
    								}
    							}
    						}
    						// -*01.07.01
    						// Prj312--->
    					} else if (ChkControlChars_FNC(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_SEIGYOMOJI);
    						// <---
    					} else {
    						if (ChkCodeType_FNC(L_Text, Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_SGTY])) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGLN]))
    							if (L_Text.Length <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGLN]))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								L_Text = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_SGTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGLN]));
    								if (SgtblExists_FNC(H_Con, L_Kesn, L_Text) == true) {
    									L_Sgcd = L_Text;
    								} else {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MITOUROKU);
    								}
    							} else {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDLENGTH);
    							}
    						} else {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDCHAR);
    						}
    					}
    					if ((!string.IsNullOrEmpty(L_Sgcd)) && (!string.IsNullOrEmpty(L_Kicd[L_Katt]))) {
    						if (SgkzanExists_FNC(H_Con, L_Kesn, L_Sgcd, L_Kicd[L_Katt]) == false) {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, "セグメント科目が" + MC_ERRLOG_MITOUROKU);
    						}
    						if ((!string.IsNullOrEmpty(L_Trcd)) && (Convert.ToInt32(L_KnameRow[L_Katt][(int)eKNAME.KNAME_STK01]) == 1))
                            {
    							//  判定追加 - 未登録であっても「自動登録する」のであればエラーにしない
    							if (StkzanExists_FNC(H_Con, L_Kesn, L_Sgcd, L_Trcd, L_Kicd[L_Katt]) == false && H_IsAuto == 0) {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, "セグメント取引先科目が" + MC_ERRLOG_MITOUROKU);
    							}
    						}
    					}
    				} else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGFLG]) == 0)
                    {
    					if (!string.IsNullOrEmpty(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDNOUSE);
    					}
                    }
                    #endregion
                    #region ** ユニバーサル1～20
                    // *-01.04.01
                    L_ColIdx = (L_Katt == 0 ? G_Index_RDM1 : G_Index_SDM1);
    				for (L_I = 1; L_I <= 20; L_I++)
                    {
    					if (ChkControlChars_FNC(H_Data[L_ColIdx]))
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_SEIGYOMOJI);
    					}
                        else
                        {
    						L_Text = H_Data[L_ColIdx];
    						switch (ChkDummy_FNC((short)L_I, L_Text, H_Con, L_Kesn, L_VolumRow, (string.IsNullOrEmpty(L_Kicd[L_Katt]) ? null : L_KnameRow[L_Katt]), H_CsvFlg))
                            {
    							case -1:
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDCHAR);
    								break;
    							case -2:
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDLENGTH);
    								break;
    							case -3:
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MINYURYOKU);
    								break;
    							case -4:
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MITOUROKU);
    								break;
    							case -5:
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, Strings.Mid(M_ItemName[L_ColIdx + 1], 3) + "科目が" + MC_ERRLOG_MITOUROKU);
     // 2020/10/05 Ver02.22.06 UF名称取得関数不備修正 --->
     //								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, M_ItemName[L_ColIdx + 1].Substring(M_ItemName[L_ColIdx + 1].Length - 1, 3) + "科目が" + MC_ERRLOG_MITOUROKU);
                                    SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, M_ItemName[L_ColIdx + 1].Substring(2) + "科目が" + MC_ERRLOG_MITOUROKU);
     // <--- 2020/10/05 Ver02.22.06 UF名称取得関数不備修正
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                    break;
    							case -6:
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDDATE);
    								break;
    							case -7:
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDNOUSE);
    								break;
    							case -8:
    								// 数字タイプ、コード0は不正値として処理
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    								break;
    						}
    					}
    					// de3レイアウトの場合は３まで
    					if (L_I >= 3 && H_Lno == 0)
                        {
    						break;
    					}
    					L_ColIdx = L_ColIdx + 1;
    					// -*01.04.01
                    }
                    #endregion
                }

                #region 外貨関数使用時の科目チェック処理
                // ※旧関数使用時のチェック処理は貸借科目別（上記ループ内）にて処理
                if (P_b_GaikaFC)
                {
    				if (H_Lno == 0)
                    {
    					L_GaikaKamoku_Sel = ChkGaika_Siwake_FNC(H_Con, L_Kesn.ToString(), L_Kicd[0], L_Kicd[1], ref L_HEI_CD);
    					if (L_GaikaKamoku_Sel == -1)
                        {
    						// 幣種エラー
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RKMK, MC_ERRLOG_INVAL_GAIKA_HEISYU);
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SKMK, MC_ERRLOG_INVAL_GAIKA_HEISYU);
    					}
    				}
                    else
                    {
    					if (ChkControlChars_FNC(H_Data[G_Index_HEIC]))
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_HEIC, MC_ERRLOG_SEIGYOMOJI);
    					}
                        else
                        {
    						L_Ret = EditImpString_FNC(H_Data[G_Index_HEIC], H_CsvFlg, 2, ref L_HEI_CD);
    						if (L_Ret)
                            {
    							L_GaikaKamoku_Sel = ChkGaika_Siwake_FNC(H_Con, L_Kesn.ToString(), L_Kicd[0], L_Kicd[1], ref L_HEI_CD);
    							if (L_GaikaKamoku_Sel == -1)
                                {
    								// 幣種エラー
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RKMK, MC_ERRLOG_INVAL_GAIKA_HEISYU);
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SKMK, MC_ERRLOG_INVAL_GAIKA_HEISYU);
    							}
                                else if (L_GaikaKamoku_Sel == -2)
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_HEIC, MC_ERRLOG_INVAL_GAIKA_HEISYU);
    							}
    						}
                            else
                            {
    							// 不正値
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_HEIC, MC_ERRLOG_INVALIDVALUE);
    						}
    					}
    				}
    			}
                #endregion

                #region ** 借方摘要
                // *-01.04.01
                if (ChkControlChars_FNC(H_Data[G_Index_RTKY]))
                {
    				SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTKY, MC_ERRLOG_SEIGYOMOJI);
    			}
                else
                {
    				L_Ret = DelDoubleQuote_FNC(H_Data[G_Index_RTKY], H_CsvFlg, ref L_Text);
    				if (L_Ret == false)
                    {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTKY, MC_ERRLOG_INVALIDVALUE);
    				}
                    else
                    {
// Ver02.26.01 摘要60バイト→120バイト対応 --->
//    					if (LenB_FNC(L_Text) > 60) {
//                      if ((H_Lno != 2 && LenB_FNC(L_Text) > 60) || (H_Lno == 2 && LenB_FNC(L_Text) > 120)) { 
// <--- Ver02.26.01 摘要60バイト→120バイト対応
// Ver02.26.02 摘要120バイト対応(変更) --->
                        if ((!DBSUB.siasInvoice && LenB_FNC(L_Text) > 60) || (DBSUB.siasInvoice && LenB_FNC(L_Text) > 120)) { 
// <--- Ver02.26.02 摘要120バイト対応(変更)
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTKY, MC_ERRLOG_INVALIDLENGTH);
    					}
    				}
                }
                #endregion
                #region ** 貸方摘要
// Ver02.26.01 インボイス対応 --->
//              if (H_Lno == 1) {
                if (isNewLayout) { 
// <--- Ver02.26.01 インボイス対応 

    				if (ChkControlChars_FNC(H_Data[G_Index_STKY])) {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_STKY, MC_ERRLOG_SEIGYOMOJI);
    				} else {
    					L_Ret = DelDoubleQuote_FNC(H_Data[G_Index_STKY], H_CsvFlg, ref L_Text);
    					if (L_Ret == false) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_STKY, MC_ERRLOG_INVALIDVALUE);
    					} else {
// Ver02.26.01 摘要60バイト→120バイト対応 --->
//    						if (LenB_FNC(L_Text) > 60) {
//                          if ((H_Lno != 2 && LenB_FNC(L_Text) > 60) || (H_Lno == 2 && LenB_FNC(L_Text) > 120)) {
// <--- Ver02.26.01 摘要60バイト→120バイト対応
// Ver02.26.02 摘要120バイト対応(変更) --->
                            if ((!DBSUB.siasInvoice && LenB_FNC(L_Text) > 60) || (DBSUB.siasInvoice && LenB_FNC(L_Text) > 120)) { 
// <--- Ver02.26.02 摘要120バイト対応(変更)
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_STKY, MC_ERRLOG_INVALIDLENGTH);
    						}
    					}
    					// 貸借別摘要フラグ
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Text = Strings.Trim(H_Data[G_Index_TKFLG]);
    					L_Text = H_Data[G_Index_TKFLG].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					if ((string.IsNullOrEmpty(L_Text) == false && L_Text != "0" && L_Text != "1"))
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_TKFLG, MC_ERRLOG_INVALIDVALUE);
    					}
    				}
                }
                #endregion
                #region ** 貸借摘要コード
                if (H_Lno == 0)
                {
    				// de3レイアウト
    				if (ChkControlChars_FNC(H_Data[G_Index_RTNO])) {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTNO, MC_ERRLOG_SEIGYOMOJI);
    				} else {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Text = Strings.Trim(H_Data[G_Index_RTNO]);
    					L_Text = H_Data[G_Index_RTNO].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					if (string.IsNullOrEmpty(L_Text)) {
    						L_Flag = false;
    						if (!string.IsNullOrEmpty(L_Kicd[0])) {
    							if (Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_TK02]) == 1)
                                {
    								L_Flag = true;
    							}
    						}
    						if (!string.IsNullOrEmpty(L_Kicd[1])) {
    							if (Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_TK02]) == 1)
                                {
    								L_Flag = true;
    							}
    						}
    						if (L_Flag == true) {
    							// *-01.07.01
    							if (P_SUB_TENK == 1 && P_JSOX == true) {
    								// 貸借両方に振付けるため貸借どちらかの科目が未入力チェックする場合はエラー
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTNO, MC_ERRLOG_MINYURYOKU);
    							}
    							// -*01.07.01
    						}
    					} else {
    						if (IsNumeric_FNC(L_Text) == true) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= 4) {
    							if (L_Text.Length <= 4)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								if (Convert.ToInt32(L_Text) > 0) {
    									if (ZmtkyExists_FNC(H_Con, L_Kesn, Convert.ToInt16(L_Text)) == false) {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTNO, MC_ERRLOG_MITOUROKU);
    									}
    								} else {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTNO, MC_ERRLOG_INVALIDVALUE);
    								}
    							} else {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTNO, MC_ERRLOG_INVALIDLENGTH);
    							}
    						} else {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTNO, MC_ERRLOG_INVALIDCHAR);
    						}
    					}
    				}
    			} 
// Ver02.26.01 インボイス対応 --->                
//              else if (H_Lno == 1) {
                else if (isNewLayout) { 
// <--- Ver02.26.01 インボイス対応

    				// SIASレイアウト
    				// 借方摘要コード
    				if (ChkControlChars_FNC(H_Data[G_Index_RTNO])) {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTNO, MC_ERRLOG_SEIGYOMOJI);
    				} else {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Text = Strings.Trim(H_Data[G_Index_RTNO]);
    					L_Text = H_Data[G_Index_RTNO].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					if (string.IsNullOrEmpty(L_Text)) {
    						L_Flag = false;
    						if (!string.IsNullOrEmpty(L_Kicd[0])) {
    							if (Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_TK02]) == 1)
                                {
    								L_Flag = true;
    							}
    						}
    						if (L_Flag == true) {
    							// *-01.07.01
    							if (P_SUB_TENK == 1 && P_JSOX == true) {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTNO, MC_ERRLOG_MINYURYOKU);
    							}
    							// -*01.07.01
    						}
    					} else {
    						if (IsNumeric_FNC(L_Text) == true) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= 4) {
    							if (L_Text.Length <= 4) {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								if (Convert.ToInt32(L_Text) > 0) {
    									if (ZmtkyExists_FNC(H_Con, L_Kesn, Convert.ToInt16(L_Text)) == false) {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTNO, MC_ERRLOG_MITOUROKU);
    									}
    								} else {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTNO, MC_ERRLOG_INVALIDVALUE);
    								}
    							} else {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTNO, MC_ERRLOG_INVALIDLENGTH);
    							}
    						} else {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RTNO, MC_ERRLOG_INVALIDCHAR);
    						}
    					}
    				}
    
    				// 貸方摘要コード
    				if (ChkControlChars_FNC(H_Data[G_Index_STNO])) {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_STNO, MC_ERRLOG_SEIGYOMOJI);
    				} else {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Text = Strings.Trim(H_Data[G_Index_STNO]);
    					L_Text = H_Data[G_Index_STNO].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					if (string.IsNullOrEmpty(L_Text)) {
    						L_Flag = false;
    						if (!string.IsNullOrEmpty(L_Kicd[1])) {
    							if (Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_TK02]) == 1)
                                {
    								L_Flag = true;
    							}
    						}
    						// *-01.07.01
    						if (P_SUB_TENK == 1 && P_JSOX == true) {
    							if (L_Flag == true) {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_STNO, MC_ERRLOG_MINYURYOKU);
    							}
    						}
    						// -*01.07.01
    					} else {
    						if (IsNumeric_FNC(L_Text) == true) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= 4) {
    							if (L_Text.Length <= 4) {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								if (Convert.ToInt32(L_Text) > 0) {
    									if (ZmtkyExists_FNC(H_Con, L_Kesn, Convert.ToInt16(L_Text)) == false) {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_STNO, MC_ERRLOG_MITOUROKU);
    									}
    								} else {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_STNO, MC_ERRLOG_INVALIDVALUE);
    								}
    							} else {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_STNO, MC_ERRLOG_INVALIDLENGTH);
    							}
    						} else {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_STNO, MC_ERRLOG_INVALIDCHAR);
    						}
    					}
    				}
    			}
                // -*01.04.01
                #endregion
                #region ** 金額
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//              L_Text = Strings.Trim(H_Data[G_Index_VALU]);
                L_Text = H_Data[G_Index_VALU].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			if (string.IsNullOrEmpty(L_Text)) {
    				SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_VALU, MC_ERRLOG_MINYURYOKU);
    				// Prj312--->
    			} else if (ChkControlChars_FNC(L_Text)) {
    				SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_VALU, MC_ERRLOG_SEIGYOMOJI);
    				// <---
    			} else {
    				switch (ChkCurrency_FNC(L_Text, 13)) {
    					case -1:
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_VALU, MC_ERRLOG_INVALIDCHAR);
    						break;
    					case -2:
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_VALU, MC_ERRLOG_INVALIDLENGTH);
    						break;
    				}
                }
                #endregion
                #region **** レート
                // If H_Data.Length > 57 Then
    			if (H_Data.Length > P_DataLen)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_RATE]);
    				L_Text = H_Data[G_Index_RATE].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (L_Gaikactl == false) {
    					if (!string.IsNullOrEmpty(L_Text) && L_Text != "0")
                        {
    						// 邦貨仕訳にレートが指定されていた場合はエラー
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RATE, MC_ERRLOG_GAIKACTL);
    					}
    				}
                    else
                    {
    					if (L_GaikaKamoku_Sel > 0)
                        {
    						if (string.IsNullOrEmpty(L_Text))
                            {
    							// 未指定時は0をセット
    							H_Data[G_Index_RATE] = "0";
    							// Prj312--->
    						}
                            else if (ChkControlChars_FNC(L_Text))
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RATE, MC_ERRLOG_SEIGYOMOJI);
    							// <---
    						}
                            else
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Convert.ToInt32(Strings.FormatNumber(L_Text)) < 0)
    							if (Convert.ToDouble(L_Text) < 0)
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								// マイナスレートの入力不可
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RATE, MC_ERRLOG_INVALIDVALUE);
    							} 
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//                              else if (Strings.Replace(Strings.FormatNumber(L_Text, 0), ",", "").Length > 6)
                                else if ((Math.Truncate(Convert.ToDouble(L_Text))).ToString().Length > 6)
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								// 指定値が過大
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RATE, MC_ERRLOG_INVALIDLENGTH);
    							}
    							// レートの小数点以下の桁数が6桁以上の場合はエラー処理
    							if (ChkCountDigit_FNC(decimal.Parse(L_Text)) > 5)
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RATE, MC_ERRLOG_INVAL_GAIKA_KETASU_SYO);
    							}
    						}
    					}
                        else if (L_GaikaKamoku_Sel == 0)
                        {
    						if (!string.IsNullOrEmpty(L_Text) && L_Text != "0")
                            {
    							// 邦貨仕訳にレートが指定されていた場合はエラー
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RATE, MC_ERRLOG_INVALIDVALUE);
    						}
    					}
    				}
                }
                #endregion
                #region **** 外貨対価金額
                // If H_Data.Length > 57 Then
    			if (H_Data.Length > P_DataLen)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_GEXVL]);
    				L_Text = H_Data[G_Index_GEXVL].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (L_Gaikactl == false)
                    {
    					// 邦貨仕訳に外貨対価が入力されていた場合はエラー処理
    					if (!string.IsNullOrEmpty(L_Text) && L_Text != "0")
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GEXVL, MC_ERRLOG_GAIKACTL);
    					}
    				}
                    else
                    {
    					if (L_GaikaKamoku_Sel > 0) {
    						if (string.IsNullOrEmpty(L_Text))
                            {
    							H_Data[G_Index_GEXVL] = "0";
    							// Prj312--->
    						} else if (ChkControlChars_FNC(L_Text)) {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GEXVL, MC_ERRLOG_SEIGYOMOJI);
    							// <---
    						}
    						if (Convert.ToDouble(H_Data[G_Index_GEXVL]) != 0)
                            {
    							// 符号エラーは外貨換算しない場合のみ
    							// 邦貨金額と外貨金額の符号が一致しない場合はエラー処理。
    							if (Convert.ToInt32(H_Data[G_Index_EXVL]) != 0 && P_b_Kanzan_Flg == false)
                                {
    								if (Convert.ToDouble(H_Data[G_Index_GEXVL]) < 0)
                                    {
    									if (!(Convert.ToInt32(H_Data[G_Index_EXVL]) < 0))
                                        {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GEXVL, MC_ERRLOG_INVAL_GAIKA_FUGOU_GT);
    									}
    								} else if (Convert.ToDouble(H_Data[G_Index_GEXVL]) > 0)
                                    {
    									if (!(Convert.ToInt32(H_Data[G_Index_EXVL]) > 0))
                                        {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GEXVL, MC_ERRLOG_INVAL_GAIKA_FUGOU_GT);
    									}
    								}
    							}
    							if (P_b_Kanzan_Flg == false)
                                {
    							}
                                else
                                {
    								// 換算処理を行った後、邦貨金額が13桁を超える場合はエラー 
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    								if (Strings.Replace(Strings.FormatNumber(Strings.Trim(H_Data[G_Index_RATE]), 0), ",", "").Length < 7 && !(Strings.Replace(Strings.FormatNumber(L_Text, 0), ",", "").Length > 13 - P_Int_GaikaSyosu))
    								if (Convert.ToDouble(H_Data[G_Index_RATE].Trim()).ToString().Length < 7 && !(Convert.ToDouble(L_Text).ToString().Length > 13 - P_Int_GaikaSyosu))
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                    {
    									if (Get_Gaika_Kanzan_FNC(H_Data[G_Index_GEXVL], Convert.ToDecimal(H_Data[G_Index_RATE]), P_Int_GaikaTani, L_HSSW, ref L_ChkNum) == false)
                                        {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GEXVL, MC_ERRLOG_INVALIDLENGTH_KANZAN);
    									}
    								}
    							}
    
    							// 桁数チェック
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Replace(Strings.FormatNumber(L_Text, 0), ",", "").Length > 13 - P_Int_GaikaSyosu)
    							if (Math.Truncate(Convert.ToDouble(L_Text)).ToString().Length > 13 - P_Int_GaikaSyosu)
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								// 指定値が過大
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GEXVL, MC_ERRLOG_INVALIDLENGTH);
    							}
    							// レートの小数点以下の桁数が登録桁以上の場合はエラー処理
    							if (ChkCountDigit_FNC(decimal.Parse(L_Text)) > P_Int_GaikaSyosu)
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GEXVL, MC_ERRLOG_INVAL_GAIKA_KETASU_SYO);
    							}
    						}    
    					}
                        else if (L_GaikaKamoku_Sel == 0)
                        {
    						// 邦貨仕訳に外貨対価が入力されていた場合はエラー処理
    						if (!string.IsNullOrEmpty(L_Text) && L_Text != "0")
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GEXVL, MC_ERRLOG_INVALIDVALUE);
    						}
    					}
    				}
                }
                #endregion
                #region **** 外貨金額
                // If H_Data.Length > 57 Then
    			if (H_Data.Length > P_DataLen)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_GAIKA]);
    				L_Text = H_Data[G_Index_GAIKA].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (L_Gaikactl == false)
                    {
    					if (!string.IsNullOrEmpty(L_Text) && L_Text != "0")
                        {
    						// 邦貨仕訳で外貨金額が指定されていた場合はエラー処理
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GAIKA, MC_ERRLOG_GAIKACTL);
    					}
    				}
                    else
                    {
    					if (L_GaikaKamoku_Sel > 0)
                        {
    						if (string.IsNullOrEmpty(L_Text))
                            {
    							// 未指定時は0をセット
    							H_Data[G_Index_GAIKA] = "0";
    							// Prj312--->
    						}
                            else if (ChkControlChars_FNC(L_Text))
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GAIKA, MC_ERRLOG_SEIGYOMOJI);
    							// <---
    						}
    
    						if (Convert.ToDouble(H_Data[G_Index_GAIKA]) != 0)
                            {
    							// 符号エラーは外貨換算しない場合のみ
    							// 邦貨金額と外貨金額の符号が一致しない場合はエラー処理。
    							if (Convert.ToInt32(H_Data[G_Index_VALU]) != 0 && P_b_Kanzan_Flg == false)
                                {
    								if (Convert.ToDouble(H_Data[G_Index_GAIKA]) < 0)
                                    {
    									if (!(Convert.ToInt32(H_Data[G_Index_VALU]) < 0))
                                        {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GAIKA, MC_ERRLOG_INVAL_GAIKA_FUGOU_G);
    									}
    								}
                                    else if (Convert.ToDouble(H_Data[G_Index_GAIKA]) > 0)
                                    {
    									if (!(Convert.ToInt32(H_Data[G_Index_VALU]) > 0))
                                        {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GAIKA, MC_ERRLOG_INVAL_GAIKA_FUGOU_G);
    									}
    								}
    							}
    							if (P_b_Kanzan_Flg == false)
                                {
    							}
                                else
                                {
    								// 換算処理を行った後、邦貨金額が13桁を超える場合はエラー
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    								if (Strings.Replace(Strings.FormatNumber(Strings.Trim(H_Data[G_Index_RATE]), 0), ",", "").Length < 7 && !(Strings.Replace(Strings.FormatNumber(L_Text, 0), ",", "").Length > 13 - P_Int_GaikaSyosu))
    								if (Math.Truncate(Convert.ToDouble(H_Data[G_Index_RATE].Trim())).ToString().Length < 7 && !(Math.Truncate(Convert.ToDouble(L_Text)).ToString().Length > 13 - P_Int_GaikaSyosu))
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                    {
    									if (Get_Gaika_Kanzan_FNC(H_Data[G_Index_GAIKA], Convert.ToDecimal(H_Data[G_Index_RATE]), P_Int_GaikaTani, L_HSSW, ref L_ChkNum) == false)
                                        {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GAIKA, MC_ERRLOG_INVALIDLENGTH_KANZAN);
    									}
    								}
    							}
    
    							// 桁数チェック
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Replace(Strings.FormatNumber(L_Text, 0), ",", "").Length > (13 - P_Int_GaikaSyosu))
    							if (Math.Truncate(Convert.ToDouble(L_Text)).ToString().Length > (13 - P_Int_GaikaSyosu))
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								// 指定値が過大
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GAIKA, MC_ERRLOG_INVALIDLENGTH);
    							}
    							// レートの小数点以下の桁数が登録桁以上の場合はエラー処理
    							if (ChkCountDigit_FNC(decimal.Parse(L_Text)) > P_Int_GaikaSyosu)
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GAIKA, MC_ERRLOG_INVAL_GAIKA_KETASU_SYO);
    							}
    						}
    					} else if (L_GaikaKamoku_Sel == 0) {
    						if (!string.IsNullOrEmpty(L_Text) && L_Text != "0") {
    							// 邦貨仕訳で外貨金額が指定されていた場合はエラー処理
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GAIKA, MC_ERRLOG_INVALIDVALUE);
    						}
    					}
    				}
                }
                #endregion

                #region ** 消費税関係項目
                // 消費税使用する場合
    			if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SYFLG]) == 1)
                {
                    #region 消費税科目の取得
                    for (L_I = 0; L_I <= 7; L_I++)
                    {
    					// 科目内部コードの取得
    					// de2-7931① チェック処理で当期固定ではなく処理期の消費税科目を使用するように修正
    					switch (L_I) {
    						case 0:
    							L_SKiCd = (L_SvolumRow[(int)eSVOLUM.SVOLUM_KUF1]).ToString();
    							break;
    						case 3:
    							L_SKiCd = (L_SvolumRow[(int)eSVOLUM.SVOLUM_KUF4]).ToString();
    							break;
    						case 5:
    							L_SKiCd = (L_SvolumRow[(int)eSVOLUM.SVOLUM_KBF2]).ToString();
    							break;
    						case 6:
    							L_SKiCd = (L_SvolumRow[(int)eSVOLUM.SVOLUM_KBF3]).ToString();
    							break;
    						case 7:
    							L_SKiCd = (L_SvolumRow[(int)eSVOLUM.SVOLUM_KBF4]).ToString();
    							break;
    						default:
    							L_SKiCd = "";
    							break;
    					}
    					if (!string.IsNullOrEmpty(L_SKiCd))
                        {
    						L_Rows = H_dtKname.Select("KESN = " + L_Kesn + " AND KICD = '" + L_SKiCd + "'");
    						if (L_Rows.Length > 0)
                            {
    							L_SVolumKm[L_I].strKCOD = (L_Rows[0][(int)eKNAME.KNAME_KCOD]).ToString();
    							L_SVolumKm[L_I].strKICD = (L_Rows[0][(int)eKNAME.KNAME_KICD]).ToString();
    							L_SVolumKm[L_I].nSY01   = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_SY01]);
    							L_SVolumKm[L_I].nSY02   = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_SY02]);
    							L_SVolumKm[L_I].nSY03   = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_SY03]);
    							L_SVolumKm[L_I].nSY04   = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_SY04]);
    							L_SVolumKm[L_I].nSY05   = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_SY05]);
    							L_SVolumKm[L_I].nSY06   = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_SY06]);
    							L_SVolumKm[L_I].nSY07   = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_SY07]);
    							L_SVolumKm[L_I].nSY08   = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_SY08]);
    							L_SVolumKm[L_I].nKK01   = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_KK01]);
    							L_SVolumKm[L_I].nBKE01  = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_BKE01]);
    							L_SVolumKm[L_I].nBTK01  = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_BTK01]);
    							L_SVolumKm[L_I].nBTKE01 = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_BTKE01]);
    							L_SVolumKm[L_I].nTKE01  = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_TKE01]);
    							L_SVolumKm[L_I].nSTK01  = Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_STK01]);
    							// de2-xxxxx 分離子仕訳の消費税科目のコード未入力チェック設定にマスタ使用設定を反映するように修正
    							if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDFLG]) == 1) && (Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_KE02]) == 1)) {
    								L_SVolumKm[L_I].nInp = L_SVolumKm[L_I].nInp | MC_DinpCheck_Ed;
    							}
    							if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRFLG]) == 1) && (Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_KT02]) == 1)) {
    								L_SVolumKm[L_I].nInp = L_SVolumKm[L_I].nInp | MC_DinpCheck_Tr;
    							}
    							if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMFLG]) == 1) && (Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_KB02]) == 1)) {
    								L_SVolumKm[L_I].nInp = L_SVolumKm[L_I].nInp | MC_DinpCheck_Bm;
    							}
    							if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGFLG]) == 1) && (Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_SG02]) == 1)) {
    								L_SVolumKm[L_I].nInp = L_SVolumKm[L_I].nInp | MC_DinpCheck_Sg;
    							}
    							if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_PJFLG]) == 1) && (Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_PJ02]) == 1)) {
    								L_SVolumKm[L_I].nInp = L_SVolumKm[L_I].nInp | MC_DinpCheck_Pj;
    							}
    							if (((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1FLG]) == 2) || (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1FLG]) == 3)) && (Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_DM12]) == 1)) {
    								L_SVolumKm[L_I].nInp = L_SVolumKm[L_I].nInp | MC_DinpCheck_D1;
    							}
    							if (((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2FLG]) == 2) || (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2FLG]) == 3)) && (Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_DM22]) == 1)) {
    								L_SVolumKm[L_I].nInp = L_SVolumKm[L_I].nInp | MC_DinpCheck_D2;
    							}
    							if (((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3FLG]) == 2) || (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3FLG]) == 3)) && (Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_DM32]) == 1)) {
    								L_SVolumKm[L_I].nInp = L_SVolumKm[L_I].nInp | MC_DinpCheck_D3;
    							}
    							if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KJFLG]) == 1) && (Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_KJ02]) == 1)) {
    								L_SVolumKm[L_I].nInp = L_SVolumKm[L_I].nInp | MC_DinpCheck_Kj;
    							}
    							if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KSFLG]) == 1) && (Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_KS02]) == 1)) {
    								L_SVolumKm[L_I].nInp = L_SVolumKm[L_I].nInp | MC_DinpCheck_Ks;
    							}
    							if (Convert.ToInt32(L_Rows[0][(int)eKNAME.KNAME_TK02]) == 1) {
    								L_SVolumKm[L_I].nInp = L_SVolumKm[L_I].nInp | MC_DinpCheck_Tno;
    							}
    						}
                            else
                            {
    							L_SVolumKm[L_I].strKCOD = "";
    							L_SVolumKm[L_I].strKICD = "";
    							L_SVolumKm[L_I].nSY01   = 0;
    							L_SVolumKm[L_I].nSY02   = 0;
    							L_SVolumKm[L_I].nSY03   = 0;
    							L_SVolumKm[L_I].nSY04   = 0;
    							L_SVolumKm[L_I].nSY05   = 0;
    							L_SVolumKm[L_I].nSY06   = 0;
    							L_SVolumKm[L_I].nSY07   = 0;
    							L_SVolumKm[L_I].nSY08   = 0;
    							L_SVolumKm[L_I].nKK01   = 0;
    							L_SVolumKm[L_I].nBKE01  = 0;
    							L_SVolumKm[L_I].nBTK01  = 0;
    							L_SVolumKm[L_I].nBTKE01 = 0;
    							L_SVolumKm[L_I].nTKE01  = 0;
    							L_SVolumKm[L_I].nSTK01  = 0;
    							L_SVolumKm[L_I].nInp    = 0;
    						}
    						L_Rows = null;
    					}
                        else
                        {
    						L_SVolumKm[L_I].strKCOD = "";
    						L_SVolumKm[L_I].strKICD = "";
    						L_SVolumKm[L_I].nSY01   = 0;
    						L_SVolumKm[L_I].nSY02   = 0;
    						L_SVolumKm[L_I].nSY03   = 0;
    						L_SVolumKm[L_I].nSY04   = 0;
    						L_SVolumKm[L_I].nSY05   = 0;
    						L_SVolumKm[L_I].nSY06   = 0;
    						L_SVolumKm[L_I].nSY07   = 0;
    						L_SVolumKm[L_I].nSY08   = 0;
    						L_SVolumKm[L_I].nKK01   = 0;
    						L_SVolumKm[L_I].nBKE01  = 0;
    						L_SVolumKm[L_I].nBTK01  = 0;
    						L_SVolumKm[L_I].nBTKE01 = 0;
    						L_SVolumKm[L_I].nTKE01  = 0;
    						L_SVolumKm[L_I].nSTK01  = 0;
    						L_SVolumKm[L_I].nInp    = 0;
    					}
                    }
                    #endregion
                    #region 科目情報の取得
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//                    L_Text   = Strings.Trim(H_Data[G_Index_RKMK]);
                    L_Text   = H_Data[G_Index_RKMK].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				L_Text   = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_KMTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMLN]));
    				L_Rows_R = H_dtKname.Select("KESN = " + L_Kesn + " AND KCOD = '" + L_Text + "'");
    				if (L_Rows_R.Length > 0)
                    {
                        #region 借方
                        L_PSY07_R   = Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY07]);
    					L_SGrp[0]   = Convert.ToInt16(L_Rows_R[0][(int)eKNAME.KNAME_SY01]);
    					L_SY08[0]   = Convert.ToInt16(L_Rows_R[0][(int)eKNAME.KNAME_SY08]);
    
    					L_Rows_R[0] = this.GetApplyKnameRow(H_dtKname, L_Rows_R[0], bumonInfo[0], edabanInfo[0]);
    
    					// 借方課税区分のチェック
    					L_ColIdx = G_Index_RZKB;
    
    					// □■□科目デフォルトの取得□■□
    					// 
    					// 課税区分が未指定の場合は科目デフォルトを取得()
    					if (string.IsNullOrEmpty(H_Data[L_ColIdx])) {
    						H_Data[L_ColIdx] = (L_Rows_R[0].ItemArray[12]).ToString();
    						L_SaveRZKB = H_Data[G_Index_RZKB];
    					}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Zkbn[0] = Strings.Trim(H_Data[L_ColIdx]);
    					L_Zkbn[0] = H_Data[L_ColIdx].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					// 税率
    					if (string.IsNullOrEmpty(H_Data[G_Index_RRIT])) {
    
    						if (Convert.ToInt32(L_Rows_R[0].ItemArray[(int)eKNAME.KNAME_SY07]) > 0)
                            {
    							// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 START
    							// 非課税の税区分でも税率を設定していたため、貸借税率不一致でエラーとなっていた
    							// 非課税の税率をNULLとし、エラーとならないようにする
    							L_Flag = false;
    							switch (L_SGrp[0]) {
    								case 21:
    								case 22:
    									// 仮受消費税、仮払消費税
    									L_Flag = true;
    									break;
    								default:
    									switch (L_Zkbn[0]) {
    										// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    										// Case "1", "2", "11", "12", "13", "14", "21", "22", "23", "24", "31"
    										case "1":
    										case "2":
    										case "11":
    										case "12":
    										case "13":
    										case "14":
    										case "21":
    										case "22":
    										case "23":
    										case "24":
    										case "31":
    										case "61":
    										case "62":
    											// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    											L_Flag = true;
    											break;
    									}
    									break;
    							}
    							if (L_Flag == true) {
    								L_Rows2 = H_dtSritu.Select("SY07 = " + L_Rows_R[0].ItemArray[(int)eKNAME.KNAME_SY07]);
    								if (L_Rows2.Length > 0) {
    									//  2013/09/30 V12.02.01 指定した税率が使用できない日付の場合は、使用できる最新の税率を使用するように修正
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    									H_Data[G_Index_RRIT] = GetLatestZritu(Strings.Trim((L_Rows2[0][(int)eSRITU.SRITU_ZRIT]).ToString()), L_Dymd, H_dtSritu);
    									H_Data[G_Index_RRIT] = GetLatestZritu((L_Rows2[0][(int)eSRITU.SRITU_ZRIT]).ToString().Trim(), L_Dymd, H_dtSritu);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								} else {
    									//  2013/09/30 V12.02.01 処理をメソッドに移動し、8%を追加
    									// 共通DBから税率が取得できなかった場合用
    									H_Data[G_Index_RRIT] = GetDefaultLocalZritu((L_Rows_R[0].ItemArray[(int)eKNAME.KNAME_SY07]).ToString());
    								}
    								L_Rows2 = null;
    							}
    
    							// L_Rows2 = H_dtSritu.Select("SY07 = " && L_Rows_R(0]).ItemArray((int)eKNAME.KNAME_SY07))
    							// If L_Rows2.Length > 0 Then
    							//     '指定した税率が使用できない日付の場合は、使用できる最新の税率を使用するように修正
    							//     H_Data(G_Index_RRIT) = GetLatestZritu(Trim(L_Rows2(0)[(int)eSRITU.SRITU_ZRIT]).ToString()), L_Dymd, H_dtSritu)
    							// Else
    							//     '処理をメソッドに移動し、8%を追加
    							//     '共通DBから税率が取得できなかった場合用
    							//     H_Data(G_Index_RRIT) = GetDefaultLocalZritu(L_Rows_R(0]).ItemArray((int)eKNAME.KNAME_SY07]).ToString())
    							// End If
    							// Erase L_Rows2
    							// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 END
    						} else {
    							// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 START
    							switch (L_Zkbn[0]) {
    								// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    								// Case "1", "2", "11", "12", "13", "14", "21", "22", "23", "24", "31"
    								case "1":
    								case "2":
    								case "11":
    								case "12":
    								case "13":
    								case "14":
    								case "21":
    								case "22":
    								case "23":
    								case "24":
    								case "31":
    								case "61":
    								case "62":
    									// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    									// 科目デフォルト税率が存在しない場合は使用可能な最新の税率をセット
    									L_Rows2 = H_dtSritu.Select("ZRIT = MAX(ZRIT) ");
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    									H_Data[G_Index_RRIT] = GetLatestZritu(Strings.Trim((L_Rows2[0][(int)eSRITU.SRITU_ZRIT]).ToString()), L_Dymd, H_dtSritu);
    									H_Data[G_Index_RRIT] = GetLatestZritu((L_Rows2[0][(int)eSRITU.SRITU_ZRIT]).ToString().Trim(), L_Dymd, H_dtSritu);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    									L_Rows2 = null;
    									break;
    							}
    							// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 END
    						}
    						// Prj312--->
    					} else if (ChkControlChars_FNC(H_Data[G_Index_RRIT])) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RRIT, MC_ERRLOG_SEIGYOMOJI);
    						// <--
    					}
    					// 仕入区分
    					if (string.IsNullOrEmpty(H_Data[G_Index_RSRE])) {
    						if (Convert.ToInt32(L_Rows_R[0].ItemArray[(int)eKNAME.KNAME_SY05]) != 0)
                            {
    							H_Data[G_Index_RSRE] = (L_Rows_R[0].ItemArray[(int)eKNAME.KNAME_SY05]).ToString();
    						}
    						// Prj312--->
    					} else if (ChkControlChars_FNC(H_Data[G_Index_RSRE])) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RSRE, MC_ERRLOG_SEIGYOMOJI);
    						// <--
    					}
    
    					// 業種区分
    					if (string.IsNullOrEmpty(H_Data[G_Index_RGYO])) {
    						if (Convert.ToInt32(L_Rows_R[0].ItemArray[(int)eKNAME.KNAME_SY06]) != 0)
                            {
    							H_Data[G_Index_RGYO] = (L_Rows_R[0].ItemArray[(int)eKNAME.KNAME_SY06]).ToString();
    						} else {
    							// de2-7931② チェック処理で当期固定ではなく処理期の消費税設定業種区分を使用するように修正
    							if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) > 10)
                                {
    								int lkzsw = Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]);
    								switch (lkzsw) {
    									case 11:
    										H_Data[G_Index_RGYO] = "1";
    										break;
    									case 12:
    										H_Data[G_Index_RGYO] = "2";
    										break;
    									case 13:
    										H_Data[G_Index_RGYO] = "3";
    										break;
    									case 14:
    										H_Data[G_Index_RGYO] = "4";
    										break;
    									case 15:
    										H_Data[G_Index_RGYO] = "5";
    										break;
    									default:
    										H_Data[G_Index_RGYO] = "6";
    										break;
    								}
    							}
    						}
    						// Prj312--->
    					} else if (ChkControlChars_FNC(H_Data[G_Index_RGYO])) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RGYO, MC_ERRLOG_SEIGYOMOJI);
    						// <--
    					}

// Ver02.26.01 インボイス対応 --->
                        string rTrcd = string.Empty;
                        rTrcd = EditCode_FNC(H_Data[G_Index_RTOR], (L_VolumRow[(int)eVOLUM.VOLUM_TRTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRLN]));
                        if (H_Lno == 2)
                        {
                            // 借方　併用売上税額計算方式
                            if (ChkControlChars_FNC(H_Data[G_Index_RURIZEIKEISAN]))
                            {
                                SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RURIZEIKEISAN, MC_ERRLOG_SEIGYOMOJI);
                            }
                            else
                            {
                                if (String.IsNullOrEmpty(H_Data[G_Index_RURIZEIKEISAN]))
                                {
                                    H_Data[G_Index_RURIZEIKEISAN] = "0";
                                }
                            }

                            // 借方　仕入税額控除経過措置割合
                            if (ChkControlChars_FNC(H_Data[G_Index_RMENZEIKEIKA]))
                            {
                                SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RMENZEIKEIKA, MC_ERRLOG_SEIGYOMOJI);
                            }
                            else
                            {
                                if (String.IsNullOrEmpty(H_Data[G_Index_RMENZEIKEIKA]))
                                {
                                    H_Data[G_Index_RMENZEIKEIKA] = GetSiireZeigakuKouzyoKeikaSotiWariaiDefaultValue(L_SGrp[0], Convert.ToInt16(H_Data[G_Index_RZKB]), rTrcd, H_Data[G_Index_DYMD].Trim());
                                }
                            }
                        }
// <--- Ver02.26.01 インボイス対応

    					// 処理グループ(SY01)が「該当なし」「対象外」「仮払消費税」「仮受消費税」で課税区分に0指定の場合は0⇒100と変換
    					if (ChkZkbn_0to100(L_Zkbn[0], L_SGrp[0]) == true) {
    						L_Zkbn[0] = "100";
    						H_Data[G_Index_RZKB] = "100";
    					}
    
    					// de2-7931③ チェック処理で当期固定ではなく処理期の課税区分を使用するように修正
    					if (SyoZKbn_Check_FNC(L_SvolumRow, false, ref L_Zkbn[0], "", Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY02]),
                                              Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY03]), Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY08]), 0, 0, 0, 0,
                                              SvolumGaicutFlg(L_GaicutUse, H_Data[G_Index_RKMK], L_HEI_CD, "", "")) == false)
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    						L_SyoCheck = L_SyoCheck | MC_DinpCheck_Rzkb;
    						// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    						B_DubleErrKBN = true;
    						// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    					} else {
    						if (L_Zkbn[0] == "100" && L_Zkbn[0] != H_Data[G_Index_RZKB]) {
    							H_Data[G_Index_RZKB] = "100";
    						}
    						if (H_Data[G_Index_RZKB] == "19" || H_Data[G_Index_RZKB] == "18" || H_Data[G_Index_RZKB] == "49")
                            {
    							H_Data[G_Index_RZKB] = L_Zkbn[0];
    							P_ZeiAuto[0]         = Convert.ToInt32(L_Zkbn[0]);
    						}
    						// 借方対価のチェック
    						SyoTaik_Check_SUB(ref L_TaikaOk_R, Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY02]), L_Zkbn[0], false);
    					}
    					// 借方分離区分のチェック
    					P_ZeroSiwake[0] = 0;
    					// de2-7931④ チェック処理で当期固定ではなく処理期の分離区分を使用するように修正
    					if (string.IsNullOrEmpty(H_Data[G_Index_BUNRI])) {
    						if (!string.IsNullOrEmpty(L_Zkbn[0])) {
    							SyoBunri_Check_SUB(L_SvolumRow, ref H_BunriOk_R, "0", Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), L_Zkbn[0], 0, "0", 0, (L_Rows_R[0][(int)eKNAME.KNAME_SY02]).ToString(),
                                                   H_Data[G_Index_EXVL], Convert.ToInt16(L_SvolumRow[(int)eSVOLUM.SVOLUM_ZERO]), ref P_ZeroSiwake[0]);
    						}
    						// Prj312--->
    					} else if (ChkControlChars_FNC(H_Data[G_Index_BUNRI])) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_BUNRI, MC_ERRLOG_SEIGYOMOJI);
    						// <---
    					} else {
    						SyoBunri_Check_SUB(L_SvolumRow, ref H_BunriOk_R, H_Data[G_Index_BUNRI], Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), L_Zkbn[0], 0, "0", 0,
                                               (L_Rows_R[0][(int)eKNAME.KNAME_SY02]).ToString(), H_Data[G_Index_EXVL],	Convert.ToInt16(L_SvolumRow[(int)eSVOLUM.SVOLUM_ZERO]), ref P_ZeroSiwake[0]);
    					}
    
    					// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 START
    					L_NewZKB[0] = L_Zkbn[0];
                        // IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 END
                        #endregion
                        #region 貸方
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
                        //    					L_Text = Strings.Trim(H_Data[G_Index_SKMK]);
                        L_Text = H_Data[G_Index_SKMK].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					L_Text = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_KMTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMLN]));
    					L_Rows_S = H_dtKname.Select("KESN = " + L_Kesn + " AND KCOD = '" + L_Text + "'");
    					if (L_Rows_S.Length > 0) {
    						L_PSY07_S = Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY07]);
    						L_SGrp[1] = Convert.ToInt16(L_Rows_S[0][(int)eKNAME.KNAME_SY01]);
    						L_SY08[1] = Convert.ToInt16(L_Rows_S[0][(int)eKNAME.KNAME_SY08]);
    
    						L_Rows_S[0] = this.GetApplyKnameRow(H_dtKname, L_Rows_S[0], bumonInfo[1], edabanInfo[1]);
    
    						// 貸方課税区分のチェック（借方課税区分がエラーでないときのみチェック）
    						L_ColIdx = G_Index_SZKB;
    						// □■□科目デフォルトの取得□■□
    						if (string.IsNullOrEmpty(H_Data[L_ColIdx]))
                            {
    							H_Data[G_Index_SZKB] = (L_Rows_S[0].ItemArray[12]).ToString();
    						}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Zkbn[1] = Strings.Trim(H_Data[L_ColIdx]);
    						L_Zkbn[1] = H_Data[L_ColIdx].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    
    						// 税率
    						if (string.IsNullOrEmpty(H_Data[G_Index_SRIT])) {
    							// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 START
    							if (!string.IsNullOrEmpty(H_Data[G_Index_RRIT])) {
    								switch (L_SGrp[1]) {
    									case 21:
    									case 22:
    										// 貸方に税率が設定されていない場合は借方税率をセット
    										H_Data[G_Index_SRIT] = H_Data[G_Index_RRIT];
    										break;
    									default:
    										switch (L_Zkbn[1]) {
    											// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    											// Case "1", "2", "11", "12", "13", "14", "21", "22", "23", "24", "31"
    											case "1":
    											case "2":
    											case "11":
    											case "12":
    											case "13":
    											case "14":
    											case "21":
    											case "22":
    											case "23":
    											case "24":
    											case "31":
    											case "61":
    											case "62":
    												// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    												// 貸方に税率が設定されていない場合は借方税率をセット
    												H_Data[G_Index_SRIT] = H_Data[G_Index_RRIT];
    												break;
    										}
    										break;
    								}
    							} else {
    								// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 END
    
    								if (Convert.ToInt32(L_Rows_S[0].ItemArray[(int)eKNAME.KNAME_SY07]) > 0)
                                    {
    									// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 START
    									// 非課税の税区分でも税率を設定していたため、貸借税率不一致でエラーとなっていた
    									// 非課税の税率をNULLとし、エラーとならないようにする
    									L_Flag = false;
    									switch (L_SGrp[1]) {
    										case 21:
    										case 22:
    											// 仮受消費税、仮払消費税
    											L_Flag = true;
    											break;
    										default:
    											switch (L_Zkbn[1]) {
    												// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    												// Case "1", "2", "11", "12", "13", "14", "21", "22", "23", "24", "31"
    												case "1":
    												case "2":
    												case "11":
    												case "12":
    												case "13":
    												case "14":
    												case "21":
    												case "22":
    												case "23":
    												case "24":
    												case "31":
    												case "61":
    												case "62":
    													// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    													L_Flag = true;
    													break;
    											}
    											break;
    									}
    									if (L_Flag == true) {
    										L_Rows2 = H_dtSritu.Select("SY07 = " + L_Rows_S[0].ItemArray[(int)eKNAME.KNAME_SY07]);
    										if (L_Rows2.Length > 0) {
    											//  2013/09/30 V12.02.01 指定した税率が使用できない日付の場合は、使用できる最新の税率を使用するように修正
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    											H_Data[G_Index_SRIT] = GetLatestZritu(Strings.Trim(L_Rows2[0][(int)eSRITU.SRITU_ZRIT].ToString()), L_Dymd, H_dtSritu);
    											H_Data[G_Index_SRIT] = GetLatestZritu(L_Rows2[0][(int)eSRITU.SRITU_ZRIT].ToString().Trim(), L_Dymd, H_dtSritu);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    										} else {
    											//  2013/09/30 V12.02.01 処理をメソッドに移動し、8%を追加
    											// 共通DBから税率が取得できなかった場合用
    											H_Data[G_Index_SRIT] = GetDefaultLocalZritu(L_Rows_S[0].ItemArray[(int)eKNAME.KNAME_SY07].ToString());
    										}
    										L_Rows2 = null;
    									}
    
    									// L_Rows2 = H_dtSritu.Select("SY07 = " && L_Rows_S(0]).ItemArray((int)eKNAME.KNAME_SY07))
    									// If L_Rows2.Length > 0 Then
    									//     指定した税率が使用できない日付の場合は、使用できる最新の税率を使用するように修正
    									//     H_Data(G_Index_SRIT) = GetLatestZritu(Trim(L_Rows2(0)[(int)eSRITU.SRITU_ZRIT]).ToString()), L_Dymd, H_dtSritu)
    									// Else
    									//     処理をメソッドに移動し、8%を追加
    									//     共通DBから税率が取得できなかった場合用()
    									//     H_Data(G_Index_SRIT) = GetDefaultLocalZritu(L_Rows_S(0]).ItemArray((int)eKNAME.KNAME_SY07]).ToString())
    									// End If
    									// Erase L_Rows2
    									// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 END
    
    								} else {
    									// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 START
    									switch (L_Zkbn[1]) {
    										// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    										// Case "1", "2", "11", "12", "13", "14", "21", "22", "23", "24", "31"
    										case "1":
    										case "2":
    										case "11":
    										case "12":
    										case "13":
    										case "14":
    										case "21":
    										case "22":
    										case "23":
    										case "24":
    										case "31":
    										case "61":
    										case "62":
    											// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    											// 科目デフォルト税率が存在しない場合は使用可能な最新の税率をセット
    											L_Rows2 = H_dtSritu.Select("ZRIT = MAX(ZRIT) ");
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    											H_Data[G_Index_SRIT] = GetLatestZritu(Strings.Trim(L_Rows2[0][(int)eSRITU.SRITU_ZRIT].ToString()), L_Dymd, H_dtSritu);
    											H_Data[G_Index_SRIT] = GetLatestZritu(L_Rows2[0][(int)eSRITU.SRITU_ZRIT].ToString().Trim(), L_Dymd, H_dtSritu);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    											L_Rows2 = null;
    											break;
    									}
    									// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 END
    								}
    								// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 START
    							}
    							// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 END
    							// Prj312--->
    						} else if (ChkControlChars_FNC(H_Data[G_Index_SRIT])) {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SRIT, MC_ERRLOG_SEIGYOMOJI);
    							// <---
    						}
    						// 仕入区分
    						if (string.IsNullOrEmpty(H_Data[G_Index_SSRE])) {
    							if (Convert.ToInt32(L_Rows_S[0].ItemArray[(int)eKNAME.KNAME_SY05]) != 0)
                                {
    								H_Data[G_Index_SSRE] = (L_Rows_S[0].ItemArray[(int)eKNAME.KNAME_SY05]).ToString();
    							}
    							// Prj312--->
    						} else if (ChkControlChars_FNC(H_Data[G_Index_SSRE])) {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SSRE, MC_ERRLOG_SEIGYOMOJI);
    							// <---
    						}
    
    						// 業種区分
    						if (string.IsNullOrEmpty(H_Data[G_Index_SGYO]))
                            {
    							if (Convert.ToInt32(L_Rows_S[0].ItemArray[(int)eKNAME.KNAME_SY06]) != 0)
                                {
    								H_Data[G_Index_SGYO] = (L_Rows_S[0].ItemArray[(int)eKNAME.KNAME_SY06]).ToString();
    							} else {
    								// de2-7931② チェック処理で当期固定ではなく処理期の消費税設定業種区分を使用するように修正
    								if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) > 10)
                                    {
    									int lkzsw = Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]);
    									switch (lkzsw) {
    										case 11:
    											H_Data[G_Index_SGYO] = "1";
    											break;
    										case 12:
    											H_Data[G_Index_SGYO] = "2";
    											break;
    										case 13:
    											H_Data[G_Index_SGYO] = "3";
    											break;
    										case 14:
    											H_Data[G_Index_SGYO] = "4";
    											break;
    										case 15:
    											H_Data[G_Index_SGYO] = "5";
    											break;
    										default:
    											H_Data[G_Index_SGYO] = "6";
    											break;
    									}
    								}
    
    							}
    							// Prj312--->
    						} else if (ChkControlChars_FNC(H_Data[G_Index_SGYO])) {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SGYO, MC_ERRLOG_SEIGYOMOJI);
    							// <---
    						}

// Ver02.26.01 インボイス対応 --->
                            string sTrcd = String.Empty;
                            sTrcd = EditCode_FNC(H_Data[G_Index_STOR], (L_VolumRow[(int)eVOLUM.VOLUM_TRTY]).ToString(), Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_TRLN]));
                            if (H_Lno == 2)
                            {
                                // 貸方　併用売上税額計算方式
                                if (ChkControlChars_FNC(H_Data[G_Index_SURIZEIKEISAN]))
                                {
                                    SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SURIZEIKEISAN, MC_ERRLOG_SEIGYOMOJI);
                                }
                                else
                                {
                                    if (String.IsNullOrEmpty(H_Data[G_Index_SURIZEIKEISAN]))
                                    {
                                        H_Data[G_Index_SURIZEIKEISAN] = "0";
                                    }
                                }

                                // 貸方　仕入税額控除経過措置割合
                                if (ChkControlChars_FNC(H_Data[G_Index_SMENZEIKEIKA]))
                                {
                                    SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SMENZEIKEIKA, MC_ERRLOG_SEIGYOMOJI);
                                }
                                else
                                {
                                    if (String.IsNullOrEmpty(H_Data[G_Index_SMENZEIKEIKA]))
                                    {
                                        H_Data[G_Index_SMENZEIKEIKA] = GetSiireZeigakuKouzyoKeikaSotiWariaiDefaultValue(L_SGrp[1], Convert.ToInt16(H_Data[G_Index_SZKB]), sTrcd, H_Data[G_Index_DYMD].Trim());
                                    }
                                }
                            }
// <--- Ver02.26.01 インボイス対応

    						// 処理グループ(SY01)が「該当なし」「対象外」「仮払消費税」「仮受消費税」で課税区分に0指定の場合は0⇒100と変換
    						if (ChkZkbn_0to100(L_Zkbn[1], L_SGrp[1]) == true) {
    							L_Zkbn[1]            = "100";
    							H_Data[G_Index_SZKB] = "100";
    							L_SaveSZKB           = "100";
    						}
    						// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 START
    						L_NewZKB[1] = L_Zkbn[1];
    						// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 END
    						// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    						// (de2-15768関連)税抜処理で経理方式が税抜の科目の税込仕訳を登録出来る不具合を修正
    						// 元々分離区分が0だったのか判断用に退避
    						S_OldBKBN = H_Data[G_Index_BUNRI];
    						// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    						// de2-7931④ チェック処理で当期固定ではなく処理期の分離区分を使用するように修正
    						if (string.IsNullOrEmpty(H_Data[G_Index_BUNRI]))
                            {
    							if (Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY04]) > 0)
                                {
    								SyoBunri_Check_SUB(L_SvolumRow, ref H_BunriOk_R, (L_Rows_R[0][(int)eKNAME.KNAME_SY04]).ToString(), Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), L_Zkbn[0], 0, "0", 0,
                                                       (L_Rows_R[0][(int)eKNAME.KNAME_SY02]).ToString(), H_Data[G_Index_EXVL], Convert.ToInt16(L_SvolumRow[(int)eSVOLUM.SVOLUM_ZERO]), ref P_ZeroSiwake[0]);
    							}
    							if (Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY04]) > 0)
                                {
    								SyoBunri_Check_SUB(L_SvolumRow, ref H_BunriOk_S, (L_Rows_S[0][(int)eKNAME.KNAME_SY04]).ToString(), Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY01]), L_Zkbn[1],
                                                       Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), L_Zkbn[0], Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY04]),
                                                       (L_Rows_S[0][(int)eKNAME.KNAME_SY02]).ToString(), H_Data[G_Index_EXVL], Convert.ToInt16(L_SvolumRow[(int)eSVOLUM.SVOLUM_ZERO]), ref P_ZeroSiwake[1]);
    
    							}
    							// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    							// (de2-15768関連)税抜処理で経理方式が税抜の科目の税込仕訳を登録出来る不具合を修正
    							// 借方の課税区分が税込/税抜で”分離しない”になっている場合、上の分離チェックで使用した分離区分を保持
    							if ((ChkZkbn_Mode_FNC(1, L_SaveRZKB) == true || ChkZkbn_Mode_FNC(2, L_SaveRZKB) == true) && H_BunriOk_R == 0)
                                {
    								S_SaveBKBN = (L_Rows_R[0][(int)eKNAME.KNAME_SY04]).ToString();
    							}
    							// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    
    							if (H_BunriOk_R < 1 && H_BunriOk_S < 1) {
    								// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    								// (de2-15768関連)税抜処理で経理方式が税抜の科目の税込仕訳を登録出来る不具合を修正
    								// 貸借の何れかが課込自動の場合、科目マスタの分離区分を設定、それ以外は従来通りとする
    								if (L_SaveRZKB == "18" && H_BunriOk_R == 0) {
    									H_Data[G_Index_BUNRI] = (L_Rows_R[0][(int)eKNAME.KNAME_SY04]).ToString();
    								}
                                    else if (L_SaveSZKB == "18" && H_BunriOk_S == 0)
                                    {
    									H_Data[G_Index_BUNRI] = (L_Rows_S[0][(int)eKNAME.KNAME_SY04]).ToString();
    								}
                                    else
                                    {
    									H_Data[G_Index_BUNRI] = "0";
    								}
    								// H_Data(G_Index_BKBN) = "0"
    								// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    							}
                                else if (H_BunriOk_R == 1 && H_BunriOk_S == 1)
                                {
    								L_DefBunri_Flg = false;
    							}
                                else if (H_BunriOk_R == 1)
                                {
    								H_Data[G_Index_BUNRI] = (L_Rows_R[0][(int)eKNAME.KNAME_SY04]).ToString();
    							}
                                else if (H_BunriOk_S == 1)
                                {
    								H_Data[G_Index_BUNRI] = (L_Rows_S[0][(int)eKNAME.KNAME_SY04]).ToString();
    							}
    							// Prj312--->
    						} else if (ChkControlChars_FNC(H_Data[G_Index_BUNRI])) {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_BUNRI, MC_ERRLOG_SEIGYOMOJI);
    							// <---
    						}
    
    						if ((L_SyoCheck & MC_DinpCheck_Rzkb) != MC_DinpCheck_Rzkb)
                            {
    							// レコードの分離区分が使用できるかどうかで分岐
    							if (H_BunriOk_R == 0) {
    								// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 START
    								// 税抜仕訳で”借方：非課税/貸方：税込自動分離”が登録される不具合が発現、これを修正する
    								// 分離区分が設定される場合は、貸方を相手課税区分として税区分チェックを行う
    								if (!string.IsNullOrEmpty(H_Data[G_Index_BUNRI])) {
    									if (SyoZKbn_Check_FNC(L_SvolumRow, true, ref L_Zkbn[0], L_Zkbn[1], Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY02]),
                                                              Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY03]), Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY08]),
                                                              Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY01]), L_TaikaOk_S, Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY03]),
                                                              Convert.ToInt32(H_Data[G_Index_BUNRI]), SvolumGaicutFlg(L_GaicutUse, H_Data[G_Index_SKMK], L_HEI_CD, H_Data[G_Index_RKMK], L_HEI_CD)) == false)
                                        {
    										L_SyoCheck = L_SyoCheck | MC_DinpCheck_Rzkb;
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RZKB, MC_ERRLOG_INVALIDVALUE);
    										B_DubleErrKBN = true;
    									}
    								}
    								// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 END
    								// de2-7931③ チェック処理で当期固定ではなく処理期の課税区分を使用するように修正
    								if (SyoZKbn_Check_FNC(L_SvolumRow, true, ref L_SaveSZKB, L_Zkbn[0], Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY02]),
                                                          Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY03]), Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY08]),
                                                          Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), L_TaikaOk_R, Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY03]), Convert.ToInt32(H_Data[G_Index_BUNRI]),
                                                          SvolumGaicutFlg(L_GaicutUse, H_Data[G_Index_SKMK], L_HEI_CD, H_Data[G_Index_RKMK], L_HEI_CD)) == false)
                                    {
    									L_SyoCheck = L_SyoCheck | MC_DinpCheck_Szkb;
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    									// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    									B_DubleErrKBN = true;
    									// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    								} else {
    									// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    									// (de2-15768関連)税抜処理で経理方式が税抜の科目の税込仕訳を登録出来る不具合を修正
    									// 貸方が課込自動の場合、科目マスタの課税区分を設定
    									if (L_Zkbn[1] == "18" && H_Data[G_Index_BUNRI] == "0" && string.IsNullOrEmpty(S_OldBKBN)) {
    										H_Data[G_Index_BUNRI] = (L_Rows_S[0][(int)eKNAME.KNAME_SY04]).ToString();
    									}
    									// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    									if (L_Zkbn[1] != L_SaveSZKB) {
    										L_Zkbn[1] = L_SaveSZKB;
    										H_Data[G_Index_SZKB] = L_SaveSZKB;
    									}
    									if (L_Zkbn[1] == "100" && L_Zkbn[1] != H_Data[G_Index_SZKB]) {
    										H_Data[G_Index_SZKB] = "100";
    									}
    									if (H_Data[G_Index_SZKB] == "18" || H_Data[G_Index_SZKB] == "19" || H_Data[G_Index_SZKB] == "49")
                                        {
    										H_Data[G_Index_SZKB] = L_Zkbn[1];
    										P_ZeiAuto[1] = Convert.ToInt32(L_Zkbn[1]);
    									}
    								}
    								// 貸方対価のチェック
    								if (H_BunriOk_R != 3) {
    									SyoTaik_Check_SUB(ref L_TaikaOk_S, Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY02]), L_Zkbn[1], true);
    								}
    							}
                                else if (H_BunriOk_R == 3)
                                {
    								// 当エラーの場合は下記にてエラー処理を行う。
    							}
                                else
                                {
    								if (!string.IsNullOrEmpty(H_Data[G_Index_BUNRI])) {
    									L_SY02Dmy = L_TaikaOk_R;
    									// de2-7931③ チェック処理で当期固定ではなく処理期の課税区分を使用するように修正
    									if (SyoZKbn_Check_FNC(L_SvolumRow, true, ref L_Zkbn[1], L_Zkbn[0], Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY02]),
                                                              Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY03]), Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY08]),
                                                              Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), L_SY02Dmy, Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY03]),
                                                              Convert.ToInt32(H_Data[G_Index_BUNRI]), SvolumGaicutFlg(L_GaicutUse, H_Data[G_Index_SKMK], L_HEI_CD, H_Data[G_Index_RKMK], L_HEI_CD)) == false)
                                        {
    										L_SyoCheck = L_SyoCheck | MC_DinpCheck_Szkb;
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    										// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    										B_DubleErrKBN = true;
    										// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    									} else {
    										if (H_Data[G_Index_SZKB] == "18" || H_Data[G_Index_SZKB] == "19" || H_Data[G_Index_SZKB] == "49") {
    											H_Data[G_Index_SZKB] = L_Zkbn[1];
    											P_ZeiAuto[1] = Convert.ToInt32(L_Zkbn[1]);
    										}
    									}
    								} else {
    									// de2-7931③ チェック処理で当期固定ではなく処理期の課税区分を使用するように修正
    									if (SyoZKbn_Check_FNC(L_SvolumRow, true, ref L_Zkbn[1], L_Zkbn[0], Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY02]),
                                                              Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY03]), Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY08]),
                                                              Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), L_TaikaOk_R, Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY03]), 0,
                                                              SvolumGaicutFlg(L_GaicutUse, H_Data[G_Index_SKMK], L_HEI_CD, H_Data[G_Index_RKMK], L_HEI_CD)) == false)
                                        {
    										L_SyoCheck = L_SyoCheck | MC_DinpCheck_Szkb;
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    										// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    										B_DubleErrKBN = true;
    										// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    									}
                                        else
                                        {
    										if (H_Data[G_Index_SZKB] == "18" || H_Data[G_Index_SZKB] == "19" || H_Data[G_Index_SZKB] == "49")
                                            {
    											H_Data[G_Index_SZKB] = L_Zkbn[1];
    											P_ZeiAuto[1] = Convert.ToInt32(L_Zkbn[1]);
    										}
    									}
    								}
    								if ((L_SyoCheck & MC_DinpCheck_Szkb) != MC_DinpCheck_Szkb) {
    									// 貸方対価のチェック
    									if (H_BunriOk_R != 3) {
    										SyoTaik_Check_SUB(ref L_TaikaOk_S, Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY02]), L_Zkbn[1], true);
    									}
    								}
    							}
    							// 貸方分離区分のチェック
    							P_ZeroSiwake[1] = 0;
    							// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    							// (de2-15768関連)税抜処理で経理方式が税抜の科目の税込仕訳を登録出来る不具合を修正
    							// 借方が分離可能な科目の場合、相手科目も分離区分を使用しているか確認が必要
    							string S_BKBN = "";
    							if (ChkZeinuki_FNC(L_SvolumRow, Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_Zkbn[0])) == 0 && ChkZkbn_Mode_FNC(1, L_Zkbn[0]) == true && H_BunriOk_R == 3)
                                {
    								if (string.IsNullOrEmpty(H_Data[G_Index_BUNRI]))
                                    {
    									S_BKBN = (L_Rows_R[0][(int)eKNAME.KNAME_SY04]).ToString();
    								}
                                    else
                                    {
    									S_BKBN = H_Data[G_Index_BUNRI];
    								}
    								SyoBunri_Check_SUB(L_SvolumRow, ref H_BunriOk_S, S_BKBN, Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY01]), L_Zkbn[1], 0, "0", Convert.ToInt32(S_BKBN),
                                                       (L_Rows_S[0][(int)eKNAME.KNAME_SY02]).ToString(), H_Data[G_Index_EXVL], Convert.ToInt16(L_SvolumRow[(int)eSVOLUM.SVOLUM_ZERO]), ref P_ZeroSiwake[1]);
    							}
    							// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    
    							if (H_BunriOk_R != 3)
                                {
    								// de2-7931③ チェック処理で当期固定ではなく処理期の課税区分を使用するように修正
    								if (string.IsNullOrEmpty(H_Data[G_Index_BUNRI]))
                                    {
    									SyoBunri_Check_SUB(L_SvolumRow, ref H_BunriOk_S, (L_Rows_R[0][(int)eKNAME.KNAME_SY04]).ToString(), Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY01]), L_Zkbn[1],
                                                           Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), L_Zkbn[0], Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY04]),
                                                           (L_Rows_S[0][(int)eKNAME.KNAME_SY02]).ToString(), H_Data[G_Index_EXVL], Convert.ToInt16(L_SvolumRow[(int)eSVOLUM.SVOLUM_ZERO]), ref P_ZeroSiwake[1]);
    								} else {
    									// de2-7931③ チェック処理で当期固定ではなく処理期の課税区分を使用するように修正
    									SyoBunri_Check_SUB(L_SvolumRow, ref H_BunriOk_S, H_Data[G_Index_BUNRI], Convert.ToInt32(L_Rows_S[0][(int)eKNAME.KNAME_SY01]), L_Zkbn[1],
                                                           Convert.ToInt32(L_Rows_R[0][(int)eKNAME.KNAME_SY01]), L_Zkbn[0], Convert.ToInt32(H_Data[G_Index_BUNRI]), (L_Rows_S[0][(int)eKNAME.KNAME_SY02]).ToString(),
                                                           H_Data[G_Index_EXVL], Convert.ToInt16(L_SvolumRow[(int)eSVOLUM.SVOLUM_ZERO]), ref P_ZeroSiwake[1]);    
    								}    
    							}
    						}
    						// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 START
    						// 課税区分チェック時に、貸方デフォルト科目を取得した結果が使用不可となる場合、L_Zkbnに"0"が取得されるようですが、その場合は取得前の値のままとする
    						// ※課税区分チェック時に、貸方インポートデータの課税区分が"××自動"で使用不可となる場合、L_Zkbnはそのままになるようですが、従来通りのため対応していません
    						if (L_Zkbn[1] != "0" && L_NewZKB[1] != L_Zkbn[1])
                            {
    							L_NewZKB[1] = L_Zkbn[1];
    						}
    						// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 END
    					}
    					L_Rows_R = null;
    					L_Rows_S = null;
                        #endregion
                    }
                    #endregion

                    #region ** 税率・業種区分・仕入区分
                    B_KazeiFlg = false;    
    				for (L_Katt = 0; L_Katt <= 1; L_Katt++)
                    {
    					L_Zrit[L_Katt] = 0;
    
    					// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 START
    					if (!string.IsNullOrEmpty(L_NewZKB[L_Katt])) {
    						// If L_Zkbn(L_Katt) <> "" Then
    						// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 END
    
    						switch (L_SGrp[L_Katt]) {
    							case 21:
    							case 22:
    								L_Flag = true;
    								break;
    							default:
    								// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 START
    								switch (L_NewZKB[L_Katt]) {
    									// Select Case L_Zkbn(L_Katt)
    									// IMPORTER.dll差分対応 de3-8083 Ver.12.09.01 2015.03.06 END
    									// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    									// Case "1", "2", "11", "12", "13", "14", "21", "22", "23", "24", "31"
    									case "1":
    									case "2":
    									case "11":
    									case "12":
    									case "13":
    									case "14":
    									case "21":
    									case "22":
    									case "23":
    									case "24":
    									case "31":
    									case "61":
    									case "62":
    										// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    										L_Flag = true;
    										break;
    									default:
    										L_Flag = false;
    										break;
    								}
    								break;
    						}
    						if (L_Flag == true) {
    							L_ColIdx = (L_Katt == 0 ? G_Index_RRIT : G_Index_SRIT);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							L_Text = Strings.Trim(H_Data[L_ColIdx]);
    							L_Text = H_Data[L_ColIdx].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    
    							// 税率0をチェックするように修正
    							if (string.IsNullOrEmpty(L_Text)) {
    								if (L_Katt == 0) {
    									L_Zrit[L_Katt] = Convert.ToDecimal(SvolumDefRitu_SUB(H_dtSritu, L_PSY07_R));
    								} else {
    									L_Zrit[L_Katt] = Convert.ToDecimal(SvolumDefRitu_SUB(H_dtSritu, L_PSY07_S));
    								}
    								// 日付から判断した税率を設定
    								H_Data[L_ColIdx] = (L_Zrit[L_Katt]).ToString();
    								// Prj312--->
    							} else if (ChkControlChars_FNC(L_Text)) {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_SEIGYOMOJI);
    								// <---
    							} else {
    								if (ChkZritu_FNC(L_Text, L_Dymd, H_dtSritu) == true) {
    									// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 START
    									// 貸借ともに税率が存在且つ貸借で税率が異なる場合は貸方税率エラー
    									// SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_SRIT, MC_ERRLOG_INVALIDVALUE)
    									if (L_Katt == 1) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    										L_TextRrit = Strings.Trim(H_Data[G_Index_RRIT]);
    										L_TextRrit = H_Data[G_Index_RRIT].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    										L_DecRrit = 0;
    										if (!string.IsNullOrEmpty(L_TextRrit)) {
    											L_DecRrit = Convert.ToDecimal(L_TextRrit);
    										}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    										L_TextSrit = Strings.Trim(H_Data[G_Index_SRIT]);
    										L_TextSrit = H_Data[G_Index_SRIT].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    										L_DecSrit = 0;
    										if (!string.IsNullOrEmpty(L_TextSrit)) {
    											L_DecSrit = Convert.ToDecimal(L_TextSrit);
    										}
    										if (L_DecRrit != 0 && L_DecSrit != 0 && L_DecRrit != L_DecSrit) {
    											// 貸借ともに税率が存在且つ貸借で税率が異なる場合は貸方税率エラー
    											SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SRIT, MC_ERRLOG_INVALIDVALUE);
    										} else {
    											L_Zrit[L_Katt] = Convert.ToDecimal(L_Text);
    										}
    									} else {
    										L_Zrit[L_Katt] = Convert.ToDecimal(L_Text);
    									}
    									// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 END
    								} else {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    								}
    							}
    							// IMPORTER.dll差分対応 de3-9633 Ver.12.09.01 2015.03.06 START
    							// 非課税の税区分で税率を設定してい場合もエラーとせずに更新していた
    							// 非課税の税区分をチェックして税率が設定されていた場合、エラーとする
    						} else {
    							if (L_Katt == 0 && !string.IsNullOrEmpty(H_Data[G_Index_RRIT])) {
    								// 非課税の税区分で税率が存在する場合は借方税率エラー
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RRIT, MC_ERRLOG_INVALIDVALUE);
    								// <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    								OldRrit = H_Data[G_Index_RRIT];
    								// --->Ver01.16.02
    								H_Data[G_Index_RRIT] = "";
    								// 貸借不一致による重複エラーを回避するため税率をクリアする
    								B_KazeiFlg = true;
    							}
    							if (L_Katt == 1 && B_KazeiFlg == false && !string.IsNullOrEmpty(H_Data[G_Index_SRIT])) {
    								// 非課税の税区分で税率が存在する場合は貸方税率エラー
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SRIT, MC_ERRLOG_INVALIDVALUE);
    							}
    							// IMPORTER.dll差分対応 de3-9633 Ver.12.09.01 2015.03.06 END
    						}
    						if ((Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) >= 11) && (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) <= 16))
                            {
    							L_ColIdx = (L_Katt == 0 ? G_Index_RGYO : G_Index_SGYO);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (ChkGyosyuKbn_FNC(Strings.Trim(H_Data[L_ColIdx]), Convert.ToInt16(L_Zkbn[L_Katt]), L_SGrp[L_Katt], L_SvolumRow) == false) {
    							if (ChkGyosyuKbn_FNC(H_Data[L_ColIdx].Trim(), Convert.ToInt16(L_Zkbn[L_Katt]), L_SGrp[L_Katt], L_SvolumRow) == false)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    							}
    						}
    
    						if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_ANBN]) == 1)
                            {
    							L_ColIdx = (L_Katt == 0 ? G_Index_RSRE : G_Index_SSRE);
    							L_Sire_Kyouri_Chk = false;
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (ChkSiireKbn_FNC(Strings.Trim(H_Data[L_ColIdx]), Convert.ToInt16(L_Zkbn[L_Katt]), L_SGrp[L_Katt], ref L_Sire_Kyouri_Chk) == false) {
    							if (ChkSiireKbn_FNC(H_Data[L_ColIdx].Trim(), Convert.ToInt16(L_Zkbn[L_Katt]), L_SGrp[L_Katt], ref L_Sire_Kyouri_Chk) == false)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    							}
    							// 個別対応で仕入関係科目が指定で、仕入区分が未指定の場合は’0：共売’をセット
    							if (L_Sire_Kyouri_Chk == true)
                                {
    								H_Data[L_ColIdx] = "3";
    							}
    						}

// Ver02.26.01 インボイス対応 --->
                            if (H_Lno == 2)
                            {
                                // 貸借　併用売上税額計算方式
                                L_ColIdx = L_Katt == 0 ? G_Index_RURIZEIKEISAN : G_Index_SURIZEIKEISAN;

// Ver02.26.04 売上税額計算方式：積上設定時、レイアウトの値は「0」固定 --->
                                if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_URIAGEZEIKEISAN]) != 2)
                                {
                                    H_Data[L_ColIdx] = "0";
                                }
// <--- Ver02.26.04 売上税額計算方式：積上設定時、レイアウトの値は「0」固定

                                if (IsImportableHeiyouUriageZeigakuKeisanHousiki(H_Data[L_ColIdx].Trim(), L_SGrp[L_Katt], Convert.ToInt16(L_Zkbn[L_Katt]), Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_URIAGEZEIKEISAN]), H_Data[G_Index_DYMD].Trim()) == false)
                                {
                                    SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
                                }
                                if (L_Katt == 1 && IsUriageKeiKamoku(L_SGrp[0], Convert.ToInt16(L_Zkbn[0])) && IsUriageKeiKamoku(L_SGrp[1], Convert.ToInt16(L_Zkbn[1])))
                                {
                                    if (H_Data[G_Index_RURIZEIKEISAN].Trim() != (H_Data[G_Index_SURIZEIKEISAN]).Trim())
                                    {
                                        SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
                                    }
                                }
                                // 貸借　仕入税額控除経過措置割合
                                L_ColIdx = L_Katt == 0 ? G_Index_RMENZEIKEIKA : G_Index_SMENZEIKEIKA;
                                if (IsImportableSiireZeigakuKouzyoKeikaSotiWariai(H_Data[L_ColIdx].Trim(), L_SGrp[L_Katt], Convert.ToInt16(L_Zkbn[L_Katt]), H_Data[G_Index_DYMD].Trim()) == false)
                                {
                                    SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
                                }
                                if (L_Katt == 1 && IsSiireKeiKamoku(L_SGrp[0], Convert.ToInt16(L_Zkbn[0])) && IsSiireKeiKamoku(L_SGrp[1], Convert.ToInt16(L_Zkbn[1])))
                                {
                                    if (H_Data[G_Index_RMENZEIKEIKA].Trim() != H_Data[G_Index_SMENZEIKEIKA].Trim())
                                    {
                                        SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
                                    }
                                }
                            }
// <--- Ver02.26.01 インボイス対応
    					}
    				}
                    #endregion

                    #region ** 対価
                    L_Flag = false;
    				if (L_TaikaOk_R == 1 || L_TaikaOk_S == 1)
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Text = Strings.Trim(H_Data[G_Index_EXVL]);
    					L_Text = H_Data[G_Index_EXVL].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					// Prj312--->
    					if (ChkControlChars_FNC(L_Text))
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_EXVL, MC_ERRLOG_SEIGYOMOJI);
    					}
                        else
                        {
    						if (!string.IsNullOrEmpty(L_Text))
                            {
    							switch (ChkCurrency_FNC(L_Text, 13))
                                {
    								case -1:
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_EXVL, MC_ERRLOG_INVALIDCHAR);
    									break;
    								case -2:
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_EXVL, MC_ERRLOG_INVALIDLENGTH);
    									break;
    							}
    						}
    					}
    				}
    				if (L_TaikaOk_R == 0 && L_TaikaOk_S == 0)
                    {
    					// 邦貨対価エラー
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Text = Strings.Trim(H_Data[G_Index_EXVL]);
    					L_Text = H_Data[G_Index_EXVL].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					// Prj312--->
    					if (ChkControlChars_FNC(L_Text))
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_EXVL, MC_ERRLOG_SEIGYOMOJI);
    					}
                        else
                        {
    						if (!string.IsNullOrEmpty(L_Text) && L_Text != "0")
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_EXVL, MC_ERRLOG_TAIKA);
    						}
    						if (H_Data.Length > P_DataLen)
                            {
    							// 外貨対価エラー
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							L_Text = Strings.Trim(H_Data[G_Index_GEXVL]);
    							L_Text = H_Data[G_Index_GEXVL].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							if (!string.IsNullOrEmpty(L_Text) && L_Text != "0")
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GEXVL, MC_ERRLOG_TAIKA_G);
    							}
    						}
    					}
    				}
    
    				if ((L_TaikaOk_R == 1 && L_TaikaOk_S == 0 && L_GaikaKamoku_Sel == 1) || (L_TaikaOk_R == 0 && L_TaikaOk_S == 1 && L_GaikaKamoku_Sel == 2))
                    {
    					// 邦貨側に対価で外貨側が非対価の場合
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_EXVL, MC_ERRLOG_TAIKA_HG);
    				}
                    #endregion

                    // （分離区分）・・・１仕訳１分離区分しか存在しないので、どちらを分離するのかの判断が必要
                    if (!string.IsNullOrEmpty(H_Data[G_Index_BUNRI]))
                    {
    					L_ColIdx = G_Index_BUNRI;
    					// Prj312--->
    					if (ChkControlChars_FNC(H_Data[G_Index_BUNRI]))
                        {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_SEIGYOMOJI);
    					}
                        else
                        {
    						if (H_Data[G_Index_BUNRI] == "1" || H_Data[G_Index_BUNRI] == "2" || H_Data[G_Index_BUNRI] == "3")
                            {
    							// 現行は貸借両分離には対応しない
    
    							if (((H_BunriOk_R == 0 && H_BunriOk_S == 0) || (H_BunriOk_R == 1 && H_BunriOk_S == 1)))
                                {
    								// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    								// (de2-15768関連)税抜処理で経理方式が税抜の科目の税込仕訳を登録出来る不具合を修正
    								// 分離区分が設定なしの場合に分離区分が正しく設定されなかった不具合修正に伴い、不都合なエラー”貸借共に分離区分が登録されている”になるため、
    								// インポートデータが税込/税抜かつ分離なしで旧インポートデータ分離区分が設定なしの場合、当メッセージとする
    								if ((ChkZkbn_Mode_FNC(1, L_SaveRZKB) == true || ChkZkbn_Mode_FNC(2, L_SaveRZKB) == true) && H_BunriOk_R == 0 && string.IsNullOrEmpty(S_OldBKBN))
                                    {
    									if (ChkZkbn_Mode_FNC(3, L_SaveRZKB) == true) {
    										H_Data[G_Index_RZKB] = L_SaveRZKB;
    									}
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RZKB, MC_ERRLOG_INVALIDVALUE);
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    								} else if ((ChkZkbn_Mode_FNC(1, L_SaveSZKB) == true || ChkZkbn_Mode_FNC(2, L_SaveSZKB) == true) && H_BunriOk_S == 0 && string.IsNullOrEmpty(S_OldBKBN))
                                    {
    									if (ChkZkbn_Mode_FNC(3, L_SaveSZKB) == true) {
    										H_Data[G_Index_SZKB] = L_SaveSZKB;
    									}
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SZKB, MC_ERRLOG_INVALIDVALUE);
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    									// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    								} else {
    									L_SyoCheck = L_SyoCheck | MC_DinpCheck_Bkbn;
    									// SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE)
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE_Bunri);
    								}
    
    								// IMPORTER.dll差分対応 de3-8685 Ver.12.09.01 2015.03.06 START 
    							} else if ((H_BunriOk_R == -1 || H_BunriOk_S == -1)) {
    								L_SyoCheck = L_SyoCheck | MC_DinpCheck_Bkbn;
    								if ((H_BunriOk_R == -1)) {
    									L_SyoCheck = L_SyoCheck | MC_DinpCheck_Rzkb;
    								} else if ((H_BunriOk_S == -1)) {
    									L_SyoCheck = L_SyoCheck | MC_DinpCheck_Szkb;
    								}
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDZKMK_Bunri);
    								// IMPORTER.dll差分対応 de3-8685 Ver.12.09.01 2015.03.06 END
    							} else {
    								// 分離する為に必要な税率がセットされているかをチェック
    								if (H_BunriOk_R == 1) {
    									if (string.IsNullOrEmpty(H_Data[G_Index_RRIT])) {
    										L_SyoCheck = L_SyoCheck | MC_DinpCheck_Bkbn;
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RRIT, MC_ERRLOG_INVALIDVALUE);
    									}
    									if ((H_BunriOk_R == 1 && H_BunriOk_S == 1)) {
    										if (string.IsNullOrEmpty(H_Data[G_Index_SRIT])) {
    											L_SyoCheck = L_SyoCheck | MC_DinpCheck_Bkbn;
    											SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SRIT, MC_ERRLOG_INVALIDVALUE);
    										}
    
    									}
    									// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    									// (de2-15768関連)税抜処理で経理方式が税抜の科目の税込仕訳を登録出来る不具合を修正
    									// 借方の分離区分に科目マスタの値を使用してチェックした結果、分離区分が正しい値でなかった時（但し先に既存のエラーを出力していない場合のみ）
    								} else if (H_BunriOk_R == 0 && S_SaveBKBN != "0" && !string.IsNullOrEmpty(S_SaveBKBN) && B_DubleErrKBN == false) {
    									if (ChkZkbn_Mode_FNC(3, L_SaveRZKB) == true) {
    										H_Data[G_Index_RZKB] = L_SaveRZKB;
    									}
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RZKB, MC_ERRLOG_INVALIDVALUE);
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    									// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    								} else {
    									if (string.IsNullOrEmpty(H_Data[G_Index_SRIT])) {
    										L_SyoCheck = L_SyoCheck | MC_DinpCheck_Bkbn;
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SRIT, MC_ERRLOG_INVALIDVALUE);
    									}
    								}
    							}
    						} else if (H_Data[G_Index_BUNRI] == "0") {
    							// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 START
    							// (de2-15768関連)税抜処理で経理方式が税抜の科目の税込仕訳を登録出来る不具合を修正
    							// 既に同様のエラーを出力している時は出力しない
    							if (B_DubleErrKBN == false) {
    								L_ColIdx = G_Index_BUNRI;
    								if (H_BunriOk_R == 3) {
    									if (ChkZkbn_Mode_FNC(3, L_SaveRZKB) == true) {
    										H_Data[G_Index_RZKB] = L_SaveRZKB;
    									}
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RZKB, MC_ERRLOG_INVALIDVALUE);
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    								} else if (H_BunriOk_S == 3) {
    									if (ChkZkbn_Mode_FNC(3, H_Data[G_Index_SZKB]) == true) {
    										if (!string.IsNullOrEmpty(L_SaveSZKB)) {
    											H_Data[G_Index_SZKB] = L_SaveSZKB;
    										}
    									}
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SZKB, MC_ERRLOG_INVALIDVALUE);
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    								} else if (H_BunriOk_R == 0 && S_SaveBKBN != "0" && !string.IsNullOrEmpty(S_SaveBKBN) && ChkZkbn_Mode_FNC(1, H_Data[G_Index_RZKB]) == true) {
    									// 借方の分離区分に科目マスタの値を使用してチェックした結果、分離区分が正しい値でなかった時
    									// 但し、借方の課税区分が税込の場合のみエラーとする
    									if (ChkZkbn_Mode_FNC(3, L_SaveRZKB) == true) {
    										H_Data[G_Index_RZKB] = L_SaveRZKB;
    									}
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RZKB, MC_ERRLOG_INVALIDVALUE);
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    
    								}
    							}
    							// IMPORTER.dll差分対応 de3-3371 Ver.12.09.01 2015.03.06 END
    						} else {
    							L_SyoCheck = L_SyoCheck | MC_DinpCheck_Bkbn;
    							if (H_Data[G_Index_BUNRI] == "9999") {
    								H_Data[G_Index_BUNRI] = "";
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE_Bunri);
    							} else {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    							}
    						}
                        }
                        #region 元からコメントアウト
                        // If H_Data(G_Index_BKBN) = "1" Or H_Data(G_Index_BKBN) = "2" Or H_Data(G_Index_BKBN) = "3" Then
    					//     '現行は貸借両分離には対応しない
    					//     If ((H_BunriOk_R = 0 And H_BunriOk_S = 0) Or _
    					//             (H_BunriOk_R = 1 And H_BunriOk_S = 1)) Then
    					//         L_SyoCheck = L_SyoCheck Or MC_DinpCheck_Bkbn
    					//         SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE_Bunri)
    					//     Else
    					//         '分離する為に必要な税率がセットされているかをチェック
    					//         If H_BunriOk_R = 1 Then
    					//             If H_Data(G_Index_RRIT) = "" Then
    					//                 L_SyoCheck = L_SyoCheck Or MC_DinpCheck_Bkbn
    					//                 SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_RRIT, MC_ERRLOG_INVALIDVALUE)
    					//             End If
    					//             If (H_BunriOk_R = 1 And H_BunriOk_S = 1) Then
    					//                 If H_Data(G_Index_SRIT) = "" Then
    					//                     L_SyoCheck = L_SyoCheck Or MC_DinpCheck_Bkbn
    					//                     SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_SRIT, MC_ERRLOG_INVALIDVALUE)
    					//                 End If
    
    					//             End If
    					//         Else
    					//             If H_Data(G_Index_SRIT) = "" Then
    					//                 L_SyoCheck = L_SyoCheck Or MC_DinpCheck_Bkbn
    					//                 SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_SRIT, MC_ERRLOG_INVALIDVALUE)
    					//             End If
    					//         End If
    					//     End If
    					// ElseIf H_Data(G_Index_BKBN) = "0" Then
    
    					// Else
    					//     L_SyoCheck = L_SyoCheck Or MC_DinpCheck_Bkbn
    					//     If H_Data(G_Index_BKBN) = "9999" Then
    					//         H_Data(G_Index_BKBN) = ""
    					//         SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE_Bunri)
    					//     Else
    					//         SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE)
    					//     End If
    					// End If
                        // <---
                        #endregion
                    }
                    else
                    {
    					if (H_BunriOk_R == 1 && H_BunriOk_S == 1 && L_DefBunri_Flg == false)
                        {
    						L_ColIdx   = G_Index_BUNRI;
    						L_SyoCheck = L_SyoCheck | MC_DinpCheck_Bkbn;
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE_Bunri);
    					}
    
    					// 税込マスタチェック対応
    					L_ColIdx = G_Index_BUNRI;
    					if (H_BunriOk_R == 3) {
    						if (L_SaveRZKB == "18" || L_SaveRZKB == "19" || L_SaveRZKB == "49")
                            {
    							H_Data[G_Index_RZKB] = L_SaveRZKB;
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RZKB, MC_ERRLOG_INVALIDVALUE);
    						} else {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RZKB, MC_ERRLOG_INVALIDVALUE);
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    						}
    
    					} else if (H_BunriOk_S == 3) {
    						if (H_Data[G_Index_SZKB] == "18" || H_Data[G_Index_SZKB] == "19" || H_Data[G_Index_SZKB] == "49")
                            {
    							if (!string.IsNullOrEmpty(L_SaveSZKB)) {
    								H_Data[G_Index_SZKB] = L_SaveSZKB;
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SZKB, MC_ERRLOG_INVALIDVALUE);
    							} else {
    								H_Data[G_Index_SZKB] = L_SaveSZKB;
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SZKB, MC_ERRLOG_INVALIDVALUE);
    							}
    							H_Data[G_Index_SZKB] = L_SaveSZKB;
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SZKB, MC_ERRLOG_INVALIDVALUE);
    						} else {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SZKB, MC_ERRLOG_INVALIDVALUE);
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    						}
    					}
                    }

                    #region ** 税額対象科目
                    // 消費税処理区分が「税込処理」の場合は不要
                    if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_SKBN]) != 0)
                    {
                        #region ** 税対象科目入力可能仕訳チェック
                        L_Flag = false;
    					bool canUseZeikamokuInBothTaisyaku = false;
    					for (L_Katt = 0; L_Katt <= 1; L_Katt++) {
    						if ((L_SGrp[L_Katt] == 21) | (L_SGrp[L_Katt] == 22)) {
    							switch (L_Zkbn[L_Katt]) {
    								case "32":
    								case "33":
    								case "100":
    									if (L_Flag) {
    										canUseZeikamokuInBothTaisyaku = true;
    										break; //  TODO: might not be correct. Was : Exit For
    									}
    
    									L_Flag = true;
    									L_ZeiKmkKatt = L_Katt;
    									break;
    								// 貸借両方で使用可能かどうかを取得する Exit For
    							}
    						}
                        }
                        #endregion
                        // ** 税対象科目入力可能仕訳の場合
                        if (L_Flag == true)
                        {
                            // ** 税対象科目 科目
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//                          L_Text = Strings.Trim(H_Data[G_Index_ZKMK]); 
                            L_Text = H_Data[G_Index_ZKMK].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (string.IsNullOrEmpty(L_Text))
                            {
    							if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_ZTKCHK]) == 0)
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZKMK, MC_ERRLOG_MINYURYOKU);
    							}
    							// Prj312--->
    						}
                            else if (ChkControlChars_FNC(H_Data[G_Index_BUNRI]))
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZKMK, MC_ERRLOG_SEIGYOMOJI);
    							// <---
    						}
                            else
                            {
    							// □■□科目デフォルトの取得□■□------------------------------------
    							L_Text     = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_KMTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMLN]));
    							L_Rows_Zei = H_dtKname.Select("KESN = " + L_Kesn + " AND KCOD = '" + L_Text + "'");
    							// 未登録コードが指定されていた場合はエラー処理
    							if (L_Rows_Zei.Length == 0)
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZKMK, MC_ERRLOG_MITOUROKU);    
    							}
                                else
                                {
    								// 課税区分
    								if (string.IsNullOrEmpty(H_Data[G_Index_ZZKB]))
                                    {
    									H_Data[G_Index_ZZKB] = (L_Rows_Zei[0].ItemArray[12]).ToString();
    								}
    
    								// 税率
    								if (string.IsNullOrEmpty(H_Data[G_Index_ZRIT])) {
    									// IMPORTER.dll差分対応 de3-8073,8083,8090 Ver.12.09.01 2015.03.06 START
    									// 税対象科目税率が未設定の場合は貸借税率をセット
    									if (!string.IsNullOrEmpty(H_Data[G_Index_RRIT])) {
    										H_Data[G_Index_ZRIT] = H_Data[G_Index_RRIT];
    									} else if (!string.IsNullOrEmpty(H_Data[G_Index_SRIT])) {
    										H_Data[G_Index_ZRIT] = H_Data[G_Index_SRIT];
    									} else {
    										H_Data[G_Index_ZRIT] = "0";
    									}
    								}
    								if (string.IsNullOrEmpty(H_Data[G_Index_ZSRE]))
                                    {
    									if (Convert.ToInt32(L_Rows_Zei[0].ItemArray[(int)eKNAME.KNAME_SY05]) != 0)
                                        {
    										H_Data[G_Index_ZSRE] = (L_Rows_Zei[0].ItemArray[(int)eKNAME.KNAME_SY05]).ToString();
    									}
    
    									if (bumonInfo[L_ZeiKmkKatt].HasDefaultSiireKubun())
                                        {
    										H_Data[G_Index_ZSRE] = (bumonInfo[L_ZeiKmkKatt].GetSiireKubunInZdata()).ToString();
                                        }
                                        else if (canUseZeikamokuInBothTaisyaku && bumonInfo[1].HasDefaultSiireKubun())
                                        {
    										//  貸借ともに税科目使用可で借方部門仕入区分なし、貸方部門仕入区分ありの場合
    										H_Data[G_Index_ZSRE] = (bumonInfo[1].GetSiireKubunInZdata()).ToString();
    									}
    								}
    								// 業種区分
    								if (string.IsNullOrEmpty(H_Data[G_Index_ZGYO]))
                                    {
    									if (Convert.ToInt32(L_Rows_Zei[0].ItemArray[(int)eKNAME.KNAME_SY06]) != 0)
                                        {
    										H_Data[G_Index_ZGYO] = (L_Rows_Zei[0].ItemArray[(int)eKNAME.KNAME_SY06]).ToString();
    									}
                                        else
                                        {
    										// de2-7931② チェック処理で当期固定ではなく処理期の消費税設定業種区分を使用するように修正
    										if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) > 10)
                                            {
    											int lkzsw = Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]);
    											switch (lkzsw) {
    												case 11:
    													H_Data[G_Index_ZGYO] = "1";
    													break;
    												case 12:
    													H_Data[G_Index_ZGYO] = "2";
    													break;
    												case 13:
    													H_Data[G_Index_ZGYO] = "3";
    													break;
    												case 14:
    													H_Data[G_Index_ZGYO] = "4";
    													break;
    												case 15:
    													H_Data[G_Index_ZGYO] = "5";
    													break;
    												default:
    													H_Data[G_Index_ZGYO] = "6";
    													break;
    											}
    										}
    									}
    								}
    								// --------------------------------------------------------------------------

// Ver02.26.01 インボイス対応 --->
                                    // 税対象科目　併用売上税額計算方式
                                    if (H_Lno == 2)
                                    {
                                        if (ChkControlChars_FNC(H_Data[G_Index_ZURIZEIKEISAN]))
                                        {
                                            SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZURIZEIKEISAN, MC_ERRLOG_SEIGYOMOJI);
                                        }
                                        if (String.IsNullOrEmpty(H_Data[G_Index_ZKMK]) == false && Convert.ToInt16(H_Data[G_Index_BUNRI]) == 0)
                                        {
                                            if (L_SGrp[0] == 22 && Convert.ToInt16(L_Zkbn[0]) == 100)
                                            {
                                                if (String.IsNullOrEmpty(H_Data[G_Index_ZURIZEIKEISAN]))
                                                {
                                                    H_Data[G_Index_ZURIZEIKEISAN] = H_Data[G_Index_RURIZEIKEISAN];
                                                }
                                            }
                                            else if (L_SGrp[1] == 22 && Convert.ToInt16(L_Zkbn[1]) == 100)
                                            {
                                                if (String.IsNullOrEmpty(H_Data[G_Index_ZURIZEIKEISAN]))
                                                {
                                                    H_Data[G_Index_ZURIZEIKEISAN] = H_Data[G_Index_SURIZEIKEISAN];
                                                }
                                            }
                                        }
                                        if (String.IsNullOrEmpty(H_Data[G_Index_ZURIZEIKEISAN]))
                                        {
                                            H_Data[G_Index_ZURIZEIKEISAN] = "0";
                                        }
                                    }

                                    // 税対象科目　仕入税額控除経過措置割合
                                    if (H_Lno == 2)
                                    {
                                        if (ChkControlChars_FNC(H_Data[G_Index_ZMENZEIKEIKA]))
                                        {
                                            SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZMENZEIKEIKA, MC_ERRLOG_SEIGYOMOJI);
                                        }
                                    }
                                    if (string.IsNullOrEmpty(H_Data[G_Index_ZKMK]) == false && short.Parse(H_Data[G_Index_BUNRI]) == 0)
                                    {
                                        if (L_SGrp[0] == 21 && short.Parse(L_Zkbn[0]) == 100)
                                        {
                                            if (H_Lno == 2 && string.IsNullOrEmpty(H_Data[G_Index_ZMENZEIKEIKA]))
                                            {
                                                H_Data[G_Index_ZMENZEIKEIKA] = H_Data[G_Index_RMENZEIKEIKA];
                                            }
                                        }
                                        else if (L_SGrp[1] == 21 && short.Parse(L_Zkbn[1]) == 100)
                                        {
                                            if (H_Lno == 2 && string.IsNullOrEmpty(H_Data[G_Index_ZMENZEIKEIKA]))
                                            {
                                                H_Data[G_Index_ZMENZEIKEIKA] = H_Data[G_Index_SMENZEIKEIKA];
                                            }
                                        }
                                    }

                                    if (H_Lno == 2 && string.IsNullOrEmpty(H_Data[G_Index_ZMENZEIKEIKA]))
                                    {
                                        H_Data[G_Index_ZMENZEIKEIKA] = "0";
                                    }
// <--- Ver02.26.01 インボイス対応
    
    								if (Convert.ToInt32(H_Data[G_Index_BUNRI]) > 0 && ((L_SyoCheck & MC_DinpCheck_Bkbn) != MC_DinpCheck_Bkbn))
                                    {
    									L_ColIdx = G_Index_ZKMK;
    									L_SyoCheck = L_SyoCheck | MC_DinpCheck_Zkicd;
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_MITOUROKU);
    									if (!string.IsNullOrEmpty(H_Data[G_Index_ZZKB])) {
    										L_ColIdx = G_Index_ZZKB;
    										L_SyoCheck = L_SyoCheck | MC_DinpCheck_Zzkb;
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    									}
    									if (!string.IsNullOrEmpty(H_Data[G_Index_ZGYO]))
                                        {
    										if (Convert.ToInt32(H_Data[G_Index_ZGYO]) > 0)
                                            {
    											L_ColIdx   = G_Index_ZGYO;
    											L_SyoCheck = L_SyoCheck | MC_DinpCheck_Zgyo;
    											SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    										}
    									}
    									if (!string.IsNullOrEmpty(H_Data[G_Index_ZSRE]))
                                        {
    										if (Convert.ToInt32(H_Data[G_Index_ZSRE]) > 0)
                                            {
    											L_ColIdx = G_Index_ZSRE;
    											L_SyoCheck = L_SyoCheck | MC_DinpCheck_Zsre;
    											SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, L_ColIdx, MC_ERRLOG_INVALIDVALUE);
    										}
    									}
    								} else {
    									L_KicdZ = "";
    									if (ChkCodeType_FNC(L_Text, Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KMTY])) == true)
                                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    										if (Strings.Len(L_Text) <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMLN]))
    										if (L_Text.Length <= Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMLN]))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                            {
    											L_Text = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_KMTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMLN]));
    											L_Rows = H_dtKname.Select("KESN = " + L_Kesn + " AND KCOD = '" + L_Text + "'");
    											if (L_Rows.Length > 0)
                                                {
    												L_KnameRowZ = L_Rows[0];
    												L_KicdZ     = (L_KnameRowZ[(int)eKNAME.KNAME_KICD]).ToString();
    											}
                                                else
                                                {
    												SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZKMK, MC_ERRLOG_MITOUROKU);
    											}
    											L_Rows = null;
    										} else {
    											SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZKMK, MC_ERRLOG_INVALIDLENGTH);
    										}
    									} else {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZKMK, MC_ERRLOG_INVALIDCHAR);
    									}
    									if ((H_Kakutyo == true) && (!string.IsNullOrEmpty(L_KicdZ)) && (L_KmkSec == true)) {
    										if (ChkKmkSec_FNC(H_Con, L_Kesn, L_SecPtn, L_KicdZ) == false) {
    											L_KicdZ = "";
    											SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZKMK, MC_ERRLOG_CANNOTUSE);
    										}
    									}
    									if (!string.IsNullOrEmpty(L_KicdZ)) {
    										switch (Convert.ToInt32(L_KnameRow[L_ZeiKmkKatt][(int)eKNAME.KNAME_SY01]))
                                            {
    											case 21:
    												// ** 「仮払消費税」仕訳の場合、資産関連・仕入関連・経費関連科目のみ使用可能
    												switch (Convert.ToInt32(L_KnameRowZ[(int)eKNAME.KNAME_SY01]))
                                                    {
    													case 2:
    													case 5:
    													case 6:
    													case 7:
    													case 8:
    													case 10:
    														break;
    													default:
    														L_KicdZ = "";
    														break;
    												}
    												break;
    											case 22:
    												// ** 「仮受消費税」仕訳の場合、資産関連・売上関連科目のみ使用可能
    												switch (Convert.ToInt32(L_KnameRowZ[(int)eKNAME.KNAME_SY01]))
                                                    {
    													case 2:
    													case 3:
    													case 4:
    													case 7:
    													case 8:
    													case 9:
    														break;
    													default:
    														L_KicdZ = "";
    														break;
    												}
    												break;
    										}
    										// ** 消費税科目の課税区分が「貨物国」「貨物地方」なら「課税貨物」使用しない科目は不可
    										if ((Convert.ToInt32(L_Zkbn[L_ZeiKmkKatt]) == 32) || (Convert.ToInt32(L_Zkbn[L_ZeiKmkKatt]) == 33))
                                            {
    											if (Convert.ToInt32(L_KnameRowZ[(int)eKNAME.KNAME_SY08]) == 3)
                                                {
    											}
                                                else
                                                {
    												L_ZkbnZ = "";
    											}
    										}
    										// ** 消費税処理区分が「税抜処理」の場合、経理方式が「税抜」の科目以外は使用不可
    										if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_SKBN]) == 1)
                                            {
    											switch (Convert.ToInt32(L_KnameRowZ[(int)eKNAME.KNAME_SY01]))
                                                {
    												case 2:
    												case 8:
    													if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KBN1]) != 0)
                                                        {
    														L_KicdZ = "";
    													}
    													break;
    												case 3:
    												case 4:
    												case 9:
    													if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KBN2]) != 0)
                                                        {
    														L_KicdZ = "";
    													}
    													break;
    												case 5:
    												case 10:
    													if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KBN3]) != 0)
                                                        {
    														L_KicdZ = "";
    													}
    													break;
    												case 6:
    													if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KBN4]) != 0)
                                                        {
    														L_KicdZ = "";
    													}
    													break;
    												case 7:
    													if ((Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KBN2]) != 0) && (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KBN3]) != 0))
                                                        {
    														L_KicdZ = "";
    													}
    													break;
    											}
    										}
    										if (string.IsNullOrEmpty(L_KicdZ))
                                            {
    											SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZKMK, MC_ERRLOG_INVALIDZKMK);
    										}
    									}
    
    									// ** 税対象科目 課税区分
    									L_ZkbnZ = "";
    									if (!string.IsNullOrEmpty(L_KicdZ)) {
    										// 課税区分自動判定機能対応(18,19,49)
    										L_SaveZZKB = H_Data[G_Index_ZZKB];
    										H_Data[G_Index_ZZKB] = (ChkAUTOZeiKamoku_FNC(Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY01]), (L_KnameRow[1][(int)eKNAME.KNAME_SY01]).ToString(),
                                                                                         Convert.ToInt32(H_Data[G_Index_ZZKB]))).ToString();
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    										L_Text = Strings.Trim(H_Data[G_Index_ZZKB]);
    										L_Text = H_Data[G_Index_ZZKB].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    										if (ChkZkbn_FNC(L_Text, L_SvolumRow, L_KnameRowZ) == true)
                                            {
    											L_ZkbnZ = L_Text;
    											if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_SKBN]) == 1)
                                                {
    												// ** 消費税処理区分が「税抜処理」の場合
    												switch (L_ZkbnZ) {
    													case "2":
    													case "13":
    													case "14":
    													case "22":
    													case "24":
    													case "31":
    														break;
    													default:
    														L_ZkbnZ = "";
    														break;
    												}
    											}
                                                else if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_SKBN]) == 2)
                                                {
    												// ** 消費税処理区分が「一括税抜処理」の場合
    												switch (L_ZkbnZ) {
    													case "1":
    													case "2":
    													case "11":
    													case "12":
    													case "13":
    													case "14":
    													case "21":
    													case "22":
    													case "23":
    													case "24":
    													case "31":
    														break;
    													default:
    														L_ZkbnZ = "";
    														break;
    												}
    											}
    											// ** 消費税科目の課税区分が「貨物国」「貨物地方」なら「課税貨物」のみ使用可能
    											if ((Convert.ToInt32(L_Zkbn[L_ZeiKmkKatt]) == 32) || (Convert.ToInt32(L_Zkbn[L_ZeiKmkKatt]) == 33))
                                                {
    												if (L_ZkbnZ != "31")
                                                    {
    													L_ZkbnZ = "";
    												}
    											}
    											// ** 消費税科目の課税区分が「対象外」なら「課税貨物」は使用不可
    											if (Convert.ToInt32(L_Zkbn[L_ZeiKmkKatt]) == 100)
                                                {
    												if (L_ZkbnZ == "31")
                                                    {
    													L_ZkbnZ = "";
    												}
    											}
    											switch (Convert.ToInt32(L_KnameRow[L_ZeiKmkKatt][(int)eKNAME.KNAME_SY01]))
                                                {
    												case 21:
    													// ** 「仮払消費税」仕訳の場合、売上系の区分は使用不可
    													switch (L_ZkbnZ) {
    														case "12":
    														case "14":
    														case "21":
    														case "22":
    														case "23":
    														case "24":
    															L_ZkbnZ = "";
    															break;
    													}
    													break;
    												case 22:
    													// ** 「仮受消費税」仕訳の場合、仕入系の区分は使用不可
    													switch (L_ZkbnZ) {
    														case "11":
    														case "13":
    														case "31":
    															L_ZkbnZ = "";
    															break;
    													}
    													break;
    											}
    										}
    										if (string.IsNullOrEmpty(L_ZkbnZ)) {
    											// 課税区分の自動判定時のエラー対応
    											H_Data[G_Index_ZZKB] = L_SaveZZKB;
    											SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZZKB, MC_ERRLOG_INVALIDVALUE);
    										}
    									}
    
    									// ** 税対象科目 税率
    									L_ZritZ = 0;
    									if (!string.IsNullOrEmpty(L_ZkbnZ)) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    										L_Text = Strings.Trim(H_Data[G_Index_ZRIT]);
    										L_Text = H_Data[G_Index_ZRIT].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    										if (!string.IsNullOrEmpty(L_Text)) {
    											if (ChkSyosu_FNC(L_Text, 3, 2) == 0) {
    												L_ZritZ = Convert.ToDecimal(L_Text);
    											}
    										}
    										if ((L_Zrit[L_ZeiKmkKatt] != 0) && (L_ZritZ != L_Zrit[L_ZeiKmkKatt])) {
    											SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZRIT, MC_ERRLOG_INVALIDVALUE);
    										}
    									}
    
    									// ** 税対象科目 業種区分・仕入区分
    									if (!string.IsNullOrEmpty(L_ZkbnZ)) {
    										if ((Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) >= 11) && (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) <= 16))
                                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    											if (ChkGyosyuKbn_FNC(Strings.Trim(H_Data[G_Index_ZGYO]), Convert.ToInt16(L_ZkbnZ), Convert.ToInt16(L_KnameRowZ[(int)eKNAME.KNAME_SY01]), L_SvolumRow) == false)
    											if (ChkGyosyuKbn_FNC(H_Data[G_Index_ZGYO].Trim(), Convert.ToInt16(L_ZkbnZ), Convert.ToInt16(L_KnameRowZ[(int)eKNAME.KNAME_SY01]), L_SvolumRow) == false)
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                                {
    												SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZGYO, MC_ERRLOG_INVALIDVALUE);
    											}
    										}
    
    										if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_ANBN]) == 1)
                                            {
    											L_Sire_Kyouri_Chk = false;
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    											if (ChkSiireKbn_FNC(Strings.Trim(H_Data[G_Index_ZSRE]), Convert.ToInt16(L_ZkbnZ), Convert.ToInt16(L_KnameRowZ[(int)eKNAME.KNAME_SY01]), ref L_Sire_Kyouri_Chk) == false) {
    											if (ChkSiireKbn_FNC(H_Data[G_Index_ZSRE].Trim(), Convert.ToInt16(L_ZkbnZ), Convert.ToInt16(L_KnameRowZ[(int)eKNAME.KNAME_SY01]), ref L_Sire_Kyouri_Chk) == false)
                                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    												SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZSRE, MC_ERRLOG_INVALIDVALUE);
    											}
    											if (L_Sire_Kyouri_Chk == true)
                                                {
    												H_Data[G_Index_ZSRE] = "3";
    											}
    										}
    									}

// Ver02.26.01 インボイス対応 --->
                                        if (H_Lno == 2)
                                        {
                                            //消費税対象　併用売上税額計算方式
// Ver02.26.04 売上税額計算方式：積上設定時、レイアウトの値は「0」固定 --->
                                            if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_URIAGEZEIKEISAN]) != 2)
                                            {
                                                H_Data[G_Index_ZURIZEIKEISAN] = "0";
                                            }
// <--- Ver02.26.04 売上税額計算方式：積上設定時、レイアウトの値は「0」固定

                                            if (!IsImportableHeiyouUriageZeigakuKeisanHousiki(H_Data[G_Index_ZURIZEIKEISAN].Trim(), Convert.ToInt16(L_Rows_Zei[0][(int)eKNAME.KNAME_SY01]), 
                                                                                              Convert.ToInt16(L_ZkbnZ), Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_URIAGEZEIKEISAN]), 
                                                                                              H_Data[G_Index_DYMD].Trim()))
                                            {
                                                SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZURIZEIKEISAN, MC_ERRLOG_INVALIDVALUE);
                                            }
                                            else
                                            {
                                                if (!string.IsNullOrEmpty(H_Data[G_Index_ZKMK]) && Convert.ToInt16(H_Data[G_Index_BUNRI]) == 0)
                                                {
                                                    if (L_SGrp[0] == 22 && Convert.ToInt16(L_Zkbn[0]) == 100)
                                                    {
                                                        if (H_Data[G_Index_ZURIZEIKEISAN] != H_Data[G_Index_RURIZEIKEISAN])
                                                        {
                                                            SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZURIZEIKEISAN, MC_ERRLOG_INVALIDVALUE);
                                                        }
                                                    }
                                                    else if (L_SGrp[1] == 22 && Convert.ToInt16(L_Zkbn[1]) == 100)
                                                    {
                                                        if (H_Data[G_Index_ZURIZEIKEISAN] != H_Data[G_Index_SURIZEIKEISAN])
                                                        {
                                                            SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZURIZEIKEISAN, MC_ERRLOG_INVALIDVALUE);
                                                        }
                                                    }
                                                }
                                            }
                                            //消費税対象　仕入税額控除経過措置割合
                                            if (!IsImportableSiireZeigakuKouzyoKeikaSotiWariai(H_Data[G_Index_ZMENZEIKEIKA].Trim(), Convert.ToInt16(L_Rows_Zei[0][(int)eKNAME.KNAME_SY01]), 
                                                                                               Convert.ToInt16(L_ZkbnZ), H_Data[G_Index_DYMD].Trim()))
                                            {
                                                SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZMENZEIKEIKA, MC_ERRLOG_INVALIDVALUE);
                                            }
                                            else
                                            {
                                                if (!string.IsNullOrEmpty(H_Data[G_Index_ZKMK]) && Convert.ToInt16(H_Data[G_Index_BUNRI]) == 0)
                                                {
                                                    if (L_SGrp[0] == 21 && Convert.ToInt16(L_Zkbn[0]) == 100)
                                                    {
                                                        if (H_Data[G_Index_ZMENZEIKEIKA] != H_Data[G_Index_RMENZEIKEIKA])
                                                        {
                                                            SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZMENZEIKEIKA, MC_ERRLOG_INVALIDVALUE);
                                                        }
                                                    }
                                                    else if (L_SGrp[1] == 21 && Convert.ToInt16(L_Zkbn[1]) == 100)
                                                    {
                                                        if (H_Data[G_Index_ZMENZEIKEIKA] != H_Data[G_Index_SMENZEIKEIKA])
                                                        {
                                                            SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZMENZEIKEIKA, MC_ERRLOG_INVALIDVALUE);
                                                        }
                                                    }
                                                }
                                            }
                                        }
// <--- Ver02.26.01 インボイス対応
    								}
    							}
    						}
    					}
                    }
                    #endregion
                    // <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    				// 借方税率の値を戻す
    				if (!string.IsNullOrEmpty(OldRrit))
                    {
    					H_Data[G_Index_RRIT] = OldRrit;
    				}

                    #region 軽減税率チェック
                    // 税率が「8」以外の場合に軽減税率区分の値が入力されていたらエラー
                    if (P_Keigen == 2)
                    {
    					for (int i = 0; i <= 2; i++)
                        {
    						if (!(H_Data[ZeirituNo[i]] == "8" || H_Data[ZeirituNo[i]] == "8.00" || string.IsNullOrEmpty(H_Data[ZeirituNo[i]])))
                            {
    							if (H_Data[KeigenNo[i]] == "1")
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, KeigenNo[i], MC_ERRLOG_INVALIDVALUE);
    							}
                                else
                                {
    								// 「0」をセット
    								H_Data[KeigenNo[i]] = "0";
    							}
    						}
    					}
    				}
    
    				// 税率が「8」の場合は、通常税率か軽減税率かの判断
    				SRITU_Rows = H_dtSritu.Select("KEIGEN = 1 AND ZRIT = 8");
    				// 「税率の扱い：0」
    				if (P_Keigen == 0)
                    {
    					for (int i = 0; i <= 2; i++)
                        {
    						// 「0」をセット
    						H_Data[KeigenNo[i]] = "0";
    					}    					
    				}
                    // 「税率の扱い：1」軽減税率8％のレコードがあるかどうかチェック
                    else if (P_Keigen == 1)
                    {
    					if (SRITU_Rows.Length == 0)
                        {
    						// 軽減税率8％のレコードがない場合はエラー
    						if (H_Data[G_Index_RRIT] == "8" || H_Data[G_Index_RRIT] == "8.00")
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_RRIT, MC_ERRLOG_INVALIDKEIGEN);
    						}
    						if (H_Data[G_Index_SRIT] == "8" || H_Data[G_Index_SRIT] == "8.00")
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SRIT, MC_ERRLOG_INVALIDKEIGEN);
    						}
    						if (H_Data[G_Index_ZRIT] == "8" || H_Data[G_Index_ZRIT] == "8.00")
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_ZRIT, MC_ERRLOG_INVALIDKEIGEN);
    						}
    					}   					
    				}
                    // 「税率の扱い：2」
                    else if (P_Keigen == 2)
                    {
    					// 各値のチェック
    					for (int i = 0; i <= 2; i++) {
    						if (H_Data[ZeirituNo[i]] == "8" || H_Data[ZeirituNo[i]] == "8.00")
                            {
    							if (Convert.ToInt32(H_Data[KeigenNo[i]]) == 0)
                                {
    								// 0の場合は通常税率
    							} else if (Convert.ToInt32(H_Data[KeigenNo[i]]) == 1)
                                {
    								// 1はレコードチェック
    								if (SRITU_Rows.Length == 0) {
    									// <---Ver01.17.03　2019/02/13　hirano　軽減税率＆10％対応
    									// SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, KeigenNo(i), MC_ERRLOG_INVALIDKEIGEN)
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, ZeirituNo[i], MC_ERRLOG_INVALIDKEIGEN);
    									// --->Ver01.17.03
    									KeigenErrFlg = true;
    								} else {
    									if (L_Dymd < int.Parse(SRITU_Rows[0][(int)eSRITU.SRITU_SYMD].ToString()))
                                        {
    										// 伝票日付が税率の開始年月日より前の場合は通常税率
    										H_Data[KeigenNo[i]] = "0";
    									}
                                        else
                                        {
    										// 伝票日付が税率の開始年月日以降の場合は軽減税率
    										H_Data[KeigenNo[i]] = "1";
    									}
    								}
    							} else {
    								// 0,1以外はエラー
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, KeigenNo[i], MC_ERRLOG_INVALIDVALUE);
    								KeigenErrFlg = true;
    							}
    						}
    					}
    
    					// 軽減税率区分がすべて正常な値の場合のみ比較チェック
    					if (KeigenErrFlg == false) {
    						// 「借方税率：8％」「貸方税率：8％」の場合
    						if ((H_Data[ZeirituNo[0]] == "8" || H_Data[ZeirituNo[0]] == "8.00") && (H_Data[ZeirituNo[1]] == "8" || H_Data[ZeirituNo[1]] == "8.00"))
                            {
    							// 「借方　軽減税率区分」と「貸方　軽減税率区分」が同じ値かどうかチェック
    							if (H_Data[KeigenNo[0]] != H_Data[KeigenNo[1]]) {
    								// 異なる場合は貸方のエラーとする
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, KeigenNo[1], MC_ERRLOG_INVALIDVALUE);
    							} else {
    								if (H_Data[ZeirituNo[2]] == "8" || H_Data[ZeirituNo[2]] == "8.00")
                                    {
    									// 「税対象科目税率：8％」の場合は、「借方　軽減税率区分」と「税対象科目　軽減税率区分」が同じ値かどうかチェック
    									if (H_Data[KeigenNo[0]] != H_Data[KeigenNo[2]]) {
    										// 異なる場合は税対象科目のエラーとする
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, KeigenNo[2], MC_ERRLOG_INVALIDVALUE);
    									}
    								}
    							}
    
    							// 「借方税率：8％」「税対象科目税率：8％」の場合
    						} else if ((H_Data[ZeirituNo[0]] == "8" || H_Data[ZeirituNo[0]] == "8.00") && string.IsNullOrEmpty(H_Data[ZeirituNo[1]]) && (H_Data[ZeirituNo[2]] == "8" || H_Data[ZeirituNo[2]] == "8.00"))
                            {
    							// 「借方　軽減税率区分」と「税対象科目　軽減税率区分」が同じ値かどうかチェック
    							if (H_Data[KeigenNo[0]] != H_Data[KeigenNo[2]])
                                {
    								// 異なる場合は税対象科目のエラーとする
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, KeigenNo[2], MC_ERRLOG_INVALIDVALUE);
    							}
    
    							// 「貸方税率：8％」「税対象科目税率：8％」の場合
    						} else if (string.IsNullOrEmpty(H_Data[ZeirituNo[0]]) && (H_Data[ZeirituNo[1]] == "8" || H_Data[ZeirituNo[1]] == "8.00") && (H_Data[ZeirituNo[2]] == "8" || H_Data[ZeirituNo[2]] == "8.00"))
                            {
    							// 「貸方　軽減税率区分」と「税対象科目　軽減税率区分」が同じ値かどうかチェック
    							if (H_Data[KeigenNo[1]] != H_Data[KeigenNo[2]]) {
    								// 異なる場合は税対象科目のエラーとする
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, KeigenNo[2], MC_ERRLOG_INVALIDVALUE);
    							}
    						}
    					}
    				}
                    #endregion
                    // --->Ver01.16.02
                }
                #endregion

                #region ** 支払日・支払区分・支払期日
                if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SDAY]) == 1) || (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SHKBN]) == 1) || (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SKDAY]) == 1))
                {
    				L_Flag = false;
    				if (!string.IsNullOrEmpty(L_Kicd[0])) {
    					L_Flag = IsSubjectKmk_FNC(L_Kesn, 0, L_Kicd[0], 0, H_dtSubject);
    				}
    				if (L_Flag == false) {
    					if (!string.IsNullOrEmpty(L_Kicd[1])) {
    						L_Flag = IsSubjectKmk_FNC(L_Kesn, 0, L_Kicd[1], 1, H_dtSubject);
    					}
    				}
    
    
    				if (L_Flag == true) {
    					L_Day = 0;
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SDAY]) == 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_SYMD]);
    						L_Text = H_Data[G_Index_SYMD].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text)) {
    							// Prj312--->
    							if (ChkControlChars_FNC(L_Text)) {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SYMD, MC_ERRLOG_SEIGYOMOJI);
    							} else {
    								if (ChkHiduke_FNC(L_Text) == true) {
    									L_Day = Convert.ToInt32(L_Text);
    								} else {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SYMD, MC_ERRLOG_INVALIDDATE);
    								}
    							}
    							// If ChkHiduke_FNC(L_Text) = True Then
    							//     L_Day = CInt(L_Text)
    							// Else
    							//     SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_SYMD, MC_ERRLOG_INVALIDDATE)
    							// End If
    							// <---
    						}
    					}
    
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SHKBN]) == 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_SKBN]);
    						L_Text = H_Data[G_Index_SKBN].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text)) {
    							// Prj312--->
    							if (ChkControlChars_FNC(L_Text)) {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SKBN, MC_ERRLOG_SEIGYOMOJI);
    							} else {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    								if ((IsNumeric_FNC(L_Text)) && (Strings.Len(L_Text) <= 2)) {
    								if ((IsNumeric_FNC(L_Text)) && (L_Text.Length <= 2))
                                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    									if (PaywayExists_FNC(H_Con, 0, Convert.ToInt16(L_Text)) == false) {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SKBN, MC_ERRLOG_MITOUROKU);
    									}
    								} else {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SKBN, MC_ERRLOG_INVALIDVALUE);
    								}
    							}
    							// If (IsNumeric_FNC(L_Text)) And (Len(L_Text) <= 2) Then
    							//     If PaywayExists_FNC(H_Con, 0, CShort(L_Text)) = False Then
    							//         SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_SKBN, MC_ERRLOG_MITOUROKU)
    							//     End If
    							// Else
    							//     SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_SKBN, MC_ERRLOG_INVALIDVALUE)
    							// End If
    							// <---
    						}
    					}
    
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SKDAY]) == 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_SKIZ]);
    						L_Text = H_Data[G_Index_SKIZ].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text)) {
    							// Prj312--->
    							if (ChkControlChars_FNC(L_Text)) {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SKIZ, MC_ERRLOG_SEIGYOMOJI);
    							} else {
    								if (ChkHiduke_FNC(L_Text) == true) {
    									if (Convert.ToInt32(L_Text) < L_Day) {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SKIZ, MC_ERRLOG_INVALIDSKIZ);
    									}
    								} else {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SKIZ, MC_ERRLOG_INVALIDDATE);
    								}
    							}
    							// If ChkHiduke_FNC(L_Text) = True Then
    							//     If CInt(L_Text) < L_Day Then
    							//         SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_SKIZ, MC_ERRLOG_INVALIDSKIZ)
    							//     End If
    							// Else
    							//     SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_SKIZ, MC_ERRLOG_INVALIDDATE)
    							// End If
    							// <---
    						}
    					}
    				}
                }
                #endregion
                #region ** 回収日・入金区分・回収期日
                if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_UDAY]) == 1) || (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_UKKBN]) == 1) || (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_UKDAY]) == 1))
                {
    				L_Flag = false;
    				if (!string.IsNullOrEmpty(L_Kicd[0])) {
    					L_Flag = IsSubjectKmk_FNC(L_Kesn, 1, L_Kicd[0], 0, H_dtSubject);
    				}
    				if (L_Flag == false) {
    					if (!string.IsNullOrEmpty(L_Kicd[1])) {
    						L_Flag = IsSubjectKmk_FNC(L_Kesn, 1, L_Kicd[1], 1, H_dtSubject);
    					}
    				}
    
    
    				if (L_Flag == true) {
    					L_Day = 0;
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_UDAY]) == 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_UYMD]);
    						L_Text = H_Data[G_Index_UYMD].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text)) {
    							if (ChkHiduke_FNC(L_Text) == true) {
    								L_Day = Convert.ToInt32(L_Text);
    							} else {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_UYMD, MC_ERRLOG_INVALIDDATE);
    							}
    						}
    					}
    
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_UKKBN]) == 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_UKBN]);
    						L_Text = H_Data[G_Index_UKBN].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text)) {
    							// Prj312--->
    							if (ChkControlChars_FNC(L_Text)) {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_UKBN, MC_ERRLOG_SEIGYOMOJI);
    							} else {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    								if ((IsNumeric_FNC(L_Text)) && (Strings.Len(L_Text) <= 2)) {
    								if ((IsNumeric_FNC(L_Text)) && (L_Text.Length <= 2))
                                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    									if (PaywayExists_FNC(H_Con, 1, Convert.ToInt16(L_Text)) == false) {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_UKBN, MC_ERRLOG_MITOUROKU);
    									}
    								} else {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_UKBN, MC_ERRLOG_INVALIDVALUE);
    								}
    							}
    							// If (IsNumeric_FNC(L_Text)) And (Len(L_Text) <= 2) Then
    							//     If PaywayExists_FNC(H_Con, 1, CShort(L_Text)) = False Then
    							//         SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_UKBN, MC_ERRLOG_MITOUROKU)
    							//     End If
    							// Else
    							//     SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_UKBN, MC_ERRLOG_INVALIDVALUE)
    							// End If
    							// <---
    						}
    					}
    
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_UKDAY]) == 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_UKIZ]);
    						L_Text = H_Data[G_Index_UKIZ].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text)) {
    							// Prj312--->
    							if (ChkControlChars_FNC(L_Text)) {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_UKIZ, MC_ERRLOG_SEIGYOMOJI);
    							} else {
    								if (ChkHiduke_FNC(L_Text) == true) {
    									if (Convert.ToInt32(L_Text) < L_Day) {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_UKIZ, MC_ERRLOG_INVALIDUKIZ);
    									}
    								} else {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_UKIZ, MC_ERRLOG_INVALIDDATE);
    								}
    							}
    							// If ChkHiduke_FNC(L_Text) = True Then
    							//     If CInt(L_Text) < L_Day Then
    							//         SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_UKIZ, MC_ERRLOG_INVALIDUKIZ)
    							//     End If
    							// Else
    							//     SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_UKIZ, MC_ERRLOG_INVALIDDATE)
    							// End If
    							// <---
    						}
    					}
    				}
                }
                #endregion

                #region ** 消込コード
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//                L_Text = Strings.Trim(H_Data[G_Index_DKEC]);
                L_Text = H_Data[G_Index_DKEC].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			if (!string.IsNullOrEmpty(L_Text))
                {
    				if (ChkControlChars_FNC(L_Text))
                    {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DKEC, MC_ERRLOG_SEIGYOMOJI);
    				}
                    else
                    {
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KKFLG]) != 1)
                        {
    						// 消込コードが入力されていて会社設定で消込コード：使用しない となっている場合、エラー
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DKEC, MC_ERRLOG_INVALIDNOUSE);
    					}
                        else
                        {
    						if (((L_KnameRow[0] != null)) && ((L_KnameRow[1] != null)))
                            {
    							// 桁数＆文字種チェックチェック
    							if (ChkCodeType_FNC(L_Text, Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KKTY])) == true)
                                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    								if (Strings.Len(L_Text) > Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KKLN]))
    								if (L_Text.Length > Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KKLN]))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DKEC, MC_ERRLOG_INVALIDLENGTH);
    								}
                                    else if (Convert.ToInt32(L_Text) == 0)
                                    {
    									// 消込コード0をチェック
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DKEC, MC_ERRLOG_INVALIDVALUE);
    								}
    							}
                                else
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DKEC, MC_ERRLOG_INVALIDCHAR);
    							}
    							// 複合形式(自動諸口)が選択されている場合
    							if (H_DFUK == 2)
                                {
    									// 貸借両諸口の場合はエラー
    									if ((((string)L_KnameRow[0][(int)eKNAME.KNAME_KICD] == "000000000001001" || (string)L_KnameRow[0][(int)eKNAME.KNAME_KICD] == "000000000001002")) &&
                                            (((string)L_KnameRow[1][(int)eKNAME.KNAME_KICD] == "000000000001001" || (string)L_KnameRow[1][(int)eKNAME.KNAME_KICD] == "000000000001002")))
                                        {
    										SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DKEC, MC_ERRLOG_INVAL_KKFLG_MISIYO);
    									}
                                        else
                                        {
    										// 借方のみ諸口の場合
    										if (((string)L_KnameRow[0][(int)eKNAME.KNAME_KICD] == "000000000001001" || (string)L_KnameRow[0][(int)eKNAME.KNAME_KICD] == "000000000001002"))
                                            {
    											// 貸方科目が消込コードを使用しない場合はエラー
    											if (Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_KK01]) == 0)
                                                {
    												SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DKEC, MC_ERRLOG_INVAL_KKFLG_MISIYO);
    											}    											
    										}
                                            // 貸方のみ諸口の場合
                                            else if (((string)L_KnameRow[1][(int)eKNAME.KNAME_KICD] == "000000000001001" || (string)L_KnameRow[1][(int)eKNAME.KNAME_KICD] == "000000000001002"))
                                            {
    											// 借方科目が消込コードを使用しない場合はエラー
    											if (Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_KK01]) == 0)
                                                {
    												SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DKEC, MC_ERRLOG_INVAL_KKFLG_MISIYO);
    											}
    										}
                                            // 両科目とも諸口でない場合
                                            else
                                            {    											
    											// 科目(貸借)の消込フラグ使用フラグが使用しないとなっている場合はエラー処理
    											if ((Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_KK01]) == 0 && Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_KK01]) == 0))
                                                {
    												// 消込コードが入力されているが会社設定で消込コードを使用しないとなっている場合はエラー処理
    												SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DKEC, MC_ERRLOG_INVAL_KKFLG_MISIYO);
    											}
    										}
    									}
    								// 複合形式(自動諸口)以外が選択されている場合
    							}
                                else
                                {
    								// 科目(貸借)の消込フラグ使用フラグが使用しないとなっている場合はエラー処理
    								if ((Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_KK01]) == 0 && Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_KK01]) == 0))
                                    {
    									// 消込コードが入力されているが会社設定で消込コードを使用しないとなっている場合はエラー処理
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_DKEC, MC_ERRLOG_INVAL_KKFLG_MISIYO);
    								}
    							}
    						}
    					}
    				}
                }
                #endregion

                #region ** 起票年月日
                if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KDAY]) == 1)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_KYMD]);
    				L_Text = H_Data[G_Index_KYMD].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text)) {
    					// Prj312--->
    					if (ChkControlChars_FNC(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KYMD, MC_ERRLOG_SEIGYOMOJI);
    					} else {
    						if (ChkHiduke_FNC(L_Text) == false) {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KYMD, MC_ERRLOG_INVALIDDATE);
    						}
    					}
    					// If ChkHiduke_FNC(L_Text) = False Then
    					//     SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_KYMD, MC_ERRLOG_INVALIDDATE)
    					// End If
    					// <---
    				}
    			} else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KDAY]) == 0)
                {
    				// 会社設定で起票年月日を使用しない設定で起票年月日を指定されていた場合はエラー処理
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_KYMD]);
    				L_Text = H_Data[G_Index_KYMD].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text)) {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KYMD, MC_ERRLOG_INVALIDNOUSE);
    				}
                }
                #endregion
                #region ** 起票部門
                if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KBMN]) == 1)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_KBMN]);
    				L_Text = H_Data[G_Index_KBMN].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text)) {
    					// Prj312--->
    					if (ChkControlChars_FNC(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KBMN, MC_ERRLOG_SEIGYOMOJI);
    					}
                        else
                        {
    						if (ChkCodeType_FNC(L_Text, Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_BMTY])) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) > Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMLN]))
    							if (L_Text.Length > Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMLN]))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KBMN, MC_ERRLOG_INVALIDLENGTH);
    							}
    						}
                            else
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KBMN, MC_ERRLOG_INVALIDCHAR);
    						}
                        }
                        #region 元からコメントアウト
                        // If ChkCodeType_FNC(L_Text, [(int)eVOLUM.VOLUM_BMTY)) = True Then
    					//     If Len(L_Text) > [(int)eVOLUM.VOLUM_BMLN) Then
    					//         SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_KBMN, MC_ERRLOG_INVALIDLENGTH)
    					//     End If
    					// Else
    					//     SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_KBMN, MC_ERRLOG_INVALIDCHAR)
    					// End If
    					// <---
    					// 起票部門未入力のチェック対応
    					// Prj312--->
    					// 起票部門未入力チェックをおこなわないように変更
                        // 変数に設定値を設定することでチェックの復活可能、現在は0固定
                        #endregion
                    }
                    else if (P_KIHYOBMN_MI > 0)
                    {
    					// ElseIf ChkKIHYOBMN_MI_FNC(H_Con) = True Then
    					// <---
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KBMN, MC_ERRLOG_MINYURYOKU);
    				}
    				// 会社設定で起票部門を使用しない設定で起票部門を指定された場合はエラー処理
    			}
                else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KBMN]) == 0)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_KBMN]);
    				L_Text = H_Data[G_Index_KBMN].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text)) {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KBMN, MC_ERRLOG_INVALIDNOUSE);
    				}
                }
                #endregion
                #region ** 起票者
                if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMAN]) == 1)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_KUSR]);
    				L_Text = H_Data[G_Index_KUSR].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text))
                    {
    					// Prj312--->
    					if (ChkControlChars_FNC(L_Text)) {
    						SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KUSR, MC_ERRLOG_SEIGYOMOJI);
    					} else {
    						if (ChkCodeType_FNC(L_Text, 1) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= 12)
    							if (L_Text.Length <= 12)
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								L_Text = EditCode_FNC(L_Text, "1", 12);
    								L_Rows = H_dtTantou.Select("TCOD = '" + L_Text + "'");
    								if (L_Rows.Length == 0)
                                    {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KUSR, MC_ERRLOG_MITOUROKU);
    								}
    								L_Rows = null;
    							}
                                else
                                {
    								SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KUSR, MC_ERRLOG_INVALIDLENGTH);
    							}
    						}
                            else
                            {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KUSR, MC_ERRLOG_INVALIDCHAR);
    						}
                        }
                        #region 元からコメントアウト
                        // If ChkCodeType_FNC(L_Text, 1) = True Then
    					//     If Len(L_Text) <= 12 Then
    					//         L_Text = EditCode_FNC(L_Text, 1, 12)
    					//         L_Rows = H_dtTantou.Select("TCOD = '" && L_Text && "'")
    					//         If L_Rows.Length = 0 Then
    					//             SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_KUSR, MC_ERRLOG_MITOUROKU)
    					//         End If
    					//         Erase L_Rows
    					//     Else
    					//         SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_KUSR, MC_ERRLOG_INVALIDLENGTH)
    					//     End If
    					// Else
    					//     SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_KUSR, MC_ERRLOG_INVALIDCHAR)
    					// End If
    					// <---
    					// 起票者未入力のチェック対応
    					// Prj312--->
    					// 起票者未入力チェックをおこなわないように変更
                        // 変数に設定値を設定することでチェックの復活可能、現在は0固定
                        #endregion
                    }
                    else if (P_KIHYOSYA_MI > 0)
                    {
    					// ElseIf ChkKIHYOSYA_MI_FNC(H_Con) = True Then
    					// <---
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KUSR, MC_ERRLOG_MINYURYOKU);
    				}
    				// 会社設定で起票者を使用しない設定で起票者を指定されていた場合はエラー処理
    			}
                else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMAN]) == 0)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_KUSR]);
    				L_Text = H_Data[G_Index_KUSR].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text)) {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_KUSR, MC_ERRLOG_INVALIDNOUSE);
    				}
                }
                #endregion
                #region ** 付箋番号
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//              L_Text = Strings.Trim(H_Data[G_Index_FSEN]);
                L_Text = H_Data[G_Index_FSEN].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			switch (L_Text) {
    				case "":
    					break;
    				case "0":
    				case "1":
    				case "2":
    				case "3":
    				case "4":
    				case "5":
    				case "6":
    				case "7":
    				case "8":
    				case "9":
    				case "10":
    					break;
    				default:
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_FSEN, MC_ERRLOG_INVALIDVALUE);
    					break;
                }
                #endregion
                #region ** 承認グループ（部署入力データの場合にチェックする）
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//              L_Text = Strings.Trim(H_Data[G_Index_SGNO]);
                L_Text = H_Data[G_Index_SGNO].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			if ((H_Kakutyo == true) && (!string.IsNullOrEmpty(L_Text))) {
    				// Prj312--->
    				if (ChkControlChars_FNC(L_Text)) {
    					SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SGNO, MC_ERRLOG_SEIGYOMOJI);
    				} else {
    					L_Flag = false;
    					if ((H_dtSnctl != null)) {
    						L_Rows = H_dtSnctl.Select("KESN = " + L_Kesn);
    						if (L_Rows.Length > 0) {
    							L_Flag = Convert.ToBoolean(Convert.ToInt32(L_Rows[0][(int)eSNCTL.SNCTL_SUSE]) != 0);
    						}
    						L_Rows = null;
    					}
    					if (L_Flag == true) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if ((IsNumeric_FNC(L_Text) == true) && (Strings.Len(L_Text) <= 4)) {
    						if ((IsNumeric_FNC(L_Text) == true) && (L_Text.Length <= 4))
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							if (Convert.ToInt32(L_Text) == 0) {
    							} else {
    								if (SngnmExists_FNC(H_Con, L_Kesn, Convert.ToInt32(L_Text)) == true) {
    									if (L_User >= 0) {
    										if (SnuseExists_FNC(H_Con, L_Kesn, L_User, Convert.ToInt32(L_Text)) == false) {
    											SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SGNO, "仕訳入力者として" + MC_ERRLOG_MITOUROKU);
    										}
    									}
    								} else {
    									SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SGNO, MC_ERRLOG_MITOUROKU);
    								}
    							}
    						} else {
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_SGNO, MC_ERRLOG_INVALIDVALUE);
    						}
    					}
                    }
                    #region 元からコメントアウト
                    // L_Flag = False
    				// If Not (H_dtSnctl Is Nothing) Then
    				//     L_Rows = H_dtSnctl.Select("KESN = " && L_Kesn)
    				//     If L_Rows.Length > 0 Then
    				//         L_Flag = CBool(L_Rows(0)[(int)eSNCTL.SNCTL_SUSE) <> 0)
    				//     End If
    				//     Erase L_Rows
    				// End If
    				// If L_Flag = True Then
    				//     If (IsNumeric_FNC(L_Text) = True) And (Len(L_Text) <= 4) Then
    				//         If CInt(L_Text) = 0 Then
    				//         Else
    				//             If SngnmExists_FNC(H_Con, L_Kesn, CInt(L_Text)) = True Then
    				//                 If L_User >= 0 Then
    				//                     If SnuseExists_FNC(H_Con, L_Kesn, L_User, CInt(L_Text)) = False Then
    				//                         SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_SGNO, "仕訳入力者として" && MC_ERRLOG_MITOUROKU)
    				//                     End If
    				//                 End If
    				//             Else
    				//                 SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_SGNO, MC_ERRLOG_MITOUROKU)
    				//             End If
    				//         End If
    				//     Else
    				//         SetErrLog_SUB(H_ErrLog, L_ErrCnt, H_Data, G_Index_SGNO, MC_ERRLOG_INVALIDVALUE)
    				//     End If
    				// End If
                    // <---
                    #endregion
                }
                #endregion

                #region ** 行区切り
                if (P_b_GsepFC)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if (P_b_GaikaFC) {
//    					//  外貨あり
//    					L_Text = Strings.Trim(H_Data[G_Index_GSEP]);
//    				} else {
//    					//  外貨なし
//    					L_Text = Strings.Trim(H_Data[G_Index_GSEP - 3]);
//    				}
                    if (P_b_GaikaFC)  // 外貨あり
                    {    					
    					L_Text = H_Data[G_Index_GSEP].Trim();
    				}
                    else              // 外貨なし
                    {    					
    					L_Text = H_Data[G_Index_GSEP - 3].Trim();
    				}
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				switch (L_Text) {
    					case "":
    						break;
    					case "1":
    						break;
    					default:
    						if (P_b_GaikaFC) {
    							//  外貨あり
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GSEP, MC_ERRLOG_INVALIDVALUE);
    						} else {
    							//  外貨なし
    							SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, H_Data, G_Index_GSEP - 3, MC_ERRLOG_INVALIDVALUE);
    						}
    						break;
    				}
                }
                #endregion

                #region 分離仕訳の未入力・未登録チェック
//  ↓ 分離仕訳事前未入力・未登録チェック対応 ↓
    			// 内部決算期・経過月
    			L_Flag = false;
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			L_Text = Strings.Trim(H_Data[G_Index_DYMD]);
    			L_Text = H_Data[G_Index_DYMD].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			L_Rows = H_dtVolum2.Select("SYMD <= " + L_Text + " AND EYMD >= " + L_Text, "KESN,CKEI");
    
    			switch (L_Rows.Length)
                {
    				case 1:
    					L_ZData.Kesn = Convert.ToInt16(L_Rows[0][(int)eVOLUM2.VOLUM2_KESN]);
    					L_ZData.Dkei = Convert.ToInt16(L_Rows[0][(int)eVOLUM2.VOLUM2_CKEI]);
    					break;
    				// L_Dymd = CInt(L_Text)
    				// L_Flag = True
    				default:
    					if (GetSeirituki_FNC(H_Data[G_Index_SEIRI], L_Rows, ref L_ZData.Kesn_h, ref L_ZData.Dkei_h) == true)
                        {
    						L_ZData.Kesn = L_ZData.Kesn_h;
    						L_ZData.Dkei = L_ZData.Dkei_h;
    						// L_Dymd = CInt(L_Text)
    						// L_Flag = True
    					}
    					break;
    			}
    			L_Rows = null;
    
    			//  借方
    			L_ZData.Rkmk = H_Data[G_Index_RKMK];
    			L_ZData.Rbmn = H_Data[G_Index_RBMN];
    			L_ZData.Rtor = H_Data[G_Index_RTOR];
    			L_ZData.Reda = H_Data[G_Index_REDA];
    			L_ZData.Rkoj = H_Data[G_Index_RKOJ];
    			L_ZData.Rkos = H_Data[G_Index_RKOS];
    			L_ZData.Rprj = H_Data[G_Index_RPRJ];
    			L_ZData.Rseg = H_Data[G_Index_RSEG];
    			L_ZData.Rdm1 = H_Data[G_Index_RDM1];
    			L_ZData.Rdm2 = H_Data[G_Index_RDM2];
    			L_ZData.Rdm3 = H_Data[G_Index_RDM3];
                L_ZData.Rzkb = Convert.ToInt16(H_Data[G_Index_RZKB]);    // 2020/04/27 Ver02.22.02 不具合対応
    
    			//  貸方
    			L_ZData.Skmk = H_Data[G_Index_SKMK];
    			L_ZData.Sbmn = H_Data[G_Index_SBMN];
    			L_ZData.Stor = H_Data[G_Index_STOR];
    			L_ZData.Seda = H_Data[G_Index_SEDA];
    			L_ZData.Skoj = H_Data[G_Index_SKOJ];
    			L_ZData.Skos = H_Data[G_Index_SKOS];
    			L_ZData.Sprj = H_Data[G_Index_SPRJ];
    			L_ZData.Sseg = H_Data[G_Index_SSEG];
    			L_ZData.Sdm1 = H_Data[G_Index_SDM1];
    			L_ZData.Sdm2 = H_Data[G_Index_SDM2];
    			L_ZData.Sdm3 = H_Data[G_Index_SDM3];
                L_ZData.Szkb = Convert.ToInt16(H_Data[G_Index_SZKB]);    // 2020/04/27 Ver02.22.02 不具合対応

                //  分離区分
// 2020/04/03 Ver02.20.03 科目未入力時の不具合対応 --->
//              L_ZData.Bkbn = Convert.ToInt16(H_Data[G_Index_BUNRI]);
                if (short.TryParse(H_Data[G_Index_BUNRI], out short nBunri))
                {
                    L_ZData.Bkbn = nBunri;
                }
                else
                {
                    L_ZData.Bkbn = 0;
                }
// <--- 2020/04/03 Ver02.20.03 科目未入力時の不具合対応

                H_SVolumKm = L_SVolumKm;
    
    			// 消費税マスタの0円消費税作成区分を取得
    			P_Int_ZERO = Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_ZERO]);
    
    			if ((!string.IsNullOrEmpty(H_Data[G_Index_BUNRI])) && (H_Data[G_Index_BUNRI] != "0") && (H_BunriOk_R == 1) && (P_ZeroSiwake[0] == 1))
                {
    				// If (H_BunriOk_R = 1) And (P_ZeroSiwake(0) = 1) Then
// ▼ ツルハ様カスタマイズ ▼
//    				if (ZData_Bunri_FNC(H_Con, ref L_ZData, L_ZData.Bkbn.ToString(), 0, Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY02]),
//                                      ref L_ZdataBunri, ref L_InpErr, ref L_RegErr, ref L_ValuOya, ref L_ValuZei, L_SvolumRow, H_dtKname, H_SVolumKm, L_VolumRow, ref H_ErrLog, L_GaikaKamoku_Sel,
//                                      P_Int_GaikaSyosu, ref L_GVal_Gai, ref L_GVal_Zei, ref L_GVal_Tai, L_PnUseDkec, ref H_Lno, ref L_ErrMsg))
                    if (ZData_Bunri_FNC(H_Con, ref L_ZData, L_ZData.Bkbn.ToString(), 0, Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY02]),
                                        ref L_ZdataBunri, ref L_InpErr, ref L_RegErr, ref L_ValuOya, ref L_ValuZei, L_SvolumRow, H_dtKname, H_SVolumKm, L_VolumRow, ref H_ErrLog, L_GaikaKamoku_Sel,
                                        P_Int_GaikaSyosu, ref L_GVal_Gai, ref L_GVal_Zei, ref L_GVal_Tai, L_PnUseDkec, ref H_Lno, ref L_ErrMsg, H_Touki))
// ▲ ツルハ様カスタマイズ ▲
                    {
    					//  処理続行
    				}
                    else
                    {
    					if (P_b_GaikaFC)
                        {
                            //  外貨あり
                            for (int i = 0; i < L_ErrMsg.Length; i++)
                            {
                                if (L_ErrMsg[i] != null)
                                {
                                    L_OyaVal[0] = Bunri_ErrVal[i];
                                    SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, L_OyaVal, G_Index_BUNRI, MC_ERRLOG_INVALIDCHILDZKMK + L_ErrMsg[i]);
                                }
                            }
    					}
                        else
                        {
                            //  外貨なし
                            for (int i = 0; i < L_ErrMsg.Length; i++)
                            {
                                L_OyaVal[0] = Bunri_ErrVal[i];
                                SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, L_OyaVal, G_Index_BUNRI - 3, MC_ERRLOG_INVALIDCHILDZKMK + L_ErrMsg);
                            }
    					}
    				}
    			}
                else if ((!string.IsNullOrEmpty(H_Data[G_Index_BUNRI])) && (H_Data[G_Index_BUNRI] != "0") && (H_BunriOk_S == 1) && (P_ZeroSiwake[1] == 1))
                {
    				// ElseIf (H_BunriOk_S = 1) And (P_ZeroSiwake(1) = 1) Then
// ▼ ツルハ様カスタマイズ ▼
//    				if (ZData_Bunri_FNC(H_Con, ref L_ZData, L_ZData.Bkbn.ToString(), 1, Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY02]), ref L_ZdataBunri,
//                                      ref L_InpErr, ref L_RegErr, ref L_ValuOya, ref L_ValuZei, L_SvolumRow, H_dtKname, H_SVolumKm, L_VolumRow, ref H_ErrLog, L_GaikaKamoku_Sel, P_Int_GaikaSyosu, ref L_GVal_Gai,
//                                      ref L_GVal_Zei, ref L_GVal_Tai, L_PnUseDkec, ref H_Lno, ref L_ErrMsg))
                    if (ZData_Bunri_FNC(H_Con, ref L_ZData, L_ZData.Bkbn.ToString(), 1, Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY02]), ref L_ZdataBunri,
                                        ref L_InpErr, ref L_RegErr, ref L_ValuOya, ref L_ValuZei, L_SvolumRow, H_dtKname, H_SVolumKm, L_VolumRow, ref H_ErrLog, L_GaikaKamoku_Sel, P_Int_GaikaSyosu, ref L_GVal_Gai,
                                        ref L_GVal_Zei, ref L_GVal_Tai, L_PnUseDkec, ref H_Lno, ref L_ErrMsg, H_Touki))
// ▲ ツルハ様カスタマイズ ▲
                    {
    					//  処理続行    
    				}
                    else
                    {
    					if (P_b_GaikaFC)
                        {
                            //  外貨あり
                            for (int i = 0; i < L_ErrMsg.Length; i++)
                            {
                                L_OyaVal[0] = Bunri_ErrVal[i];
                                SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, L_OyaVal, G_Index_BUNRI, MC_ERRLOG_INVALIDCHILDZKMK + L_ErrMsg);
                            }
    					}
                        else
                        {
                            //  外貨なし
                            for (int i = 0; i < L_ErrMsg.Length; i++)
                            {
                                L_OyaVal[0] = Bunri_ErrVal[i];
                                SetErrLog_SUB(ref H_ErrLog, ref L_ErrCnt, L_OyaVal, G_Index_BUNRI - 3, MC_ERRLOG_INVALIDCHILDZKMK + L_ErrMsg);
                            }
    					}
    				}
    			}
    			// End If
//  ↑ 分離仕訳事前未入力・未登録チェック対応 ↑
                #endregion

                // ** ここまでエラーがなければ、伝票番号退避
    			if (H_dtDcno == null)
                {
    			}
                else
                {
    				if ((L_ErrCnt == 0) && (L_Dcno != 0))
                    {
    					L_Rows = H_dtDcno.Select("KESN = " + L_Kesn + " AND DKEI = " + L_Dkei + " AND DCNO = " + L_Dcno + " AND DYMD = " + L_Dymd);
    					if (L_Rows.Length > 0)
                        {
    					}
                        else
                        {
    						L_NewRow = H_dtDcno.NewRow();
    						L_NewRow[(int)eDCNO.DCNO_KESN] = L_Kesn;
    						L_NewRow[(int)eDCNO.DCNO_DKEI] = L_Dkei;
    						L_NewRow[(int)eDCNO.DCNO_DCNO] = L_Dcno;
    						L_NewRow[(int)eDCNO.DCNO_DYMD] = L_Dymd;
    						H_dtDcno.Rows.Add(L_NewRow);
    					}
    					L_Rows = null;
    				}
    			}
    
    			functionReturnValue = L_ErrCnt;
    			// 貸借金額チェック用に課税区分を返送する処理を追加
    			H_Zkbn[0] = L_Zkbn[0];
    			H_Zkbn[1] = L_Zkbn[1];   
    		}
            catch (MyException ex)
            {
    			throw ex;
    		}
            catch (Exception e)  // 2020/02/27(デバッグ用追加)
            {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.ERROR, "ChkImpData_FNC" + e.Message);
                mLogger.LogClose();
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                return 1;
                throw e;                
    		}
    		return functionReturnValue;    
    	}

        /// <summary>
        /// 制御文字チェック
        /// </summary>
    	private bool ChkControlChars_FNC(string H_ChkString)
    	{
            // 文字列なし
    		if (string.IsNullOrEmpty(H_ChkString)) { return false; }

            #region VB.NET関数(コメントアウト)
//// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数対応 --->
//          // バックスペース文字
//          if (H_ChkString.IndexOf(ControlChars.Back) != -1)        { return true;  }
//    		// 復帰文字                                                              
//    		if (H_ChkString.IndexOf(ControlChars.Cr) != -1)          { return true;  }
//    		// 復帰文字とラインフィードの組み合わせ                                  
//    		if (H_ChkString.IndexOf(ControlChars.CrLf) != -1)        { return true;  }
//    		// フォームフィード文字                                                  
//    		if (H_ChkString.IndexOf(ControlChars.FormFeed) != -1)    { return true;  }
//    		// ラインフィード文字                                                    
//    		if (H_ChkString.IndexOf(ControlChars.Lf) != -1)          { return true;  }
//    		// 改行文字                                                              
//    		if (H_ChkString.IndexOf(ControlChars.NewLine) != -1)     { return true;  }
//    		// null文字                                                              
//    		if (H_ChkString.IndexOf(ControlChars.NullChar) != -1)    { return true;  }
//          #region 二重引用符文字(コメントアウト)
//          // '二重引用符文字
//    		// If H_ChkString.IndexOf(ControlChars.Quote) <> -1 Then
//    		//     Return True
//          // End If
//          #endregion                                           
//          // タブ文字                                                              
//    		if (H_ChkString.IndexOf(ControlChars.Tab) != -1)         { return true;  }
//    		// 垂直タブ文字                                                          
//    		if (H_ChkString.IndexOf(ControlChars.VerticalTab) != -1) { return true;  }
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数対応 
            #endregion

            // バックスペース文字
            if (H_ChkString.IndexOf("\b") != -1)   { return true; } 
            // 復帰文字                            
            if (H_ChkString.IndexOf("\r") != -1)   { return true; }
            // 復帰文字とラインフィードの組み合わせ
            if (H_ChkString.IndexOf("\r\n") != -1) { return true; }
            // フォームフィード文字(Windowsでは使用不可)
            if (H_ChkString.IndexOf("\f") != -1)   { return true; }
            // ラインフィード文字
            if (H_ChkString.IndexOf("\n") != -1)   { return true; }
            // null(値0を持つ)文字                 
            if (H_ChkString.IndexOf("\0") != -1)   { return true; }
            // タブ文字                            
            if (H_ChkString.IndexOf("\t") != -1)   { return true; }
            // 垂直タブ文字                        
            if (H_ChkString.IndexOf("\v") != -1)   { return true; }

            // 制御文字なし
            return false;
    	}
    
        // *===========================================================================================*
    	//    インポートデータセット
    	// *===========================================================================================*
    	private bool SetImpData_FNC(string[] H_Data, int H_DFUK, IDbConnection H_Con, short H_Touki, DataTable H_dtVolum, DataTable H_dtSvolum, DataTable H_dtJfctl, DataTable H_dtVolum2, DataTable H_dtKname,
                                    DataTable H_dtSubject, ref structZDATA H_Zdata, ref short H_Juse, bool H_Kakutyo, int H_BunriOK_R, int H_BunriOK_S, ref structZDATA H_ZDataBunri, structSVOLKM[] H_SVolumKm,
                                    ref structERRORLOG[] H_ErrLog, ref int H_ErrCnt, ref int H_GAIKAKamoku_Flg, ref int H_ZeroSiwake_R, ref int H_ZeroSiwake_S, ref int H_Lno, bool H_CsvFlg, int H_Wf,
                                    string H_Kakutei = "", DataTable H_dtSnctl = null)
        {
            #region 変数初期化
            bool functionReturnValue = false;
    
    		int             L_Dymd            = 0;
    		DataRow         L_VolumRow        = default(DataRow);
    		DataRow         L_SvolumRow       = default(DataRow);
    		DataRow[]       L_KnameRow        = new DataRow[2];
    		DataRow         L_KnameRowZ       = null;
    		DataRow[]       L_Rows            = null;
    		string          L_Text            = null;
    		short           L_CodeType        = 0;
    		short           L_CodeLen         = 0;
    		bool            L_Syonin          = false;
    		System.DateTime L_Kday            = default(System.DateTime);
    		bool            L_Flag            = false;
    		int             L_InpErr          = 0;
    		int             L_RegErr          = 0;
    		string          L_ValuOya         = null;
    		string          L_ValuZei         = null;
    
    
    		// 外貨システム初期設定を取得
    		DataRow[]       L_Rows_GaiCtl     = null;
    		bool            L_Gaikactl        = false;
    		// 該当仕訳行の伝票日付の属する処理期における、外貨システム初期設定の使用フラグ
    		int             L_HSSW            = 0;
    		// 端数処理
    		int             L_GaikaKamoku_Sel = 0;
            // 通貨コード
    		string          L_HEI_CD          = null;    		
    
    		decimal         L_GVal_Gai        = default(decimal);
    		decimal         L_GVal_Tai        = default(decimal);
    		decimal         L_GVal_Zei        = default(decimal);
    
    		short           L_PnUseDkec       = -1;
    
    		string[]        L_ErrMsg          = null;
            // 2019/06/24 Ver.01.19.01 urata
            #endregion

            try
            {
    			functionReturnValue = false;

                #region ** 内部決算期・経過月
                // 伝票日付・整理月をもとに割出
                L_Flag = false;
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			L_Text = Strings.Trim(H_Data[G_Index_DYMD]);
    			L_Text = H_Data[G_Index_DYMD].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			L_Rows = H_dtVolum2.Select("SYMD <= " + L_Text + " AND EYMD >= " + L_Text, "KESN,CKEI");
    			switch (L_Rows.Length)
                {
    				case 1:
    					H_Zdata.Kesn_h = Convert.ToInt16(L_Rows[0][(int)eVOLUM2.VOLUM2_KESN]);
    					H_Zdata.Dkei_h = Convert.ToInt16(L_Rows[0][(int)eVOLUM2.VOLUM2_CKEI]);
    					H_Zdata.Kesn   = H_Zdata.Kesn_h;
    					H_Zdata.Dkei   = H_Zdata.Dkei_h;
    					L_Dymd         = Convert.ToInt32(L_Text);
    					L_Flag         = true;
    					break;
    				default:
    					if (GetSeirituki_FNC(H_Data[G_Index_SEIRI], L_Rows, ref H_Zdata.Kesn_h, ref H_Zdata.Dkei_h) == true)
                        {
    						H_Zdata.Kesn = H_Zdata.Kesn_h;
    						H_Zdata.Dkei = H_Zdata.Dkei_h;
    						L_Dymd       = Convert.ToInt32(L_Text);
    						L_Flag       = true;
    					}
    					break;
    			}
    			L_Rows = null;
                #endregion
                #region ** 入力可能月チェック
                if (L_Flag == true)
                {
    				if ((H_Zdata.Kesn_h == H_Touki + 1) && (H_Zdata.Dkei > 60))
                    {
    					L_Flag = false;
    				}
                    else
                    {
    					L_Rows = H_dtVolum2.Select("KESN = " + H_Zdata.Kesn_h + " AND CKEI = " + H_Zdata.Dkei);
    					// Ver01.11.01 --> 月締め(FLG2)の判定を修正（SIASでは[1:仮締め、9:月締め]）
    					// If (L_Rows(0)[(int)eVOLUM2.VOLUM2_FLG1) = 1) Or (L_Rows(0)[(int)eVOLUM2.VOLUM2_FLG2) = 1) Then
    					if ((Convert.ToInt32(L_Rows[0][(int)eVOLUM2.VOLUM2_FLG1]) == 1) || (Convert.ToInt32(L_Rows[0][(int)eVOLUM2.VOLUM2_FLG2]) != 0))
                        {
    						L_Flag = false;
    					}
    					// Ver01.11.01 <--
    					L_Rows = null;
    				}
    			}    
    			// ** 入力可能年月に該当しない場合は、終了
    			if (L_Flag == false)
                {
    				return functionReturnValue;
                }
                #endregion

    			L_VolumRow  = H_dtVolum.Select( "KESN = " + H_Zdata.Kesn_h)[0];
    			L_SvolumRow = H_dtSvolum.Select("KESN = " + H_Zdata.Kesn_h)[0];    
    			L_Rows      = H_dtJfctl.Select( "KESN = " + H_Zdata.Kesn_h);
    			if (L_Rows.Length == 0)
                {
    				H_Juse = 0;
    			}
                else
                {
    				H_Juse = Convert.ToInt16(L_Rows[0][(int)eJFCTL.JFCTL_JUSE]);
    			}
    			L_Rows = null;

                #region 課税区分の頭0を削除
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//              L_Text = Strings.Trim(H_Data[G_Index_RZKB]).TrimStart('0');
//    			if (string.IsNullOrEmpty(L_Text) && Strings.Right(H_Data[G_Index_RZKB], 1) == "0") {
                L_Text = H_Data[G_Index_RZKB].Trim().TrimStart('0');
                if (string.IsNullOrEmpty(L_Text) && H_Data[G_Index_RZKB].ToString() == "0")
                {
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応

                        H_Data[G_Index_RZKB] = "0";
    			}
                else
                {
    				H_Data[G_Index_RZKB] = L_Text;
    			}

// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//                L_Text = Strings.Trim(H_Data[G_Index_SZKB]).TrimStart('0');
//    			if (string.IsNullOrEmpty(L_Text) && Strings.Right(H_Data[G_Index_SZKB], 1) == "0") {
                L_Text = H_Data[G_Index_SZKB].Trim().TrimStart('0');
                if (string.IsNullOrEmpty(L_Text) && H_Data[G_Index_SZKB].ToString() == "0")
                {
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応

                        H_Data[G_Index_SZKB] = "0";
    			}
                else
                {
    				H_Data[G_Index_SZKB] = L_Text;
                }
                #endregion

                #region DB書込み時に決定する
                // 伝票SEQ
                H_Zdata.Dseq_h = 0;    			
    			H_Zdata.Dseq = 0;    
    			// 仕訳SEQ
    			H_Zdata.Sseq = 0;    
    			// 親SEQ
    			H_Zdata.Pseq = 0;
                #endregion

                #region ** 親子フラグ
                if ((!string.IsNullOrEmpty(H_Data[G_Index_BUNRI])) && (H_Data[G_Index_BUNRI] != "0") && ((H_BunriOK_R == 1) || (H_BunriOK_S == 1))) {
    				// 分離仕訳が有るので、親フラグ
    				H_Zdata.Pflg = 1;
    				if (H_BunriOK_R == 1)
                    {
    					if (H_Data[G_Index_BUNRI] == "1")
                        {
    						switch (H_Data[G_Index_RZKB])
                            {
    							case "1":
    								H_Data[G_Index_RZKB] = "2";
    								break;
    							case "11":
    								H_Data[G_Index_RZKB] = "13";
    								break;
    							case "12":
    								H_Data[G_Index_RZKB] = "14";
    								break;
    							case "21":
    								H_Data[G_Index_RZKB] = "22";
    								break;
    							case "23":
    								H_Data[G_Index_RZKB] = "24";
    								break;
    							default:
    								H_Data[G_Index_RZKB] = "2";
    								break;
    						}
    					}
    				}
                    else if (H_BunriOK_S == 1)
                    {
    					if (H_Data[G_Index_BUNRI] == "1")
                        {
    						switch (H_Data[G_Index_SZKB])
                            {
    							case "1":
    								H_Data[G_Index_SZKB] = "2";
    								break;
    							case "11":
    								H_Data[G_Index_SZKB] = "13";
    								break;
    							case "12":
    								H_Data[G_Index_SZKB] = "14";
    								break;
    							case "21":
    								H_Data[G_Index_SZKB] = "22";
    								break;
    							case "23":
    								H_Data[G_Index_SZKB] = "24";
    								break;
    							default:
    								H_Data[G_Index_SZKB] = "2";
    								break;
    						}
    					}
    				}
    
    				H_Zdata.Bkbn = Convert.ToInt16(H_Data[G_Index_BUNRI]);
    			}
                else
                {
    				// 分離仕訳なし(単独)
    				H_Zdata.Pflg = 0;
    				H_Zdata.Bkbn = 0;
                }
                #endregion

                // ** 伝票日付
    			H_Zdata.Dymd_h = L_Dymd;

                #region ** 伝票番号
                H_Zdata.Dcno_h  = -1;
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//              L_Text = Strings.Trim(H_Data[G_Index_DCNO]);
                L_Text = H_Data[G_Index_DCNO].Trim();
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応
                H_Zdata.OrgDcno = L_Text;
    			// 自動付番使用しないとき
    			if (H_Juse == 0)
                {
    				if (!string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Dcno_h = Convert.ToInt32(L_Text);
    				}
    			}
                else
                {
    				//  自動付番使用で仕訳区分[41:ワークフロー]の時
    				if (H_Wf == 1)
                    {
    					H_Zdata.Duno_h = Convert.ToInt32(L_Text);
    				}    
    			}
                #endregion

                // ** グループ番号
                H_Zdata.Grno = 0;  // DB書込み時に決定    
    			// ** 伝票頁
    			H_Zdata.Dcpg = 1;    
    			// ** 行番号
    			H_Zdata.Dlin = 0;  // DB書込み時に決定

                #region ** 複合フラグ
                if (H_DFUK == 1)
                {
    				H_Zdata.Dfuk_h = 2;
    			}
                else if (H_DFUK == 0)
                {
    				H_Zdata.Dfuk_h = 1;
    			}
                else
                {
    				H_Zdata.Dfuk_h = (short)H_DFUK;
                }
                #endregion

                // ** 入力ジェネレータパターン
    			H_Zdata.Ijpt_h = (short)P_IJPT;

                #region ** ヘッダーフィールド
// Ver02.26.01 インボイス対応 --->
//                if (H_Lno == 1) {
                if (isNewLayout) { 
// <--- Ver02.26.01 インボイス対応 
    				// HF1
    				H_Zdata.Duf1_h  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF1FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF1TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF1LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF1SYLN]),  H_Data[G_Index_HF1],  H_CsvFlg);
    				// HF2                                                                                                                                                                                                                                                              
    				H_Zdata.Duf2_h  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF2FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF2TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF2LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF2SYLN]),  H_Data[G_Index_HF2],  H_CsvFlg);
    				// HF3                                                                                                                                                                                                                                                                                    
    				H_Zdata.Duf3_h  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF3FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF3TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF3LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF3SYLN]),  H_Data[G_Index_HF3],  H_CsvFlg);
    				// HF4                                                                                                                                                                                                                                                                                    
    				H_Zdata.Duf4_h  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF4FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF4TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF4LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF4SYLN]),  H_Data[G_Index_HF4],  H_CsvFlg);
    				// HF5                                                                                                                                                                                                                                                                                    
    				H_Zdata.Duf5_h  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF5FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF5TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF5LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF5SYLN]),  H_Data[G_Index_HF5],  H_CsvFlg);
    				// HF6                                                                                                                                                                                                                                                                                    
    				H_Zdata.Duf6_h  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF6FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF6TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF6LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF6SYLN]),  H_Data[G_Index_HF6],  H_CsvFlg);
    				// HF7                                                                                                                                                                                                                                                                                    
    				H_Zdata.Duf7_h  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF7FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF7TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF7LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF7SYLN]),  H_Data[G_Index_HF7],  H_CsvFlg);
    				// HF8                                                                                                                                                                                                                                                                                    
    				H_Zdata.Duf8_h  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF8FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF8TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF8LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF8SYLN]),  H_Data[G_Index_HF8],  H_CsvFlg);
    				// HF9                                                                                                                                                                                                                                                                                    
    				H_Zdata.Duf9_h  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF9FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF9TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF9LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF9SYLN]),  H_Data[G_Index_HF9],  H_CsvFlg);
    				// HF10
    				H_Zdata.Duf10_h = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF10FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF10TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF10LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_DUF10SYLN]), H_Data[G_Index_HF10], H_CsvFlg);
                }
                #endregion

                #region ** 借方／貸方部門
                H_Zdata.Rbmn = "";
    			H_Zdata.Sbmn = "";
    			if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMFLG]) == 1)
                {
    				L_CodeType = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_BMTY]);
    				L_CodeLen  = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_BMLN]);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_RBMN]);
    				L_Text = H_Data[G_Index_RBMN].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Rbmn = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_SBMN]);
    				L_Text = H_Data[G_Index_SBMN].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text)) {
    					H_Zdata.Sbmn = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
                }
                #endregion
                #region ** 借方／貸方取引先
                H_Zdata.Rtor = "";
    			H_Zdata.Stor = "";
    			if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRFLG]) == 1)
                {
    				L_CodeType = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_TRTY]);
    				L_CodeLen  = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_TRLN]);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_RTOR]);
    				L_Text = H_Data[G_Index_RTOR].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text)) {
    					H_Zdata.Rtor = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_STOR]);
    				L_Text = H_Data[G_Index_STOR].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text)) {
    					H_Zdata.Stor = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
                }
                #endregion
                #region ** 借方／貸方科目
                H_Zdata.Rkmk = "";
    			H_Zdata.Skmk = "";
    			L_CodeType   = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KMTY]);
    			L_CodeLen    = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KMLN]);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			L_Text       = EditCode_FNC(Strings.Trim(H_Data[G_Index_RKMK]), L_CodeType.ToString(), L_CodeLen);
    			L_Text       = EditCode_FNC(H_Data[G_Index_RKMK].Trim(), L_CodeType.ToString(), L_CodeLen);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			L_Rows       = H_dtKname.Select("KESN = " + H_Zdata.Kesn + " AND KCOD = '" + L_Text + "'");
    			if (L_Rows.Length > 0)
                {
    				L_KnameRow[0] = L_Rows[0];
    				H_Zdata.Rkmk  = (L_KnameRow[0][(int)eKNAME.KNAME_KICD]).ToString();
    			}
                else
                {
    				return functionReturnValue;
    				// 存在しない科目なら終了
    			}
    			L_Rows = null;
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			L_Text = EditCode_FNC(Strings.Trim(H_Data[G_Index_SKMK]), L_CodeType.ToString(), L_CodeLen);
    			L_Text = EditCode_FNC(H_Data[G_Index_SKMK].Trim(), L_CodeType.ToString(), L_CodeLen);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			L_Rows = H_dtKname.Select("KESN = " + H_Zdata.Kesn + " AND KCOD = '" + L_Text + "'");
    			if (L_Rows.Length > 0)
                {
    				L_KnameRow[1] = L_Rows[0];
    				H_Zdata.Skmk  = (L_KnameRow[1][(int)eKNAME.KNAME_KICD]).ToString();
    			}
                else
                {
    				return functionReturnValue;
    				// 存在しない科目なら終了
    			}
    			L_Rows = null;
                #endregion

                #region ** 外貨システム使用状況取得 **
                L_Gaikactl = false;
    			if (P_b_GaikaSUB == true && (P_GaiCtl != null))
                {
    				L_Rows_GaiCtl = P_GaiCtl.Select(" KESN = " + H_Zdata.Kesn + " AND F_USE = 1 ");
    				if (L_Rows_GaiCtl.Length > 0)
                    {
    					L_Gaikactl = true;
    					L_HSSW     = Convert.ToInt32(L_Rows_GaiCtl[0].ItemArray[2]);

// Ver02.26.01 インボイス対応
//    					if (H_Lno == 1) {
                        if (isNewLayout) { 
// <--- Ver02.26.01 インボイス対応

    						L_HEI_CD = EditImpString_FNC(H_Data[G_Index_HEIC], H_CsvFlg, 2);
    					}
    					L_GaikaKamoku_Sel = ChkGaika_Siwake_FNC(H_Con, H_Zdata.Kesn.ToString(), H_Zdata.Rkmk, H_Zdata.Skmk, ref L_HEI_CD);
    					H_GAIKAKamoku_Flg = L_GaikaKamoku_Sel;
    				}
    			}
                else
                {
    				L_Gaikactl        = false;
    				H_GAIKAKamoku_Flg = 0;
                }
                #endregion

                #region ** 貸借属性
                H_Zdata.Dflg = 0;
    			if (H_DFUK == 0 || H_DFUK == 1)
                {
    				// □■□単一形式□■□
    				H_Zdata.Dflg = 0;
    			}
                else
                {
    				// □■□複合形式□■□
    				// 貸借両科目が諸口でない場合
    				if (!((H_Zdata.Rkmk == "000000000001001" || H_Zdata.Rkmk == "000000000001002") || (H_Zdata.Skmk == "000000000001001" || H_Zdata.Skmk == "000000000001002")))
                    {
    					H_Zdata.Dflg = 0;
    				}
                    else
                    {
                        // 借方が諸口
    					if (H_Zdata.Rkmk == "000000000001001" || H_Zdata.Rkmk == "000000000001002")
                        {    						
    						H_Zdata.Dflg = 2;
    					}
                        // 貸方が諸口
                        else
                        {    						
    						H_Zdata.Dflg = 1;
    					}
    				}
    				if (H_Zdata.Dflg == 2)
                    {
    					if (string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RBMN], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RTOR], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_REDA], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RKOJ], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KJTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RKOS], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KSTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RPRJ], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_PJTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RSEG], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM1], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1TY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM2], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2TY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM3], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3TY]))) == false ||
                            string.IsNullOrEmpty(H_Data[G_Index_RTNO]) == false)
                        {
    						H_Zdata.Dflg = 0;
    					}
// Ver02.26.01 インボイス対応 --->
//                      else if (H_Lno == 1) {
                        else if (isNewLayout) { 
// <--- Ver02.26.01 インボイス対応

    						if (string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM4],  H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D4TY])))  == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM5],  H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D5TY])))  == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM6],  H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D6TY])))  == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM7],  H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D7TY])))  == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM8],  H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D8TY])))  == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM9],  H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D9TY])))  == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM10], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D10TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM11], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D11TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM12], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D12TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM13], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D13TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM14], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D14TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM15], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D15TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM16], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D16TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM17], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D17TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM18], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D18TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM19], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D19TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_RDM20], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D20TY]))) == false )
                            {
    							H_Zdata.Dflg = 0;
    						}
    					}
    				}
    				if (H_Zdata.Dflg == 1)
                    {
    					if (string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SBMN], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_STOR], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SEDA], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SKOJ], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KJTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SKOS], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KSTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SPRJ], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_PJTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SSEG], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGTY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM1], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1TY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM2], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2TY]))) == false ||
                            string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM3], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3TY]))) == false ||
                            string.IsNullOrEmpty(H_Data[G_Index_STNO]) == false)
                        {
    						H_Zdata.Dflg = 0;
    					}
// Ver02.26.01 インボイス対応 --->
//                      else if (H_Lno == 1) {
                        else if (isNewLayout) { 
// <--- Ver02.26.01 インボイス対応

    						if (string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM4],  H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D4TY])))  == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM5],  H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D5TY])))  == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM6],  H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D6TY])))  == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM7],  H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D7TY])))  == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM8],  H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D8TY])))  == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM9],  H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D9TY])))  == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM10], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D10TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM11], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D11TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM12], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D12TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM13], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D13TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM14], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D14TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM15], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D15TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM16], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D16TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM17], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D17TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM18], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D18TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM19], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D19TY]))) == false ||
                                string.IsNullOrEmpty(EditImpString_FNC(H_Data[G_Index_SDM20], H_CsvFlg, Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D20TY]))) == false )
                            {
    							H_Zdata.Dflg = 0;
    						}
    					}
    				}
                }
                #endregion

                #region ** 借方／貸方枝番
                H_Zdata.Reda = "";
    			H_Zdata.Seda = "";
    			if (Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_EDFLG]) == 1)
                {
    				L_CodeType  = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_EDTY]);
    				L_CodeLen   = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_EDLN]);
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//    				L_Text      = Strings.Trim(H_Data[G_Index_REDA]);
                    L_Text = (H_Data[G_Index_REDA]).Trim();
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応
                    if (!string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Reda = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//                  L_Text = Strings.Trim(H_Data[G_Index_SEDA]);
                    L_Text = (H_Data[G_Index_SEDA]).Trim();
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応
                    if (!string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Seda = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
                }
                #endregion
                #region ** 借方／貸方工事
                H_Zdata.Rkoj = "";
    			H_Zdata.Skoj = "";
    			if (Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KJFLG]) == 1)
                {
    				L_CodeType = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KJTY]);
    				L_CodeLen  = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KJLN]);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text     = Strings.Trim(H_Data[G_Index_RKOJ]);
    				L_Text     = H_Data[G_Index_RKOJ].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text)) {
    					H_Zdata.Rkoj = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_SKOJ]);
    				L_Text = H_Data[G_Index_SKOJ].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text)) {
    					H_Zdata.Skoj = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
                }
                #endregion
                #region ** 借方／貸方工種
                H_Zdata.Rkos = "";
    			H_Zdata.Skos = "";
    			if (Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KSFLG]) == 1)
                {
    				L_CodeType = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KSTY]);
    				L_CodeLen  = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_KSLN]);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text     = Strings.Trim(H_Data[G_Index_RKOS]);
    				L_Text     = H_Data[G_Index_RKOS].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text)) {
    					H_Zdata.Rkos = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_SKOS]);
    				L_Text = H_Data[G_Index_SKOS].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Skos = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
                }
                #endregion
                #region ** 借方／貸方プロジェクト
                H_Zdata.Rprj = "";
    			H_Zdata.Sprj = "";
    			if (Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_PJFLG]) == 1)
                {
    				L_CodeType = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_PJTY]);
    				L_CodeLen  = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_PJLN]);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text     = Strings.Trim(H_Data[G_Index_RPRJ]);
    				L_Text     = H_Data[G_Index_RPRJ].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Rprj = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_SPRJ]);
    				L_Text = H_Data[G_Index_SPRJ].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Sprj = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
                }
                #endregion
                #region ** 借方／貸方セグメント
                H_Zdata.Rseg = "";
    			H_Zdata.Sseg = "";
    			if (Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_SGFLG]) == 1)
                {
    				L_CodeType = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_SGTY]);
    				L_CodeLen  = Convert.ToInt16(L_VolumRow[(int)eVOLUM.VOLUM_SGLN]);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text     = Strings.Trim(H_Data[G_Index_RSEG]);
    				L_Text     = H_Data[G_Index_RSEG].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Rseg = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_SSEG]);
    				L_Text = H_Data[G_Index_SSEG].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Sseg = EditCode_FNC(L_Text, L_CodeType.ToString(), L_CodeLen);
    				}
                }
                #endregion

                #region ** 借方／貸方ユニバーサル
                // UF1
    			H_Zdata.Rdm1 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1SYLN]), H_Data[G_Index_RDM1], H_CsvFlg);
    			H_Zdata.Sdm1 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1SYLN]), H_Data[G_Index_SDM1], H_CsvFlg);
    			// UF2
    			H_Zdata.Rdm2 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2SYLN]), H_Data[G_Index_RDM2], H_CsvFlg);
    			H_Zdata.Sdm2 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2SYLN]), H_Data[G_Index_SDM2], H_CsvFlg);
    			// UF3
    			H_Zdata.Rdm3 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3SYLN]), H_Data[G_Index_RDM3], H_CsvFlg);
    			H_Zdata.Sdm3 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3SYLN]), H_Data[G_Index_SDM3], H_CsvFlg);
    			
// Ver02.26.01 インボイス対応 --->                
//              if (H_Lno == 1) {
                if (isNewLayout) {
// <--- Ver02.26.01 インボイス対応
    				// UF4
    				H_Zdata.Rdm4  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D4FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D4TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D4LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D4SYLN]),  H_Data[G_Index_RDM4],  H_CsvFlg);
    				H_Zdata.Sdm4  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D4FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D4TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D4LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D4SYLN]),  H_Data[G_Index_SDM4],  H_CsvFlg);
    				// UF5                                                                                                                                                                                                                                                                           
    				H_Zdata.Rdm5  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D5FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D5TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D5LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D5SYLN]),  H_Data[G_Index_RDM5],  H_CsvFlg);
    				H_Zdata.Sdm5  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D5FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D5TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D5LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D5SYLN]),  H_Data[G_Index_SDM5],  H_CsvFlg);
    				// UF6                                                                                                                                                                                                                                                                           
    				H_Zdata.Rdm6  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D6FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D6TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D6LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D6SYLN]),  H_Data[G_Index_RDM6],  H_CsvFlg);
    				H_Zdata.Sdm6  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D6FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D6TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D6LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D6SYLN]),  H_Data[G_Index_SDM6],  H_CsvFlg);
    				// UF7                                                                                                                                                                                                                                                                           
    				H_Zdata.Rdm7  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D7FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D7TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D7LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D7SYLN]),  H_Data[G_Index_RDM7],  H_CsvFlg);
    				H_Zdata.Sdm7  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D7FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D7TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D7LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D7SYLN]),  H_Data[G_Index_SDM7],  H_CsvFlg);
    				// UF8                                                                                                                                                                                                                                                                           
    				H_Zdata.Rdm8  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D8FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D8TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D8LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D8SYLN]),  H_Data[G_Index_RDM8],  H_CsvFlg);
    				H_Zdata.Sdm8  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D8FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D8TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D8LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D8SYLN]),  H_Data[G_Index_SDM8],  H_CsvFlg);
    				// UF9                                                                                                                                                                                                                                                                           
    				H_Zdata.Rdm9  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D9FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D9TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D9LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D9SYLN]),  H_Data[G_Index_RDM9],  H_CsvFlg);
    				H_Zdata.Sdm9  = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D9FLG]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D9TY]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D9LN]),  Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D9SYLN]),  H_Data[G_Index_SDM9],  H_CsvFlg);
    				// UF10
    				H_Zdata.Rdm10 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D10FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D10TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D10LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D10SYLN]), H_Data[G_Index_RDM10], H_CsvFlg);
    				H_Zdata.Sdm10 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D10FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D10TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D10LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D10SYLN]), H_Data[G_Index_SDM10], H_CsvFlg);
    				// UF11
    				H_Zdata.Rdm11 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D11FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D11TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D11LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D11SYLN]), H_Data[G_Index_RDM11], H_CsvFlg);
    				H_Zdata.Sdm11 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D11FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D11TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D11LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D11SYLN]), H_Data[G_Index_SDM11], H_CsvFlg);
    				// UF12
    				H_Zdata.Rdm12 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D12FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D12TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D12LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D12SYLN]), H_Data[G_Index_RDM12], H_CsvFlg);
    				H_Zdata.Sdm12 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D12FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D12TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D12LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D12SYLN]), H_Data[G_Index_SDM12], H_CsvFlg);
    				// UF13
    				H_Zdata.Rdm13 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D13FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D13TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D13LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D13SYLN]), H_Data[G_Index_RDM13], H_CsvFlg);
    				H_Zdata.Sdm13 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D13FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D13TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D13LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D13SYLN]), H_Data[G_Index_SDM13], H_CsvFlg);
    				// UF14
    				H_Zdata.Rdm14 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D14FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D14TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D14LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D14SYLN]), H_Data[G_Index_RDM14], H_CsvFlg);
    				H_Zdata.Sdm14 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D14FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D14TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D14LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D14SYLN]), H_Data[G_Index_SDM14], H_CsvFlg);
    				// UF15
    				H_Zdata.Rdm15 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D15FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D15TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D15LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D15SYLN]), H_Data[G_Index_RDM15], H_CsvFlg);
    				H_Zdata.Sdm15 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D15FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D15TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D15LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D15SYLN]), H_Data[G_Index_SDM15], H_CsvFlg);
    				// UF16
    				H_Zdata.Rdm16 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D16FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D16TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D16LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D16SYLN]), H_Data[G_Index_RDM16], H_CsvFlg);
    				H_Zdata.Sdm16 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D16FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D16TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D16LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D16SYLN]), H_Data[G_Index_SDM16], H_CsvFlg);
    				// UF17
    				H_Zdata.Rdm17 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D17FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D17TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D17LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D17SYLN]), H_Data[G_Index_RDM17], H_CsvFlg);
    				H_Zdata.Sdm17 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D17FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D17TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D17LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D17SYLN]), H_Data[G_Index_SDM17], H_CsvFlg);
    				// UF18
    				H_Zdata.Rdm18 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D18FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D18TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D18LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D18SYLN]), H_Data[G_Index_RDM18], H_CsvFlg);
    				H_Zdata.Sdm18 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D18FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D18TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D18LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D18SYLN]), H_Data[G_Index_SDM18], H_CsvFlg);
    				// UF19
    				H_Zdata.Rdm19 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D19FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D19TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D19LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D19SYLN]), H_Data[G_Index_RDM19], H_CsvFlg);
    				H_Zdata.Sdm19 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D19FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D19TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D19LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D19SYLN]), H_Data[G_Index_SDM19], H_CsvFlg);
    				// UF20
    				H_Zdata.Rdm20 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D20FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D20TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D20LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D20SYLN]), H_Data[G_Index_RDM20], H_CsvFlg);
    				H_Zdata.Sdm20 = SetImpHfUf_FNC(Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D20FLG]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D20TY]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D20LN]), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D20SYLN]), H_Data[G_Index_SDM20], H_CsvFlg);
                }
                #endregion

                #region 借方／貸方摘要
                if (H_Lno == 0)         // de3レイアウトの場合は貸借共通摘要固定
                {    				
    				H_Zdata.Tekiflg = 0;
    				DelDoubleQuote_FNC(H_Data[G_Index_RTKY], true, ref H_Zdata.Rtky);
    				H_Zdata.Stky = H_Zdata.Rtky;
    			}
// Ver02.26.01 インボイス対応 --->
//              else if (H_Lno == 1) {
                else if (isNewLayout) { // SIAS(新・旧)レイアウトの場合、貸借別摘要フラグ(TKFLG)参照
// <--- Ver02.26.01 インボイス対応

    				// 摘要フラグ
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_TKFLG]);
    				L_Text = H_Data[G_Index_TKFLG].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Tekiflg = 0;
    				}
                    else
                    {
    					H_Zdata.Tekiflg = Convert.ToInt16(L_Text);
    				}

    				if (H_Zdata.Tekiflg == 0)
                    {
    					// 貸借共通摘要の場合は借方摘要を貸方摘要に代入
    					DelDoubleQuote_FNC(H_Data[G_Index_RTKY], true, ref H_Zdata.Rtky);
    					H_Zdata.Stky = H_Zdata.Rtky;
    				}
                    else
                    {
    					if (H_Zdata.Dflg == 0)
                        {
    						// 1仕訳の場合は貸借それぞれの摘要をセット
    						DelDoubleQuote_FNC(H_Data[G_Index_RTKY], true, ref H_Zdata.Rtky);
    						DelDoubleQuote_FNC(H_Data[G_Index_STKY], true, ref H_Zdata.Stky);
    					}
                        else if (H_Zdata.Dflg == 1)
                        {
                            // 借方仕訳の場合は借方のみ摘要を振付け、貸方は摘要なし
                            DelDoubleQuote_FNC(H_Data[G_Index_RTKY], true, ref H_Zdata.Rtky);
                            H_Zdata.Stky = "";
                        }
                        else if (H_Zdata.Dflg == 2)
                        {
                            // 貸方仕訳の場合は貸方のみ摘要を振付け、借方は摘要なし
                            H_Zdata.Rtky = "";
                            DelDoubleQuote_FNC(H_Data[G_Index_STKY], true, ref H_Zdata.Stky);
                        }
    				}
                }
                #endregion
                #region ** 借方／貸方摘要コード
                H_Zdata.Rtno = -1;
    			H_Zdata.Stno = -1;
    			if (H_Lno == 0)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_RTNO]);
    				L_Text = H_Data[G_Index_RTNO].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (string.IsNullOrEmpty(L_Text) == false)
                    {
    					H_Zdata.Rtno = Convert.ToInt16(L_Text);
    				}
    				H_Zdata.Stno = H_Zdata.Rtno;
    			}
// Ver02.26.01 インボイス対応 --->
//              else if (H_Lno == 1) {
                else if (isNewLayout) { 
// <--- Ver02.26.01 インボイス対応

    				if (H_Zdata.Dflg == 0)
                    {
    					// 1仕訳の場合は貸借それぞれの摘要コードをセット
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Text = Strings.Trim(H_Data[G_Index_RTNO]);
    					L_Text = H_Data[G_Index_RTNO].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					if (string.IsNullOrEmpty(L_Text) == false)
                        {
    						H_Zdata.Rtno = Convert.ToInt16(L_Text);
    					}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Text = Strings.Trim(H_Data[G_Index_STNO]);
    					L_Text = H_Data[G_Index_STNO].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					if (string.IsNullOrEmpty(L_Text) == false)
                        {
    						H_Zdata.Stno = Convert.ToInt16(L_Text);
    					}
    				}
                    else if (H_Zdata.Dflg == 1)
                    {
    					// 借方仕訳の場合は借方のみ摘要コードを振付け、貸方は摘要コードなし
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Text = Strings.Trim(H_Data[G_Index_RTNO]);
    					L_Text = H_Data[G_Index_RTNO].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					if (string.IsNullOrEmpty(L_Text) == false)
                        {
    						H_Zdata.Rtno = Convert.ToInt16(L_Text);
    					}
    				}
                    else if (H_Zdata.Dflg == 2)
                    {
    					// 貸方仕訳の場合は貸方のみ摘要コードを振付け、借方は摘要コードなし
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Text = Strings.Trim(H_Data[G_Index_STNO]);
    					L_Text = H_Data[G_Index_STNO].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					if (string.IsNullOrEmpty(L_Text) == false)
                        {
    						H_Zdata.Stno = Convert.ToInt16(L_Text);
    					}
    				}
                }
                #endregion

                #region ** 借方／貸方イメージ№
                H_Zdata.Rimg = 0;
    			H_Zdata.Simg = 0;
                #endregion

                // ** 税込金額
    			H_Zdata.Zkvl = 0;

                #region ** 外貨関連 **
                if (H_Data.Length > 57)
                {
                    #region **** 通貨コード
                    if (L_GaikaKamoku_Sel == 1)
                    {
    					H_Zdata.Rhei_cd = "";
    					H_Zdata.Shei_cd = L_HEI_CD;
    				}
                    else if (L_GaikaKamoku_Sel == 2)
                    {
    					H_Zdata.Rhei_cd = L_HEI_CD;
    					H_Zdata.Shei_cd = "";
    				}
                    else if (L_GaikaKamoku_Sel == 3)
                    {
    					H_Zdata.Rhei_cd = L_HEI_CD;
    					H_Zdata.Shei_cd = L_HEI_CD;
    				}
                    else
                    {
    					H_Zdata.Rhei_cd = "";
    					H_Zdata.Shei_cd = "";
                    }
                    #endregion
                    #region **** レート
                    if (string.IsNullOrEmpty(H_Data[G_Index_RATE]))
                    {
    					H_Zdata.Rate = 0;
    				}
                    else
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					H_Zdata.Rate = Convert.ToDecimal(Strings.Trim(H_Data[G_Index_RATE]));
    					H_Zdata.Rate = Convert.ToDecimal(H_Data[G_Index_RATE].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                    }
                    #endregion
                    #region **** 外貨対価金額
                    if (string.IsNullOrEmpty(H_Data[G_Index_GEXVL]))
                    {
    					H_Zdata.Gexvl = 0;
    				}
                    else
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					H_Zdata.Gexvl = Convert.ToDecimal(Strings.Trim(H_Data[G_Index_GEXVL]));
    					H_Zdata.Gexvl = Convert.ToDecimal(H_Data[G_Index_GEXVL].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                    }
                    #endregion
                    #region **** 外貨金額
                    if (string.IsNullOrEmpty(H_Data[G_Index_GAIKA]))
                    {
    					H_Zdata.Gaika = 0;
    				}
                    else
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					H_Zdata.Gaika = Convert.ToDecimal(Strings.Trim(H_Data[G_Index_GAIKA]));
    					H_Zdata.Gaika = Convert.ToDecimal(H_Data[G_Index_GAIKA].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				}
                    #endregion
    			}
                else
                {
    				if (P_b_GaikaTable_Flg == true)
                    {
    					H_Zdata.Rhei_cd = "";
    					H_Zdata.Shei_cd = "";
    					H_Zdata.Rate    = 0;
    					H_Zdata.Gexvl   = 0;
    					H_Zdata.Gaika   = 0;
    				}
                }
                #endregion

                // ** 金額
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//              H_Zdata.Valu = Convert.ToDecimal(Strings.Trim(H_Data[G_Index_VALU]));
                H_Zdata.Valu = Convert.ToDecimal((H_Data[G_Index_VALU]).Trim());
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応

                #region 消費税関連
                // ** 消費税使用する場合
                if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SYFLG]) == 1)
                {    				
    				// ** 借方課税区分・税率
    				switch (Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY01]))
                    {
    					case 0:
    					case 1:
    						H_Zdata.Rzkb = 100;
    						H_Zdata.Rrit = -1;
    						H_Zdata.Rkeigen = "0";
    						// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    						break;
    					default:
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						H_Zdata.Rzkb = Convert.ToInt16(Strings.Trim(H_Data[G_Index_RZKB]));
    						H_Zdata.Rzkb = Convert.ToInt16(H_Data[G_Index_RZKB].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						switch (Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY01]))
                            {
    							case 21:
    							case 22:
    								L_Flag = true;
    								break;
    							default:
    								switch (H_Zdata.Rzkb) {
    									// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    									// Case 1, 2, 11, 12, 13, 14, 21, 22, 23, 24, 31
    									case 1:
    									case 2:
    									case 11:
    									case 12:
    									case 13:
    									case 14:
    									case 21:
    									case 22:
    									case 23:
    									case 24:
    									case 31:
    									case 61:
    									case 62:
    										// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    										L_Flag = true;
    										break;
    									default:
    										L_Flag = false;
    										break;
    								}
    								break;
    						}
    						if (L_Flag == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (string.IsNullOrEmpty(Strings.Trim(H_Data[G_Index_RRIT])))
    							if (string.IsNullOrEmpty(H_Data[G_Index_RRIT].Trim()))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								H_Zdata.Rrit    = -1;
    								H_Zdata.Rkeigen = "0";
    								// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    							}
                                else
                                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    								H_Zdata.Rrit = Convert.ToInt32(Convert.ToDecimal(Strings.Trim(H_Data[G_Index_RRIT])) * 10000);
    								H_Zdata.Rrit = Convert.ToInt32(Convert.ToDecimal(H_Data[G_Index_RRIT].Trim()) * 10000);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								// <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    								if (P_Keigen == 2) {
    									// 「税率の扱い：2」の場合は、セットされた値を使用
    									H_Zdata.Rkeigen = H_Data[G_Index_RKEIGEN];
    								} else if (P_Keigen == 1) {
    									// 「税率の扱い：1」の場合は、税率が8％かつ税率の開始年月日以降であれば軽減税率
    									if ((H_Data[G_Index_RRIT] == "8" || H_Data[G_Index_RRIT] == "8.00") && L_Dymd >= int.Parse(SRITU_Rows[0][(int)eSRITU.SRITU_SYMD].ToString()))
                                        {
    										H_Zdata.Rkeigen = "1";
    									}
                                        else 
                                        {
    										H_Zdata.Rkeigen = "0";
    									}
    								}
                                    else
                                    {
    									H_Zdata.Rkeigen = "0";
    								}
    								// --->Ver01.16.02
    							}
    						} else {
    							H_Zdata.Rrit    = -1;
    							H_Zdata.Rkeigen = "0";
    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    						}
    						break;
    				}
    
    				// ** 貸方課税区分・税率
    				switch (Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY01]))
                    {
    					case 0:
    					case 1:
    						H_Zdata.Szkb    = 100;
    						H_Zdata.Srit    = -1;
    						H_Zdata.Skeigen = "0";
    						// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    						break;
    					default:
    						if (string.IsNullOrEmpty(H_Data[G_Index_SZKB])) {
    							H_Zdata.Szkb = 100;
    						} else {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							H_Zdata.Szkb = Convert.ToInt16(Strings.Trim(H_Data[G_Index_SZKB]));
    							H_Zdata.Szkb = Convert.ToInt16(H_Data[G_Index_SZKB].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						}
    						switch (Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY01]))
                            {
    							case 21:
    							case 22:
    								L_Flag = true;
    								break;
    							default:
    								switch (H_Zdata.Szkb) {
    									// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    									// Case 1, 2, 11, 12, 13, 14, 21, 22, 23, 24, 31
    									case 1:
    									case 2:
    									case 11:
    									case 12:
    									case 13:
    									case 14:
    									case 21:
    									case 22:
    									case 23:
    									case 24:
    									case 31:
    									case 61:
    									case 62:
    										// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    										L_Flag = true;
    										break;
    									default:
    										L_Flag = false;
    										break;
    								}
    								break;
    						}
    						if (L_Flag == true) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (string.IsNullOrEmpty(Strings.Trim(H_Data[G_Index_SRIT])))
    							if (string.IsNullOrEmpty(H_Data[G_Index_SRIT].Trim()))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								H_Zdata.Srit    = -1;
    								H_Zdata.Skeigen = "0";
    								// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    							}
                                else
                                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    								H_Zdata.Srit = Convert.ToInt32(Convert.ToDecimal(Strings.Trim(H_Data[G_Index_SRIT])) * 10000);
    								H_Zdata.Srit = Convert.ToInt32(Convert.ToDecimal(H_Data[G_Index_SRIT].Trim()) * 10000);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								// <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    								if (P_Keigen == 2)
                                    {
    									// 「税率の扱い：2」の場合は、セットされた値を使用
    									H_Zdata.Skeigen = H_Data[G_Index_SKEIGEN];
    								}
                                    else if (P_Keigen == 1)
                                    {
    									// 「税率の扱い：1」の場合は、税率が8％かつ税率の開始年月日以降であれば軽減税率
    									if ((H_Data[G_Index_SRIT] == "8" || H_Data[G_Index_SRIT] == "8.00") && L_Dymd >= int.Parse(SRITU_Rows[0][(int)eSRITU.SRITU_SYMD].ToString()))
                                        {
    										H_Zdata.Skeigen = "1";
    									}
                                        else
                                        {
    										H_Zdata.Skeigen = "0";
    									}
    								}
                                    else 
                                    {
    									H_Zdata.Skeigen = "0";
    								}
    								// --->Ver01.16.02
    							}
    						} else {
    							H_Zdata.Srit    = -1;
    							H_Zdata.Skeigen = "0";
    							// Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    						}
    						break;
    				}
    
    				// ** 借方／貸方業種区分
    				H_Zdata.Rgyo = 0;
    				H_Zdata.Sgyo = 0;
    				switch (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]))
                    {
    					case 11:
    					case 12:
    					case 13:
    					case 14:
    					case 15:
    					case 16:
    						switch (Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY01]))
                            {
    							case 2:
    							case 3:
    							case 4:
    							case 7:
    							case 8:
    							case 9:
    								switch (H_Zdata.Rzkb) {
    									case 1:
    									case 2:
    									case 3:
    									case 12:
    									case 14:
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    										H_Zdata.Rgyo = Convert.ToInt16(Strings.Trim(H_Data[G_Index_RGYO]));
    										H_Zdata.Rgyo = Convert.ToInt16(H_Data[G_Index_RGYO].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    										break;
    								}
    								break;
    						}
    						switch (Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY01]))
                            {
    							case 2:
    							case 3:
    							case 4:
    							case 7:
    							case 8:
    							case 9:
    								switch (H_Zdata.Szkb)
                                    {
    									case 1:
    									case 2:
    									case 3:
    									case 12:
    									case 14:
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    										H_Zdata.Sgyo = Convert.ToInt16(Strings.Trim(H_Data[G_Index_SGYO]));
    										H_Zdata.Sgyo = Convert.ToInt16(H_Data[G_Index_SGYO].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    										break;
    								}
    								break;
    						}
    						break;
    				}
    
    				// ** 借方／貸方仕入区分
    				H_Zdata.Rsre = 0;
    				H_Zdata.Ssre = 0;
    				L_Flag = Convert.ToBoolean(Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_ANBN]) == 1);
    				switch (Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY01]))
                    {
    					case 2:
    					case 5:
    					case 6:
    					case 7:
    					case 8:
    					case 10:
    						switch (H_Zdata.Rzkb) {
    							// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    							// Case 1, 2, 11, 13, 31
    							case 1:
    							case 2:
    							case 11:
    							case 13:
    							case 31:
    							case 61:
    							case 62:
    								// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    								if (L_Flag == true) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    									H_Zdata.Rsre = Convert.ToInt16(Strings.Trim(H_Data[G_Index_RSRE]));
    									H_Zdata.Rsre = Convert.ToInt16(H_Data[G_Index_RSRE].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								} else {
    									H_Zdata.Rsre = Convert.ToInt16(L_KnameRow[0][(int)eKNAME.KNAME_SY05]);
    									if (H_Zdata.Rsre == 0) {
    										H_Zdata.Rsre = 3;
    									}
    								}
    								break;
    						}
    						break;
    				}
    				switch (Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY01]))
                    {
    					case 2:
    					case 5:
    					case 6:
    					case 7:
    					case 8:
    					case 10:
    						switch (H_Zdata.Szkb) {
    							// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    							// Case 1, 2, 11, 13, 31
    							case 1:
    							case 2:
    							case 11:
    							case 13:
    							case 31:
    							case 61:
    							case 62:
    								// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    								if (L_Flag == true)
                                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    									H_Zdata.Ssre = Convert.ToInt16(Strings.Trim(H_Data[G_Index_SSRE]));
    									H_Zdata.Ssre = Convert.ToInt16(H_Data[G_Index_SSRE].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								}
                                    else
                                    {
    									H_Zdata.Ssre = Convert.ToInt16(L_KnameRow[1][(int)eKNAME.KNAME_SY05]);
    									if (H_Zdata.Ssre == 0)
                                        {
    										H_Zdata.Ssre = 3;
    									}
    								}
    								break;
    						}
    						break;
    				}

// Ver02.26.01 インボイス対応 --->
                    // 借方／貸方 売上税額計算方式・仕入税額控除経過措置割合
                    if (H_Lno == 2)
                    {
                        H_Zdata.Rurizeikeisan = Convert.ToInt16(H_Data[G_Index_RURIZEIKEISAN].Trim());
                        H_Zdata.Surizeikeisan = Convert.ToInt16(H_Data[G_Index_SURIZEIKEISAN].Trim());
                        H_Zdata.Rmenzeikeika  = Convert.ToInt16(H_Data[G_Index_RMENZEIKEIKA].Trim());
                        H_Zdata.Smenzeikeika  = Convert.ToInt16(H_Data[G_Index_SMENZEIKEIKA].Trim());
                    }
                    else
                    {
                        H_Zdata.Rurizeikeisan         = 0;
                        H_Zdata.Surizeikeisan         = 0;
                        exceptNewLayout2_rMenzeikeika = Convert.ToInt16(GetSiireZeigakuKouzyoKeikaSotiWariaiDefaultValue(Convert.ToInt16(L_KnameRow[0][(int)eKNAME.KNAME_SY01]), H_Zdata.Rzkb, H_Zdata.Rtor, H_Data[G_Index_DYMD].Trim()));
                        H_Zdata.Rmenzeikeika          = exceptNewLayout2_rMenzeikeika;
                        exceptNewLayout2_sMenzeikeika = Convert.ToInt16(GetSiireZeigakuKouzyoKeikaSotiWariaiDefaultValue(Convert.ToInt16(L_KnameRow[1][(int)eKNAME.KNAME_SY01]), H_Zdata.Szkb, H_Zdata.Stor, H_Data[G_Index_DYMD].Trim()));
                        H_Zdata.Smenzeikeika          = exceptNewLayout2_sMenzeikeika;
                    }
// <--- Ver02.26.01 インボイス対応
    
    				// ** 対価入力フラグ・対価金額
    				L_Flag = false;
    				if (Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY02]) == 1)
                    {
    					switch (H_Zdata.Rzkb)
                        {
    						case 12:
    						case 14:
    						case 42:
    							L_Flag = true;
    							break;
    					}
    				}
    				if (Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY02]) == 1)
                    {
    					switch (H_Zdata.Szkb)
                        {
    						case 3:
    						case 12:
    						case 14:
    						case 42:
    							L_Flag = true;
    							break;
    					}
    				}
    				if (L_Flag == true) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Text = Strings.Trim(H_Data[G_Index_EXVL]);
    					L_Text = H_Data[G_Index_EXVL].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					if (string.IsNullOrEmpty(L_Text)) {
    						H_Zdata.Exvl = 0;
    						H_Zdata.Gexvl = 0;
    					} else {
    						H_Zdata.Exvl = Convert.ToDecimal(L_Text);
    					}
    					H_Zdata.Tflg = 1;
    				} else {
    					H_Zdata.Tflg = 0;
    					H_Zdata.Exvl = 0;
    					H_Zdata.Gexvl = 0;
    				}
    
                    // 邦貨換算処理
    				if (H_Data.Length > 57)
                    {                        
    					if (P_b_Kanzan_Flg == true)
                        {    						                            
                            long longValu = Convert.ToInt64(H_Zdata.Valu);
                            // 邦貨金額
    						if (H_Zdata.Gaika != 0 && H_Zdata.Rate != 0)
                            {
    							Get_Gaika_Kanzan_FNC(H_Zdata.Gaika, H_Zdata.Rate, P_Int_GaikaTani, L_HSSW, ref longValu);
                                // --->
                                H_Zdata.Valu = longValu;
                                // <---
    						}
    
    						// 邦貨対価金額
    						if (H_Zdata.Tflg == 1)
                            {
                                long longExvl = Convert.ToInt64(H_Zdata.Exvl);
    							if (H_Zdata.Gexvl != 0 && H_Zdata.Rate != 0)
                                {
    								Get_Gaika_Kanzan_FNC(H_Zdata.Gexvl, H_Zdata.Rate, P_Int_GaikaTani, L_HSSW, ref longExvl);
                                    // --->
                                    H_Zdata.Exvl = longExvl;
                                    // <---
    							}
    						}
    
    					}
    				}
    
    				// ** 税額対象科目
    				H_Zdata.Zkmk          = "";
    				H_Zdata.Zzkb          = 100;
    				H_Zdata.Zrit          = -1;
    				H_Zdata.Zgyo          = 0;
    				H_Zdata.Zsre          = 0;
    				H_Zdata.Zkeigen       = "0";  // Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
// Ver02.26.01 インボイス対応 --->
                    H_Zdata.Zurizeikeisan = 0;
                    H_Zdata.Zmenzeikeika  = 0;
// <--- Ver02.26.01 インボイス対応
    
    				if (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_SKBN]) != 0)
                    {
    					// ** 税額対象科目入力可能仕訳かどうかチェック
    					L_Flag = false;
    					switch (Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY01]))
                        {
    						case 21:
    						case 22:
    							switch (H_Zdata.Rzkb) {
    								case 32:
    								case 33:
    								case 100:
    									L_Flag = true;
    									break;
    							}
    							break;
    					}
    					switch (Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY01]))
                        {
    						case 21:
    						case 22:
    							switch (H_Zdata.Szkb)
                                {
    								case 32:
    								case 33:
    								case 100:
    									L_Flag = true;
    									break;
    							}
    							break;
    					}
    
    					if (L_Flag == true) {
    						// ** 税額対象科目入力可能仕訳のとき
    						// ** 税額対象科目 科目
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_ZKMK]);
    						L_Text = H_Data[G_Index_ZKMK].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text))
                            {
    							L_Text = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_KMTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMLN]));
    							L_Rows = H_dtKname.Select("KESN = " + H_Zdata.Kesn + " AND KCOD = '" + L_Text + "'");
    							if (L_Rows.Length > 0)
                                {
    								L_KnameRowZ  = L_Rows[0];
    								H_Zdata.Zkmk = (L_KnameRowZ[(int)eKNAME.KNAME_KICD]).ToString();
    							}
    							L_Rows = null;
    						}
    					}    
    
    					if (!string.IsNullOrEmpty(H_Zdata.Zkmk))
                        {
    						// ** 税額対象科目 課税区分
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						H_Zdata.Zzkb = Convert.ToInt16(Strings.Trim(H_Data[G_Index_ZZKB]));
    						H_Zdata.Zzkb = Convert.ToInt16(H_Data[G_Index_ZZKB].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    
    						// ** 税額対象科目 税率
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						H_Zdata.Zrit = Convert.ToInt32(Convert.ToDecimal(Strings.Trim(H_Data[G_Index_ZRIT])) * 10000);
    						H_Zdata.Zrit = Convert.ToInt32(Convert.ToDecimal(H_Data[G_Index_ZRIT].Trim()) * 10000);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						// <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    						if (P_Keigen == 2)
                            {
    							// 「税率の扱い：2」の場合は、セットされた値を使用
    							H_Zdata.Zkeigen = H_Data[G_Index_ZKEIGEN];
    						}
                            else if (P_Keigen == 1)
                            {
    							// 「税率の扱い：1」の場合は、税率が8％かつ税率の開始年月日以降であれば軽減税率
    							if ((H_Data[G_Index_ZRIT] == "8" || H_Data[G_Index_ZRIT] == "8.00") && L_Dymd >= int.Parse(SRITU_Rows[0][(int)eSRITU.SRITU_SYMD].ToString()))
                                {
    								H_Zdata.Zkeigen = "1";
    							} else {
    								H_Zdata.Zkeigen = "0";
    							}
    						} else {
    							H_Zdata.Zkeigen = "0";
    						}
    						// --->Ver01.16.02
    
    						// ** 税額対象科目 業種区分
    						switch (Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]))
                            {
    							case 11:
    							case 12:
    							case 13:
    							case 14:
    							case 15:
    							case 16:
    								switch (Convert.ToInt32(L_KnameRowZ[(int)eKNAME.KNAME_SY01]))
                                    {
    									case 2:
    									case 3:
    									case 4:
    									case 7:
    									case 8:
    									case 9:
    										switch (H_Zdata.Zzkb)
                                            {
    											case 1:
    											case 2:
    											case 3:
    											case 12:
    											case 14:
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    												H_Zdata.Zgyo = Convert.ToInt16(Strings.Trim(H_Data[G_Index_ZGYO]));
    												H_Zdata.Zgyo = Convert.ToInt16(H_Data[G_Index_ZGYO].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    												break;
    										}
    										break;
    								}
    								break;
    						}
    
    						// ** 税額対象科目 仕入区分
    						L_Flag = Convert.ToBoolean(Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_ANBN]) == 1);
    						switch (Convert.ToInt32(L_KnameRowZ[(int)eKNAME.KNAME_SY01]))
                            {
    							case 2:
    							case 5:
    							case 6:
    							case 7:
    							case 8:
    							case 10:
    								switch (H_Zdata.Zzkb) {
    									case 1:
    									case 2:
    									case 11:
    									case 13:
    									case 31:
    										if (L_Flag == true) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    											H_Zdata.Zsre = Convert.ToInt16(Strings.Trim(H_Data[G_Index_ZSRE]));
    											H_Zdata.Zsre = Convert.ToInt16(H_Data[G_Index_ZSRE].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    										} else {
    											H_Zdata.Zsre = Convert.ToInt16(L_KnameRowZ[(int)eKNAME.KNAME_SY05]);
    											if (H_Zdata.Zsre == 0)
                                                {
    												H_Zdata.Zsre = 3;
    											}
    										}
    										break;
    								}
    								break;
    						}
                            
// Ver02.26.01 インボイス対応 --->
                            //** 税額対象科目 売上税額計算方式・仕入税額控除経過措置割合
                            if (H_Lno == 2) {
                                H_Zdata.Zurizeikeisan = Convert.ToInt16(H_Data[G_Index_ZURIZEIKEISAN].Trim());
                                H_Zdata.Zmenzeikeika  = Convert.ToInt16(H_Data[G_Index_ZMENZEIKEIKA].Trim());
                            } else {
                                H_Zdata.Zurizeikeisan = 0;
                            
                                bool isSetExceptNewLayout2_zMenzeikeika = false;
                                if (string.IsNullOrEmpty(H_Zdata.Zkmk) == false && H_Zdata.Bkbn == 0) {
                                    if ((short)L_KnameRow[0][(int)eKNAME.KNAME_SY01] == 21 && H_Zdata.Rzkb == 100) {
                                        H_Zdata.Zmenzeikeika = exceptNewLayout2_rMenzeikeika;
                                        isSetExceptNewLayout2_zMenzeikeika = true;
                                    } else if ((short)L_KnameRow[1][(int)eKNAME.KNAME_SY01] == 21 && H_Zdata.Szkb == 100) {
                                        H_Zdata.Zmenzeikeika = exceptNewLayout2_sMenzeikeika;
                                        isSetExceptNewLayout2_zMenzeikeika = true;
                                    }
                                }
                            
                                if (isSetExceptNewLayout2_zMenzeikeika == false) {
                                    H_Zdata.Zmenzeikeika = 0;
                                }
                            }
// <--- Ver02.26.01 インボイス対応
    					}    
    				}    
    			}
                // ** 消費税使用しない場合
                else
                {    				
    				H_Zdata.Rzkb = 100;
    				H_Zdata.Rrit = -1;
    				H_Zdata.Rgyo = 0;
    				H_Zdata.Rsre = 0;
    
    				H_Zdata.Szkb = 100;
    				H_Zdata.Srit = -1;
    				H_Zdata.Sgyo = 0;
    				H_Zdata.Ssre = 0;
    
    				H_Zdata.Tflg = 0;
    				H_Zdata.Exvl = 0;
    
    				H_Zdata.Zkmk = "";
    				H_Zdata.Zzkb = 100;
    				H_Zdata.Zrit = -1;
    				H_Zdata.Zgyo = 0;
    				H_Zdata.Zsre = 0;
    
    				// <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
    				H_Zdata.Rkeigen = "0";
    				H_Zdata.Skeigen = "0";
    				H_Zdata.Zkeigen = "0";
                    // --->Ver01.16.02

// Ver02.26.01 インボイス対応 --->
                    H_Zdata.Rurizeikeisan = 0;
                    H_Zdata.Surizeikeisan = 0;
                    H_Zdata.Zurizeikeisan = 0;
                    H_Zdata.Rmenzeikeika  = 0;
                    H_Zdata.Smenzeikeika  = 0;
                    H_Zdata.Zmenzeikeika  = 0;
// <--- Ver02.26.01 インボイス対応
    			}
    
    			// ** 一括税抜仕訳フラグ
    			H_Zdata.Ifri = 0;
                #endregion

                #region ** 支払日・支払区分・支払期日
                H_Zdata.Symd = 0;
    			H_Zdata.Skbn = -1;
    			H_Zdata.Skiz = 0;    
    
    			if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SDAY]) == 1) || (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SHKBN]) == 1) || (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SKDAY]) == 1))
                {
    				L_Flag = false;
    				if (!string.IsNullOrEmpty(H_Zdata.Rkmk))
                    {
    					L_Flag = IsSubjectKmk_FNC(H_Zdata.Kesn, 0, H_Zdata.Rkmk, 0, H_dtSubject);
    				}
    				if (L_Flag == false)
                    {
    					if (!string.IsNullOrEmpty(H_Zdata.Skmk))
                        {
    						L_Flag = IsSubjectKmk_FNC(H_Zdata.Kesn, 0, H_Zdata.Skmk, 1, H_dtSubject);
    					}
    				}    
    
    				if (L_Flag == true)
                    {
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SDAY]) == 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_SYMD]);
    						L_Text = H_Data[G_Index_SYMD].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text))
                            {
    							H_Zdata.Symd = Convert.ToInt32(L_Text);
    						}
    					}
    
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SHKBN]) == 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_SKBN]);
    						L_Text = H_Data[G_Index_SKBN].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text))
                            {
    							H_Zdata.Skbn = Convert.ToInt16(L_Text);
    						}
    					}
    
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SKDAY]) == 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_SKIZ]);
    						L_Text = H_Data[G_Index_SKIZ].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text))
                            {
    							H_Zdata.Skiz = Convert.ToInt32(L_Text);
    						}
    					}    
    				}
                }
                #endregion
                #region ** 回収日・入金区分・入金期日
                H_Zdata.Uymd = 0;
    			H_Zdata.Ukbn = -1;
    			H_Zdata.Ukiz = 0;    
    
    			if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_UDAY]) == 1) || (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_UKKBN]) == 1) || (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_UKDAY]) == 1))
                {
    				L_Flag = false;
    				if (!string.IsNullOrEmpty(H_Zdata.Rkmk))
                    {
    					L_Flag = IsSubjectKmk_FNC(H_Zdata.Kesn, 1, H_Zdata.Rkmk, 0, H_dtSubject);
    				}
    				if (L_Flag == false)
                    {
    					if (!string.IsNullOrEmpty(H_Zdata.Skmk))
                        {
    						L_Flag = IsSubjectKmk_FNC(H_Zdata.Kesn, 1, H_Zdata.Skmk, 1, H_dtSubject);
    					}
    				}    
    
    				if (L_Flag == true)
                    {
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_UDAY]) == 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_UYMD]);
    						L_Text = H_Data[G_Index_UYMD].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text))
                            {
    							H_Zdata.Uymd = Convert.ToInt32(L_Text);
    						}
    					}
    
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_UKKBN]) == 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_UKBN]);
    						L_Text = H_Data[G_Index_UKBN].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text))
                            {
    							H_Zdata.Ukbn = Convert.ToInt16(L_Text);
    						}
    					}
    
    					if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_UKDAY]) == 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Text = Strings.Trim(H_Data[G_Index_UKIZ]);
    						L_Text = H_Data[G_Index_UKIZ].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						if (!string.IsNullOrEmpty(L_Text))
                            {
    							H_Zdata.Ukiz = Convert.ToInt32(L_Text);
    						}
    					}    
    				}
                }
                #endregion

                // ** 支払Exportフラグ
    			H_Zdata.Sexp = 0;

                #region ** 店券フラグ(未使用：元からコメントアウト)
                // .Sten = 0
    			// If L_VolumRow[(int)eVOLUM.VOLUM_FLG1) = 1 Then
    			//     If (Left(.Rkmk, 6) = "010010") Or (Left(.Rkmk, 6) = "010020") _
    			//             Or (Left(.Skmk, 6) = "010010") Or (Left(.Skmk, 6) = "010020") Then
    			//         L_Text = Trim(H_Data(G_Index_STEN))
    			//         If L_Text <> "" Then
    			//             .Sten = CShort(L_Text)
    			//         End If
    			//     End If
                // End If
                #endregion
                #region ** 消込コード(現時点では未サポート)
                H_Zdata.Dkec = "";
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			L_Text       = Strings.Trim(H_Data[G_Index_DKEC]);
    			L_Text       = H_Data[G_Index_DKEC].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    
    			if (!string.IsNullOrEmpty(L_Text))
                {
    				// .Dkec = L_Text
    				H_Zdata.Dkec = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_KKTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KKLN]));
    				if (H_DFUK == 2)
                    {
    					// 貸借両方諸口の場合は処理しない。
    					if ((((string)L_KnameRow[0][(int)eKNAME.KNAME_KICD] == "000000000001001" || (string)L_KnameRow[0][(int)eKNAME.KNAME_KICD] == "000000000001002")) &&
                            (((string)L_KnameRow[1][(int)eKNAME.KNAME_KICD] == "000000000001001" || (string)L_KnameRow[1][(int)eKNAME.KNAME_KICD] == "000000000001002")))
                        {
    						// 借方のみ
    					}
                        else if (((string)L_KnameRow[0][(int)eKNAME.KNAME_KICD] == "000000000001001" || (string)L_KnameRow[0][(int)eKNAME.KNAME_KICD] == "000000000001002"))
                        {
    						// 借方自動諸口の場合は消込フラグ使用しないとして処理
    						L_KnameRow[0][(int)eKNAME.KNAME_KK01] = 0;
    						// 貸方のみ
    					}
                        else if (((string)L_KnameRow[1][(int)eKNAME.KNAME_KICD] == "000000000001001" || (string)L_KnameRow[1][(int)eKNAME.KNAME_KICD] == "000000000001002"))
                        {
    						// 貸方自動諸口の場合は消込フラグ使用しないとして処理
    						L_KnameRow[1][(int)eKNAME.KNAME_KK01] = 0;
    					}
    				}
    
    				// 貸借両方消し込みコード入力可
    				if (Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_KK01]) == 1 && Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_KK01]) == 1)
                    {
    					L_PnUseDkec = 2;
    					// 借方のみ消し込みコード入力可
    				}
                    else if (Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_KK01]) == 1 && Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_KK01]) == 0)
                    {
    					L_PnUseDkec = 0;
    					// 貸方のみ消し込みコード入力可
    				}
                    else if (Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_KK01]) == 0 && Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_KK01]) == 1)
                    {
    					L_PnUseDkec = 1;
    				}
                    else
                    {
    					L_PnUseDkec = -1;    
    				}
                }
                #endregion

                // ** 消込抽出フラグ
    			H_Zdata.Pcsw = 0;    
    			// ** 消込更新フラグ
    			H_Zdata.Upsw = 0;    
    			// ** 消込ゼロフラグ
    			H_Zdata.Zrsw = 0;    
    			// ** 消込グループコード
    			H_Zdata.Gpcd = "";

                #region ** 起票年月日
                H_Zdata.Kymd_h = 0;
    			if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KDAY]) == 1)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_KYMD]);
    				L_Text = H_Data[G_Index_KYMD].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			    if (!string.IsNullOrEmpty(L_Text))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					H_Zdata.Kymd_h = Convert.ToInt32(Strings.Trim(H_Data[G_Index_KYMD]));
    					H_Zdata.Kymd_h = Convert.ToInt32(H_Data[G_Index_KYMD].Trim());
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				}
                }
                #endregion
                #region ** 起票部門
                H_Zdata.Kbmn_h = "";
    			if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KBMN]) == 1)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_KBMN]);
    				L_Text = H_Data[G_Index_KBMN].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Kbmn_h = EditCode_FNC(L_Text, (L_VolumRow[(int)eVOLUM.VOLUM_BMTY]).ToString(), Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMLN]));
    				}
                }
                #endregion
                #region ** 起票者
                H_Zdata.Kusr_h = "";
    			if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMAN]) == 1)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_KUSR]);
    				L_Text = H_Data[G_Index_KUSR].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Kusr_h = EditCode_FNC(L_Text, "1", 12);
    				}
                }
                #endregion

                #region ** 入力年月日・入力時分秒・最終変更年月日・最終変更時分秒
                // すべてDB書込時に決定
    			H_Zdata.Fmod_h = 0;
    			H_Zdata.Ftim_h = 0;
    			H_Zdata.Lmod_h = 0;
    			H_Zdata.Ltim_h = 0;
    			H_Zdata.Fmod   = 0;
    			H_Zdata.Ftim   = 0;
    			H_Zdata.Lmod   = 0;
    			H_Zdata.Ltim   = 0;
                #endregion
                #region ** 入力者・最終変更者
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//              H_Zdata.Fusr_h = Convert.ToInt32(Strings.Trim(H_Data[G_Index_FUSR]));
                H_Zdata.Fusr_h = Convert.ToInt32(H_Data[G_Index_FUSR].Trim());
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			H_Zdata.Lusr_h = H_Zdata.Fusr_h;
    			H_Zdata.Fusr   = H_Zdata.Fusr_h;
    			H_Zdata.Lusr   = H_Zdata.Fusr_h;
                #endregion
                #region ** 入力手段・最終変更手段
                H_Zdata.Fway_h = Get_WayDefNo_FNC(H_Kakutyo);
    			H_Zdata.Lway_h = H_Zdata.Fway_h;
    			H_Zdata.Fway   = H_Zdata.Fway_h;
    			H_Zdata.Lway   = H_Zdata.Fway_h;
                #endregion

                // 取消フラグ
    			H_Zdata.Delf_h = 0;
    			H_Zdata.Delf   = 0;
    
    			// チェックリスト出力フラグ
    			H_Zdata.Cprt_h  = 0;
    			H_Zdata.Hsflg_h = "0";
    			H_Zdata.Hgflg_h = "0";
    			H_Zdata.Cprt    = 0;
    			H_Zdata.Swgflg  = 0;
    			H_Zdata.Swiflg  = 0;
    
    			// 振替伝票発行済SW
    			H_Zdata.Dprt_h = 0;

                #region ** 付箋番号
                H_Zdata.Fsen = 0;
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			L_Text       = Strings.Trim(H_Data[G_Index_FSEN]);
    			L_Text       = H_Data[G_Index_FSEN].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			if (!string.IsNullOrEmpty(L_Text))
                {
    				H_Zdata.Fsen = Convert.ToInt16(L_Text);
                }
                #endregion

                // ** 受付番号
    			if ((H_Juse == 0) || (H_Wf != 1))
                {
    				H_Zdata.Duno_h = 0;
                }

                #region ** 入力確定日
                H_Zdata.Kday_h = 0;
    			if (H_Kakutyo == true)
                {
    				L_Syonin = false;
    				if ((H_dtSnctl != null))
                    {
    					L_Rows = H_dtSnctl.Select("KESN = " + H_Zdata.Kesn);
    					if (L_Rows.Length > 0)
                        {
    						L_Syonin = Convert.ToBoolean(Convert.ToInt32(L_Rows[0][(int)eSNCTL.SNCTL_SUSE]) != 0);
    					}
    					L_Rows = null;
    				}
    				if ((L_Syonin == true) && (!string.IsNullOrEmpty(H_Kakutei)))
                    {
    					L_Kday         = Convert.ToDateTime(H_Kakutei);
    					H_Zdata.Kday_h = (L_Kday.Year * 10000) + (L_Kday.Month * 100) + L_Kday.Day;
    				}
                }
                #endregion

                // ** 承認前伝票発行SW
    			H_Zdata.Fprt_h = 0;

                #region ** 承認グループ№
                H_Zdata.Sgno_h = 0;
    			if ((H_Kakutyo == true) && (L_Syonin == true))
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Text = Strings.Trim(H_Data[G_Index_SGNO]);
    				L_Text = H_Data[G_Index_SGNO].Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (!string.IsNullOrEmpty(L_Text))
                    {
    					H_Zdata.Sgno_h = Convert.ToInt32(L_Text);
    				}
    				if (H_Zdata.Sgno_h == 0)
                    {
    					H_Zdata.Sgno_h = GetSgno_FNC(H_Con, H_Zdata.Kesn, H_Zdata.Fusr);
    				}
                }
                #endregion

                // ** 判定済最上位承認者順序
    			H_Zdata.Hjno_h = 99;    
    			// ** 承認状況
    			H_Zdata.Sflg_h = 0;    
    			// ** 承認者編集
    			H_Zdata.Smnt_h = 0;
                #region ** 第一～第十承認者・第一～第十承認判定
                H_Zdata.Sn01_h = 0;
    			H_Zdata.Sf01_h = 0;
    			H_Zdata.Sn02_h = 0;
    			H_Zdata.Sf02_h = 0;
    			H_Zdata.Sn03_h = 0;
    			H_Zdata.Sf03_h = 0;
    			H_Zdata.Sn04_h = 0;
    			H_Zdata.Sf04_h = 0;
    			H_Zdata.Sn05_h = 0;
    			H_Zdata.Sf05_h = 0;
    			H_Zdata.Sn06_h = 0;
    			H_Zdata.Sf06_h = 0;
    			H_Zdata.Sn07_h = 0;
    			H_Zdata.Sf07_h = 0;
    			H_Zdata.Sn08_h = 0;
    			H_Zdata.Sf08_h = 0;
    			H_Zdata.Sn09_h = 0;
    			H_Zdata.Sf09_h = 0;
    			H_Zdata.Sn10_h = 0;
    			H_Zdata.Sf10_h = 0;
                #endregion
                #region ** 未使用・ダミー
                H_Zdata.Idm1_h = 0;
    			H_Zdata.Idm2_h = 0;
    			H_Zdata.Idm3_h = 0;
    			if (H_Lno == 0)
                {
    				H_Zdata.Duf1_h  = null;
    				H_Zdata.Duf2_h  = null;
    				H_Zdata.Duf3_h  = null;
    				H_Zdata.Duf4_h  = null;
    				H_Zdata.Duf5_h  = null;
    				H_Zdata.Duf6_h  = null;
    				H_Zdata.Duf7_h  = null;
    				H_Zdata.Duf8_h  = null;
    				H_Zdata.Duf9_h  = null;
    				H_Zdata.Duf10_h = null;
    			}
    			H_Zdata.Idm4 = 0;
                #endregion

                #region ODC履歴
                if (H_Lno == 0)
                {
    				H_Zdata.Rdm4  = null;
    				H_Zdata.Rdm5  = null;
    				H_Zdata.Rdm6  = null;
    				H_Zdata.Rdm7  = null;
    				H_Zdata.Rdm8  = null;
    				H_Zdata.Rdm9  = null;
    				H_Zdata.Rdm10 = null;
    				H_Zdata.Rdm11 = null;
    				H_Zdata.Rdm12 = null;
    				H_Zdata.Rdm13 = null;
    				H_Zdata.Rdm14 = null;
    				H_Zdata.Rdm15 = null;
    				H_Zdata.Rdm16 = null;
    				H_Zdata.Rdm17 = null;
    				H_Zdata.Rdm18 = null;
    				H_Zdata.Rdm19 = null;
    				H_Zdata.Rdm20 = null;
    				H_Zdata.Sdm4  = null;
    				H_Zdata.Sdm5  = null;
    				H_Zdata.Sdm6  = null;
    				H_Zdata.Sdm7  = null;
    				H_Zdata.Sdm8  = null;
    				H_Zdata.Sdm9  = null;
    				H_Zdata.Sdm10 = null;
    				H_Zdata.Sdm11 = null;
    				H_Zdata.Sdm12 = null;
    				H_Zdata.Sdm13 = null;
    				H_Zdata.Sdm14 = null;
    				H_Zdata.Sdm15 = null;
    				H_Zdata.Sdm16 = null;
    				H_Zdata.Sdm17 = null;
    				H_Zdata.Sdm18 = null;
    				H_Zdata.Sdm19 = null;
    				H_Zdata.Sdm20 = null;
                }
                #endregion

                H_Zdata.Rsseqai = "0";
    			H_Zdata.Ssseqai = "0";
    
    			// *-リンク情報
    			H_Zdata.LNO = Convert.ToInt32(H_Data[G_Index_ZLNO]);

                #region 消費税マスタの0円消費税作成区分取得
                P_Int_ZERO = Convert.ToInt32(L_SvolumRow[(int)eSVOLUM.SVOLUM_ZERO]);

                if ((!string.IsNullOrEmpty(H_Data[G_Index_BUNRI])) && (H_Data[G_Index_BUNRI] != "0") && (H_BunriOK_R == 1) && (H_ZeroSiwake_R == 1))
                {
                    // 分離仕訳作成フラグがONなので 011301 外貨関連項目追加　071019
// ▼ ツルハ様カスタマイズ ▼
//                  if (ZData_Bunri_FNC(H_Con, ref H_Zdata, H_Zdata.Bkbn.ToString(), 0, Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY02]), ref H_ZDataBunri,
//                                      ref L_InpErr, ref L_RegErr, ref L_ValuOya, ref L_ValuZei, L_SvolumRow, H_dtKname, H_SVolumKm, L_VolumRow, ref H_ErrLog, H_GAIKAKamoku_Flg, P_Int_GaikaSyosu, ref L_GVal_Gai, ref L_GVal_Zei,
//                                      // 2019/06/24 Ver.01.19.01 urata
//                                      ref L_GVal_Tai, L_PnUseDkec, ref H_Lno, ref L_ErrMsg))
                    if (ZData_Bunri_FNC(H_Con, ref H_Zdata, H_Zdata.Bkbn.ToString(), 0, Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY02]), ref H_ZDataBunri,
                                        ref L_InpErr, ref L_RegErr, ref L_ValuOya, ref L_ValuZei, L_SvolumRow, H_dtKname, H_SVolumKm, L_VolumRow, ref H_ErrLog, H_GAIKAKamoku_Flg, P_Int_GaikaSyosu, ref L_GVal_Gai, ref L_GVal_Zei,
                                        ref L_GVal_Tai, L_PnUseDkec, ref H_Lno, ref L_ErrMsg, H_Touki))
// ▲ ツルハ様カスタマイズ ▲
                    {
                        H_Zdata.Zkvl = Convert.ToDecimal(L_ValuZei);
                        H_Zdata.Valu = Convert.ToDecimal(L_ValuOya);
                        H_Zdata.Zkvl = Convert.ToDecimal(L_ValuZei);

                        if (L_GVal_Gai != 0) { H_Zdata.Gaika = L_GVal_Gai; }
                        if (L_GVal_Zei != 0) { H_Zdata.Gzkvl = L_GVal_Zei; }

                        if ((H_Data[G_Index_BUNRI] == "1") && ChkTaika_FNC(Convert.ToInt32(L_KnameRow[0][(int)eKNAME.KNAME_SY02]), Convert.ToInt16(H_Data[G_Index_BUNRI]), H_Zdata.Rzkb) == true)
                        {
                            H_Zdata.Exvl = H_Zdata.Exvl - H_ZDataBunri.Valu;
                            H_Zdata.Gexvl = L_GVal_Tai;
                        }
                    }
                    else
                    {
                        int ErrCnt = 0;
                        SetErrLog_SUB(ref H_ErrLog, ref ErrCnt, H_Data, G_Index_BUNRI, MC_ERRLOG_INVALIDCHILDZKMK + L_ErrMsg);
                        // 2019/06/24 Ver.01.19.01 urata
                        H_ErrCnt = 1;
                    }
                }
                else if ((!string.IsNullOrEmpty(H_Data[G_Index_BUNRI])) && (H_Data[G_Index_BUNRI] != "0") && (H_BunriOK_S == 1) && (H_ZeroSiwake_S == 1))
                {
                    // 分離仕訳作成フラグがONなので
                    // de2-7931⑤ インポート処理で分離仕訳の作成で処理期の設定を使用するように修正
// ▼ ツルハ様カスタマイズ ▼
//                  if (ZData_Bunri_FNC(H_Con, ref H_Zdata, H_Zdata.Bkbn.ToString(), 1, Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY02]), ref H_ZDataBunri,
//                                      ref L_InpErr, ref L_RegErr, ref L_ValuOya, ref L_ValuZei, L_SvolumRow, H_dtKname, H_SVolumKm, L_VolumRow, ref H_ErrLog, H_GAIKAKamoku_Flg, P_Int_GaikaSyosu, ref L_GVal_Gai, ref L_GVal_Zei,
//                                      // 2019/06/24 Ver.01.19.01 urata
//                                      ref L_GVal_Tai, L_PnUseDkec, ref H_Lno, ref L_ErrMsg))
                    if (ZData_Bunri_FNC(H_Con, ref H_Zdata, H_Zdata.Bkbn.ToString(), 1, Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY01]), Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY02]), ref H_ZDataBunri,
                                        ref L_InpErr, ref L_RegErr, ref L_ValuOya, ref L_ValuZei, L_SvolumRow, H_dtKname, H_SVolumKm, L_VolumRow, ref H_ErrLog, H_GAIKAKamoku_Flg, P_Int_GaikaSyosu, ref L_GVal_Gai, ref L_GVal_Zei,
                                        ref L_GVal_Tai, L_PnUseDkec, ref H_Lno, ref L_ErrMsg, H_Touki))
// ▲ ツルハ様カスタマイズ ▲
                    {
                        H_Zdata.Zkvl = Convert.ToDecimal(L_ValuZei);
                        H_Zdata.Valu = Convert.ToDecimal(L_ValuOya);
                        H_Zdata.Zkvl = Convert.ToDecimal(L_ValuZei);

                        if (L_GVal_Gai != 0)
                        {
                            H_Zdata.Gaika = L_GVal_Gai;
                        }
                        if (L_GVal_Zei != 0)
                        {
                            H_Zdata.Gzkvl = L_GVal_Zei;
                        }
                        if ((H_Data[G_Index_BUNRI] == "1") && ChkTaika_FNC(Convert.ToInt32(L_KnameRow[1][(int)eKNAME.KNAME_SY02]), Convert.ToInt16(H_Data[G_Index_BUNRI]), H_Zdata.Szkb) == true)
                        {
                            H_Zdata.Exvl = H_Zdata.Exvl - H_ZDataBunri.Valu;
                            H_Zdata.Gexvl = L_GVal_Tai;
                        }
                    }
                    else
                    {
                        int ErrCnt = 0;
                        SetErrLog_SUB(ref H_ErrLog, ref ErrCnt, H_Data, G_Index_BUNRI, MC_ERRLOG_INVALIDCHILDZKMK + L_ErrMsg);
                        // 2019/06/24 Ver.01.19.01 urata
                        H_ErrCnt = 1;
                    }
                }
                #endregion
                #region 消費税子仕訳が0円で0円消費税を作成しない場合にDTUSの値の更新
                if (H_ZDataBunri.Valu == 0)
                {
    				if (P_Int_ZERO == 0 && (!string.IsNullOrEmpty(H_Data[G_Index_BUNRI]) || H_Data[G_Index_BUNRI] != "0"))
                    {
    					if (H_BunriOK_R == 1 && H_ZeroSiwake_R == 1) { H_ZeroSiwake_R = 0; }
    					if (H_BunriOK_S == 1 && H_ZeroSiwake_S == 1) { H_ZeroSiwake_S = 0; }
    				}
                }
                #endregion

                // ** 正常終了
    			functionReturnValue = true;    
    		}
            catch (MyException ex)
            {
    			throw ex;    
    		}
            catch (Exception ex)
            {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.ERROR, "SetImpData_FNC" + ex.Message);
                mLogger.LogClose();
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
    			throw new MyException(MC_RESULT_ERR_OTHERS, ex);    
    		}
    		return functionReturnValue;    
    	}    
    
    	// トランザクションを仕訳単位に変更　伝票ヘッダは１仕訳目と同じトランザクションとする
    	private int WriteIMPDATA_FNC(ref structZDATA H_Zdata, ref structDENPYO H_DenInfo, short H_Juse, IDbCommand H_Cmd, DataTable H_dtVolum, bool H_Kakutyo, ref structZDATA H_ZdataBunri,
                                     int H_BunriOK_R, int H_BunriOK_S, bool H_Khkzan, int H_DFUK, int H_GAIKAKamoku_Flg, bool H_DenPyoEnd, int H_ZeroSiwake_R, int H_ZeroSiwake_S, int H_IsAuto,
                                     short H_Touki, IDbConnection H_Con, ref DataTable H_LINK, string H_CCOD, DataTable H_AIOCR)
    	{
    		int functionReturnValue = 0;
    
    		int L_I     = 0;
    		int L_ReVal = 1;

    		functionReturnValue = 1;
    
    		// 月別テーブルのロック
// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    		for (L_I = 1; L_I <= 10; L_I++)
            for (L_I = G_IsPostgre ? 10 : 1; L_I <= 10; L_I++)
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
            {
                // 10回まで再試行
                //--- 2021/02/10 綴り変更 Rock -> Lock
                //---L_ReVal = VolumRock(ref H_Zdata, H_Cmd, H_Kakutyo, H_Con);
                L_ReVal = VolumLock(ref H_Zdata, H_Cmd, H_Kakutyo, H_Con);
                if (L_ReVal == 1)
                {
    				break;
    			}
                //
                //System.Threading.Thread.Sleep(3000);
                //
            }

            // ロック成功の場合は処理続行
            if (L_ReVal != 1)
            {
                //
                mLogger.LogWrite(Logger.Level.NG, "月別ロック");
                //*
                mLogger.LogClose();
                //*

                //

                return L_ReVal;
    		}

            // ヘッダーが同じ場合
    		if ((H_Zdata.Kesn_h == H_DenInfo.KESN) && (H_Zdata.Dkei_h == H_DenInfo.DKEI) && (H_Zdata.Dymd_h == H_DenInfo.DYMD) && (H_Zdata.OrgDcno == H_DenInfo.OrgDcno) &&
                (H_Zdata.Kymd_h == H_DenInfo.KYMD) && (H_Zdata.Kbmn_h == H_DenInfo.KBMN) && (H_Zdata.Kusr_h == H_DenInfo.KUSR) && (H_Zdata.Fusr_h  == H_DenInfo.FUSR)    &&
                (H_Zdata.Sgno_h == H_DenInfo.SGNO))
            {
    			// 同一伝票の場合は仕訳を追加
    			L_ReVal = WriteTransaction_M_FNC(ref H_Zdata, ref H_DenInfo, H_Juse, H_Cmd, H_dtVolum, H_Kakutyo, ref H_ZdataBunri, H_BunriOK_R, H_BunriOK_S,
                                                 H_Khkzan, H_DFUK, H_GAIKAKamoku_Flg, H_DenPyoEnd, H_ZeroSiwake_R, H_ZeroSiwake_S, H_IsAuto, H_Touki, H_Con, false);
    		}
            else
            {
    			// 部署入出力処理で自動附番を使用時はVOLUM2についてもロック
    			if (H_Kakutyo && P_IDM1 == 1)
                {
// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    				for (L_I = 1; L_I <= 10; L_I++)
    				for (L_I = G_IsPostgre ? 10 : 1; L_I <= 10; L_I++)
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
                    {
    					// 10回まで再試行
                        //--- 2021/02/10 綴り変更 Rock -> Lock
    					//---L_ReVal = VolumRock(ref H_Zdata, H_Cmd, false, H_Con);
                        L_ReVal = VolumLock(ref H_Zdata, H_Cmd, false, H_Con);
                        if (L_ReVal == 1)
                        {
    						break;
    					}
                        //
                        //System.Threading.Thread.Sleep(3000);
                        //
                    }
    				if (L_ReVal != 1)
                    {
                        //
                        mLogger.LogWrite(Logger.Level.NG, "月別ロック");
                        //*
                        mLogger.LogClose();
                        //*

                        //
                        return L_ReVal;
    				}
    			}
    			// 対象テーブルが日次の場合は受付番号取得のためにSJDATについてもロック
    			if (H_Kakutyo == false)
                {
// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    				for (L_I = 1; L_I <= 10; L_I++)
    				for (L_I = G_IsPostgre ? 10 : 1; L_I <= 10; L_I++)
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
                    {
    					// 10回まで再試行
                        //--- 2021/02/10 綴り変更 Rock-> Lock
    					//---L_ReVal = VolumRock(ref H_Zdata, H_Cmd, true, H_Con);
                        L_ReVal = VolumLock(ref H_Zdata, H_Cmd, true, H_Con);
                        if (L_ReVal == 1)
                        {
    						break;
    					}
                        //
                        //System.Threading.Thread.Sleep(3000);
                        //
                    }
                    if (L_ReVal != 1)
                    {
                        //
                        mLogger.LogWrite(Logger.Level.NG, "月別ロック");
                        //*
                        mLogger.LogClose();
                        //*
                        //
                        return L_ReVal;
    				}
    			}
    			// 異なる伝票の場合は伝票を追加
    			// *-リンク情報　→　ヘッダー作成時にリンク情報もセット
    			L_ReVal = WriteTransaction_H_FNC(ref H_Zdata, ref H_DenInfo, H_Juse, H_Cmd, H_dtVolum, H_Kakutyo, ref H_ZdataBunri, H_BunriOK_R, H_BunriOK_S, H_Khkzan,
    			                                 H_DFUK, H_GAIKAKamoku_Flg, H_DenPyoEnd, H_ZeroSiwake_R, H_ZeroSiwake_S, H_IsAuto, H_Touki, H_Con, ref H_LINK, H_CCOD, H_AIOCR);
    			if (L_ReVal != 1)
                {
    				return L_ReVal;
    			}
    			// 一仕訳目を追加
    			L_ReVal = WriteTransaction_M_FNC(ref H_Zdata, ref H_DenInfo, H_Juse, H_Cmd, H_dtVolum, H_Kakutyo, ref H_ZdataBunri, H_BunriOK_R, H_BunriOK_S,
                                                 H_Khkzan, H_DFUK, H_GAIKAKamoku_Flg, H_DenPyoEnd, H_ZeroSiwake_R, H_ZeroSiwake_S, H_IsAuto, H_Touki, H_Con, true);
    		}
    
    		functionReturnValue = L_ReVal;
    		return functionReturnValue;    
    	}

    	/// <summary>
    	/// 月別テーブルロック
        /// 2021/02/10 綴り変更 Rock -> Lock
    	/// </summary> 
    	//---private int VolumRock(ref structZDATA H_Zdata, IDbCommand H_Cmd, bool H_Kakutyo, IDbConnection H_Con)

        private int VolumLock(ref structZDATA H_Zdata, IDbCommand H_Cmd, bool H_Kakutyo, IDbConnection H_Con)
        {
            int functionReturnValue = 0;

    		IDbCommand L_Cmd = default(IDbCommand);
    
    		L_Cmd = H_Cmd;

    		try
            {
                #region 2020/03/06 Ver02.19.05.9901 PostgreSQL対応(コメントアウト) --->
                //    			if (H_Kakutyo)
                //                {                    
                //                    if (G_IsOracle)
                //                    {
                ////    					L_Cmd.CommandText = "SELECT DTUS FROM SJCTL WHERE KESN = :KESN AND KEIK = :KEIK FOR UPDATE NOWAIT";
                ////    					L_Cmd.Parameters.Clear();
                ////    					L_Cmd.Parameters.Add(new OleDb.OleDbParameter(":KESN", H_Zdata.Kesn_h));
                ////    					L_Cmd.Parameters.Add(new OleDb.OleDbParameter(":KEIK", H_Zdata.Dkei_h));
                //    				}
                //                    else
                //                    {
                //    					L_Cmd.CommandText = "SELECT LSEQ FROM SJCTL WITH ( ROWLOCK, UPDLOCK ) WHERE KESN = @KESN AND KEIK = @KEIK";
                //    					L_Cmd.Parameters.Clear();
                //    					L_Cmd.Parameters.Add(new SqlParameter("@KESN", H_Zdata.Kesn_h));
                //    					L_Cmd.Parameters.Add(new SqlParameter("@KEIK", H_Zdata.Dkei_h));
                //    				}
                //    			}
                //                else
                //                {
                //    				if (G_IsOracle)
                //                    {
                ////    					L_Cmd.CommandText = "SELECT LSEQ FROM VOLUM2 WHERE KESN = :CKEI AND KEIK = :KEIK FOR UPDATE NOWAIT";
                ////    					L_Cmd.Parameters.Clear();
                ////    					L_Cmd.Parameters.Add(new OleDb.OleDbParameter(":KESN", H_Zdata.Kesn_h));
                ////    					L_Cmd.Parameters.Add(new OleDb.OleDbParameter(":CKEI", H_Zdata.Dkei_h));
                //    				}
                //                    else
                //                    {
                //    					L_Cmd.CommandText = "SELECT DTUS FROM VOLUM2 WITH ( ROWLOCK, UPDLOCK ) WHERE KESN = @KESN AND CKEI = @CKEI";
                //    					L_Cmd.Parameters.Clear();
                //    					L_Cmd.Parameters.Add(new SqlParameter("@KESN", H_Zdata.Kesn_h));
                //    					L_Cmd.Parameters.Add(new SqlParameter("@CKEI", H_Zdata.Dkei_h));
                //    				}
                //    			}
                #endregion
                //
                mLogger.LogWrite(Logger.Level.INFO, "月別ロック");
                //*
                mLogger.LogClose();
                //*
                //

// Ver02.26.01 追加 --->
                if (G_IsPostgre)
                {
                    L_Cmd.CommandTimeout = 0;
                }
// <--- Ver02.26.01 追加

                if (H_Kakutyo)
                {
                    if (G_IsPostgre)
                    {
                        L_Cmd.CommandText = "SELECT LSEQ FROM SJCTL WHERE KESN = @KESN AND KEIK = @KEIK FOR UPDATE";
                    }
                    else
                    {
                        L_Cmd.CommandText = "SELECT LSEQ FROM SJCTL WITH ( ROWLOCK, UPDLOCK ) WHERE KESN = @KESN AND KEIK = @KEIK";
                    }
                    L_Cmd.Parameters.Clear();
                    AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Zdata.Kesn_h);
                    AddParameter_FNC(ref L_Cmd, "@KEIK", DbType.Int32, H_Zdata.Dkei_h);
                }
                else
                {
                    if (G_IsPostgre)
                    {
                        L_Cmd.CommandText = "SELECT DTUS FROM VOLUM2 WHERE KESN =@KESN AND CKEI = @CKEI FOR UPDATE";
                    }
                    else
                    {
                        L_Cmd.CommandText = "SELECT DTUS FROM VOLUM2 WITH ( ROWLOCK, UPDLOCK ) WHERE KESN = @KESN AND CKEI = @CKEI";
                    }
                    L_Cmd.Parameters.Clear();
                    AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Zdata.Kesn_h);
                    AddParameter_FNC(ref L_Cmd, "@CKEI", DbType.Int32, H_Zdata.Dkei_h);
                }
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

                L_Cmd.ExecuteScalar();

                //
                mLogger.LogWrite(Logger.Level.OK, "月別ロック");
                //*
                mLogger.LogClose();
                //*
                //

                functionReturnValue = 1;
    		}
            #region 2020/03/06 Ver02.19.05.9901 PostgreSQL対応(コメントアウト) --->
//            catch (OleDb.OleDbException ex)
//            {
//    			  // Oracle版処理
//    		  }
//            catch (SqlException ex)
//            {
//    			switch (ex.Number)
//              {
//    				case 1222:
//    					functionReturnValue = MC_RESULT_ERR_IN_ROCK;
//    					break;
//    				default:
//    					functionReturnValue = MC_RESULT_ERR_DBREAD;
//    					break;
//    			}    
//    		}
            #endregion
            catch (DbException ex)
            {
                if (G_DbFactory.IsLockTimeoutError(ex))
                {
                    functionReturnValue = MC_RESULT_ERR_IN_ROCK;
                }
                else
                {
                    functionReturnValue = MC_RESULT_ERR_DBREAD;
                }
            }
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

            catch (MyException ex)
            {
                functionReturnValue = ex.ErrNo;
    			throw ex;    
    		}
            catch (Exception ex)
            {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                //--- 2021/02/10 綴り変更 Rock -> Lock
                //---mLogger.LogWrite(Logger.Level.ERROR, "VolumRock" + ex.Message);
                mLogger.LogWrite(Logger.Level.ERROR, "VolumLock" + ex.Message);
                mLogger.LogClose();
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
    			functionReturnValue = -99;
    			throw new MyException(MC_RESULT_ERR_OTHERS, ex);
    		}
// Ver02.26.01 追加 --->
            finally
            {
                if (G_IsPostgre)
                {
                    L_Cmd.CommandTimeout = 20;
                }
            }
// <--- Ver02.26.01 追加

    		return functionReturnValue;    
    	}

        #region DB関連
        /// <summary>
        /// パラメータ追加
        /// </summary>
        public static void AddParameter_FNC(ref IDbCommand H_Cmd, string H_ParaName, DbType H_DbType, object H_Value)
    	{
            IDbDataParameter L_Para = H_Cmd.CreateParameter();
    		L_Para.ParameterName    = H_ParaName;
    		L_Para.DbType           = H_DbType;
    		L_Para.Value            = H_Value;

    		H_Cmd.Parameters.Add(L_Para);
    	}
    	/// <summary>
    	/// プレースホルダ置換
    	/// </summary> 
    	public static void ReplacePlaceHolder_FNC(ref IDbCommand H_Cmd)
    	{
            string        replacePlaceHolderText  = ":p";
            StringBuilder newSql                  = new StringBuilder();
            string[]      sqlSplited              = H_Cmd.CommandText.Split(new string[] { replacePlaceHolderText }, StringSplitOptions.RemoveEmptyEntries);
            int           L_i                     = 0;

            IEnumerator parameterEnumerator = H_Cmd.Parameters.GetEnumerator();  // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応(追加)

            foreach (string partialSql in sqlSplited)
            {
                newSql.Append(partialSql);
                if (H_Cmd.Parameters.Count <= L_i)
                {
                    break;
                }

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    			newSql.Append(H_Cmd.Parameters[L_i]);
                newSql.Append(((IDbDataParameter)H_Cmd.Parameters[L_i]).ParameterName);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

                L_i = L_i + 1;
            }

            H_Cmd.CommandText = newSql.ToString();
    	}
        #endregion

        // *===========================================================================================*
        //    伝票登録用(伝票ヘッダ)
        // *===========================================================================================*
        private int WriteTransaction_H_FNC(ref structZDATA H_Zdata, ref structDENPYO H_DenInfo, short H_Juse, IDbCommand H_Cmd, DataTable H_dtVolum, bool H_Kakutyo, ref structZDATA H_ZdataBunri, int H_BunriOK_R,
                                           int H_BunriOK_S, bool H_Khkzan, int H_DFUK, int H_GAIKAKamoku_Flg, bool H_DenPyoEnd, int H_ZeroSiwake_R, int H_ZeroSiwake_S, int H_IsAuto, short H_Touki, IDbConnection H_Con,
                                           ref DataTable H_LINK, string H_CCOD, DataTable H_AIOCR)
        {
            #region 変数初期化
            int functionReturnValue = 0;
    
    		IDbCommand  L_Cmd        = default(IDbCommand);
    		IDataReader L_Reader     = default(IDataReader);
    		short       L_Keik       = 0;
    		object      L_Fgno       = null;
    		DateTime    L_Now        = default(DateTime);
    		DataRow     L_VolumRow   = default(DataRow);
    		bool        L_ReadFlg    = false;
    		string      L_SqlMsg_H   = null;
    		DataRow     L_LinkRow    = default(DataRow);
    		string[]    L_DataLink   = null;
    		string      L_LinkCopyM  = "";
    		string      L_LinkCopyS  = "";
    		string      L_LinkFile   = "";
    		string      L_User       = "";
    		string      L_Time       = "";
    		int         L_LKID       = 0;
    		int         L_ESEQ       = 0;
    		string      L_PreEDOC    = "";
    		int         L_EdocCnt    = 0;
    		bool        L_EdocRename = false;

    		DataRow     L_AIOCRRow   = default(DataRow);
    		int         L_TSFUYO     = 0;

// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応 --->
            int         L_TSNA       = 0;   // 電子取引データフラグ
// <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応

            #region 不要(コメントアウト)
            //    		int         L_ReVal      = 1;
            // エラー値返送用
            //    		string      L_Filter     = "";
            // *-リンク情報
            //    		int         L_LineCnt    = 0;
            #endregion
            #endregion

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
            mLogger.LogWrite(Logger.Level.INFO, "WriteTransaction_H_FNC");
            mLogger.LogClose();
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

            L_VolumRow = H_dtVolum.Select("KESN = " + H_Zdata.Kesn_h)[0];    
    		L_Cmd      = H_Cmd;
    
    		try
            {
                #region 伝票ＳＥＱ(DSEQ)の取得
                if (H_Kakutyo == true)
                {
    				L_Cmd.CommandText = "SELECT DENC + 1 FROM SJCTL WHERE KESN = " + H_Zdata.Kesn_h + " AND KEIK = " + H_Zdata.Dkei_h;
    			}
                else
                {
    				L_Cmd.CommandText = "SELECT DENC + 1 FROM VOLUM2 WHERE KESN = " + H_Zdata.Kesn_h + " AND CKEI = " + H_Zdata.Dkei_h;
    			}
    			L_ReadFlg      = true;
    			H_Zdata.Dseq_h = Convert.ToInt32(L_Cmd.ExecuteScalar());
    			L_ReadFlg      = false;
                #endregion
                #region 最終伝票番号更新
                if (H_Kakutyo == true)
                {
    				L_Cmd.CommandText = "UPDATE SJCTL SET DENC = DENC + 1 WHERE KESN = " + H_Zdata.Kesn + " AND KEIK = " + H_Zdata.Dkei;
    			}
                else
                {
    				L_Cmd.CommandText = "UPDATE VOLUM2 SET DENC = DENC + 1 WHERE KESN = " + H_Zdata.Kesn + " AND CKEI = " + H_Zdata.Dkei;
    			}
    			L_Cmd.ExecuteNonQuery();
                #endregion
                #region 伝票番号
                if (H_Juse == 0)
                {
    				// 自動付番でないなら、伝票番号重複チェック
    				if (H_Zdata.Dcno_h != 0)
                    {
    					if (ChkDcno2_FNC(L_Cmd, H_Zdata.Kesn_h, H_Zdata.Dkei_h, H_Zdata.Dcno_h, H_Zdata.Dymd_h) == false)
                        {
    						throw new MyException(MC_RESULT_ERR_IN_DCNO);
    					}
    				}
    			}
                else
                {
    				// 部署入出力処理伝票番号自動付番
    				if (H_Kakutyo == false || P_IDM1 == 1)
                    {
    					// 自動付番なら、伝票番号取得
    					switch (H_Juse)
                        {
    						case 3:
    						case 4:
    							L_Cmd.CommandText = "SELECT FGNO FROM JFGRP WHERE KESN = " + H_Zdata.Kesn_h + " AND FUNO = " + H_Zdata.Fusr;
    							L_ReadFlg         = true;
    							L_Fgno            = L_Cmd.ExecuteScalar();
    							L_ReadFlg         = false;
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//    							if (Information.IsDBNull(L_Fgno) == true)
                                if (L_Fgno == null)
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応
                                {
                                    L_Fgno = 0;
    							}
    							break;
    						default:
    							L_Fgno = 0;
    							break;
    					}
    					switch (H_Juse)
                        {
    						case 1:
    						case 3:
    							L_Keik = H_Zdata.Dkei_h;
    							break;
    						default:
    							L_Keik = 0;
    							break;
    					}
    					L_Cmd.CommandText = "SELECT DCNO + 1 FROM JFDNO WHERE KESN = " + H_Zdata.Kesn_h + " AND KEIK = " + L_Keik + " AND FGNO = " + Convert.ToInt32(L_Fgno);
    					L_ReadFlg         = true;
    					H_Zdata.Dcno_h    = Convert.ToInt32(L_Cmd.ExecuteScalar());
    					// 自動付番時は必ず伝票番号の重複チェック
    					if (ChkDcno2_FNC_Fb(L_Cmd, H_Zdata.Kesn_h, H_Zdata.Dkei_h, H_Zdata.Dcno_h, H_Zdata.Dymd_h) == false)
                        {
    						throw new MyException(MC_RESULT_ERR_IN_JF_DCNO);
    					}
    
    					// 自動付番番号更新
    					L_ReadFlg = false;
    					L_Cmd.CommandText = "UPDATE JFDNO SET DCNO = DCNO + 1 WHERE KESN = " + H_Zdata.Kesn_h + " AND KEIK = " + L_Keik + " AND FGNO = " + Convert.ToInt32(L_Fgno);
    					L_Cmd.ExecuteNonQuery();    
    				}
                    else
                    {
    					H_Zdata.Dcno_h = -1;
    				}
    			}
    
    			// ワークフローで自動付番か
    			if ((H_IsAuto == 1) && (H_Juse != 0))
                {
    				// 部署入出力処理へ転記の場合、受付番号重複チェック
    				if ((H_Kakutyo))
                    {
    					// 受付番号の重複チェック
    					L_Cmd.CommandText = "SELECT DYMD FROM SJDAT_H WHERE " + "KESN = " + H_Zdata.Kesn_h + " AND DKEI = " + H_Zdata.Dkei_h + " AND DUNO = " + H_Zdata.Duno_h + "" + " AND DELF = 0  ";
    					L_Reader          = L_Cmd.ExecuteReader();
    					if (L_Reader.Read())
                        {
    						L_Reader.Close();
    						throw new MyException(MC_RESULT_ERR_IN_DIPDUNO);
    					}
    					L_Reader.Close();
    				}
    			}
                else
                {
    				L_Cmd.CommandText = "SELECT LUNO + 1 FROM SJCTL WHERE KESN = " + H_Zdata.Kesn_h + " AND KEIK = " + H_Zdata.Dkei_h;
    				L_ReadFlg         = true;
    				H_Zdata.Duno_h    = Convert.ToInt32(L_Cmd.ExecuteScalar());
    				L_ReadFlg         = false;
    				L_Cmd.CommandText = "UPDATE SJCTL SET LUNO = LUNO + 1 WHERE KESN = " + H_Zdata.Kesn_h + " AND KEIK = " + H_Zdata.Dkei_h;
    				L_Cmd.ExecuteNonQuery();
    			}
    
    			if (H_Zdata.Dcno_h > 99999999)
                {
    				throw new MyException(MC_RESULT_ERR_IN_MAXDCNO);
    			}    
    			if (H_Zdata.Duno_h > 99999999)
                {
    				throw new MyException(MC_RESULT_ERR_IN_MAXDUNO);
    			}
                #endregion

                #region ** 入力年月日・入力時分秒・最終変更年月日・最終変更時分秒
                L_Now          = DateTime.Now;
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//              H_Zdata.Fmod_h = Convert.ToInt32(Strings.Format(L_Now, "yyyyMMdd"));
//    			H_Zdata.Ftim_h = Convert.ToInt32(Strings.Format(L_Now, "HHmmssff"));
                H_Zdata.Fmod_h = Convert.ToInt32(L_Now.ToString("yyyyMMdd"));
                H_Zdata.Ftim_h = Convert.ToInt32(L_Now.ToString("HHmmssff"));
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応
                H_Zdata.Lmod_h = H_Zdata.Fmod_h;
    			H_Zdata.Ltim_h = H_Zdata.Ftim_h;
                #endregion

                // 未完伝票INSERT
                L_SqlMsg_H = "INSERT INTO " + (H_Kakutyo ? "SJDAT_H" : "ZDATA_H") +
                                       " (KESN, DKEI, DSEQ,  DYMD, DCNO, DFUK, IJPT, KYMD, KBMN, KUSR, " + "FMOD, FTIM, FUSR, FWAY, LMOD, LTIM, LUSR, LWAY, DELF, CPRT, " +
                                         "DPRT, DUNO, KDAY,  FPRT, SGNO, HJNO, SFLG, SMNT, SN01, SF01, " + "SN02, SF02, SN03, SF03, SN04, SF04, SN05, SF05, SN06, SF06, " +
                                         "SN07, SF07, SN08,  SF08, SN09, SF09, SN10, SF10, IDM1, IDM2, " + "IDM3, DUF1, DUF2, DUF3, DUF4, DUF5, DUF6, DUF7, DUF8, DUF9, " +
                                         "DUF10,BFLG, HSFLG, HGFLG) " +
                             "VALUES (" + H_Zdata.Kesn_h + "," + H_Zdata.Dkei_h + "," + H_Zdata.Dseq_h + "," + H_Zdata.Dymd_h + "," + (H_Zdata.Dcno_h < 0 ? "NULL" : H_Zdata.Dcno_h.ToString())    + "," +
                                          H_Zdata.Dfuk_h + "," + H_Zdata.Ijpt_h + "," + H_Zdata.Kymd_h + "," + MakeInsertString_FNC(H_Zdata.Kbmn_h)  + "," + MakeInsertString_FNC(H_Zdata.Kusr_h)  + "," +
                                          H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h + "," + H_Zdata.Fusr_h + "," + H_Zdata.Fway_h + "," + H_Zdata.Lmod_h + "," + H_Zdata.Ltim_h + "," + H_Zdata.Lusr_h + "," +
                                          H_Zdata.Lway_h + "," + H_Zdata.Delf_h + "," + H_Zdata.Cprt_h + "," + H_Zdata.Dprt_h + "," + H_Zdata.Duno_h + "," + " 0" + "," + H_Zdata.Fprt_h + "," +
                                          H_Zdata.Sgno_h + "," + H_Zdata.Hjno_h + "," + H_Zdata.Sflg_h + "," + H_Zdata.Smnt_h + "," + H_Zdata.Sn01_h + "," + H_Zdata.Sf01_h + "," + H_Zdata.Sn02_h + "," +
                                          H_Zdata.Sf02_h + "," + H_Zdata.Sn03_h + "," + H_Zdata.Sf03_h + "," + H_Zdata.Sn04_h + "," + H_Zdata.Sf04_h + "," + H_Zdata.Sn05_h + "," + H_Zdata.Sf05_h + "," +
                                          H_Zdata.Sn06_h + "," + H_Zdata.Sf06_h + "," + H_Zdata.Sn07_h + "," + H_Zdata.Sf07_h + "," + H_Zdata.Sn08_h + "," + H_Zdata.Sf08_h + "," + H_Zdata.Sn09_h + "," +
                                          H_Zdata.Sf09_h + "," + H_Zdata.Sn10_h + "," + H_Zdata.Sf10_h + "," + H_Zdata.Idm1_h + "," + H_Zdata.Idm2_h + "," + H_Zdata.Idm3_h + "," +
                                          MakeInsertString_FNC(H_Zdata.Duf1_h)  + "," + MakeInsertString_FNC(H_Zdata.Duf2_h)  + "," + MakeInsertString_FNC(H_Zdata.Duf3_h)  + "," +
                                          MakeInsertString_FNC(H_Zdata.Duf4_h)  + "," + MakeInsertString_FNC(H_Zdata.Duf5_h)  + "," + MakeInsertString_FNC(H_Zdata.Duf6_h)  + "," +
                                          MakeInsertString_FNC(H_Zdata.Duf7_h)  + "," + MakeInsertString_FNC(H_Zdata.Duf8_h)  + "," + MakeInsertString_FNC(H_Zdata.Duf9_h)  + "," +

// 2021/02/08 Ver02.22.10 未完伝票フラグを '1' で更新 --->
//                                        MakeInsertString_FNC(H_Zdata.Duf10_h) + "," + " 0" + "," + H_Zdata.Hsflg_h + ","    + H_Zdata.Hgflg_h +
                                          MakeInsertString_FNC(H_Zdata.Duf10_h) + "," + " 1" + "," + H_Zdata.Hsflg_h + ","    + H_Zdata.Hgflg_h +
// <--- 2021/02/08 Ver02.22.10 未完伝票フラグを '1' で更新

                                     ") ";
    			L_Cmd.CommandText = L_SqlMsg_H;    
    			L_Cmd.ExecuteNonQuery();

    			// ヘッダ情報を格納
    			H_DenInfo.KESN    = H_Zdata.Kesn_h;
    			H_DenInfo.DKEI    = H_Zdata.Dkei_h;
    			H_DenInfo.DYMD    = H_Zdata.Dymd_h;
    			H_DenInfo.OrgDcno = H_Zdata.OrgDcno;
    			H_DenInfo.KYMD    = H_Zdata.Kymd_h;
    			H_DenInfo.KBMN    = H_Zdata.Kbmn_h;
    			H_DenInfo.KUSR    = H_Zdata.Kusr_h;
    			H_DenInfo.FUSR    = H_Zdata.Fusr_h;
    			H_DenInfo.DCNO    = H_Zdata.Dcno_h;
    			H_DenInfo.DUNO    = H_Zdata.Duno_h;
    			H_DenInfo.SGNO    = H_Zdata.Sgno_h;
    			H_DenInfo.DSEQ    = H_Zdata.Dseq_h;
    			H_DenInfo.FMOD    = H_Zdata.Fmod_h;
    			H_DenInfo.FTIM    = H_Zdata.Ftim_h;
    			H_DenInfo.LMOD    = H_Zdata.Lmod_h;
    			H_DenInfo.LTIM    = H_Zdata.Ltim_h;
    			// 未完伝票件数、実仕訳件数を更新
    			if (H_Kakutyo)
                {
    				// 部署入出力処理
    				L_Cmd.CommandText = "UPDATE SJCTL SET BDENC = BDENC + 1 WHERE KESN = " + H_Zdata.Kesn_h + " AND KEIK = " + H_Zdata.Dkei_h;
    				L_Cmd.ExecuteNonQuery();
    			}
                else
                {
    				// 日次処理
    				L_Cmd.CommandText = "UPDATE VOLUM2 SET BDENC = BDENC + 1, DENAC = DENAC + 1 WHERE KESN = " + H_Zdata.Kesn_h + " AND CKEI = " + H_Zdata.Dkei_h;
    				L_Cmd.ExecuteNonQuery();
    			}    
    			H_DenInfo.GRNO = 1;

                #region *-リンク情報
                // 変数定義
                bool IsSyoriFileCopyImport = false;
    			bool IsSyoriFileCopyEdoc   = false;
    			bool IsSyoriDinlink        = false;
    			bool IsSyoriEdoc           = false;
    			bool IsSyoriEdocsrch       = false;
    
    			bool IsExistEdocFile       = false;
    			bool IsExistEdocNumber     = false;
    			System.Collections.Generic.Dictionary<string, int> dictEdocNumber = new Dictionary<string, int>();
                // (無し / 1(今回伝票) / 2(別伝票))

                if (H_Zdata.LNO != 0)
                {
    				L_LKID = 0;
    
    				if (H_LINK.Rows.Count > 0)
                    {
    					foreach (DataRow L_LinkRowLoop in H_LINK.Rows)
                        {
                            L_LinkRow = L_LinkRowLoop;
    						// 変数初期化
    						IsSyoriFileCopyImport = false;
    						IsSyoriFileCopyEdoc   = false;
    						IsSyoriDinlink        = false;
    						IsSyoriEdoc           = false;
    						IsSyoriEdocsrch       = false;
    
    						IsExistEdocFile       = false;
    						IsExistEdocNumber     = false;
    
    						ColumnToAryLink(ref L_LinkRow, ref L_DataLink);
    
    						if (H_Zdata.LNO < Convert.ToInt32(L_DataLink[G_Index_LNO]))
                            {
    							break;
    						}    
    
    						if (H_Zdata.LNO == Convert.ToInt32(L_DataLink[G_Index_LNO]))
                            {
    							// 2018/04/06 居軒 ▼(SIAS-8925)処理要否判断と処理本体
    
    							// DINLINK ｲﾝﾎﾟｰﾄFile ｲﾝﾎﾟｰﾄEdoc EDOC EDOCSRCH
    							//   ○      －         －        －    －     ０：ＵＲＬ
    							//   ○      －         －        －    －     １：リンク
    							//   ○      ○         －        －    －     ２：インポート
    							//   ○      －         ○        ○    ○     ３：e文書 新e文書
    							//   －      －         －        －    ○     ３：e文書 新e文書検索項目２個目以降
    							//   ○      －         －        －    －     ３：e文書 既存e文書へのリンク
    							//   －      －         －        －    －     ３：e文書 既存e文書へのリンク済み
    
    							// ★★★各処理するかどうかの判断★★★

// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応 --->
//    							if (Convert.ToInt32(L_DataLink[G_Index_FLG1]) == 0)
//                              {
//  								IsSyoriDinlink = true;
//    							}
//                              else if (Convert.ToInt32(L_DataLink[G_Index_FLG1]) == 1)
//                              {
//    								IsSyoriDinlink = true;
//    							}
//                              else if (Convert.ToInt32(L_DataLink[G_Index_FLG1]) == 2)
//                              {
//    								IsSyoriDinlink = true;
//    								IsSyoriFileCopyImport = true;    
//    							}
//                              else if (Convert.ToInt32(L_DataLink[G_Index_FLG1]) == 3)
//                              {
                                
                                int EdocFLG1 = 0;
                                EdocFLG1 = Convert.ToInt32(L_DataLink[G_Index_FLG1]);

                                if (EdocFLG1 == 0)
                                {
    								IsSyoriDinlink = true;
    							}
                                else if (EdocFLG1 == 1)
                                {
    								IsSyoriDinlink = true;
    							}
                                else if (EdocFLG1 == 2)
                                {
    								IsSyoriDinlink        = true;
    								IsSyoriFileCopyImport = true;    
    							}
                                else if (EdocFLG1 == 3 || EdocFLG1 == 4 || EdocFLG1 == 5)
                                {
// <--- 2021/10/25 Ver02.23.03 令和３年改正電帳法対応

                                    // AI-OCRの場合のみ、ファイルをリネーム
                                    if (P_SKUBUN == (int)eSKUBUN.SKUBUN_AIOCR)
                                    {
                                        #region 令和３年改正電帳法対応前ソース(コメントアウト)
// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応 --->
//                                      // TSFUYOの値
//    									if (TimeStampStartDate.Count != 0 && TimeStampEndDate.Count != 0)
//                                      {
//    										// タイムスタンプ付与設定がされている場合は日付チェック
//    										if (TimeStampStartDate[7] != 0 && (TimeStampStartDate[7] <= CurrentDate && CurrentDate < TimeStampEndDate[7]))
//                                          {
//    											// 現在の日付が、請求書の付与開始日と申請終了日の期間内であれば「1」
//    											L_TSFUYO = 1;
//    										}
//                                          else
//                                          {
//    											// 期間外であれば「0」
//    											L_TSFUYO = 0;
//    										}
//    									}
//                                      else
//                                      {
//    										// タイムスタンプ付与設定がされていない場合は「0」
//    										L_TSFUYO = 0;
//    									}
//    									// AI-OCRの場合はリネームしたファイル名＋拡張子
//    									L_LinkFile = L_DataLink[Convert.ToInt32(G_Index_E_EDOC)] + Path.GetExtension(L_DataLink[Convert.ToInt32(G_Index_LINK)]);
//    									if (L_TSFUYO == 0)
//                                      {
//    									　　// 「tmp」フォルダにコピー
//    										if (!Directory.Exists(G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\tmp"))
//                                          {
//    											Directory.CreateDirectory(G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\tmp");
//    										}
//    										L_LinkCopyS = G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\tmp\\" + L_LinkFile;
//    									}
//                                      else
//                                      {
//    										L_LinkCopyS = G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\" + L_LinkFile;
//    									}
                                        #endregion
                                        // AI-OCRの場合はリネームしたファイル名＋拡張子
    									L_LinkFile = L_DataLink[Convert.ToInt32(G_Index_E_EDOC)] + Path.GetExtension(L_DataLink[Convert.ToInt32(G_Index_LINK)]);

                                        switch (EdocFLG1)
                                        {
                                            // 3：e文書(スキャナ)
                                            case 3:
                                                // 請求書のタイムスタンプ開始日・終了日の範囲内チェック
                                                if (TimeStampStartDate.Count != 0 &&
                                                    TimeStampEndDate.Count   != 0 &&
                                                    TimeStampStartDate[7]    != 0 &&
                                                    TimeStampStartDate[7]    <= CurrentDate &&
                                                    CurrentDate              < TimeStampEndDate[7])
                                                {
                                                    L_TSFUYO = 1;
                                                    if (!Directory.Exists(G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString()))
                                                    {
                                                        Directory.CreateDirectory(G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString());
                                                    }
                                                    L_LinkCopyS = G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\" + L_LinkFile;
                                                }
                                                else
                                                {
                                                    L_TSFUYO = 0;
                                                    // 範囲外なら「tmp」フォルダにコピー
    									            if (!Directory.Exists(G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\tmp"))
                                                    {
    									                Directory.CreateDirectory(G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\tmp");
    									            }
    									            L_LinkCopyS = G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\tmp\\" + L_LinkFile;
                                                }
                                                L_TSNA = 0;
                                                break;
                                            // 4：e文書(電子取引)(タイムスタンプあり)
                                            case 4:
                                                L_TSFUYO = 1;
                                                if (!Directory.Exists(G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString()))
                                                {
                                                    Directory.CreateDirectory(G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString());
                                                }
                                                L_LinkCopyS = G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\" + L_LinkFile;
                                                L_TSNA = 1;
                                                break;
                                            // 5：e文書(電子取引)(タイムスタンプなし)
                                            case 5:
                                                L_TSFUYO = 0;
                                                if (!Directory.Exists(G_EdocNaPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString()))
                                                {
                                                    Directory.CreateDirectory(G_EdocNaPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString());
                                                }
                                                L_LinkCopyS = G_EdocNaPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\" + L_LinkFile;
                                                L_TSNA      = 1;
                                                break;
                                        }
// <--- 2021/10/26 Ver02.23.03 令和３年改正電帳法対応
    								}
                                    // ワークフローの場合は、ファイル名そのまま
                                    else
                                    {
// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応 --->
//    									L_TSFUYO = 1;
                                        // ワークフローの場合はそのままのファイル名
    									L_LinkFile  = System.IO.Path.GetFileName(L_DataLink[Convert.ToInt32(G_Index_LINK)]);
//                                      L_LinkCopyS = G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\" + L_LinkFile;
                                        if (EdocFLG1 == 3)      // e文書（スキャナ）
                                        {
                                            L_TSFUYO    = 1;
                                            if (!Directory.Exists(G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString()))
                                            {
                                                Directory.CreateDirectory(G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString());
                                            }
                                            L_LinkCopyS = G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\" + L_LinkFile;
                                            L_TSNA      = 0;
                                        }
                                        else if (EdocFLG1 == 4) // e文書（電子取引）(タイムスタンプあり)
                                        {
                                            L_TSFUYO    = 1;
                                            if (!Directory.Exists(G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString()))
                                            {
                                                Directory.CreateDirectory(G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString());
                                            }
                                            L_LinkCopyS = G_EdocPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\" + L_LinkFile;
                                            L_TSNA      = 1;
                                        }
                                        else　　　              // e文書（電子取引）(タイムスタンプなし)
                                        {
                                            L_TSFUYO    = 0;
                                            // Ver2021/11/08 Ver02.23.04 EDOCNAパス変数の間違い修正(G_EdocPass　→　G_EdocNaPass）--->
                                            if (!Directory.Exists(G_EdocNaPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString()))
                                            {
                                                Directory.CreateDirectory(G_EdocNaPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString());
                                            }
                                            L_LinkCopyS = G_EdocNaPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\" + L_LinkFile;
                                            // <--- Ver2021/11/08 Ver02.23.04 EDOCNAパス変数の間違い修正(G_EdocPass　→　G_EdocNaPass）
                                            L_TSNA = 1;
                                        }
// <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応
    								}
    
    								// ★ファイル存在
    								IsExistEdocFile = System.IO.File.Exists(L_LinkCopyS);
    
    								// ★e文書番号存在
    								L_Cmd.CommandText = "SELECT EDOC FROM EDOC WHERE " + "KESN = " + H_Zdata.Kesn_h + " AND EDOC = " + MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]) + "";
    								L_Reader          = L_Cmd.ExecuteReader();
    								IsExistEdocNumber = L_Reader.Read();
    								L_Reader.Close();
    
    								if (IsExistEdocNumber == false)
                                    {
    									if (IsExistEdocFile == true)
                                        {
    										throw new MyException(MC_RESULT_ERR_IN_LINK);
    										// ★エラー（MC_RESULT_ERR_IN_LINK = -56 リンク情報エラー）
    									}
    									// Dictに追加(e文書番号)(1)
    									dictEdocNumber.Add(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)], 1);
    									IsSyoriDinlink      = true;
    									IsSyoriFileCopyEdoc = true;
    									IsSyoriEdoc         = true;
    									IsSyoriEdocsrch     = true;
    								}
                                    else
                                    {
    									if (IsExistEdocFile == false)
                                        {
    										throw new MyException(MC_RESULT_ERR_IN_LINK);
    										// ★エラー（MC_RESULT_ERR_IN_LINK = -56 リンク情報エラー）
    									}
    									if (dictEdocNumber.ContainsKey(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]) == false)
                                        {
    										// Dictに追加(e文書番号)(2)
    										dictEdocNumber.Add(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)], 2);
    										IsSyoriDinlink = true;
    									}
                                        else if (dictEdocNumber[L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]] == 1)
                                        {
    										IsSyoriEdocsrch = true;
    									}
                                        else if (dictEdocNumber[L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]] == 2)
                                        {
    										// 処理無し
    									}
    								}
    							}
    
    							// ★★★ここから処理本体★★★    
    							// ★ファイルコピー（インポート）
    							if (IsSyoriFileCopyImport == true)
                                {
    								// ファイルが既に存在した場合、日付再取得
    								do
                                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    									L_User            = Strings.Format(H_Zdata.Fusr, "0000");
    									L_User            = H_Zdata.Fusr.ToString("d4");
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    									L_Cmd.CommandText = "SELECT CURRENT_TIMESTAMP";
                                        L_Cmd.CommandText = "SELECT " + (G_IsPostgre ? " CLOCK_TIMESTAMP()" : " CURRENT_TIMESTAMP");
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

    									L_ReadFlg         = true;
    									L_Now             = Convert.ToDateTime(L_Cmd.ExecuteScalar());

// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    									L_Time            = Strings.Format(L_Now, "yyyyMMddHHmmssff");
    									L_Time            = L_Now.ToString("yyyyMMddHHmmssff");
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    
    									L_LinkCopyM       = L_DataLink[Convert.ToInt32(G_Index_LINK)];
    									L_LinkFile        = Path.GetFileName(L_DataLink[Convert.ToInt32(G_Index_LINK)]);
    									L_LinkFile        = L_User + L_Time + L_LinkFile;
    									L_LinkCopyS       = G_LinkPass + "\\CO" + H_CCOD + "\\" + H_Zdata.Kesn_h.ToString() + "\\" + L_LinkFile;

    									if (File.Exists(L_LinkCopyS))
                                        {
    										// ファイルが存在した場合は、リトライ
    									}
                                        else
                                        {
    										File.Copy(L_LinkCopyM, L_LinkCopyS);
    										L_DataLink[Convert.ToInt32(G_Index_LINK)] = L_LinkFile;
    										break;
    									}
    								} while (true);
    							}
    
    							// ★ファイルコピー（e文書）
    							if (IsSyoriFileCopyEdoc == true)
                                {
                                    L_LinkCopyM = L_DataLink[Convert.ToInt32(G_Index_LINK)];
                                    File.Copy(L_LinkCopyM, L_LinkCopyS);
    							}
    
    							// ★INSERT DINLINK
    							if (IsSyoriDinlink == true)
                                {
    								L_LKID += 1;
    								if (L_LKID > 9999)
                                    {
    									throw new MyException(MC_RESULT_ERR_IN_LINK);
    								}
    
    								switch (L_DataLink[G_Index_FLG1])
                                    {
    									case "0":
    										// L_DataLink(G_Index_FLG1) = 0,1 のときはそのまま
    										L_LinkFile = L_DataLink[Convert.ToInt32(G_Index_LINK)];
    										break;
    									case "1":
    										// L_DataLink(G_Index_FLG1) = 0,1 のときはそのまま
    										L_LinkFile = L_DataLink[Convert.ToInt32(G_Index_LINK)];
    										break;
    									case "2":
    										// L_DataLink(Convert.ToInt32(G_Index_LINK)) そのまま
    										// ＜ファイルコピー（インポート）＞で必ず処理される
    										L_LinkFile = L_DataLink[Convert.ToInt32(G_Index_LINK)];
    										break;
    									case "3":

// 2021/10/22 Ver02.23.02 令和３年改正電帳法対応(リンク形式追加) --->
                                        case "4":
                                        case "5":
// <--- 2021/10/22 Ver02.23.02 令和３年改正電帳法対応(リンク形式追加)

    										// ＜ファイルコピー（e文書）＞を通るかどうかはわからない
    										// 今一度ファイル名取得
    										if (P_SKUBUN != (int)eSKUBUN.SKUBUN_AIOCR)
                                            {
    											L_LinkFile = System.IO.Path.GetFileName(L_DataLink[Convert.ToInt32(G_Index_LINK)]);
    										}
    										break;
    								}
    
// 2021/10/26 Ver02.23.03 令和３年改正電帳法対応(リンク形式：3～5 は FLG1 = 3 をセット) --->
//    								L_Cmd.CommandText = "INSERT INTO DINLINK(KESN,DKEI,DSEQ,LKID,STYP,LNAM,LINK,FLG1,CDM1,CDM2,SDM1,IDM1,FUSR,FMOD,FTIM,LUSR,LMOD,LTIM,FWAY,EDOC)" +    // <--- PostgreSQL対応
//                                                             " VALUES(" + H_Zdata.Kesn_h + "," + H_Zdata.Dkei_h + "," + H_Zdata.Dseq_h + "," + L_LKID + "," + (H_Kakutyo ? 1 : 0) + "," +
//                                                                          MakeInsertString_FNC((L_DataLink[Convert.ToInt32(G_Index_LNAM)]).Replace("'", "''")) + "," +
//                                                                          MakeInsertString_FNC(L_LinkFile.Replace("'", "''")) + "," + L_DataLink[G_Index_FLG1] + ",NULL,NULL,0,0," + H_Zdata.Fusr_h + "," +
//                                                                          H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h + "," + H_Zdata.Fusr_h + "," + H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h + "," + H_Zdata.Fway_h + "," +
//                                                                          MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]) + ")";
        
                                    int flg1 = 0;
                                    flg1 = int.Parse(L_DataLink[G_Index_FLG1]);
                                    if (flg1 >= 3)
                                    {
                                        flg1 = 3;
                                    }

                                    L_Cmd.CommandText = "INSERT INTO DINLINK(KESN,DKEI,DSEQ,LKID,STYP,LNAM,LINK,FLG1,CDM1,CDM2,SDM1,IDM1,FUSR,FMOD,FTIM,LUSR,LMOD,LTIM,FWAY,EDOC)" +    // <--- PostgreSQL対応
                                                                " VALUES(" + H_Zdata.Kesn_h + "," + H_Zdata.Dkei_h + "," + H_Zdata.Dseq_h + "," + L_LKID + "," + (H_Kakutyo ? 1 : 0) + "," +
                                                                             MakeInsertString_FNC((L_DataLink[Convert.ToInt32(G_Index_LNAM)]).Replace("'", "''")) + "," +
                                                                             MakeInsertString_FNC(L_LinkFile.Replace("'", "''")) + "," + flg1 + ",NULL,NULL,0,0," + H_Zdata.Fusr_h + "," +
                                                                             H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h + "," + H_Zdata.Fusr_h + "," + H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h + "," + H_Zdata.Fway_h + "," +
                                                                             MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]) + ")";
// <--- 2021/10/26 Ver02.23.03 令和３年改正電帳法対応(リンク形式：3～5 は FLG1 = 3 をセット) 

                                    L_Cmd.ExecuteNonQuery();
    							}
    
    							// ★INSERT EDOC
    							if (IsSyoriEdoc == true)
                                {
    								if (P_SKUBUN == (int)eSKUBUN.SKUBUN_AIOCR)
                                    {

// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応(EDOCテーブルレイアウト変更) --->
//                                      // AI-OCRの場合は最終承認者をNULLでインポート
//                                      L_Cmd.CommandText = "INSERT INTO EDOC(KESN,EDOC,SYUBETSU,NUSR,SUSR,CMT,TSFUYO,FUSR,FMOD,FTIM,LUSR,LMOD,LTIM)" +    // <--- PostgreSQL対応
//                                                               " VALUES(" + H_Zdata.Kesn_h + "," + MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]) + "," + 0 + "," +
//                                                                            MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_NUSR)]) + ",NULL,NULL," + L_TSFUYO + "," + H_Zdata.Fusr_h + "," +
//                                                                            H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h + "," + H_Zdata.Fusr_h + "," + H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h + ")";
//    								}
//                                  else
//                                  {
//    									L_Cmd.CommandText = "INSERT INTO EDOC(KESN,EDOC,SYUBETSU,NUSR,SUSR,CMT,TSFUYO,FUSR,FMOD,FTIM,LUSR,LMOD,LTIM)" +    // <--- PostgreSQL対応
//                                                               " VALUES(" + H_Zdata.Kesn_h + "," + MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]) + "," + 0 + "," +
//                                                                            MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_NUSR)]) + "," +
//                                                                            MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_SUSR)]) + "," + "NULL," +
//                                                                            L_TSFUYO + "," + H_Zdata.Fusr_h + "," + H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h + "," + H_Zdata.Fusr_h + "," +
//                                                                            H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h + ")";
//    								}
                                        // AI-OCRの場合は最終承認者をNULLでインポート
                                        L_Cmd.CommandText = "INSERT INTO EDOC(KESN,EDOC,SYUBETSU,NUSR,SUSR,CMT,TSFUYO,FUSR,FMOD,FTIM,LUSR,LMOD,LTIM,DOCSEQ,LTVFUYO,CDM1,CDM2,IDM1,IDM2,TSNA)" +    // <--- PostgreSQL対応
                                                                 " VALUES(" + H_Zdata.Kesn_h + "," + MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]) + "," + 0 + "," +
                                                                              MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_NUSR)]) + ",NULL,NULL," + L_TSFUYO + "," + 
                                                                              H_Zdata.Fusr_h + "," + H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h      + "," + 
                                                                              H_Zdata.Fusr_h + "," + H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h      + "," + 0 + "," + 0  + "," +
                                                                              "NULL,NULL"    + "," + 0 + "," + 0    + "," + L_TSNA + ")";
    								}
                                    else
                                    {
                                        // ワークフローの場合はセットされている最終承認者
    									L_Cmd.CommandText = "INSERT INTO EDOC(KESN,EDOC,SYUBETSU,NUSR,SUSR,CMT,TSFUYO,FUSR,FMOD,FTIM,LUSR,LMOD,LTIM,DOCSEQ,LTVFUYO,CDM1,CDM2,IDM1,IDM2,TSNA)" +    // <--- PostgreSQL対応
                                                                 " VALUES(" + H_Zdata.Kesn_h + "," + MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]) + "," + 0 + "," +
                                                                              MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_NUSR)])  + "," +
                                                                              MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_SUSR)])  + "," + "NULL," + L_TSFUYO + ","  + 
                                                                              H_Zdata.Fusr_h + "," + H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h + "," + 
                                                                              H_Zdata.Fusr_h + "," + H_Zdata.Fmod_h + "," + H_Zdata.Ftim_h + "," + 0 + "," + 0 + "," + "NULL,NULL" +
                                                                              "," + 0 + ","  + 0 + "," + L_TSNA + ")";
                                    }
// <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応(EDOCテーブルレイアウト変更)

    								L_Cmd.ExecuteNonQuery();
    
    								// ★INSERT AIOCRTEXT(AIOCRの場合のみ)
    								if (P_SKUBUN == (int)eSKUBUN.SKUBUN_AIOCR)
                                    {
    									foreach (DataRow L_AIOCRRowLoop in H_AIOCR.Rows)
                                        {
                                            L_AIOCRRow = L_AIOCRRowLoop;

    										L_Cmd.CommandText = "INSERT INTO AIOCRTEXT(KESN,EDOC,ITMID,ITMODR,OCRTEXT)" +    // <--- PostgreSQL対応
                                                                          " VALUES(" + H_Zdata.Kesn_h + "," + MakeInsertString_FNC((L_AIOCRRow[(int)eAIOCR.DATA_EDOC]).ToString()) + "," +
                                                                                       MakeInsertString_FNC(L_AIOCRRow[(int)eAIOCR.DATA_ITMID].ToString())   + "," +
                                                                                       MakeInsertString_FNC(L_AIOCRRow[(int)eAIOCR.DATA_ITMODR].ToString())  + "," +
                                                                                       MakeInsertString_FNC(L_AIOCRRow[(int)eAIOCR.DATA_OCRTEXT].ToString()) + ")";
    										L_Cmd.ExecuteNonQuery();
    									}
    								}
    							}
    
    							// ★INSERT EDOCSRCH
    							if (IsSyoriEdocsrch == true)
                                {
    								// SEQ番号の取得
    								L_Cmd.CommandText = "SELECT MAX(ESEQ) FROM EDOCSRCH WHERE " + "KESN = " + H_Zdata.Kesn_h +
                                                                                             " AND EDOC = " + MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]) + "";
    								L_Reader          = L_Cmd.ExecuteReader();
    								L_ESEQ            = 1;
    								if (L_Reader.Read())
                                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    									if (Information.IsDBNull(L_Reader[0]) == false)
    									if (DBNull.Value.Equals(L_Reader[0]) == false)
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                        {
    										L_ESEQ = Convert.ToInt32(L_Reader[0]) + 1;
    									}
    									L_Reader.Close();
    								}
    								if (L_ESEQ > 99)
                                    {
    									throw new MyException(MC_RESULT_ERR_IN_LINK);
    								}
    								// レコードの作成
    								// AI-OCRの場合はHINMEIではなくBIKOの値を備考に
    								if (P_SKUBUN == (int)eSKUBUN.SKUBUN_AIOCR)
                                    {
    									L_Cmd.CommandText = "INSERT INTO EDOCSRCH(KESN,EDOC,ESEQ,SYMD,SVALU,STRNAM,BIKO,SYUBETSU)" +    // <--- PostgreSQL対応
                                                                "VALUES(" + H_Zdata.Kesn_h + "," + MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]) + "," + L_ESEQ + "," +
                                                                            MakeInsertString_FNC(L_DataLink[G_Index_E_SYMD])  + "," +
                                                                            MakeInsertString_FNC(L_DataLink[G_Index_E_SVALU]) + "," +
// <2022/01/27 Ver 02.23.05 OEM_#114492:発行者名称にアポストロフィがあるとデータ連携時に　-32：データベース読込みエラーが発生して異常終了する>
//                                                                            MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_STRNAM)]) + "," +
//                                                                            MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_BIKO)])   + "," +
                                                                            MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_STRNAM)].Replace("'", "''")) + "," +
                                                                            MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_BIKO)].Replace("'", "''")) + "," +
                                                                            MakeInsertString_FNC(L_DataLink[G_Index_E_SYUBETSU]) +
                                                                       ")";
    									L_Cmd.ExecuteNonQuery();
    								}
                                    else
                                    {
    									// --->Ver01.17.04
// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応(書類種別に関係なく、品名をセット(不要部分をコメントアウト)) --->
//    									if ((Convert.ToInt32(L_DataLink[Convert.ToInt32(G_Index_E_SYUBETSU)]) == 3))
//                                      {
    										L_Cmd.CommandText = "INSERT INTO EDOCSRCH(KESN,EDOC,ESEQ,SYMD,SVALU,STRNAM,BIKO,SYUBETSU)" +    // <--- PostgreSQL対応
                                                                    "VALUES(" + H_Zdata.Kesn_h + "," + MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]) + "," + L_ESEQ + "," +
                                                                                MakeInsertString_FNC(L_DataLink[G_Index_E_SYMD])  + "," +
                                                                                MakeInsertString_FNC(L_DataLink[G_Index_E_SVALU]) + "," +
// <2022/01/27 Ver 02.23.05 OEM_#114492:発行者名称にアポストロフィがあるとデータ連携時に　-32：データベース読込みエラーが発生して異常終了する>
//                                                                                MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_STRNAM)]) + "," +
//                                                                                MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_HINMEI)]) + "," +
                                                                                MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_STRNAM)].Replace("'", "''")) + "," +
                                                                                MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_HINMEI)].Replace("'", "''")) + "," +
                                                                                MakeInsertString_FNC(L_DataLink[G_Index_E_SYUBETSU]) +
                                                                          ")";
//    									} else {
//    										L_Cmd.CommandText = "INSERT INTO EDOCSRCH(KESN,EDOC,ESEQ,SYMD,SVALU,STRNAM,BIKO,SYUBETSU)" +    // <--- PostgreSQL対応
//                                                                    "VALUES(" + H_Zdata.Kesn_h + "," + MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_EDOC)]) + "," + L_ESEQ + "," +
//                                                                                MakeInsertString_FNC(L_DataLink[G_Index_E_SYMD])  + "," +
//                                                                                MakeInsertString_FNC(L_DataLink[G_Index_E_SVALU]) + "," +
//                                                                                MakeInsertString_FNC(L_DataLink[Convert.ToInt32(G_Index_E_STRNAM)]) + ",NULL," +
//                                                                                MakeInsertString_FNC(L_DataLink[G_Index_E_SYUBETSU]) +
//                                                                          ")";
//    									}
// <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応(書類種別に関係なく、品名をセット、不要部分をコメントアウト)

                                        L_Cmd.ExecuteNonQuery();
    								}
    							}
                            }
    					}    
    				}
                }
                #endregion

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.OK, "WriteTransaction_H_FNC");
                mLogger.LogClose();
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                functionReturnValue = 1;
    		}
            #region 2020/03/06 Ver02.19.05.9901 PostgreSQL対応(コメントアウト) --->
//            catch (SqlException ex)
//            {
//    			switch (ex.Number)
//                {
//    				case 1222:
//    					functionReturnValue = MC_RESULT_ERR_IN_ROCK;
//    					break;
//    				default:
//    					functionReturnValue = (L_ReadFlg ? MC_RESULT_ERR_DBREAD : MC_RESULT_ERR_DBWRITE);
//    					break;
//    			}    
//    		}
            #endregion
            catch (DbException ex)
            {
                if (G_DbFactory.IsLockTimeoutError(ex))
                {
                    functionReturnValue = MC_RESULT_ERR_IN_ROCK;
                }
                else
                {
                    functionReturnValue = L_ReadFlg == true ? MC_RESULT_ERR_DBREAD : MC_RESULT_ERR_DBWRITE;
                }

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.ERROR, "WriteTransaction_H_FNC" + ex.Message);
                mLogger.LogClose();
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

            }
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

            catch (MyException ex)
            {
                functionReturnValue = ex.ErrNo;
    			throw ex;    
    		}
            catch (Exception ex)
            {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.ERROR, "WriteTransaction_H_FNC" + ex.Message);
                mLogger.LogClose();
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
    			functionReturnValue = -99;
    			throw new MyException(MC_RESULT_ERR_OTHERS, ex);    
    		}

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
            mLogger.LogWrite(Logger.Level.OK, "WriteTransaction_H_FNC");
            mLogger.LogClose();
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

    		return functionReturnValue;    
    	}

    	// *===========================================================================================*
    	//    伝票登録用(伝票明細)
    	// *===========================================================================================*
    	private int WriteTransaction_M_FNC(ref structZDATA H_Zdata, ref structDENPYO H_DenInfo, short H_Juse, IDbCommand H_Cmd, DataTable H_dtVolum, bool H_Kakutyo, ref structZDATA H_ZdataBunri, int H_BunriOK_R,
                                           int H_BunriOK_S, bool H_Khkzan, int H_DFUK, int H_GAIKAKamoku_Flg, bool H_DenPyoEnd, int H_ZeroSiwake_R, int H_ZeroSiwake_S, int H_IsAuto, short H_Touki, IDbConnection H_Con,
                                           bool ChgDen)
    	{
    		int functionReturnValue = 0;
    
    		IDbCommand  L_Cmd      = default(IDbCommand);
    		IDataReader L_Reader   = default(IDataReader);
    		DataRow     L_VolumRow = default(DataRow);
    		bool        L_ReadFlg  = false;
    		string      L_HColR    = null;
    		string      L_HColS    = null;
    		string      L_HColGR   = null;
    		string      L_HColGS   = null;
    		string      L_HColHR   = null;
    		string      L_HColHS   = null;
    		string      L_Where    = null;
    		decimal     L_Gkti     = default(decimal);
    		string      L_SqlMsg   = null;
    		int         L_ReVal    = 1;
            #region 不要(コメントアウト)
//    		object L_Fgno = null;
    		// エラー値返送用
//    		string L_Filter = "";
            #endregion

            L_VolumRow = H_dtVolum.Select("KESN = " + H_Zdata.Kesn_h)[0];    
    		L_Cmd      = H_Cmd;
    
    		try
            {
    			// DSEQの設定
    			H_Zdata.Dseq = H_DenInfo.DSEQ;
                //
                mLogger.LogWrite(Logger.Level.INFO, "SSEQ取得");
                //*
                mLogger.LogClose();
                //*

                //
                #region SSEQの取得
                if (H_Kakutyo == true)
                {
    				L_Cmd.CommandText = "SELECT LSEQ + 1 FROM SJCTL  WHERE KESN = " + H_Zdata.Kesn + " AND KEIK = " + H_Zdata.Dkei;
    			}
                else
                {
    				L_Cmd.CommandText = "SELECT DTUS + 1 FROM VOLUM2 WHERE KESN = " + H_Zdata.Kesn + " AND CKEI = " + H_Zdata.Dkei;
    			}
    			L_ReadFlg    = true;
    			H_Zdata.Sseq = Convert.ToInt32(L_Cmd.ExecuteScalar());
                //
                mLogger.LogWrite(Logger.Level.OK, "SSEQ取得");
                //*
                mLogger.LogClose();
                //*

                //
                L_ReadFlg = false;
                #endregion
                #region 最終仕訳番号更新
                //
                mLogger.LogWrite(Logger.Level.INFO, "最終仕訳番号更新");
                //*
                mLogger.LogClose();
                //*

                //
                if (H_Kakutyo == true)
                {
                    L_Cmd.CommandText = "UPDATE SJCTL  SET LSEQ = LSEQ + 1 WHERE KESN = " + H_Zdata.Kesn + " AND KEIK = " + H_Zdata.Dkei;
                }
                else
                {
                    L_Cmd.CommandText = "UPDATE VOLUM2 SET DTUS = DTUS + 1 WHERE KESN = " + H_Zdata.Kesn + " AND CKEI = " + H_Zdata.Dkei;
                }
    			L_Cmd.ExecuteNonQuery();
                //
                mLogger.LogWrite(Logger.Level.OK, "最終仕訳番号更新");
                //*
                mLogger.LogClose();
                //*

                //
                #endregion
                #region 分離子仕訳が存在する場合、SEQを取得
                if (((H_Zdata.Bkbn == 1) || (H_Zdata.Bkbn == 2) || (H_Zdata.Bkbn == 3)) && ((H_BunriOK_R == 1 && H_ZeroSiwake_R == 1) || (H_BunriOK_S == 1 && H_ZeroSiwake_S == 1)))
                {
                    //
                    mLogger.LogWrite(Logger.Level.INFO, "分_SEQ取得");
                    //*
                    mLogger.LogClose();
                    //*

                    //
                    // 消費税子仕訳の金額が0円になる場合で、0円消費税仕訳を作成しない場合はDSEQ=PSEQ
                    if (H_ZdataBunri.Valu == 0 && P_Int_ZERO == 0)
                    {
    					if (H_Kakutyo == true)
                        {
    						L_Cmd.CommandText = "SELECT LSEQ  FROM SJCTL WHERE KESN = " + H_Zdata.Kesn + " AND KEIK = " + H_Zdata.Dkei;
    					}
                        else
                        {
    						L_Cmd.CommandText = "SELECT DTUS  FROM VOLUM2 WHERE KESN = " + H_Zdata.Kesn + " AND CKEI = " + H_Zdata.Dkei;
    					}
    				}
                    else
                    {
    					if (H_Kakutyo == true)
                        {
    						L_Cmd.CommandText = "SELECT LSEQ + 1 FROM SJCTL WHERE KESN = " + H_Zdata.Kesn + " AND KEIK = " + H_Zdata.Dkei;
    					}
                        else
                        {
    						L_Cmd.CommandText = "SELECT DTUS + 1 FROM VOLUM2 WHERE KESN = " + H_Zdata.Kesn + " AND CKEI = " + H_Zdata.Dkei;
    					}
    				}
    				L_ReadFlg    = true;
    				H_Zdata.Pseq = Convert.ToInt32(L_Cmd.ExecuteScalar());
                    //
                    mLogger.LogWrite(Logger.Level.OK, "分_SEQ取得");
                    //*
                    mLogger.LogClose();
                    //*

                    //
                    L_ReadFlg = false;

                    // 最終SSEQ更新
                    //
                    mLogger.LogWrite(Logger.Level.INFO, "分_SEQ更新");
                    //*
                    mLogger.LogClose();
                    //*

                    //
                    if (H_Kakutyo == true)
                    {
    					L_Cmd.CommandText = "UPDATE SJCTL SET LSEQ = LSEQ + 1 WHERE KESN = " + H_Zdata.Kesn + " AND KEIK = " + H_Zdata.Dkei;
    				}
                    else
                    {
    					L_Cmd.CommandText = "UPDATE VOLUM2 SET DTUS = DTUS + 1 WHERE KESN = " + H_Zdata.Kesn + " AND CKEI = " + H_Zdata.Dkei;
    				}
    				L_Cmd.ExecuteNonQuery();
                    //
                    mLogger.LogWrite(Logger.Level.OK, "分_SEQ更新");
                    //*
                    mLogger.LogClose();
                    //*

                    //
                }
                else
                {
    				// 分離子仕訳は無いので、PSEQ=SSEQにする
    				H_Zdata.Pseq = H_Zdata.Sseq;
    			}
                #endregion

                //---
                mLogger.LogWrite(Logger.Level.INFO, "仕訳明細");
                //*
                mLogger.LogClose();
                //*
                //---

                #region 行番号
                if (ChgDen == false)
                {
    				// 同一伝票の場合
    				H_Zdata.Grno = H_DenInfo.GRNO;
    
    				// 複合フラグによって行番号の振り方を変える
    				if (H_DFUK == 0 || H_DFUK == 1)
                    {
    					// 単一・複合（手入力諸口）の場合には行番号を通常付番
    					H_Zdata.Dlin = H_DenInfo.DLIN + 1;
    				}
                    else
                    {    
    					// 直前のレコードと貸借摘要フラグが一致し、且つ貸借共通摘要の場合は摘要文字列が一致する場合に同一の行番号を付番
    					if ((H_Zdata.Tekiflg == P_Save_Tekiflg) && (((P_Save_Tekiflg == 0) && (H_Zdata.Rtky == P_Save_Tkyo)) || (P_Save_Tekiflg == 1)) && H_Zdata.Grno == P_Save_Grno)
                        {
                            // 直前のレコードと摘要が一致し、かつ貸借属性が逆の場合に直前のレコードと同一の行番号を付番
// 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(条件が足りないため追加) --->                            
//                            if ((P_Save_Dflg != 0 && H_Zdata.Dflg != P_Save_Dflg) && P_DlinSetFlg == false && H_DenInfo.DLIN > 0)
                            if ((P_Save_Dflg != 0 && H_Zdata.Dflg != P_Save_Dflg && H_Zdata.Dflg != 0) && P_DlinSetFlg == false && H_DenInfo.DLIN > 0)
// 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(条件が足りないため追加) 
                            {
                                // 子仕訳の場合は無条件でカウントアップ
                                if (H_Zdata.Pflg == 2)
                                {
    								H_Zdata.Dlin = H_DenInfo.DLIN + 1;
    								P_DlinSetFlg = false;
// 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(諸口が絡むデータの場合、貸借の行番号を適切にカウントする様にする) --->
                                    H_Zdata.R_Dlin2 = H_Zdata.Dlin;
                                    H_Zdata.S_Dlin2 = H_Zdata.Dlin;
// <--- 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(諸口が絡むデータの場合、貸借の行番号を適切にカウントする様にする)
                                }
                                else
                                {
    								H_Zdata.Dlin = H_DenInfo.DLIN;
    								// 貸方諸口→借方諸口→貸方諸口の仕訳をインポートした場合に
    								P_DlinSetFlg = true;
// 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(諸口が絡むデータの場合、貸借の行番号を適切にカウントする様にする) --->
                                    if (H_Zdata.R_Dlin2 == 0) H_Zdata.R_Dlin2 = 1;
                                    if (H_Zdata.S_Dlin2 == 0) H_Zdata.S_Dlin2 = 1;
                                    switch (H_Zdata.Dflg)
                                    {
                                        case 1:
                                            H_Zdata.Dlin = H_Zdata.R_Dlin2;
                                            break;
                                        case 2:
                                            H_Zdata.Dlin = H_Zdata.S_Dlin2;
                                            break;
                                        default:
                                            if (H_Zdata.R_Dlin2 > H_Zdata.S_Dlin2)
                                            {
                                                H_Zdata.S_Dlin2 = H_Zdata.R_Dlin2;
                                            }
                                            else
                                            {
                                                H_Zdata.R_Dlin2 = H_Zdata.S_Dlin2;
                                            }
                                            break;
                                    }
// <--- 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(諸口が絡むデータの場合、貸借の行番号を適切にカウントする様にする)

                                }
                            }
                            else
                            {
    							H_Zdata.Dlin = H_DenInfo.DLIN + 1;
    							P_DlinSetFlg = false;
// 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(諸口が絡むデータの場合、貸借の行番号を適切にカウントする様にする) --->
                                H_Zdata.R_Dlin2 = H_Zdata.Dlin;
                                H_Zdata.S_Dlin2 = H_Zdata.Dlin;
// <--- 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(諸口が絡むデータの場合、貸借の行番号を適切にカウントする様にする)

                            }
                        }
                        else
                        {
    						H_Zdata.Dlin = H_DenInfo.DLIN + 1;
    						P_DlinSetFlg = false;
// 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(諸口が絡むデータの場合、貸借の行番号を適切にカウントする様にする) --->
                            H_Zdata.R_Dlin2 = H_Zdata.Dlin;
                            H_Zdata.S_Dlin2 = H_Zdata.Dlin;
// <--- 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(諸口が絡むデータの場合、貸借の行番号を適切にカウントする様にする)

                        }
                    }    
    			}
                else
                {
    				// ** 別伝票の場合    
    				P_Save_Dflg = 0;
    
    				P_Save_Tkyo = null;
    
    				// 行区切り
    				P_Save_Grno  = 0;    
    				P_DlinSetFlg = false;    
    				H_Zdata.Grno = 1;    
    				H_Zdata.Dlin = 1;

// 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(諸口が絡むデータの場合、貸借の行番号を適切にカウントする様にする) --->
                    H_Zdata.R_Dlin2 = 1;
                    H_Zdata.S_Dlin2 = 1;
// <--- 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(諸口が絡むデータの場合、貸借の行番号を適切にカウントする様にする)
                }
                #endregion

                #region 入力年月日・入力時分秒・最終変更年月日・最終変更時分秒
                H_Zdata.Fmod = H_DenInfo.FMOD;
    			H_Zdata.Ftim = H_DenInfo.FTIM;
    			H_Zdata.Lmod = H_DenInfo.LMOD;
    			H_Zdata.Ltim = H_DenInfo.LTIM;
                #endregion

                // 貸借属性及び摘要を保存
                P_Save_Dflg    = H_Zdata.Dflg;
    			P_Save_Tkyo    = H_Zdata.Rtky;
    			// *-01.05.02
    			P_Save_Tekiflg = H_Zdata.Tekiflg;
    			// -*
    
    			// 行区切り対応
    			P_Save_Grno = H_Zdata.Grno;
    
    			// データInsert
    			L_SqlMsg = "";
    			L_SqlMsg = "INSERT INTO " + (H_Kakutyo ? "SJDAT" : "ZDATA") +      // <--- PostgreSQL対応
                                     " (KESN,  DKEI,  DSEQ,    SSEQ,    PSEQ,    PFLG,    BKBN,  GRNO,   DCPG,   DLIN, " + "DFLG, RBMN, RTOR,  RKMK,  REDA,  RKOJ,  RKOS,  RPRJ,  RSEG,  RDM1,  " +
                                       "RDM2,  RDM3,  RTKY,    RTNO,    RIMG,    SBMN,    STOR,  SKMK,   SEDA,   SKOJ, " + "SKOS, SPRJ, SSEG,  SDM1,  SDM2,  SDM3,  STKY,  STNO,  SIMG,  TFLG,  " +
                                       "EXVL,  ZKVL,  VALU,    ZKMK,    ZRIT,    ZZKB,    ZGYO,  ZSRE,   RRIT,   SRIT, " + "RZKB, RGYO, RSRE,  SZKB,  SGYO,  SSRE,  IFRI,  SYMD,  SKBN,  SKIZ,  " +
                                       "UYMD,  UKBN,  UKIZ,    SEXP,    DKEC,    PCSW,    UPSW,  ZRSW,   GPCD,   FMOD, " + "FTIM, FUSR, FWAY,  LMOD,  LTIM,  LUSR,  LWAY,  DELF,  CPRT,  FSEN,  " +
                                       "SMNT,  IDM4,  RHEI_CD, SHEI_CD, RATE,    GAIKA,   GEXVL, GZKVL,  SMEXP,  RDM4, " + "RDM5, RDM6, RDM7,  RDM8,  RDM9,  RDM10, RDM11, RDM12, RDM13, RDM14, " +
                                       "RDM15, RDM16, RDM17,   RDM18,   RDM19,   RDM20,   SDM4,  SDM5,   SDM6,   SDM7, " + "SDM8, SDM9, SDM10, SDM11, SDM12, SDM13, SDM14, SDM15, SDM16, SDM17, " +
                                       "SDM18, SDM19, SDM20,   RSSEQAI, SSSEQAI, TEKIFLG, HFLG,  SWGFLG, SWIFLG ";
    			L_SqlMsg = L_SqlMsg + ",RKEIGEN, SKEIGEN, ZKEIGEN";

// Ver02.26.01 インボイス対応 --->
                L_SqlMsg = L_SqlMsg + " , RURIZEIKEISAN, SURIZEIKEISAN, ZURIZEIKEISAN, RMENZEIKEIKA, SMENZEIKEIKA, ZMENZEIKEIKA ";
// <--- Ver02.26.01 インボイス対応

    			if (DBSUB.bGSWKCHK)
                {
    				L_SqlMsg = L_SqlMsg + ", FSFLG)";
    			}
                else
                {
    				L_SqlMsg = L_SqlMsg + ")";
    			}

// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->    
    			L_SqlMsg = L_SqlMsg + "VALUES(" + H_Zdata.Kesn + "," + H_Zdata.Dkei   + "," + H_Zdata.Dseq + "," + H_Zdata.Sseq + "," + H_Zdata.Pseq + "," + H_Zdata.Pflg + "," + H_Zdata.Bkbn + "," + H_Zdata.Grno + "," +
                                                  H_Zdata.Dcpg + "," + H_Zdata.Dlin   + "," + H_Zdata.Dflg + "," +
                                                  MakeInsertString_FNC(H_Zdata.Rbmn)  + "," + MakeInsertString_FNC(H_Zdata.Rtor) + "," + MakeInsertString_FNC(H_Zdata.Rkmk) + "," + MakeInsertString_FNC(H_Zdata.Reda) + "," +
                                                  MakeInsertString_FNC(H_Zdata.Rkoj)  + "," + MakeInsertString_FNC(H_Zdata.Rkos) + "," +
                                                  MakeInsertString_FNC(H_Zdata.Rprj)  + "," + MakeInsertString_FNC(H_Zdata.Rseg) + "," + MakeInsertString_FNC(H_Zdata.Rdm1) + "," + MakeInsertString_FNC(H_Zdata.Rdm2) + "," +
//                                                  MakeInsertString_FNC(H_Zdata.Rdm3)  + "," + MakeInsertString_FNC(Strings.Replace(H_Zdata.Rtky, "'", "''")) + "," + (H_Zdata.Rtno < 0 ? "NULL" : H_Zdata.Rtno.ToString()) + "," +
                                                  MakeInsertString_FNC(H_Zdata.Rdm3)  + "," + MakeInsertString_FNC(H_Zdata.Rtky.Replace("'", "''")) + "," + (H_Zdata.Rtno < 0 ? "NULL" : H_Zdata.Rtno.ToString()) + "," +
                                                  H_Zdata.Rimg + "," + MakeInsertString_FNC(H_Zdata.Sbmn) + "," + MakeInsertString_FNC(H_Zdata.Stor) + "," + MakeInsertString_FNC(H_Zdata.Skmk) + "," +
                                                  MakeInsertString_FNC(H_Zdata.Seda)  + "," + MakeInsertString_FNC(H_Zdata.Skoj) + "," + MakeInsertString_FNC(H_Zdata.Skos) + "," + MakeInsertString_FNC(H_Zdata.Sprj) + "," +
                                                  MakeInsertString_FNC(H_Zdata.Sseg)  + "," + MakeInsertString_FNC(H_Zdata.Sdm1) + "," + MakeInsertString_FNC(H_Zdata.Sdm2) + "," + MakeInsertString_FNC(H_Zdata.Sdm3) + "," +
//                                                  MakeInsertString_FNC(Strings.Replace(H_Zdata.Stky, "'", "''")) + "," + (H_Zdata.Stno < 0 ? "NULL" : H_Zdata.Stno.ToString()) + "," + H_Zdata.Simg + "," + H_Zdata.Tflg + "," +
                                                  MakeInsertString_FNC(H_Zdata.Stky.Replace("'", "''")) + "," + (H_Zdata.Stno < 0 ? "NULL" : H_Zdata.Stno.ToString()) + "," + H_Zdata.Simg + "," + H_Zdata.Tflg + "," +
                                                  H_Zdata.Exvl + "," + H_Zdata.Zkvl   + "," + H_Zdata.Valu + "," + MakeInsertString_FNC(H_Zdata.Zkmk) + "," + (H_Zdata.Zrit < 0 ? "NULL" : H_Zdata.Zrit.ToString()) + "," +
                                                  H_Zdata.Zzkb + "," + H_Zdata.Zgyo   + "," + H_Zdata.Zsre + "," + (H_Zdata.Rrit < 0 ? "NULL" : H_Zdata.Rrit.ToString()) + "," + (H_Zdata.Srit < 0 ? "NULL" : H_Zdata.Srit.ToString()) + "," +
                                                  H_Zdata.Rzkb + "," + H_Zdata.Rgyo   + "," + H_Zdata.Rsre + "," + H_Zdata.Szkb   + "," + H_Zdata.Sgyo + "," + H_Zdata.Ssre   + "," + H_Zdata.Ifri + "," + H_Zdata.Symd + "," +
                                                  (H_Zdata.Skbn < 0 ? "NULL" : H_Zdata.Skbn.ToString()) + "," + H_Zdata.Skiz + "," + H_Zdata.Uymd + "," + (H_Zdata.Ukbn < 0 ? "NULL" : H_Zdata.Ukbn.ToString()) + "," +
                                                  H_Zdata.Ukiz + "," + H_Zdata.Sexp   + "," + MakeInsertString_FNC(H_Zdata.Dkec)  + "," + H_Zdata.Pcsw + "," + H_Zdata.Upsw   + "," + H_Zdata.Zrsw + "," +
                                                  MakeInsertString_FNC(H_Zdata.Gpcd)  + "," + H_Zdata.Fmod + "," + H_Zdata.Ftim   + "," + H_Zdata.Fusr + "," + H_Zdata.Fway   + "," + H_Zdata.Lmod + "," + H_Zdata.Ltim + "," +
                                                  H_Zdata.Lusr + "," + H_Zdata.Lway   + "," + H_Zdata.Delf + "," + H_Zdata.Cprt   + "," + H_Zdata.Fsen + "," + H_Zdata.Smnt   + "," + H_Zdata.Idm4 + "," +
                                                  MakeInsertString_FNC(H_Zdata.Rhei_cd) + "," + MakeInsertString_FNC(H_Zdata.Shei_cd) + "," + H_Zdata.Rate + "," + H_Zdata.Gaika + "," + H_Zdata.Gexvl + "," +
                                                  H_Zdata.Gzkvl + "," + H_Zdata.Smexp + "," + MakeInsertString_FNC(H_Zdata.Rdm4)  + "," + MakeInsertString_FNC(H_Zdata.Rdm5)  + "," + MakeInsertString_FNC(H_Zdata.Rdm6)  + "," +
                                                  MakeInsertString_FNC(H_Zdata.Rdm7)  + "," + MakeInsertString_FNC(H_Zdata.Rdm8)  + "," + MakeInsertString_FNC(H_Zdata.Rdm9)  + "," + MakeInsertString_FNC(H_Zdata.Rdm10) + "," +
                                                  MakeInsertString_FNC(H_Zdata.Rdm11) + "," + MakeInsertString_FNC(H_Zdata.Rdm12) + "," + MakeInsertString_FNC(H_Zdata.Rdm13) + "," + MakeInsertString_FNC(H_Zdata.Rdm14) + "," +
                                                  MakeInsertString_FNC(H_Zdata.Rdm15) + "," + MakeInsertString_FNC(H_Zdata.Rdm16) + "," + MakeInsertString_FNC(H_Zdata.Rdm17) + "," + MakeInsertString_FNC(H_Zdata.Rdm18) + "," +
                                                  MakeInsertString_FNC(H_Zdata.Rdm19) + "," + MakeInsertString_FNC(H_Zdata.Rdm20) + "," + MakeInsertString_FNC(H_Zdata.Sdm4)  + "," + MakeInsertString_FNC(H_Zdata.Sdm5)  + "," +
                                                  MakeInsertString_FNC(H_Zdata.Sdm6)  + "," + MakeInsertString_FNC(H_Zdata.Sdm7)  + "," + MakeInsertString_FNC(H_Zdata.Sdm8)  + "," + MakeInsertString_FNC(H_Zdata.Sdm9)  + "," +
                                                  MakeInsertString_FNC(H_Zdata.Sdm10) + "," + MakeInsertString_FNC(H_Zdata.Sdm11) + "," + MakeInsertString_FNC(H_Zdata.Sdm12) + "," + MakeInsertString_FNC(H_Zdata.Sdm13) + "," +
                                                  MakeInsertString_FNC(H_Zdata.Sdm14) + "," + MakeInsertString_FNC(H_Zdata.Sdm15) + "," + MakeInsertString_FNC(H_Zdata.Sdm16) + "," + MakeInsertString_FNC(H_Zdata.Sdm17) + "," +
                                                  MakeInsertString_FNC(H_Zdata.Sdm18) + "," + MakeInsertString_FNC(H_Zdata.Sdm19) + "," + MakeInsertString_FNC(H_Zdata.Sdm20) + "," + H_Zdata.Rsseqai + "," +
                                                  H_Zdata.Ssseqai + "," + H_Zdata.Tekiflg + "," + H_Zdata.Hflg + "," + H_Zdata.Swiflg + "," + H_Zdata.Swiflg;
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応

    			L_SqlMsg = L_SqlMsg + "," + H_Zdata.Rkeigen + "," + H_Zdata.Skeigen + "," + H_Zdata.Zkeigen;

// Ver02.26.01 インボイス対応 --->
                L_SqlMsg = L_SqlMsg + "," + H_Zdata.Rurizeikeisan + "," + H_Zdata.Surizeikeisan + "," + H_Zdata.Zurizeikeisan;
                L_SqlMsg = L_SqlMsg + "," + H_Zdata.Rmenzeikeika  + "," + H_Zdata.Smenzeikeika  + "," + H_Zdata.Zmenzeikeika;
// <--- Ver02.26.01 インボイス対応

    			if (DBSUB.bGSWKCHK)
                {
    				// セットする値は「0」固定
    				L_SqlMsg = L_SqlMsg + ",0)";
    			}
                else
                {
    				L_SqlMsg = L_SqlMsg + ")";
    			}    
    			L_Cmd.CommandText = L_SqlMsg;    
    			L_Cmd.ExecuteNonQuery();

                //---
                mLogger.LogWrite(Logger.Level.OK, "仕訳明細");
                //*
                mLogger.LogClose();
                //*
                //---

                // 拡張の場合は消込残高計算フラグを処理しない
                if (H_Kakutyo == false)
                {
    				if (CheckKSKMK(H_Zdata.Kesn, H_Zdata.Rkmk, H_Zdata.Skmk) == true)
                    {
    					L_Cmd.CommandText = "UPDATE VOLUM2 SET CKS6 = 0 WHERE  KESN = " + H_Zdata.Kesn + " AND CKEI = " + H_Zdata.Dkei;
    					L_Cmd.ExecuteNonQuery();
    				}
    			}
    
    			H_DenInfo.GRNO = H_Zdata.Grno;
// 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(諸口が絡むデータの場合、貸借の行番号を適切にカウントする様にする) --->
//              H_DenInfo.DLIN = H_Zdata.Dlin;
//    2020/08/25 Ver02.22.05 Ver01.19.05.9901の行番号対応の不備修正 --->
//                if (H_DFUK != 2) H_DenInfo.DLIN = H_Zdata.Dlin;
                H_DenInfo.DLIN = H_Zdata.Dlin;
//    <--- 2020/08/25 Ver02.22.05 Ver01.19.05.9901の行番号対応の不備修正
// <--- 2019/12/26 Ver01.19.05.9901 自動諸口＋分離時の行番号対応(諸口が絡むデータの場合、貸借の行番号を適切にカウントする様にする)

// ▼ ツルハ様カスタマイズ ▼
                // *----------------------------------------------------------------------------------------------------*
                // 【部門科目・科目取引先の自動登録】
                //      ・各残高テーブル、各予算１～４テーブル、（外貨使用なら）各外貨残高テーブル
                // *----------------------------------------------------------------------------------------------------*



// ▲ ツルハ様カスタマイズ ▲

                // *----------------------------------------------------------------------------------------------------*
                // 【3コードマスタレコード作成条件】
                //      ・自動登録（41:ワークフロー、51:BtoB連携）
                //      ・マスタ権限が追加変更以上
                // *----------------------------------------------------------------------------------------------------*
                if (H_IsAuto == 1 && nUsrSecMFLG >= 2)
                {
    				Make3CodeRecord(H_Con, H_Zdata, H_dtVolum, ref L_Cmd, H_Touki);
                    //---
                    mLogger.LogWrite(Logger.Level.OK, "仕訳明細_AUTO_ADD");
                    //*
                    mLogger.LogClose();
                    //*
                    //---
                }

                // 残高等の更新
                if (H_Kakutyo == false)
                {
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//                    L_HColR = "R" + Strings.Format(H_Zdata.Dkei, "000");
//    				  L_HColS = "S" + Strings.Format(H_Zdata.Dkei, "000");
                    L_HColR = "R" + H_Zdata.Dkei.ToString("d3");
                    L_HColS = "S" + H_Zdata.Dkei.ToString("d3");
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応

                    #region ** 月情報
                    L_Where           = " WHERE KESN = " + H_Zdata.Kesn + " AND CKEI = " + H_Zdata.Dkei;
    				L_Cmd.CommandText = "UPDATE VOLUM2 SET CKS0 = 1, CKS3 = 0, CKS4 = 0, CKS5 = 0, DTAC = DTAC + 1";
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//                    if ((Strings.Left(H_Zdata.Rkmk, 3) != "000") && (Strings.Left(H_Zdata.Skmk, 3) != "000"))
                    if ((H_Zdata.Rkmk.Substring(0, 3) != "000") && (H_Zdata.Skmk.Substring(0, 3) != "000"))
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応
                    {
                        L_Cmd.CommandText = L_Cmd.CommandText + ", GKDT = GKDT + " + H_Zdata.Valu;
    				}
                    else
                    {
// 2020/01/17 Ver01.19.05.9901 VB.NET関数 → C#関数 対応 --->
//                        if (Strings.Left(H_Zdata.Rkmk, 3) == "000")
//                        {
//    						  L_Cmd.CommandText = L_Cmd.CommandText + ", GKS1 = GKS1 + " + H_Zdata.Valu;
//     					  }
//    					  if (Strings.Left(H_Zdata.Skmk, 3) == "000")
//                        {
                        if (H_Zdata.Rkmk.Substring(0, 3) == "000")
                        {
                            L_Cmd.CommandText = L_Cmd.CommandText + ", GKS1 = GKS1 + " + H_Zdata.Valu;
                        }
                        if (H_Zdata.Skmk.Substring(0, 3) == "000")
                        {
// <--- 2019/12/26 Ver01.19.05.9901 VB.NET関数 → C#関数 対応
                            L_Cmd.CommandText = L_Cmd.CommandText + ", GKS2 = GKS2 + " + H_Zdata.Valu;
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BKEMX]) > 0) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BKESW]) == 0))
                    {
    					if (((!string.IsNullOrEmpty(H_Zdata.Rbmn)) && (!string.IsNullOrEmpty(H_Zdata.Reda))) || ((!string.IsNullOrEmpty(H_Zdata.Sbmn)) && (!string.IsNullOrEmpty(H_Zdata.Seda))))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_BKE = 0";
    					}
    				}
    				if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TKSW]) == 0)
                    {
    					if ((!string.IsNullOrEmpty(H_Zdata.Rtor)) || (!string.IsNullOrEmpty(H_Zdata.Stor)))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_TK = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TKEMX]) > 0) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TKESW]) == 0))
                    {
    					if (((!string.IsNullOrEmpty(H_Zdata.Rtor)) && (!string.IsNullOrEmpty(H_Zdata.Reda))) || ((!string.IsNullOrEmpty(H_Zdata.Stor)) && (!string.IsNullOrEmpty(H_Zdata.Seda))))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_TKE = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BTKMX]) > 0) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BTKSW]) == 0))
                    {
    					if (((!string.IsNullOrEmpty(H_Zdata.Rbmn)) && (!string.IsNullOrEmpty(H_Zdata.Rtor))) || ((!string.IsNullOrEmpty(H_Zdata.Sbmn)) && (!string.IsNullOrEmpty(H_Zdata.Stor))))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_BKT = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BTKEMX]) > 0) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BTKESW]) == 0))
                    {
    					if (((!string.IsNullOrEmpty(H_Zdata.Rbmn)) && (!string.IsNullOrEmpty(H_Zdata.Rtor)) && (!string.IsNullOrEmpty(H_Zdata.Reda))) ||
                            ((!string.IsNullOrEmpty(H_Zdata.Sbmn)) && (!string.IsNullOrEmpty(H_Zdata.Stor)) && (!string.IsNullOrEmpty(H_Zdata.Seda))))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_BKTE = 0";
    					}
    				}
    				if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGSW]) == 0)
                    {
    					if ((!string.IsNullOrEmpty(H_Zdata.Rseg)) || (!string.IsNullOrEmpty(H_Zdata.Sseg)))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_SK = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SKTMX]) > 0) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SKTSW]) == 0))
                    {
    					if (((!string.IsNullOrEmpty(H_Zdata.Rseg)) && (!string.IsNullOrEmpty(H_Zdata.Rtor))) || ((!string.IsNullOrEmpty(H_Zdata.Sseg)) && (!string.IsNullOrEmpty(H_Zdata.Stor))))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_SKT = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1FLG]) == 3) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1KSW]) == 0))
                    {
    					if ((!string.IsNullOrEmpty(H_Zdata.Rdm1)) || (!string.IsNullOrEmpty(H_Zdata.Sdm1)))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_D1K = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2FLG]) == 3) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2KSW]) == 0))
                    {
    					if ((!string.IsNullOrEmpty(H_Zdata.Rdm2)) || (!string.IsNullOrEmpty(H_Zdata.Sdm2)))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_D2K = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3FLG]) == 3) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3KSW]) == 0))
                    {
    					if ((!string.IsNullOrEmpty(H_Zdata.Rdm3)) || (!string.IsNullOrEmpty(H_Zdata.Sdm3)))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_D3K = 0";
    					}
    				}
    				L_Cmd.CommandText = L_Cmd.CommandText + L_Where;
    				L_Cmd.ExecuteNonQuery();

                    //---
                    mLogger.LogWrite(Logger.Level.OK, "VOLM2");
                    //*
                    mLogger.LogClose();
                    //*
                    //---

                    L_Cmd.CommandText = "SELECT GKDT,GKS1,GKS2 FROM VOLUM2" + L_Where;
    				L_ReadFlg         = true;
    				L_Reader          = L_Cmd.ExecuteReader();
    				L_Reader.Read();
    				L_ReadFlg         = false;
    				L_Gkti            = L_Reader.GetDecimal(1) + L_Reader.GetDecimal(2);
    				if (L_Gkti % 2 == 1)
                    {
    					if (L_Gkti > 0)
                        {
    						L_Gkti = L_Gkti + 1;
    					}
                        else
                        {
    						L_Gkti = L_Gkti - 1;
    					}
    				}
    				L_Gkti = (L_Gkti / 2) + L_Reader.GetDecimal(0);
    				L_Reader.Close();
    				L_Cmd.CommandText = "UPDATE VOLUM2 SET GKTI = " + L_Gkti + L_Where;
    				L_Cmd.ExecuteNonQuery();

                    //---
                    mLogger.LogWrite(Logger.Level.OK, "VOLM2(GKTI)");
                    //*
                    mLogger.LogClose();
                    //*
                    //---

                    #endregion
                    #region ** 科目残高
                    L_Cmd.CommandText = "UPDATE KMZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Rkmk + "'";
    				L_Cmd.ExecuteNonQuery();
    				L_Cmd.CommandText = "UPDATE KMZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Skmk + "'";
    				L_Cmd.ExecuteNonQuery();

                    //---
                    mLogger.LogWrite(Logger.Level.OK, "科目残高");
                    //*
                    mLogger.LogClose();
                    //*
                    //---

                    #endregion
                    #region ** 部門科目残高
                    if (!string.IsNullOrEmpty(H_Zdata.Rbmn))
                    {
    					L_Cmd.CommandText = "UPDATE BKZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Rbmn + "' AND KICD = '" + H_Zdata.Rkmk + "'";
    					L_Cmd.ExecuteNonQuery();
                        //---
                        mLogger.LogWrite(Logger.Level.OK, "部門科目残高_R");
                        //*
                        mLogger.LogClose();
                        //*
                        //---
                    }
                    if (!string.IsNullOrEmpty(H_Zdata.Sbmn))
                    {
    					L_Cmd.CommandText = "UPDATE BKZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Sbmn + "' AND KICD = '" + H_Zdata.Skmk + "'";
    					L_Cmd.ExecuteNonQuery();
                        //---
                        mLogger.LogWrite(Logger.Level.OK, "部門科目残高_S");
                        //*
                        mLogger.LogClose();
                        //*
                        //---
                    }
                    #endregion
                    #region ** 科目枝番残高
                    if (!string.IsNullOrEmpty(H_Zdata.Reda))
                    {
    					L_Cmd.CommandText = "UPDATE EDZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Rkmk + "' AND ECOD = '" + H_Zdata.Reda + "'";
    					L_Cmd.ExecuteNonQuery();
                        //---
                        mLogger.LogWrite(Logger.Level.OK, "科目枝番残高_R");
                        //*
                        mLogger.LogClose();
                        //*
                        //---
                    }
                    if (!string.IsNullOrEmpty(H_Zdata.Seda))
                    {
    					L_Cmd.CommandText = "UPDATE EDZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Skmk + "' AND ECOD = '" + H_Zdata.Seda + "'";
    					L_Cmd.ExecuteNonQuery();
                        //---
                        mLogger.LogWrite(Logger.Level.OK, "科目枝番残高_S");
                        //*
                        mLogger.LogClose();
                        //*
                        //---
                    }
                    #endregion
                    #region ** 部門科目枝番残高
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BKESW]) == 1)
                    {
    					if ((!string.IsNullOrEmpty(H_Zdata.Rbmn)) && (!string.IsNullOrEmpty(H_Zdata.Reda)))
                        {
    						L_Cmd.CommandText = "UPDATE BKEZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Rbmn + "' AND KICD = '" + H_Zdata.Rkmk + "' AND ECOD = '" + H_Zdata.Reda + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "部門科目枝番残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                        if ((!string.IsNullOrEmpty(H_Zdata.Sbmn)) && (!string.IsNullOrEmpty(H_Zdata.Seda)))
                        {
    						L_Cmd.CommandText = "UPDATE BKEZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Sbmn + "' AND KICD = '" + H_Zdata.Skmk + "' AND ECOD = '" + H_Zdata.Seda + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "部門科目枝番残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                    }
                    #endregion
                    #region ** 取引先科目残高
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TKSW]) == 1)
                    {
    					if (!string.IsNullOrEmpty(H_Zdata.Rtor))
                        {
    						L_Cmd.CommandText = "UPDATE TRZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND TRCD = '" + H_Zdata.Rtor + "' AND KICD = '" + H_Zdata.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "取引先科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                        if (!string.IsNullOrEmpty(H_Zdata.Stor))
                        {
    						L_Cmd.CommandText = "UPDATE TRZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND TRCD = '" + H_Zdata.Stor + "' AND KICD = '" + H_Zdata.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "取引先科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                    }
                    #endregion
                    #region ** 取引先科目枝番残高
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TKESW]) == 1)
                    {
    					if ((!string.IsNullOrEmpty(H_Zdata.Rtor)) && (!string.IsNullOrEmpty(H_Zdata.Reda)))
                        {
    						L_Cmd.CommandText = "UPDATE TKEZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND TRCD = '" + H_Zdata.Rtor + "' AND KICD = '" + H_Zdata.Rkmk + "' AND ECOD = '" + H_Zdata.Reda + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "取引先科目枝番残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                        if ((!string.IsNullOrEmpty(H_Zdata.Stor)) && (!string.IsNullOrEmpty(H_Zdata.Seda)))
                        {
    						L_Cmd.CommandText = "UPDATE TKEZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND TRCD = '" + H_Zdata.Stor + "' AND KICD = '" + H_Zdata.Skmk + "' AND ECOD = '" + H_Zdata.Seda + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "取引先科目枝番残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                    }
                    #endregion
                    #region ** 部門取引先科目残高
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BTKSW]) == 1)
                    {
    					if ((!string.IsNullOrEmpty(H_Zdata.Rbmn)) && (!string.IsNullOrEmpty(H_Zdata.Rtor)))
                        {
    						L_Cmd.CommandText = "UPDATE BTKZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Rbmn + "' AND TRCD = '" + H_Zdata.Rtor + "' AND KICD = '" + H_Zdata.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "部門取引先科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                        if ((!string.IsNullOrEmpty(H_Zdata.Sbmn)) && (!string.IsNullOrEmpty(H_Zdata.Stor)))
                        {
    						L_Cmd.CommandText = "UPDATE BTKZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Sbmn + "' AND TRCD = '" + H_Zdata.Stor + "' AND KICD = '" + H_Zdata.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "部門取引先科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                    }
                    #endregion
                    #region ** 部門取引先科目枝番残高
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BTKESW]) == 1)
                    {
    					if ((!string.IsNullOrEmpty(H_Zdata.Rbmn)) && (!string.IsNullOrEmpty(H_Zdata.Rtor)) && (!string.IsNullOrEmpty(H_Zdata.Reda)))
                        {
    						L_Cmd.CommandText = "UPDATE BTKEZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Rbmn + "' AND TRCD = '" + H_Zdata.Rtor + "' AND KICD = '" + H_Zdata.Rkmk + "' AND ECOD = '" + H_Zdata.Reda + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "部門取引先科目枝番残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                        if ((!string.IsNullOrEmpty(H_Zdata.Sbmn)) && (!string.IsNullOrEmpty(H_Zdata.Stor)) && (!string.IsNullOrEmpty(H_Zdata.Seda)))
                        {
    						L_Cmd.CommandText = "UPDATE BTKEZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Sbmn + "' AND TRCD = '" + H_Zdata.Stor + "' AND KICD = '" + H_Zdata.Skmk + "' AND ECOD = '" + H_Zdata.Seda + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "部門取引先科目枝番残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                    }
                    #endregion
                    #region ** セグメント科目残高
                    // *-00.03.01　ロックヒントを追加
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGSW]) == 1)
                    {
    					if (!string.IsNullOrEmpty(H_Zdata.Rseg))
                        {
    						L_Cmd.CommandText = "UPDATE SGKZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND SGCD = '" + H_Zdata.Rseg + "' AND KICD = '" + H_Zdata.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "セグメント科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                        if (!string.IsNullOrEmpty(H_Zdata.Sseg))
                        {
    						L_Cmd.CommandText = "UPDATE SGKZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND SGCD = '" + H_Zdata.Sseg + "' AND KICD = '" + H_Zdata.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "セグメント科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                    }
                    #endregion
                    #region ** セグメント取引先科目残高
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SKTSW]) == 1)
                    {
    					if ((!string.IsNullOrEmpty(H_Zdata.Rseg)) && (!string.IsNullOrEmpty(H_Zdata.Rtor)))
                        {
    						L_Cmd.CommandText = "UPDATE STKZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND SGCD = '" + H_Zdata.Rseg + "' AND TRCD = '" + H_Zdata.Rtor + "' AND KICD = '" + H_Zdata.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "セグメント取引先科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                        if ((!string.IsNullOrEmpty(H_Zdata.Sseg)) && (!string.IsNullOrEmpty(H_Zdata.Stor)))
                        {
    						L_Cmd.CommandText = "UPDATE STKZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND SGCD = '" + H_Zdata.Sseg + "' AND TRCD = '" + H_Zdata.Stor + "' AND KICD = '" + H_Zdata.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "セグメント取引先科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                    }
                    #endregion
                    #region ** ユニバーサル１科目残高
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1KSW]) == 1)
                    {
    					if (!string.IsNullOrEmpty(H_Zdata.Rdm1))
                        {
    						L_Cmd.CommandText = "UPDATE D1ZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND D1CD = '" + H_Zdata.Rdm1 + "' AND KICD = '" + H_Zdata.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "ユニバーサル１科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                        if (!string.IsNullOrEmpty(H_Zdata.Sdm1))
                        {
    						L_Cmd.CommandText = "UPDATE D1ZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND D1CD = '" + H_Zdata.Sdm1 + "' AND KICD = '" + H_Zdata.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "ユニバーサル１科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                    }
                    #endregion
                    #region ** ユニバーサル２科目残高
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2KSW]) == 1)
                    {
    					if (!string.IsNullOrEmpty(H_Zdata.Rdm2))
                        {
    						L_Cmd.CommandText = "UPDATE D2ZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND D2CD = '" + H_Zdata.Rdm2 + "' AND KICD = '" + H_Zdata.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "ユニバーサル２科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                        if (!string.IsNullOrEmpty(H_Zdata.Sdm2))
                        {
    						L_Cmd.CommandText = "UPDATE D2ZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND D2CD = '" + H_Zdata.Sdm2 + "' AND KICD = '" + H_Zdata.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "ユニバーサル２科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                    }
                    #endregion
                    #region ** ユニバーサル３科目残高
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3KSW]) == 1)
                    {
    					if (!string.IsNullOrEmpty(H_Zdata.Rdm3))
                        {
    						L_Cmd.CommandText = "UPDATE D3ZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND D3CD = '" + H_Zdata.Rdm3 + "' AND KICD = '" + H_Zdata.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "ユニバーサル３科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                        if (!string.IsNullOrEmpty(H_Zdata.Sdm3))
                        {
    						L_Cmd.CommandText = "UPDATE D3ZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND D3CD = '" + H_Zdata.Sdm3 + "' AND KICD = '" + H_Zdata.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "ユニバーサル３科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                    }
                    #endregion
                    #region ** 科目摘要残高
                    if (H_Khkzan == true)
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if ((Strings.Left(H_Zdata.Rkmk, 2) == "08") && (H_Zdata.Rtno > 0))
                        if ((H_Zdata.Rkmk.Substring(0, 2) == "08") && (H_Zdata.Rtno > 0))
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                        {
    						InsKhkzan_SUB(L_Cmd, H_Zdata.Kesn, H_Zdata.Rkmk, H_Zdata.Rtno);
    						L_Cmd.CommandText = "UPDATE KHKZAN SET " + L_HColR + " = " + L_HColR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Rkmk + "' AND TCOD = " + H_Zdata.Rtno;
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "科目摘要残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                        // 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
                        if ((H_Zdata.Skmk.Substring(0, 2) == "08") && (H_Zdata.Stno > 0))
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                        {
    						InsKhkzan_SUB(L_Cmd, H_Zdata.Kesn, H_Zdata.Skmk, H_Zdata.Stno);
    						L_Cmd.CommandText = "UPDATE KHKZAN SET " + L_HColS + " = " + L_HColS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Skmk + "' AND TCOD = " + H_Zdata.Stno;
    						L_Cmd.ExecuteNonQuery();

                            //---
                            mLogger.LogWrite(Logger.Level.OK, "科目摘要残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---

                        }
                    }
                    #endregion

                    #region 外貨残高の更新
                    if (P_b_GaikaTable_Flg == true)
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//                        L_HColGR = "GR" + Strings.Format(H_Zdata.Dkei, "000");
//    					  L_HColGS = "GS" + Strings.Format(H_Zdata.Dkei, "000");
//    					  L_HColHR = "HR" + Strings.Format(H_Zdata.Dkei, "000");
//    					  L_HColHS = "HS" + Strings.Format(H_Zdata.Dkei, "000");
                        L_HColGR = "GR" + H_Zdata.Dkei.ToString("d3");
                        L_HColGS = "GS" + H_Zdata.Dkei.ToString("d3");
                        L_HColHR = "HR" + H_Zdata.Dkei.ToString("d3");
                        L_HColHS = "HS" + H_Zdata.Dkei.ToString("d3");
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応

                        #region **** 外貨科目残高
                        // *-00.03.01　ロックヒントを追加
                        if (H_GAIKAKamoku_Flg == 3)
                        {
                            //---> ロックヒントを排除 2021/02/09
                            //---if (G_IsPostgre)
                            //---{
                                L_Cmd.CommandText = "UPDATE GKMZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Rkmk + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                L_Cmd.ExecuteNonQuery();
                                L_Cmd.CommandText = "UPDATE GKMZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Skmk + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                L_Cmd.ExecuteNonQuery();
                            //---}
                            //---else
                            //---{
                            //---    L_Cmd.CommandText = "UPDATE GKMZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Rkmk + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                            //---    L_Cmd.ExecuteNonQuery();
                            //---    L_Cmd.CommandText = "UPDATE GKMZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Skmk + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                            //---    L_Cmd.ExecuteNonQuery();
                            //---}
    					}
                        else if (H_GAIKAKamoku_Flg == 2)
                        {
                            //--- ロックヒントを排除 2021/02/09
                            //---if (G_IsPostgre)
                            //---{
                                L_Cmd.CommandText = "UPDATE GKMZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Rkmk + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                L_Cmd.ExecuteNonQuery();
                            //---}
                            //---else
                            //---{
                            //---    L_Cmd.CommandText = "UPDATE GKMZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Rkmk + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";L_Cmd.ExecuteNonQuery();
                            //---    L_Cmd.ExecuteNonQuery();
                            //---}
    					}
                        else if (H_GAIKAKamoku_Flg == 1)
                        {
                            //--- ロックヒントを排除 2021/02/09
                            //---if (G_IsPostgre)
                            //---{
                                L_Cmd.CommandText = "UPDATE GKMZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Skmk + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                L_Cmd.ExecuteNonQuery();
                            //---}
                            //---else
                            //---{
                            //---    L_Cmd.CommandText = "UPDATE GKMZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu + " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Skmk + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                            //---    L_Cmd.ExecuteNonQuery();
                            //---}
    					}
                        #endregion
                        #region **** 科目枝番外貨残高
                        // *-00.03.01　ロックヒントを追加
                        if (H_GAIKAKamoku_Flg == 3)
                        {
    						if (!string.IsNullOrEmpty(H_Zdata.Reda))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---if (G_IsPostgre)
                                //---{
                                    L_Cmd.CommandText = "UPDATE GEDZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu +
                                                                        " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Rkmk + "' AND ECOD = '" + H_Zdata.Reda + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                    L_Cmd.ExecuteNonQuery();
                                //---}
                                //---else
                                //---{
    							//---    L_Cmd.CommandText = "UPDATE GEDZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu +
                                //---                                        " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Rkmk + "' AND ECOD = '" + H_Zdata.Reda + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
    							//---    L_Cmd.ExecuteNonQuery();
                                //---}
                            }
    						if (!string.IsNullOrEmpty(H_Zdata.Seda))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---if (G_IsPostgre)
                                //---{
                                    L_Cmd.CommandText = "UPDATE GEDZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                                                        " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Skmk + "' AND ECOD = '" + H_Zdata.Seda + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                    L_Cmd.ExecuteNonQuery();
                                //---}
                                //---else
                                //---{
                                //---    L_Cmd.CommandText = "UPDATE GEDZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                //---                                        " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Skmk + "' AND ECOD = '" + H_Zdata.Seda + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                //---    L_Cmd.ExecuteNonQuery();
                                //---}
    						}
    					}
                        else if (H_GAIKAKamoku_Flg == 2)
                        {
    						if (!string.IsNullOrEmpty(H_Zdata.Reda))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---if (G_IsPostgre)
                                //---{
                                    L_Cmd.CommandText = "UPDATE GEDZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu +
                                                                        " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Rkmk + "' AND ECOD = '" + H_Zdata.Reda + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                    L_Cmd.ExecuteNonQuery();
                                //---}
                                //---else
                                //---{
                                //---    L_Cmd.CommandText = "UPDATE GEDZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu +
                                //---                                        " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Rkmk + "' AND ECOD = '" + H_Zdata.Reda + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                //---    L_Cmd.ExecuteNonQuery();
                                //---}
    						}
    					}
                        else if (H_GAIKAKamoku_Flg == 1)
                        {
    						if (!string.IsNullOrEmpty(H_Zdata.Seda))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---if (G_IsPostgre)
                                //---{
                                //--- そもそも構文エラー 2021/02/09
                                    //---L_Cmd.CommandText = "UPDATE GEDZAN WITH(UPDLOCK,ROWLOCK SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                    L_Cmd.CommandText = "UPDATE GEDZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                                                    " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Skmk + "' AND ECOD = '" + H_Zdata.Seda + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                    L_Cmd.ExecuteNonQuery();
                                //---}
                                //---else
                                //---{
    							//---    L_Cmd.CommandText = "UPDATE GEDZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                //---                                        " WHERE KESN = " + H_Zdata.Kesn + " AND KICD = '" + H_Zdata.Skmk + "' AND ECOD = '" + H_Zdata.Seda + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
    							//---    L_Cmd.ExecuteNonQuery();
                                //---}
                            }
    					}
                        #endregion
                        #region **** 取引先科目外貨残高
                        // *-00.03.01　ロックヒントを追加
                        if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TKSW]) == 1)
                        {
    						if (H_GAIKAKamoku_Flg == 3)
                            {
    							if (!string.IsNullOrEmpty(H_Zdata.Rtor))
                                {
                                    //--- ロックヒントを排除 2021/02/09
                                    //---if (G_IsPostgre)
                                    //---{
                                        L_Cmd.CommandText = "UPDATE GTRZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu +
                                                                            " WHERE KESN = " + H_Zdata.Kesn + " AND TRCD = '" + H_Zdata.Rtor + "' AND KICD = '" + H_Zdata.Rkmk + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                        L_Cmd.ExecuteNonQuery();
                                    //---}
                                    //---else
                                    //---{
                                    //---    L_Cmd.CommandText = "UPDATE GTRZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu +
                                    //---                                        " WHERE KESN = " + H_Zdata.Kesn + " AND TRCD = '" + H_Zdata.Rtor + "' AND KICD = '" + H_Zdata.Rkmk + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                    //---    L_Cmd.ExecuteNonQuery();
                                    //---}
    							}
    							if (!string.IsNullOrEmpty(H_Zdata.Stor))
                                {
                                    //--- ロックヒントを排除 2021/02/09
                                    //---if (G_IsPostgre)
                                    //---{
                                        L_Cmd.CommandText = "UPDATE GTRZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                                                            " WHERE KESN = " + H_Zdata.Kesn + " AND TRCD = '" + H_Zdata.Stor + "' AND KICD = '" + H_Zdata.Skmk + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                        L_Cmd.ExecuteNonQuery();
                                    //---}
                                    //---else
                                    //---{
                                    //---    L_Cmd.CommandText = "UPDATE GTRZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                    //---                                        " WHERE KESN = " + H_Zdata.Kesn + " AND TRCD = '" + H_Zdata.Stor + "' AND KICD = '" + H_Zdata.Skmk + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                    //---    L_Cmd.ExecuteNonQuery();
                                    //---}
    							}
    						}
                            else if (H_GAIKAKamoku_Flg == 2)
                            {
    							if (!string.IsNullOrEmpty(H_Zdata.Rtor))
                                {
                                    //--- ロックヒントを排除 2021/02/09
                                    //---if (G_IsPostgre)
                                    //---{
                                        L_Cmd.CommandText = "UPDATE GTRZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu +
                                                                            " WHERE KESN = " + H_Zdata.Kesn + " AND TRCD = '" + H_Zdata.Rtor + "' AND KICD = '" + H_Zdata.Rkmk + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                        L_Cmd.ExecuteNonQuery();
                                    //---}
                                    //---else
                                    //---{
                                    //---    L_Cmd.CommandText = "UPDATE GTRZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu +
                                    //---                                        " WHERE KESN = " + H_Zdata.Kesn + " AND TRCD = '" + H_Zdata.Rtor + "' AND KICD = '" + H_Zdata.Rkmk + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                    //---    L_Cmd.ExecuteNonQuery();
                                    //---}
    							}
    						}
                            else if (H_GAIKAKamoku_Flg == 1)
                            {
    							if (!string.IsNullOrEmpty(H_Zdata.Stor))
                                {
                                    //--- ロックヒントを排除 2021/02/09
                                    //---if (G_IsPostgre)
                                    //---{
                                        L_Cmd.CommandText = "UPDATE GTRZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                                                            " WHERE KESN = " + H_Zdata.Kesn + " AND TRCD = '" + H_Zdata.Stor + "' AND KICD = '" + H_Zdata.Skmk + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                        L_Cmd.ExecuteNonQuery();
                                    //---}
                                    //---else
                                    //---{
                                    //---    L_Cmd.CommandText = "UPDATE GTRZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                    //---                                        " WHERE KESN = " + H_Zdata.Kesn + " AND TRCD = '" + H_Zdata.Stor + "' AND KICD = '" + H_Zdata.Skmk + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                    //---    L_Cmd.ExecuteNonQuery();
                                    //---}
    							}
    						}
    					}
                        #endregion
                        #region **** 部門科目外貨残高
                        // *-00.03.01　ロックヒントを追加
                        if (H_GAIKAKamoku_Flg == 3)
                        {
    						if (!string.IsNullOrEmpty(H_Zdata.Rbmn))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---if (G_IsPostgre)
                                //---{
                                    L_Cmd.CommandText = "UPDATE GBKZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu +
                                                                        " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Rbmn + "' AND KICD = '" + H_Zdata.Rkmk + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                    L_Cmd.ExecuteNonQuery();
                                //---}
                                //---else
                                //---{
                                //---    L_Cmd.CommandText = "UPDATE GBKZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu +
                                //---                                        " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Rbmn + "' AND KICD = '" + H_Zdata.Rkmk + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                //---    L_Cmd.ExecuteNonQuery();
                                //---}
    						}
    						if (!string.IsNullOrEmpty(H_Zdata.Sbmn))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---if (G_IsPostgre)
                                //---{
                                    L_Cmd.CommandText = "UPDATE GBKZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                                                        " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Sbmn + "' AND KICD = '" + H_Zdata.Skmk + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                    L_Cmd.ExecuteNonQuery();
                                //---}
                                //---else
                                //---{
                                //---    L_Cmd.CommandText = "UPDATE GBKZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                //---                                        " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Sbmn + "' AND KICD = '" + H_Zdata.Skmk + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                //---    L_Cmd.ExecuteNonQuery();
                                //---}
    						}
    					}
                        else if (H_GAIKAKamoku_Flg == 2)
                        {
    						if (!string.IsNullOrEmpty(H_Zdata.Rbmn))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---if (G_IsPostgre)
                                //---{
                                    L_Cmd.CommandText = "UPDATE GBKZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu +
                                                                        " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Rbmn + "' AND KICD = '" + H_Zdata.Rkmk + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                    L_Cmd.ExecuteNonQuery();
                                //---}
                                //---else
                                //---{
                                //---    L_Cmd.CommandText = "UPDATE GBKZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_Zdata.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_Zdata.Valu +
                                //---                                        " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Rbmn + "' AND KICD = '" + H_Zdata.Rkmk + "' AND HEI_CD = '" + H_Zdata.Rhei_cd + "'";
                                //---    L_Cmd.ExecuteNonQuery();
                                //---}
    						}
    					}
                        else if (H_GAIKAKamoku_Flg == 1)
                        {
    						if (!string.IsNullOrEmpty(H_Zdata.Sbmn))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---if (G_IsPostgre)
                                //---{
                                    L_Cmd.CommandText = "UPDATE GBKZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                                                        " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Sbmn + "' AND KICD = '" + H_Zdata.Skmk + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                    L_Cmd.ExecuteNonQuery();
                                //---}
                                //---else
                                //---{
                                //---    L_Cmd.CommandText = "UPDATE GBKZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_Zdata.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_Zdata.Valu +
                                //---                                        " WHERE KESN = " + H_Zdata.Kesn + " AND BCOD = '" + H_Zdata.Sbmn + "' AND KICD = '" + H_Zdata.Skmk + "' AND HEI_CD = '" + H_Zdata.Shei_cd + "'";
                                //---    L_Cmd.ExecuteNonQuery();
                                //---}
    						}
                        }
                        #endregion
                    }
                    #endregion
                }

                // 0円消費税を作成しないマスタの場合に対応
                if (((H_Zdata.Bkbn == 1) || (H_Zdata.Bkbn == 2)  || (H_Zdata.Bkbn == 3)) &&
                    ((H_BunriOK_R == 1   && H_ZeroSiwake_R == 1) || (H_BunriOK_S == 1 && H_ZeroSiwake_S == 1)) &&
                    (P_Int_ZERO == 1     || (P_Int_ZERO == 0     && H_ZdataBunri.Valu != 0)))
                {
    				// 分離子仕訳のInsert
    				L_ReVal = WriteBunriTransaction_FNC(ref H_Zdata, ref H_DenInfo, H_Juse, H_Cmd, H_dtVolum, H_Kakutyo, ref H_ZdataBunri, H_BunriOK_R, H_BunriOK_S, H_Khkzan, H_GAIKAKamoku_Flg, H_IsAuto, H_Touki, H_Con);
// ↓ 2019/11/18 分離仕訳の３コード自動登録対応 ↓
    				if (L_ReVal != 1)
                    {
    					// 分離処理でエラーが発生した場合
    					functionReturnValue = L_ReVal;
    					return functionReturnValue;
    				}
// ↑ 2019/11/18 分離仕訳の３コード自動登録対応 ↑
    			}
    
    			functionReturnValue = 1;
    		}
            #region 2020/03/06 Ver02.19.05.9901 PostgreSQL対応(コメントアウト) ---> 
//            catch (SqlException ex)
//            {
//    			switch (ex.Number)
//                {
//    				case 1222:
//    					functionReturnValue = MC_RESULT_ERR_IN_ROCK;
//    					break;
//    				default:
//    					functionReturnValue = (L_ReadFlg ? MC_RESULT_ERR_DBREAD : MC_RESULT_ERR_DBWRITE);
//    					break;
//    			}    
//    		}
            #endregion
            catch (DbException ex)
            {
                if (G_DbFactory.IsLockTimeoutError(ex))
                {
                    functionReturnValue = MC_RESULT_ERR_IN_ROCK;
                }
                else
                {
                    functionReturnValue = L_ReadFlg == true ? MC_RESULT_ERR_DBREAD : MC_RESULT_ERR_DBWRITE;
                }
            }
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

            catch (MyException ex)
            {
    			functionReturnValue = ex.ErrNo;
    			throw ex;
    
    		}
            catch (Exception ex)
            {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.ERROR, "WriteTransaction_M_FNC" + ex.Message);
                mLogger.LogClose();
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
    			functionReturnValue = -99;
    			throw new MyException(MC_RESULT_ERR_OTHERS, ex);    
    		}

    		return functionReturnValue;    
    	}
    	// 未完伝票を正常伝票に更新
    	private int WriteTransaction_H2_FNC(ref structZDATA H_Zdata, ref structDENPYO H_DenInfo, IDbCommand H_Cmd, bool H_Kakutyo, IDbConnection H_Con)
    	{
    		int functionReturnValue = 0;
    
    		IDbCommand L_Cmd      = default(IDbCommand);
    		string     L_SqlMsg_H = null;
//    		int L_ReVal = 1;
    
    		L_Cmd = H_Cmd;
    
    		try
            {
    			// 正常伝票に更新
    			// Ver00.06.01 確定日についても更新するように修正
    			L_SqlMsg_H        = "UPDATE " + (H_Kakutyo ? "SJDAT_H" : "ZDATA_H") + " SET BFLG = 0 , KDAY = " + H_Zdata.Kday_h + " WHERE KESN = " + H_DenInfo.KESN + "AND DKEI = " + H_DenInfo.DKEI + "AND DSEQ = " + H_DenInfo.DSEQ;
    			L_Cmd.CommandText = L_SqlMsg_H;    
    			L_Cmd.ExecuteNonQuery();

    			// 未完伝票件数を更新
    			if (H_Kakutyo)
                {	// 部署入出力処理
    				L_Cmd.CommandText = "UPDATE SJCTL SET BDENC = BDENC - 1 WHERE KESN = " + H_Zdata.Kesn_h + " AND KEIK = " + H_Zdata.Dkei_h;
    				L_Cmd.ExecuteNonQuery();
    			}
                else
                {   // 日次処理
    				L_Cmd.CommandText = "UPDATE VOLUM2 SET BDENC = BDENC - 1 WHERE KESN = " + H_Zdata.Kesn_h + " AND CKEI = " + H_Zdata.Dkei_h;
    				L_Cmd.ExecuteNonQuery();
    			}
    
    			functionReturnValue = 1;
    		}
            #region 2020/03/06 Ver02.19.05.9901 PostgreSQL対応(コメントアウト) --->
//            catch (SqlException ex) {
//    			switch (ex.Number) {
//    				case 1222:
//    					functionReturnValue = MC_RESULT_ERR_IN_ROCK;
//    					break;
//    				default:
//    					functionReturnValue = MC_RESULT_ERR_DBWRITE;
//    					break;
//    			}    
//    		}
            #endregion
            catch (DbException ex)
            {
                if (G_DbFactory.IsLockTimeoutError(ex))
                {
                    functionReturnValue = MC_RESULT_ERR_IN_ROCK;
                }
                else
                {
                    functionReturnValue = MC_RESULT_ERR_DBWRITE;
                }
            }
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
            catch (MyException ex)
            {
    			functionReturnValue = ex.ErrNo;
    			throw ex;    
    		}
            catch (Exception ex)
            {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogClose();
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
    			functionReturnValue = -99;
    			throw new MyException(MC_RESULT_ERR_OTHERS, ex);    
    		}
    		return functionReturnValue;    
    	}

    	// 分離仕訳
    	private int WriteBunriTransaction_FNC(ref structZDATA H_Zdata, ref structDENPYO H_DenInfo, short H_Juse, IDbCommand H_Cmd, DataTable H_dtVolum, bool H_Kakutyo, ref structZDATA H_ZdataBunri, int H_BunriOK_R,
                                              int H_BunriOK_S, bool H_Khkzan, int H_GAIKAKamoku_Flg, int H_IsAuto, short H_Touki, IDbConnection H_Con)
    	{
    		int functionReturnValue = 0;
//  2019/11/18 分離仕訳の３コード自動登録対応
    		IDbCommand  L_Cmd      = default(IDbCommand);
    		IDataReader L_Reader   = default(IDataReader);
    		DataRow     L_VolumRow = default(DataRow);
    		bool        L_ReadFlg  = false;
    		string      L_HColR    = null;
    		string      L_HColS    = null;
    		string      L_HColGR   = null;
    		string      L_HColGS   = null;
    		string      L_HColHR   = null;
    		string      L_HColHS   = null;
    		string      L_Where    = null;
    		decimal     L_Gkti     = default(decimal);
    
    		string L_SqlMsg = null;
    
    		functionReturnValue = 1;
    		L_VolumRow          = H_dtVolum.Select("KESN = " + H_Zdata.Kesn)[0];
    
    		L_Cmd = H_Cmd;
    
    		try
            {
    			// 伝票SEQ
    			H_ZdataBunri.Dseq = H_DenInfo.DSEQ;    
    			// 仕訳SEQ
    			H_ZdataBunri.Sseq = H_Zdata.Pseq;    
    			// 親仕訳SEQ
    			H_ZdataBunri.Pseq = H_Zdata.Sseq;    
    			// 行番号
    			H_Zdata.Dlin      = H_Zdata.Dlin + 1;
    			H_ZdataBunri.Dlin = H_Zdata.Dlin;
    			H_DenInfo.DLIN    = H_Zdata.Dlin;    
    			// 入力年月日
    			H_ZdataBunri.Fmod = H_Zdata.Fmod;    
    			// 入力時分秒
    			H_ZdataBunri.Ftim = H_Zdata.Ftim;    
    			// 最終変更年月日
    			H_ZdataBunri.Lmod = H_Zdata.Lmod;    
    			// 最終変更時分秒
    			H_ZdataBunri.Ltim = H_Zdata.Ltim;
    
    			H_ZdataBunri.Grno = H_Zdata.Grno;

                // ** データInsert
                #region 元からコメントアウト
                // <---Ver01.16.02　2019/01/23　hirano　軽減税率＆10％対応
                // L_SqlMsg = "INSERT " && IIf(H_Kakutyo, "SJDAT", "ZDATA") _
                //     && " (KESN, DKEI, DSEQ, SSEQ, PSEQ, PFLG, BKBN, GRNO, DCPG, DLIN, " _
                //     && "DFLG, RBMN, RTOR, RKMK, REDA, RKOJ, RKOS, RPRJ, RSEG, RDM1, " _
                //     && "RDM2, RDM3, RTKY, RTNO, RIMG, SBMN, STOR, SKMK, SEDA, SKOJ, " _
                //     && "SKOS, SPRJ, SSEG, SDM1, SDM2, SDM3, STKY, STNO, SIMG, TFLG, " _
                //     && "EXVL, ZKVL, VALU, ZKMK, ZRIT, ZZKB, ZGYO, ZSRE, RRIT, SRIT, " _
                //     && "RZKB, RGYO, RSRE, SZKB, SGYO, SSRE, IFRI, SYMD, SKBN, SKIZ, " _
                //     && "UYMD, UKBN, UKIZ, SEXP, DKEC, PCSW, UPSW, ZRSW, GPCD, FMOD, " _
                //     && "FTIM, FUSR, FWAY, LMOD, LTIM, LUSR, LWAY, DELF, CPRT, FSEN, " _
                //     && "SMNT, IDM4, RHEI_CD, SHEI_CD, RATE, GAIKA, GEXVL, GZKVL, SMEXP, RDM4, " _
                //     && "RDM5, RDM6, RDM7, RDM8, RDM9, RDM10, RDM11, RDM12, RDM13, RDM14, " _
                //     && "RDM15, RDM16, RDM17, RDM18, RDM19, RDM20, SDM4, SDM5, SDM6, SDM7, " _
                //     && "SDM8, SDM9, SDM10, SDM11, SDM12, SDM13, SDM14, SDM15, SDM16, SDM17, " _
                //     && "SDM18, SDM19, SDM20, RSSEQAI, SSSEQAI, TEKIFLG, HFLG, SWGFLG, SWIFLG) " _
                //     && "VALUES (" && .Kesn && "," && .Dkei && "," && .Dseq && "," && .Sseq && "," && .Pseq && "," && .Pflg && "," && .Bkbn && "," && .Grno && "," && .Dcpg && "," && .Dlin && "," _
                //     && .Dflg && "," && MakeInsertString_FNC(.Rbmn) && "," && MakeInsertString_FNC(.Rtor) && "," && MakeInsertString_FNC(.Rkmk) && "," && MakeInsertString_FNC(.Reda) && "," && MakeInsertString_FNC(.Rkoj) && "," && MakeInsertString_FNC(.Rkos) && "," && MakeInsertString_FNC(.Rprj) && "," && MakeInsertString_FNC(.Rseg) && "," && MakeInsertString_FNC(.Rdm1) && "," _
                //     && MakeInsertString_FNC(.Rdm2) && "," && MakeInsertString_FNC(.Rdm3) && "," && MakeInsertString_FNC(Replace(.Rtky, "'", "''")) && "," && IIf(.Rtno < 0, "NULL", .Rtno) && "," && .Rimg && "," && MakeInsertString_FNC(.Sbmn) && "," && MakeInsertString_FNC(.Stor) && "," && MakeInsertString_FNC(.Skmk) && "," && MakeInsertString_FNC(.Seda) && "," && MakeInsertString_FNC(.Skoj) && "," _
                //     && MakeInsertString_FNC(.Skos) && "," && MakeInsertString_FNC(.Sprj) && "," && MakeInsertString_FNC(.Sseg) && "," && MakeInsertString_FNC(.Sdm1) && "," && MakeInsertString_FNC(.Sdm2) && "," && MakeInsertString_FNC(.Sdm3) && "," && MakeInsertString_FNC(Replace(.Stky, "'", "''")) && "," && IIf(.Stno < 0, "NULL", .Stno) && "," && .Simg && "," && .Tflg && "," _
                //     && .Exvl && "," && .Zkvl && "," && .Valu && "," && MakeInsertString_FNC(.Zkmk) && "," && IIf(.Zrit < 0, "NULL", .Zrit) && "," && .Zzkb && "," && .Zgyo && "," && .Zsre && "," && IIf(.Rrit < 0, "NULL", .Rrit) && "," && IIf(.Srit < 0, "NULL", .Srit) && "," _
                //     && .Rzkb && "," && .Rgyo && "," && .Rsre && "," && .Szkb && "," && .Sgyo && "," && .Ssre && "," && .Ifri && "," && .Symd && "," && IIf(.Skbn < 0, "NULL", .Skbn) && "," && .Skiz && "," _
                //     && .Uymd && "," && IIf(.Ukbn < 0, "NULL", .Ukbn) && "," && .Ukiz && "," && .Sexp && "," && MakeInsertString_FNC(.Dkec) && "," && .Pcsw && "," && .Upsw && "," && .Zrsw && "," && MakeInsertString_FNC(.Gpcd) && "," && .Fmod && "," _
                //     && .Ftim && "," && .Fusr && "," && .Fway && "," && .Lmod && "," && .Ltim && "," && .Lusr && "," && .Lway && "," && .Delf && "," && .Cprt && "," && .Fsen && "," _
                //     && .Smnt && "," && .Idm4 && "," && MakeInsertString_FNC(.Rhei_cd) && "," && MakeInsertString_FNC(.Shei_cd) && "," && .Rate && "," && .Gaika && "," && .Gexvl && "," && .Gzkvl && "," && .Smexp && "," && MakeInsertString_FNC(.Rdm4) && "," _
                //     && MakeInsertString_FNC(.Rdm5) && "," && MakeInsertString_FNC(.Rdm6) && "," && MakeInsertString_FNC(.Rdm7) && "," && MakeInsertString_FNC(.Rdm8) && "," && MakeInsertString_FNC(.Rdm9) && "," && MakeInsertString_FNC(.Rdm10) && "," && MakeInsertString_FNC(.Rdm11) && "," && MakeInsertString_FNC(.Rdm12) && "," && MakeInsertString_FNC(.Rdm13) && "," && MakeInsertString_FNC(.Rdm14) && "," _
                //     && MakeInsertString_FNC(.Rdm15) && "," && MakeInsertString_FNC(.Rdm16) && "," && MakeInsertString_FNC(.Rdm17) && "," && MakeInsertString_FNC(.Rdm18) && "," && MakeInsertString_FNC(.Rdm19) && "," && MakeInsertString_FNC(.Rdm20) && "," && MakeInsertString_FNC(.Sdm4) && "," && MakeInsertString_FNC(.Sdm5) && "," && MakeInsertString_FNC(.Sdm6) && "," && MakeInsertString_FNC(.Sdm7) && "," _
                //     && MakeInsertString_FNC(.Sdm8) && "," && MakeInsertString_FNC(.Sdm9) && "," && MakeInsertString_FNC(.Sdm10) && "," && MakeInsertString_FNC(.Sdm11) && "," && MakeInsertString_FNC(.Sdm12) && "," && MakeInsertString_FNC(.Sdm13) && "," && MakeInsertString_FNC(.Sdm14) && "," && MakeInsertString_FNC(.Sdm15) && "," && MakeInsertString_FNC(.Sdm16) && "," && MakeInsertString_FNC(.Sdm17) && "," _
                //     && MakeInsertString_FNC(.Sdm18) && "," && MakeInsertString_FNC(.Sdm19) && "," && MakeInsertString_FNC(.Sdm20) && "," && .Rsseqai && "," && .Ssseqai && "," && .Tekiflg && "," && .Hflg && "," && .Swgflg && "," && .Swiflg && ")"
                #endregion
                //---
                mLogger.LogWrite(Logger.Level.INFO, "仕訳明細_分");
                //*
                mLogger.LogClose();
                //*
                //---
                L_SqlMsg = "INSERT INTO " + (H_Kakutyo ? "SJDAT" : "ZDATA") +      // <--- PostgreSQL対応
                                      " (KESN,  DKEI,  DSEQ,    SSEQ,    PSEQ,    PFLG,    BKBN,  GRNO,   DCPG,    DLIN,    DFLG, RBMN, RTOR,  RKMK,  REDA,  RKOJ,  RKOS,  RPRJ,  RSEG,  RDM1,  " +
                                        "RDM2,  RDM3,  RTKY,    RTNO,    RIMG,    SBMN,    STOR,  SKMK,   SEDA,    SKOJ,    SKOS, SPRJ, SSEG,  SDM1,  SDM2,  SDM3,  STKY,  STNO,  SIMG,  TFLG,  " +
                                        "EXVL,  ZKVL,  VALU,    ZKMK,    ZRIT,    ZZKB,    ZGYO,  ZSRE,   RRIT,    SRIT,    RZKB, RGYO, RSRE,  SZKB,  SGYO,  SSRE,  IFRI,  SYMD,  SKBN,  SKIZ,  " +
                                        "UYMD,  UKBN,  UKIZ,    SEXP,    DKEC,    PCSW,    UPSW,  ZRSW,   GPCD,    FMOD,    FTIM, FUSR, FWAY,  LMOD,  LTIM,  LUSR,  LWAY,  DELF,  CPRT,  FSEN,  " +
                                        "SMNT,  IDM4,  RHEI_CD, SHEI_CD, RATE,    GAIKA,   GEXVL, GZKVL,  SMEXP,   RDM4,    RDM5, RDM6, RDM7,  RDM8,  RDM9,  RDM10, RDM11, RDM12, RDM13, RDM14, " +
                                        "RDM15, RDM16, RDM17,   RDM18,   RDM19,   RDM20,   SDM4,  SDM5,   SDM6,    SDM7,    SDM8, SDM9, SDM10, SDM11, SDM12, SDM13, SDM14, SDM15, SDM16, SDM17, " +
                                        "SDM18, SDM19, SDM20,   RSSEQAI, SSSEQAI, TEKIFLG, HFLG,  SWGFLG, SWIFLG,  " + "    RKEIGEN, SKEIGEN, ZKEIGEN, " +
// Ver02.26.01 インボイス対応 --->
                                        "RURIZEIKEISAN, SURIZEIKEISAN, ZURIZEIKEISAN, RMENZEIKEIKA, SMENZEIKEIKA, ZMENZEIKEIKA ) " + 

// <--- Ver02.26.01 インボイス対応

                            "VALUES (" + H_ZdataBunri.Kesn + "," + H_ZdataBunri.Dkei + "," + H_ZdataBunri.Dseq + "," + H_ZdataBunri.Sseq + "," + H_ZdataBunri.Pseq + "," + H_ZdataBunri.Pflg + "," +
                                         H_ZdataBunri.Bkbn + "," + H_ZdataBunri.Grno + "," + H_ZdataBunri.Dcpg + "," + H_ZdataBunri.Dlin + "," + H_ZdataBunri.Dflg + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Rbmn) + "," + MakeInsertString_FNC(H_ZdataBunri.Rtor) + "," + MakeInsertString_FNC(H_ZdataBunri.Rkmk) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Reda) + "," + MakeInsertString_FNC(H_ZdataBunri.Rkoj) + "," + MakeInsertString_FNC(H_ZdataBunri.Rkos) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Rprj) + "," + MakeInsertString_FNC(H_ZdataBunri.Rseg) + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm1) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Rdm2) + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm3) + "," + MakeInsertString_FNC(H_ZdataBunri.Rtky.Replace("'", "''")) + "," +
                                         (H_ZdataBunri.Rtno < 0 ? "NULL" : H_ZdataBunri.Rtno.ToString()) + "," + H_ZdataBunri.Rimg + "," + MakeInsertString_FNC(H_ZdataBunri.Sbmn) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Stor) + "," + MakeInsertString_FNC(H_ZdataBunri.Skmk) + "," + MakeInsertString_FNC(H_ZdataBunri.Seda) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Skoj) + "," + MakeInsertString_FNC(H_ZdataBunri.Skos) + "," + MakeInsertString_FNC(H_ZdataBunri.Sprj) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Sseg) + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm1) + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm2) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Sdm3) + "," + MakeInsertString_FNC(H_ZdataBunri.Stky.Replace("'", "''")) + "," +
                                         (H_ZdataBunri.Stno < 0 ? "NULL" : H_ZdataBunri.Stno.ToString()) + "," + H_ZdataBunri.Simg + "," + H_ZdataBunri.Tflg + "," + H_ZdataBunri.Exvl + "," + H_ZdataBunri.Zkvl + "," +
                                         H_ZdataBunri.Valu + "," + MakeInsertString_FNC(H_ZdataBunri.Zkmk) + "," + (H_ZdataBunri.Zrit < 0 ? "NULL" : H_ZdataBunri.Zrit.ToString()) + "," + H_ZdataBunri.Zzkb + "," +
                                         H_ZdataBunri.Zgyo + "," + H_ZdataBunri.Zsre + "," + (H_ZdataBunri.Rrit < 0 ? "NULL" : H_ZdataBunri.Rrit.ToString()) + "," + (H_ZdataBunri.Srit < 0 ? "NULL" : H_ZdataBunri.Srit.ToString()) + "," +
                                         H_ZdataBunri.Rzkb + "," + H_ZdataBunri.Rgyo + "," + H_ZdataBunri.Rsre + "," + H_ZdataBunri.Szkb + "," + H_ZdataBunri.Sgyo + "," + H_ZdataBunri.Ssre + "," +

// 2022/11/09 Ver02.25.02 支払区分・入金区分 0 → null対応 --->
//                                       H_ZdataBunri.Ifri + "," + H_ZdataBunri.Symd + "," + (H_ZdataBunri.Skbn < 0 ? "NULL" : H_ZdataBunri.Skbn.ToString()) + "," + H_ZdataBunri.Skiz + "," + H_ZdataBunri.Uymd + "," +
//                                       (H_ZdataBunri.Ukbn < 0 ? "NULL" : H_ZdataBunri.Ukbn.ToString()) + "," + H_ZdataBunri.Ukiz + "," + H_ZdataBunri.Sexp + "," + MakeInsertString_FNC(H_ZdataBunri.Dkec) + "," +
                                         H_ZdataBunri.Ifri + "," + H_ZdataBunri.Symd + "," + (H_ZdataBunri.Skbn < 1 ? "NULL" : H_ZdataBunri.Skbn.ToString()) + "," + H_ZdataBunri.Skiz + "," + H_ZdataBunri.Uymd + "," +
                                         (H_ZdataBunri.Ukbn < 1 ? "NULL" : H_ZdataBunri.Ukbn.ToString()) + "," + H_ZdataBunri.Ukiz + "," + H_ZdataBunri.Sexp + "," + MakeInsertString_FNC(H_ZdataBunri.Dkec) + "," +
// <--- 2022/11/09 Ver02.25.02 支払区分・入金区分 0 → null対応

                                         H_ZdataBunri.Pcsw + "," + H_ZdataBunri.Upsw + "," + H_ZdataBunri.Zrsw + "," + MakeInsertString_FNC(H_ZdataBunri.Gpcd) + "," + H_ZdataBunri.Fmod + "," +
                                         H_ZdataBunri.Ftim + "," + H_ZdataBunri.Fusr + "," + H_ZdataBunri.Fway + "," + H_ZdataBunri.Lmod + "," + H_ZdataBunri.Ltim + "," + H_ZdataBunri.Lusr + "," +
                                         H_ZdataBunri.Lway + "," + H_ZdataBunri.Delf + "," + H_ZdataBunri.Cprt + "," + H_ZdataBunri.Fsen + "," + H_ZdataBunri.Smnt + "," + H_ZdataBunri.Idm4 + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Rhei_cd) + "," + MakeInsertString_FNC(H_ZdataBunri.Shei_cd) + "," + H_ZdataBunri.Rate + "," + H_ZdataBunri.Gaika + "," +
                                         H_ZdataBunri.Gexvl + "," + H_ZdataBunri.Gzkvl + "," + H_ZdataBunri.Smexp + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm4) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Rdm5)  + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm6)  + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm7)  + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Rdm8)  + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm9)  + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm10) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Rdm11) + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm12) + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm13) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Rdm14) + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm15) + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm16) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Rdm17) + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm18) + "," + MakeInsertString_FNC(H_ZdataBunri.Rdm19) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Rdm20) + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm4)  + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm5)  + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Sdm6)  + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm7)  + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm8)  + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Sdm9)  + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm10) + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm11) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Sdm12) + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm13) + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm14) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Sdm15) + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm16) + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm17) + "," +
                                         MakeInsertString_FNC(H_ZdataBunri.Sdm18) + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm19) + "," + MakeInsertString_FNC(H_ZdataBunri.Sdm20) + "," +
                                         H_ZdataBunri.Rsseqai + "," + H_ZdataBunri.Ssseqai + "," + H_ZdataBunri.Tekiflg + "," + H_ZdataBunri.Hflg + "," + H_ZdataBunri.Swgflg + "," + H_ZdataBunri.Swiflg + "," +

// Ver02.26.01 インボイス対応 --->
//                                       H_ZdataBunri.Rkeigen + "," + H_ZdataBunri.Skeigen + "," + H_ZdataBunri.Zkeigen + ")";
                                         H_ZdataBunri.Rkeigen      + ","  + H_ZdataBunri.Skeigen      + "," + H_ZdataBunri.Zkeigen      + "," + H_ZdataBunri.Rurizeikeisan + "," + H_ZdataBunri.Surizeikeisan + "," + 
                                         H_ZdataBunri.Zurizeikeisan + "," + H_ZdataBunri.Rmenzeikeika + "," + H_ZdataBunri.Smenzeikeika + "," + H_ZdataBunri.Zmenzeikeika  + ") ";
// <--- Ver02.26.01 インボイス対応

    			// && MakeInsertString_FNC(.Sdm18) && "," && MakeInsertString_FNC(.Sdm19) && "," && MakeInsertString_FNC(.Sdm20) && "," && .Rsseqai && "," && .Ssseqai && "," && .Tekiflg && "," && .Hflg && "," && .Swgflg && "," && .Swiflg && .Rkeigen && "," && .Skeigen && "," && .Zkeigen && ")"
    			//  △ 2019/04/02 Ver.01.18.02 軽減税率対応の不具合を修正 urata
    			// --->Ver01.16.02
    			L_Cmd.CommandText = L_SqlMsg;
    
    			L_Cmd.ExecuteNonQuery();

                //---
                mLogger.LogWrite(Logger.Level.OK, "仕訳明細_分");
                //*
                mLogger.LogClose();
                //*
                //---

                // 拡張の場合は消込残高計算フラグを処理しない
                if (H_Kakutyo == false)
                {
    				if (CheckKSKMK(H_ZdataBunri.Kesn, H_ZdataBunri.Rkmk, H_ZdataBunri.Skmk) == true)
                    {
    					L_Cmd.CommandText = "UPDATE VOLUM2 SET CKS6 = 0 WHERE  KESN = " + H_Zdata.Kesn + " AND CKEI = " + H_Zdata.Dkei;
    					L_Cmd.ExecuteNonQuery();
    				}
    			}
    
//  ↓ 分離仕訳の３コード自動登録対応 ↓
    			// 【3コードマスタレコード作成条件】
    			// 自動登録であること
    			// マスタ権限が追加変更以上であること
    			if (H_IsAuto == 1 && nUsrSecMFLG >= 2)
                {
                    //---
                    mLogger.LogWrite(Logger.Level.INFO, "仕訳明細_分_AUTO_ADD");
                    //*
                    mLogger.LogClose();
                    //*
                    //---
                    Make3CodeRecord(H_Con, H_ZdataBunri, H_dtVolum, ref L_Cmd, H_Touki);
                    //---
                    mLogger.LogWrite(Logger.Level.OK, "仕訳明細_分_AUTO_ADD");
                    //*
                    mLogger.LogClose();
                    //*
                    //---
                }
                //  ↑ 分離仕訳の３コード自動登録対応 ↑

                // 残高等の更新    
                if (H_Kakutyo == false)
                {    
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_HColR = "R" + Strings.Format(H_ZdataBunri.Dkei, "000");
//    				L_HColS = "S" + Strings.Format(H_ZdataBunri.Dkei, "000");
    				L_HColR = "R" + H_ZdataBunri.Dkei.ToString("d3");
    				L_HColS = "S" + H_ZdataBunri.Dkei.ToString("d3");
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応

                    #region 月情報
                    L_Where = " WHERE KESN = " + H_ZdataBunri.Kesn + " AND CKEI = " + H_ZdataBunri.Dkei;
    				L_Cmd.CommandText = "UPDATE VOLUM2 SET CKS0 = 1, CKS3 = 0, CKS4 = 0, CKS5 = 0, DTAC = DTAC + 1";
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if ((Strings.Left(H_ZdataBunri.Rkmk, 3) != "000") && (Strings.Left(H_ZdataBunri.Skmk, 3) != "000")) {
//    					L_Cmd.CommandText = L_Cmd.CommandText + ", GKDT = GKDT + " + H_ZdataBunri.Valu;
//    				} else {
//    					if (Strings.Left(H_ZdataBunri.Rkmk, 3) == "000") {
//    						L_Cmd.CommandText = L_Cmd.CommandText + ", GKS1 = GKS1 + " + H_ZdataBunri.Valu;
//    					}
//    				    if (Strings.Left(H_ZdataBunri.Skmk, 3) == "000") {
                    if ((H_ZdataBunri.Rkmk.Substring(0, 3) != "000") && (H_ZdataBunri.Skmk.Substring(0, 3) != "000"))
                    {
    					L_Cmd.CommandText = L_Cmd.CommandText + ", GKDT = GKDT + " + H_ZdataBunri.Valu;
    				}
                    else
                    {
    					if (H_ZdataBunri.Rkmk.Substring(0, 3) == "000")
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", GKS1 = GKS1 + " + H_ZdataBunri.Valu;
    					}
    					if (H_ZdataBunri.Skmk.Substring(0, 3) == "000")
                        {
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						L_Cmd.CommandText = L_Cmd.CommandText + ", GKS2 = GKS2 + " + H_ZdataBunri.Valu;
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BKEMX]) > 0) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BKESW]) == 0))
                    {
    					if (((!string.IsNullOrEmpty(H_ZdataBunri.Rbmn)) && (!string.IsNullOrEmpty(H_ZdataBunri.Reda))) || ((!string.IsNullOrEmpty(H_ZdataBunri.Sbmn)) && (!string.IsNullOrEmpty(H_ZdataBunri.Seda))))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_BKE = 0";
    					}
    				}
    				if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TKSW]) == 0)
                    {
    					if ((!string.IsNullOrEmpty(H_ZdataBunri.Rtor)) || (!string.IsNullOrEmpty(H_ZdataBunri.Stor)))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_TK = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TKEMX]) > 0) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TKESW]) == 0))
                    {
    					if (((!string.IsNullOrEmpty(H_ZdataBunri.Rtor)) && (!string.IsNullOrEmpty(H_ZdataBunri.Reda))) || ((!string.IsNullOrEmpty(H_ZdataBunri.Stor)) && (!string.IsNullOrEmpty(H_ZdataBunri.Seda))))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_TKE = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BTKMX]) > 0) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BTKSW]) == 0))
                    {
    					if (((!string.IsNullOrEmpty(H_ZdataBunri.Rbmn)) && (!string.IsNullOrEmpty(H_ZdataBunri.Rtor))) || ((!string.IsNullOrEmpty(H_ZdataBunri.Sbmn)) && (!string.IsNullOrEmpty(H_ZdataBunri.Stor))))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_BKT = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BTKEMX]) > 0) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BTKESW]) == 0))
                    {
    					if (((!string.IsNullOrEmpty(H_ZdataBunri.Rbmn)) && (!string.IsNullOrEmpty(H_ZdataBunri.Rtor)) && (!string.IsNullOrEmpty(H_ZdataBunri.Reda))) || ((!string.IsNullOrEmpty(H_ZdataBunri.Sbmn)) && (!string.IsNullOrEmpty(H_ZdataBunri.Stor)) && (!string.IsNullOrEmpty(H_ZdataBunri.Seda))))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_BKTE = 0";
    					}
    				}
    				if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGSW]) == 0)
                    {
    					if ((!string.IsNullOrEmpty(H_ZdataBunri.Rseg)) || (!string.IsNullOrEmpty(H_ZdataBunri.Sseg)))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_SK = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SKTMX]) > 0) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SKTSW]) == 0))
                    {
    					if (((!string.IsNullOrEmpty(H_ZdataBunri.Rseg)) && (!string.IsNullOrEmpty(H_ZdataBunri.Rtor))) || ((!string.IsNullOrEmpty(H_ZdataBunri.Sseg)) && (!string.IsNullOrEmpty(H_ZdataBunri.Stor))))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_SKT = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1FLG]) == 3) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1KSW]) == 0))
                    {
    					if ((!string.IsNullOrEmpty(H_ZdataBunri.Rdm1)) || (!string.IsNullOrEmpty(H_ZdataBunri.Sdm1)))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_D1K = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2FLG]) == 3) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2KSW]) == 0))
                    {
    					if ((!string.IsNullOrEmpty(H_ZdataBunri.Rdm2)) || (!string.IsNullOrEmpty(H_ZdataBunri.Sdm2)))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_D2K = 0";
    					}
    				}
    				if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3FLG]) == 3) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3KSW]) == 0))
                    {
    					if ((!string.IsNullOrEmpty(H_ZdataBunri.Rdm3)) || (!string.IsNullOrEmpty(H_ZdataBunri.Sdm3)))
                        {
    						L_Cmd.CommandText = L_Cmd.CommandText + ", SYU_D3K = 0";
    					}
    				}
    				L_Cmd.CommandText = L_Cmd.CommandText + L_Where;
    				L_Cmd.ExecuteNonQuery();
    
    				L_Cmd.CommandText = "SELECT GKDT,GKS1,GKS2 FROM VOLUM2" + L_Where;
    				L_ReadFlg = true;
    				L_Reader = L_Cmd.ExecuteReader();
    				L_Reader.Read();
    				L_ReadFlg = false;
    				L_Gkti = L_Reader.GetDecimal(1) + L_Reader.GetDecimal(2);
    				if (L_Gkti % 2 == 1) {
    					if (L_Gkti > 0) {
    						L_Gkti = L_Gkti + 1;
    					} else {
    						L_Gkti = L_Gkti - 1;
    					}
    				}
    				L_Gkti = (L_Gkti / 2) + L_Reader.GetDecimal(0);
    				L_Reader.Close();
    				L_Cmd.CommandText = "UPDATE VOLUM2 SET GKTI = " + L_Gkti + L_Where;
    				L_Cmd.ExecuteNonQuery();
                    //---
                    mLogger.LogWrite(Logger.Level.OK, "分_VOLUM(GKTI)");
                    //*
                    mLogger.LogClose();
                    //*
                    //---
                    #endregion
                    #region ** 科目残高
                    // *-00.03.01　ロックヒントを追加
                    L_Cmd.CommandText = "UPDATE KMZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu + " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Rkmk + "'";
    				L_Cmd.ExecuteNonQuery();
    				L_Cmd.CommandText = "UPDATE KMZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu + " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Skmk + "'";
    				L_Cmd.ExecuteNonQuery();
                    //---
                    mLogger.LogWrite(Logger.Level.OK, "分_科目残高");
                    //*
                    mLogger.LogClose();
                    //*
                    //---

                    #endregion
                    #region ** 部門科目残高
                    // *-00.03.01　ロックヒントを追加
                    if (!string.IsNullOrEmpty(H_ZdataBunri.Rbmn))
                    {
    					L_Cmd.CommandText = "UPDATE BKZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                    " WHERE KESN = " + H_ZdataBunri.Kesn + " AND BCOD = '" + H_ZdataBunri.Rbmn + "' AND KICD = '" + H_ZdataBunri.Rkmk + "'";
    					L_Cmd.ExecuteNonQuery();
                        //---
                        mLogger.LogWrite(Logger.Level.OK, "分_部門科目残高_R");
                        //*
                        mLogger.LogClose();
                        //*
                        //---
                    }
                    if (!string.IsNullOrEmpty(H_ZdataBunri.Sbmn))
                    {
    					L_Cmd.CommandText = "UPDATE BKZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                    " WHERE KESN = " + H_ZdataBunri.Kesn + " AND BCOD = '" + H_ZdataBunri.Sbmn + "' AND KICD = '" + H_ZdataBunri.Skmk + "'";
    					L_Cmd.ExecuteNonQuery();
                        //---
                        mLogger.LogWrite(Logger.Level.OK, "分_部門科目残高_S");
                        //*
                        mLogger.LogClose();
                        //*
                        //---
                    }
                    #endregion
                    #region ** 科目枝番残高
                    // *-00.03.01　ロックヒントを追加
                    if (!string.IsNullOrEmpty(H_ZdataBunri.Reda))
                    {
    					L_Cmd.CommandText = "UPDATE EDZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Rkmk + "' AND ECOD = '" + H_ZdataBunri.Reda + "'";
    					L_Cmd.ExecuteNonQuery();
                        //---
                        mLogger.LogWrite(Logger.Level.OK, "分_科目枝番残高_R");
                        //*
                        mLogger.LogClose();
                        //*
                        //---
                    }
                    if (!string.IsNullOrEmpty(H_ZdataBunri.Seda))
                    {
    					L_Cmd.CommandText = "UPDATE EDZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Skmk + "' AND ECOD = '" + H_ZdataBunri.Seda + "'";
    					L_Cmd.ExecuteNonQuery();
                        //---
                        mLogger.LogWrite(Logger.Level.OK, "分_科目枝番残高_S");
                        //*
                        mLogger.LogClose();
                        //*
                        //---
                    }
                    #endregion
                    #region ** 部門科目枝番残高
                    // *-00.03.01　ロックヒントを追加
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BKESW]) == 1)
                    {
    					if ((!string.IsNullOrEmpty(H_ZdataBunri.Rbmn)) && (!string.IsNullOrEmpty(H_ZdataBunri.Reda)))
                        {
    						L_Cmd.CommandText = "UPDATE BKEZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                            " WHERE KESN = " + H_ZdataBunri.Kesn + " AND BCOD = '" + H_ZdataBunri.Rbmn + "' AND KICD = '" + H_ZdataBunri.Rkmk + "' AND ECOD = '" + H_ZdataBunri.Reda + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_部門科目枝番残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                        if ((!string.IsNullOrEmpty(H_ZdataBunri.Sbmn)) && (!string.IsNullOrEmpty(H_ZdataBunri.Seda)))
                        {
    						L_Cmd.CommandText = "UPDATE BKEZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                            " WHERE KESN = " + H_ZdataBunri.Kesn + " AND BCOD = '" + H_ZdataBunri.Sbmn + "' AND KICD = '" + H_ZdataBunri.Skmk + "' AND ECOD = '" + H_ZdataBunri.Seda + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_部門科目枝番残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                    }
                    #endregion
                    #region ** 取引先科目残高
                    // *-00.03.01　ロックヒントを追加
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TKSW]) == 1)
                    {
    					if (!string.IsNullOrEmpty(H_ZdataBunri.Rtor))
                        {
    						L_Cmd.CommandText = "UPDATE TRZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND TRCD = '" + H_ZdataBunri.Rtor + "' AND KICD = '" + H_ZdataBunri.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_取引先科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                        if (!string.IsNullOrEmpty(H_ZdataBunri.Stor))
                        {
    						L_Cmd.CommandText = "UPDATE TRZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND TRCD = '" + H_ZdataBunri.Stor + "' AND KICD = '" + H_ZdataBunri.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_取引先科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                    }
                    #endregion
                    #region ** 取引先科目枝番残高
                    // *-00.03.01　ロックヒントを追加
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TKESW]) == 1)
                    {
    					if ((!string.IsNullOrEmpty(H_ZdataBunri.Rtor)) && (!string.IsNullOrEmpty(H_ZdataBunri.Reda)))
                        {
    						L_Cmd.CommandText = "UPDATE TKEZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND TRCD = '" + H_ZdataBunri.Rtor + "' AND KICD = '" + H_ZdataBunri.Rkmk + "' AND ECOD = '" + H_ZdataBunri.Reda + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_取引先科目枝番残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                        if ((!string.IsNullOrEmpty(H_ZdataBunri.Stor)) && (!string.IsNullOrEmpty(H_ZdataBunri.Seda)))
                        {
    						L_Cmd.CommandText = "UPDATE TKEZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND TRCD = '" + H_ZdataBunri.Stor + "' AND KICD = '" + H_ZdataBunri.Skmk + "' AND ECOD = '" + H_ZdataBunri.Seda + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_取引先科目枝番残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                    }
                    #endregion
                    #region ** 部門取引先科目残高
                    // *-00.03.01　ロックヒントを追加
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BTKSW]) == 1)
                    {
    					if ((!string.IsNullOrEmpty(H_ZdataBunri.Rbmn)) && (!string.IsNullOrEmpty(H_ZdataBunri.Rtor)))
                        {
    						L_Cmd.CommandText = "UPDATE BTKZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND BCOD = '" + H_ZdataBunri.Rbmn + "' AND TRCD = '" + H_ZdataBunri.Rtor + "' AND KICD = '" + H_ZdataBunri.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_部門取引先科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                        if ((!string.IsNullOrEmpty(H_ZdataBunri.Sbmn)) && (!string.IsNullOrEmpty(H_ZdataBunri.Stor)))
                        {
    						L_Cmd.CommandText = "UPDATE BTKZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND BCOD = '" + H_ZdataBunri.Sbmn + "' AND TRCD = '" + H_ZdataBunri.Stor + "' AND KICD = '" + H_ZdataBunri.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_部門取引先科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                    }
                    #endregion
                    #region ** 部門取引先科目枝番残高
                    // *-00.03.01　ロックヒントを追加
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BTKESW]) == 1)
                    {
    					if ((!string.IsNullOrEmpty(H_ZdataBunri.Rbmn)) && (!string.IsNullOrEmpty(H_ZdataBunri.Rtor)) && (!string.IsNullOrEmpty(H_ZdataBunri.Reda)))
                        {
    						L_Cmd.CommandText = "UPDATE BTKEZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND BCOD = '" + H_ZdataBunri.Rbmn + "' AND TRCD = '" + H_ZdataBunri.Rtor + "' AND KICD = '" + H_ZdataBunri.Rkmk + "' AND ECOD = '" + H_ZdataBunri.Reda + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_部門取引先科目枝番残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                        if ((!string.IsNullOrEmpty(H_ZdataBunri.Sbmn)) && (!string.IsNullOrEmpty(H_ZdataBunri.Stor)) && (!string.IsNullOrEmpty(H_ZdataBunri.Seda)))
                        {
    						L_Cmd.CommandText = "UPDATE BTKEZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND BCOD = '" + H_ZdataBunri.Sbmn + "' AND TRCD = '" + H_ZdataBunri.Stor + "' AND KICD = '" + H_ZdataBunri.Skmk + "' AND ECOD = '" + H_ZdataBunri.Seda + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_部門取引先科目枝番残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                    }
                    #endregion
                    #region ** セグメント科目残高
                    // *-00.03.01　ロックヒントを追加
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGSW]) == 1)
                    {
    					if (!string.IsNullOrEmpty(H_ZdataBunri.Rseg))
                        {
    						L_Cmd.CommandText = "UPDATE SGKZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND SGCD = '" + H_ZdataBunri.Rseg + "' AND KICD = '" + H_ZdataBunri.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_セグメント科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                        if (!string.IsNullOrEmpty(H_ZdataBunri.Sseg))
                        {
    						L_Cmd.CommandText = "UPDATE SGKZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND SGCD = '" + H_ZdataBunri.Sseg + "' AND KICD = '" + H_ZdataBunri.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_セグメント科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                    }
                    #endregion
                    #region ** セグメント取引先科目残高
                    // *-00.03.01　ロックヒントを追加
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SKTSW]) == 1)
                    {
    					if ((!string.IsNullOrEmpty(H_ZdataBunri.Rseg)) && (!string.IsNullOrEmpty(H_ZdataBunri.Rtor)))
                        {
    						L_Cmd.CommandText = "UPDATE STKZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND SGCD = '" + H_ZdataBunri.Rseg + "' AND TRCD = '" + H_ZdataBunri.Rtor + "' AND KICD = '" + H_ZdataBunri.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_セグメント取引先科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                        if ((!string.IsNullOrEmpty(H_ZdataBunri.Sseg)) && (!string.IsNullOrEmpty(H_ZdataBunri.Stor)))
                        {
    						L_Cmd.CommandText = "UPDATE STKZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND SGCD = '" + H_ZdataBunri.Sseg + "' AND TRCD = '" + H_ZdataBunri.Stor + "' AND KICD = '" + H_ZdataBunri.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_セグメント取引先科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                    }
                    #endregion
                    #region ** ユニバーサル１科目残高
                    // *-00.03.01　ロックヒントを追加
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D1KSW]) == 1)
                    {
    					if (!string.IsNullOrEmpty(H_ZdataBunri.Rdm1))
                        {
    						L_Cmd.CommandText = "UPDATE D1ZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND D1CD = '" + H_ZdataBunri.Rdm1 + "' AND KICD = '" + H_ZdataBunri.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_ユニバーサル１科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                        if (!string.IsNullOrEmpty(H_ZdataBunri.Sdm1))
                        {
    						L_Cmd.CommandText = "UPDATE D1ZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND D1CD = '" + H_ZdataBunri.Sdm1 + "' AND KICD = '" + H_ZdataBunri.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_ユニバーサル１科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                    }
                    #endregion
                    #region ** ユニバーサル２科目残高
                    // *-00.03.01　ロックヒントを追加
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D2KSW]) == 1)
                    {
    					if (!string.IsNullOrEmpty(H_ZdataBunri.Rdm2))
                        {
    						L_Cmd.CommandText = "UPDATE D2ZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND D2CD = '" + H_ZdataBunri.Rdm2 + "' AND KICD = '" + H_ZdataBunri.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_ユニバーサル２科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                        if (!string.IsNullOrEmpty(H_ZdataBunri.Sdm2))
                        {
    						L_Cmd.CommandText = "UPDATE D2ZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND D2CD = '" + H_ZdataBunri.Sdm2 + "' AND KICD = '" + H_ZdataBunri.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_ユニバーサル２科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                    }
                    #endregion
                    #region ** ユニバーサル３科目残高
                    // *-00.03.01　ロックヒントを追加
                    if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_D3KSW]) == 1)
                    {
    					if (!string.IsNullOrEmpty(H_ZdataBunri.Rdm3))
                        {
    						L_Cmd.CommandText = "UPDATE D3ZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND D3CD = '" + H_ZdataBunri.Rdm3 + "' AND KICD = '" + H_ZdataBunri.Rkmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_ユニバーサル３科目残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                        if (!string.IsNullOrEmpty(H_ZdataBunri.Sdm3))
                        {
    						L_Cmd.CommandText = "UPDATE D3ZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND D3CD = '" + H_ZdataBunri.Sdm3 + "' AND KICD = '" + H_ZdataBunri.Skmk + "'";
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_ユニバーサル３科目残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                    }
                    #endregion
                    #region ** 科目摘要残高
                    // *-00.03.01　ロックヒントを追加
                    if (H_Khkzan == true)
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if ((Strings.Left(H_ZdataBunri.Rkmk, 2) == "08") && (H_ZdataBunri.Rtno > 0))
    					if ((H_ZdataBunri.Rkmk.Substring(0, 2) == "08") && (H_ZdataBunri.Rtno > 0))
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                        {
    						InsKhkzan_SUB(L_Cmd, H_ZdataBunri.Kesn, H_ZdataBunri.Rkmk, H_ZdataBunri.Rtno);
    						L_Cmd.CommandText = "UPDATE KHKZAN SET " + L_HColR + " = " + L_HColR + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Rkmk + "' AND TCOD = " + H_ZdataBunri.Rtno;
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_科目摘要残高_R");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                        // 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
                        //    					if ((Strings.Left(H_ZdataBunri.Skmk, 2) == "08") && (H_ZdataBunri.Stno > 0))
                        if ((H_ZdataBunri.Skmk.Substring(0, 2) == "08") && (H_ZdataBunri.Stno > 0))
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                        {
    						InsKhkzan_SUB(L_Cmd, H_ZdataBunri.Kesn, H_ZdataBunri.Skmk, H_ZdataBunri.Stno);
    						L_Cmd.CommandText = "UPDATE KHKZAN SET " + L_HColS + " = " + L_HColS + " + " + H_ZdataBunri.Valu +
                                                        " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Skmk + "' AND TCOD = " + H_ZdataBunri.Stno;
    						L_Cmd.ExecuteNonQuery();
                            //---
                            mLogger.LogWrite(Logger.Level.OK, "分_科目摘要残高_S");
                            //*
                            mLogger.LogClose();
                            //*
                            //---
                        }
                    }
                    #endregion

                    // 外貨残高の更新
                    if (P_b_GaikaTable_Flg == true)
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_HColGR = "GR" + Strings.Format(H_ZdataBunri.Dkei, "000");
//    					L_HColGS = "GS" + Strings.Format(H_ZdataBunri.Dkei, "000");
//    					L_HColHR = "HR" + Strings.Format(H_ZdataBunri.Dkei, "000");
//    					L_HColHS = "HS" + Strings.Format(H_ZdataBunri.Dkei, "000");
                        L_HColGR = "GR" + H_ZdataBunri.Dkei.ToString("d3");
    					L_HColGS = "GS" + H_ZdataBunri.Dkei.ToString("d3");
    					L_HColHR = "HR" + H_ZdataBunri.Dkei.ToString("d3");
    					L_HColHS = "HS" + H_ZdataBunri.Dkei.ToString("d3");
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応

                        #region **** 外貨科目残高
                        // *-00.03.01　ロックヒントを追加
                        if (H_GAIKAKamoku_Flg == 3)
                        {
                            //--- ロックヒントを排除 2021/02/09
    						//---L_Cmd.CommandText = "UPDATE GKMZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                            L_Cmd.CommandText = "UPDATE GKMZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                                                                           " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Rkmk + "' AND HEI_CD = '" + H_ZdataBunri.Rhei_cd + "'";
    						L_Cmd.ExecuteNonQuery();
                            //--- ロックヒントを排除 2021/02/09
                            //---L_Cmd.CommandText = "UPDATE GKMZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_ZdataBunri.Valu +
                            L_Cmd.CommandText = "UPDATE GKMZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_ZdataBunri.Valu +
                                                                                           " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Skmk + "' AND HEI_CD = '" + H_ZdataBunri.Shei_cd + "'";
    						L_Cmd.ExecuteNonQuery();
    					}
                        else if (H_GAIKAKamoku_Flg == 2)
                        {
//    						L_Cmd.CommandText = "UPDATE GKMZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                            L_Cmd.CommandText = "UPDATE GKMZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                                                                           " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Rkmk + "' AND HEI_CD = '" + H_ZdataBunri.Rhei_cd + "'";
    						L_Cmd.ExecuteNonQuery();
    					}
                        else if (H_GAIKAKamoku_Flg == 1)
                        {
                            //--- ロックヒントを排除 2021/02/09
                            //---L_Cmd.CommandText = "UPDATE GKMZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_ZdataBunri.Valu +
                            L_Cmd.CommandText = "UPDATE GKMZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_ZdataBunri.Valu +
                                                                                           " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Skmk + "' AND HEI_CD = '" + H_ZdataBunri.Shei_cd + "'";
    						L_Cmd.ExecuteNonQuery();
    					}
                        #endregion
                        #region **** 科目枝番外貨残高
                        // *-00.03.01　ロックヒントを追加
                        if (H_GAIKAKamoku_Flg == 3)
                        {
    						if (!string.IsNullOrEmpty(H_ZdataBunri.Reda))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---L_Cmd.CommandText = "UPDATE GEDZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                L_Cmd.CommandText = "UPDATE GEDZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                                          " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Rkmk + "' AND ECOD = '" + H_ZdataBunri.Reda + "' AND HEI_CD = '" + H_ZdataBunri.Rhei_cd + "'";
    							L_Cmd.ExecuteNonQuery();
    						}
    						if (!string.IsNullOrEmpty(H_ZdataBunri.Seda))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---L_Cmd.CommandText = "UPDATE GEDZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_ZdataBunri.Valu +
                                L_Cmd.CommandText = "UPDATE GEDZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_ZdataBunri.Valu +
                                                          " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Skmk + "' AND ECOD = '" + H_ZdataBunri.Seda + "' AND HEI_CD = '" + H_ZdataBunri.Shei_cd + "'";
    							L_Cmd.ExecuteNonQuery();
    						}
    					}
                        else if (H_GAIKAKamoku_Flg == 2)
                        {
    						if (!string.IsNullOrEmpty(H_ZdataBunri.Reda))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---L_Cmd.CommandText = "UPDATE GEDZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                L_Cmd.CommandText = "UPDATE GEDZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                                          " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Rkmk + "' AND ECOD = '" + H_ZdataBunri.Reda + "' AND HEI_CD = '" + H_ZdataBunri.Rhei_cd + "'";
    							L_Cmd.ExecuteNonQuery();
    						}
    					}
                        else if (H_GAIKAKamoku_Flg == 1)
                        {
    						if (!string.IsNullOrEmpty(H_ZdataBunri.Seda))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---L_Cmd.CommandText = "UPDATE GEDZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_ZdataBunri.Valu +
                                L_Cmd.CommandText = "UPDATE GEDZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_ZdataBunri.Valu +
                                                          " WHERE KESN = " + H_ZdataBunri.Kesn + " AND KICD = '" + H_ZdataBunri.Skmk + "' AND ECOD = '" + H_ZdataBunri.Seda + "' AND HEI_CD = '" + H_ZdataBunri.Shei_cd + "'";
    							L_Cmd.ExecuteNonQuery();
    						}
    					}
                        #endregion
                        #region **** 取引先科目外貨残高
                        // *-00.03.01　ロックヒントを追加
                        if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TKSW]) == 1)
                        {
    						if (H_GAIKAKamoku_Flg == 3)
                            {
    							if (!string.IsNullOrEmpty(H_ZdataBunri.Rtor))
                                {
                                    //--- ロックヒントを排除 2021/02/09
                                    //---L_Cmd.CommandText = "UPDATE GTRZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                    L_Cmd.CommandText = "UPDATE GTRZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                                                " WHERE KESN = " + H_ZdataBunri.Kesn + " AND TRCD = '" + H_ZdataBunri.Rtor + "' AND KICD = '" + H_ZdataBunri.Rkmk + "' AND HEI_CD = '" + H_ZdataBunri.Rhei_cd + "'";
    								L_Cmd.ExecuteNonQuery();
    							}
    							if (!string.IsNullOrEmpty(H_ZdataBunri.Stor))
                                {
                                    //--- ロックヒントを排除 2021/02/09
                                    //---L_Cmd.CommandText = "UPDATE GTRZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                    L_Cmd.CommandText = "UPDATE GTRZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                                                " WHERE KESN = " + H_ZdataBunri.Kesn + " AND TRCD = '" + H_ZdataBunri.Stor + "' AND KICD = '" + H_ZdataBunri.Skmk + "' AND HEI_CD = '" + H_ZdataBunri.Shei_cd + "'";
    								L_Cmd.ExecuteNonQuery();
    							}
    						}
                            else if (H_GAIKAKamoku_Flg == 2)
                            {
    							if (!string.IsNullOrEmpty(H_ZdataBunri.Rtor))
                                {
                                    //--- ロックヒントを排除 2021/02/09
                                    //---L_Cmd.CommandText = "UPDATE GTRZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                    L_Cmd.CommandText = "UPDATE GTRZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                                                " WHERE KESN = " + H_ZdataBunri.Kesn + " AND TRCD = '" + H_ZdataBunri.Rtor + "' AND KICD = '" + H_ZdataBunri.Rkmk + "' AND HEI_CD = '" + H_ZdataBunri.Rhei_cd + "'";
    								L_Cmd.ExecuteNonQuery();
    							}
    						}
                            else if (H_GAIKAKamoku_Flg == 1)
                            {
    							if (!string.IsNullOrEmpty(H_ZdataBunri.Stor))
                                {
                                    //--- ロックヒントを排除 2021/02/09
                                    //---L_Cmd.CommandText = "UPDATE GTRZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                    L_Cmd.CommandText = "UPDATE GTRZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                                                " WHERE KESN = " + H_ZdataBunri.Kesn + " AND TRCD = '" + H_ZdataBunri.Stor + "' AND KICD = '" + H_ZdataBunri.Skmk + "' AND HEI_CD = '" + H_ZdataBunri.Shei_cd + "'";
    								L_Cmd.ExecuteNonQuery();
    							}
    						}
    					}
                        #endregion
                        #region **** 部門科目外貨残高
                        // *-00.03.01　ロックヒントを追加
                        if (H_GAIKAKamoku_Flg == 3)
                        {
    						if (!string.IsNullOrEmpty(H_ZdataBunri.Rbmn))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---L_Cmd.CommandText = "UPDATE GBKZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                L_Cmd.CommandText = "UPDATE GBKZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                                            " WHERE KESN = " + H_ZdataBunri.Kesn + " AND BCOD = '" + H_ZdataBunri.Rbmn + "' AND KICD = '" + H_ZdataBunri.Rkmk + "' AND HEI_CD = '" + H_ZdataBunri.Rhei_cd + "'";
    							L_Cmd.ExecuteNonQuery();
    						}
    						if (!string.IsNullOrEmpty(H_ZdataBunri.Sbmn))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---L_Cmd.CommandText = "UPDATE GBKZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_ZdataBunri.Valu +
                                L_Cmd.CommandText = "UPDATE GBKZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_ZdataBunri.Valu +
                                                            " WHERE KESN = " + H_ZdataBunri.Kesn + " AND BCOD = '" + H_ZdataBunri.Sbmn + "' AND KICD = '" + H_ZdataBunri.Skmk + "' AND HEI_CD = '" + H_ZdataBunri.Shei_cd + "'";
    							L_Cmd.ExecuteNonQuery();
    						}
    					}
                        else if (H_GAIKAKamoku_Flg == 2)
                        {
    						if (!string.IsNullOrEmpty(H_ZdataBunri.Rbmn))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---L_Cmd.CommandText = "UPDATE GBKZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                L_Cmd.CommandText = "UPDATE GBKZAN SET " + L_HColGR + " = " + L_HColGR + " + " + H_ZdataBunri.Gaika + ", " + L_HColHR + " = " + L_HColHR + " + " + H_ZdataBunri.Valu +
                                                            " WHERE KESN = " + H_ZdataBunri.Kesn + " AND BCOD = '" + H_ZdataBunri.Rbmn + "' AND KICD = '" + H_ZdataBunri.Rkmk + "' AND HEI_CD = '" + H_ZdataBunri.Rhei_cd + "'";
    							L_Cmd.ExecuteNonQuery();
    						}
    					}
                        else if (H_GAIKAKamoku_Flg == 1)
                        {
    						if (!string.IsNullOrEmpty(H_ZdataBunri.Sbmn))
                            {
                                //--- ロックヒントを排除 2021/02/09
                                //---L_Cmd.CommandText = "UPDATE GBKZAN WITH(UPDLOCK,ROWLOCK) SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_ZdataBunri.Valu +
                                L_Cmd.CommandText = "UPDATE GBKZAN SET " + L_HColGS + " = " + L_HColGS + " + " + H_ZdataBunri.Gaika + ", " + L_HColHS + " = " + L_HColHS + " + " + H_ZdataBunri.Valu +
                                                            " WHERE KESN = " + H_ZdataBunri.Kesn + " AND BCOD = '" + H_ZdataBunri.Sbmn + "' AND KICD = '" + H_ZdataBunri.Skmk + "' AND HEI_CD = '" + H_ZdataBunri.Shei_cd + "'";
    							L_Cmd.ExecuteNonQuery();
    						}
    					}
                        #endregion

                        #region 元からコメントアウト
                        // **** 部門科目枝番外貨残高
                        // *-00.03.01　ロックヒントを追加
                        // If L_VolumRow[(int)eVOLUM.VOLUM_BKESW) = 1 Then
                        //     If H_GAIKAKamoku_Flg = 3 Then
                        //         If (.Rbmn <> "") And (.Reda <> "") Then
                        //             L_Cmd.CommandText = "UPDATE GBKEZAN WITH(UPDLOCK,ROWLOCK) SET " && L_HColGR && " = " && L_HColGR && " + " && .Gaika _
                        //                                 && ", " && L_HColHR && " = " && L_HColHR && " + " && .Valu _
                        //                                 && " WHERE KESN = " && .Kesn && " AND BCOD = '" && .Rbmn _
                        //                                 && "' AND KICD = '" && .Rkmk && "' AND ECOD = '" && .Reda && "' AND HEI_CD = '" && .Rhei_cd && "'"
                        //             L_Cmd.ExecuteNonQuery()
                        //         End If
                        //         If (.Sbmn <> "") And (.Seda <> "") Then
                        //             L_Cmd.CommandText = "UPDATE GBKEZAN WITH(UPDLOCK,ROWLOCK) SET " && L_HColGS && " = " && L_HColGS && " + " && .Gaika _
                        //                                 && ", " && L_HColHR && " = " && L_HColHR && " + " && .Valu _
                        //                                 && " WHERE KESN = " && .Kesn && " AND BCOD = '" && .Sbmn _
                        //                                 && "' AND KICD = '" && .Skmk && "' AND ECOD = '" && .Seda && "' AND HEI_CD = '" && .Shei_cd && "'"
                        //             L_Cmd.ExecuteNonQuery()
                        //         End If
                        //     ElseIf H_GAIKAKamoku_Flg = 2 Then
                        //         If (.Rbmn <> "") And (.Reda <> "") Then
                        //             L_Cmd.CommandText = "UPDATE GBKEZAN WITH(UPDLOCK,ROWLOCK) SET " && L_HColGR && " = " && L_HColGR && " + " && .Gaika _
                        //                                 && ", " && L_HColHR && " = " && L_HColHR && " + " && .Valu _
                        //                                 && " WHERE KESN = " && .Kesn && " AND BCOD = '" && .Rbmn _
                        //                                 && "' AND KICD = '" && .Rkmk && "' AND ECOD = '" && .Reda && "' AND HEI_CD = '" && .Rhei_cd && "'"
                        //             L_Cmd.ExecuteNonQuery()
                        //         End If
                        //     ElseIf H_GAIKAKamoku_Flg = 1 Then
                        //         If (.Sbmn <> "") And (.Seda <> "") Then
                        //             L_Cmd.CommandText = "UPDATE GBKEZAN WITH(UPDLOCK,ROWLOCK) SET " && L_HColGS && " = " && L_HColGS && " + " && .Gaika _
                        //                                 && ", " && L_HColHS && " = " && L_HColHS && " + " && .Valu _
                        //                                 && " WHERE KESN = " && .Kesn && " AND BCOD = '" && .Sbmn _
                        //                                 && "' AND KICD = '" && .Skmk && "' AND ECOD = '" && .Seda && "' AND HEI_CD = '" && .Shei_cd && "'"
                        //             L_Cmd.ExecuteNonQuery()
                        //         End If
                        //     End If
                        // End If

                        // **** 部門取引先科目外貨残高
                        // *-00.03.01　ロックヒントを追加
                        // If L_VolumRow[(int)eVOLUM.VOLUM_BTKSW) = 1 Then
                        //     If H_GAIKAKamoku_Flg = 3 Then
                        //         If (.Rbmn <> "") And (.Rtor <> "") Then
                        //             L_Cmd.CommandText = "UPDATE GBTKZAN WITH(UPDLOCK,ROWLOCK) SET " && L_HColGR && " = " && L_HColGR && " + " && .Gaika _
                        //                                 && ", " && L_HColHR && " = " && L_HColHR && " + " && .Valu _
                        //                                 && " WHERE KESN = " && .Kesn && " AND BCOD = '" && .Rbmn _
                        //                                 && "' AND TRCD = '" && .Rtor && "' AND KICD = '" && .Rkmk && "' AND HEI_CD = '" && .Rhei_cd && "'"
                        //             L_Cmd.ExecuteNonQuery()
                        //         End If
                        //         If (.Sbmn <> "") And (.Stor <> "") Then
                        //             L_Cmd.CommandText = "UPDATE GBTKZAN WITH(UPDLOCK,ROWLOCK) SET " && L_HColGS && " = " && L_HColGS && " + " && .Gaika _
                        //                                 && ", " && L_HColHS && " = " && L_HColHS && " + " && .Valu _
                        //                                 && " WHERE KESN = " && .Kesn && " AND BCOD = '" && .Sbmn _
                        //                                 && "' AND TRCD = '" && .Stor && "' AND KICD = '" && .Skmk && "' AND HEI_CD = '" && .Shei_cd && "'"
                        //             L_Cmd.ExecuteNonQuery()
                        //         End If
                        //     ElseIf H_GAIKAKamoku_Flg = 2 Then
                        //         If (.Rbmn <> "") And (.Rtor <> "") Then
                        //             L_Cmd.CommandText = "UPDATE GBTKZAN WITH(UPDLOCK,ROWLOCK) SET " && L_HColGR && " = " && L_HColGR && " + " && .Gaika _
                        //                                 && ", " && L_HColHR && " = " && L_HColHR && " + " && .Valu _
                        //                                 && " WHERE KESN = " && .Kesn && " AND BCOD = '" && .Rbmn _
                        //                                 && "' AND TRCD = '" && .Rtor && "' AND KICD = '" && .Rkmk && "' AND HEI_CD = '" && .Rhei_cd && "'"
                        //             L_Cmd.ExecuteNonQuery()
                        //         End If
                        //     ElseIf H_GAIKAKamoku_Flg = 1 Then
                        //         If (.Sbmn <> "") And (.Stor <> "") Then
                        //             L_Cmd.CommandText = "UPDATE GBTKZAN WITH(UPDLOCK,ROWLOCK) SET " && L_HColGS && " = " && L_HColGS && " + " && .Gaika _
                        //                                 && ", " && L_HColHS && " = " && L_HColHS && " + " && .Valu _
                        //                                 && " WHERE KESN = " && .Kesn && " AND BCOD = '" && .Sbmn _
                        //                                 && "' AND TRCD = '" && .Stor && "' AND KICD = '" && .Skmk && "' AND HEI_CD = '" && .Shei_cd && "'"
                        //             L_Cmd.ExecuteNonQuery()
                        //         End If
                        //     Else
                        //     End If
                        // End If
                        #endregion
                    }
                }
    
    			// ** 正常終了
    			functionReturnValue = 1;
    		}
            #region 2020/03/06 Ver02.19.05.9901 PostgreSQL対応(コメントアウト) --->
//            catch (SqlException ex)
//            {
//    			switch (ex.Number)
//                {
//    				case 1222:
//    					functionReturnValue = MC_RESULT_ERR_IN_ROCK;
//    					break;
//    				default:
//    					functionReturnValue = (L_ReadFlg ? MC_RESULT_ERR_DBREAD : MC_RESULT_ERR_DBWRITE);
//    					break;
//    			}    
//    		}
            #endregion
            catch (DbException ex)
            {
                if (G_DbFactory.IsLockTimeoutError(ex))
                {
                    functionReturnValue = MC_RESULT_ERR_IN_ROCK;
                }
                else
                {
                    functionReturnValue = L_ReadFlg == true ? MC_RESULT_ERR_DBREAD : MC_RESULT_ERR_DBWRITE;
                }
            }
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
            catch (MyException ex)
            {
    			throw ex;    
    		}
            catch (Exception ex)
            {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.ERROR, "WriteBunriTransaction_FNC" + ex.Message);
                mLogger.LogClose();
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
    			// ** その他例外の場合
    			functionReturnValue = -99;
    			throw new MyException(MC_RESULT_ERR_OTHERS, ex);
    		}
    		return functionReturnValue;    
    	}

    	// 文字列が空文字か判断し、ＤＢ登録用の文字列を返す
    	private string MakeInsertString_FNC(string ChkString)
    	{    
    		string L_ReturnString = "";
    
    		L_ReturnString = (string.IsNullOrEmpty(ChkString) ? "NULL" : "'" + ChkString + "'");
    
    		return L_ReturnString;    
    	}
    
    	// 入力値補正
    	private string EditImpString_FNC(string ChkString, bool CsvFlg, int Type)
    	{    
    		string ReturnString = "";
    
    		EditImpString_FNC(ChkString, CsvFlg, Type, ref ReturnString);
    
    		return ReturnString;    
    	}    
    	private bool EditImpString_FNC(string ChkString, bool CsvFlg, int Type, ref string ReturnString)
    	{
    		if (Type != 2 && Type != 6)
            {
    			// 英数、文字でない場合は前後のスペースを削除
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			ReturnString = Strings.Trim(ChkString);
                ReturnString = ChkString.Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			return true;
    		}
    		// 英数、文字の場合はダブルクォートを削除
    		if (DelDoubleQuote_FNC(ChkString, CsvFlg, ref ReturnString) == false)
            {
    			// エラーの場合は入力値をかえす
    			ReturnString = ChkString;
    			return false;
    		}
    		if (Type == 2)
            {
    			// 文字囲み内末尾からスペースを削除
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			ReturnString = Strings.RTrim(ReturnString);
                ReturnString = ReturnString.TrimEnd();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    		}
    		return true;    
    	}
    
    
    	// ダブルクォート削除
    	private bool DelDoubleQuote_FNC(string ChkString, bool DoubleQuote, ref string ReturnString)
    	{
    		string L_Tmp  = "";
    		string L_Tmp2 = "";
    
    		ReturnString = ChkString;
    
    		if (DoubleQuote == false)
            {
    			// 文字囲み不要
    			return true;
    		}
    		// 文字囲み有の場合は文字囲みの外側のスペースを削除
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    		L_Tmp = Strings.Trim(ChkString);
            L_Tmp = ChkString.Trim();
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
            // 文字囲み不足
    		if (L_Tmp.Length < 2) { return false; }
    		L_Tmp2 = ChkString.Substring(0, 1);
            // 文字囲み不足
    		if (L_Tmp2 != "\"")   { return false; }
    		L_Tmp2 = ChkString.Substring(L_Tmp.Length - 1, 1);
            // 文字囲み不足
    		if (L_Tmp2 != "\"")   { return false; }
            // 空文字列
    		if (L_Tmp.Length == 2)
            {
    			ReturnString = "";
    			return true;
    		}
    		// ダブルクォート削除
    		ReturnString = ChkString.Substring(1, L_Tmp.Length - 2);
    		return true;
    	}

        #region 各チェック
        // 整理月取得
        private bool GetSeirituki_FNC(string H_SeiriFlg, DataRow[] H_Volum2Rows, ref short H_Kesn, ref short H_Dkei)
    	{
    		bool functionReturnValue = false;

// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->    
//    		switch (Strings.Trim(H_SeiriFlg))
            switch (H_SeiriFlg.Trim())
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
            {
    			case "":
    			case "0":
    				H_Kesn = Convert.ToInt16(H_Volum2Rows[0][(int)eVOLUM2.VOLUM2_KESN]);
    				H_Dkei = Convert.ToInt16(H_Volum2Rows[0][(int)eVOLUM2.VOLUM2_CKEI]);
    				functionReturnValue = true;
    				break;
    			case "1":
    				H_Kesn = Convert.ToInt16(H_Volum2Rows[1][(int)eVOLUM2.VOLUM2_KESN]);
    				H_Dkei = Convert.ToInt16(H_Volum2Rows[1][(int)eVOLUM2.VOLUM2_CKEI]);
    				functionReturnValue = true;
    				break;
    			default:
    				functionReturnValue = false;
    				break;
    		}

    		return functionReturnValue;    
    	}

    	// 整理月フラグチェック
    	private bool CheckSeiriFlag(string SeiriFlgValue, DataRow[] Volum2)
    	{
    		try
            {
    			short Dummy1 = 0;
    			short Dummy2 = 0;
    			return GetSeirituki_FNC(SeiriFlgValue, Volum2, ref Dummy1, ref Dummy2);
    		}
            catch
            {
    			return false;
    		}
    	}

    	// ＨＦのチェック
    	private int ChkHF_FNC(short H_Mode, string H_Text, IDbConnection H_Con, short H_Kesn, DataRow H_VolumRow, bool H_CsvFlg)
    	{
    		int functionReturnValue = 0;
    
    		short  L_Flag     = 0;
    		short  L_Type     = 0;
    		short  L_Len      = 0;
    		short  L_SyoLen   = 0;
    		short  L_MinyuFlg = 0;
    		string L_Code     = "";
    		string L_Text     = "";
    		bool   L_Ret      = false;
    
    		functionReturnValue = 0;
    
    		switch (H_Mode)
            {
    			case 1:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF1FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF1TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF1LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF1SYLN]);
    				L_MinyuFlg = Convert.ToInt16(P_HF1_MI);
    				break;
    			case 2:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF2FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF2TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF2LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF2SYLN]);
    				L_MinyuFlg = Convert.ToInt16(P_HF2_MI);
    				break;
    			case 3:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF3FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF3TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF3LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF3SYLN]);
    				L_MinyuFlg = Convert.ToInt16(P_HF3_MI);
    				break;
    			case 4:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF4FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF4TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF4LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF4SYLN]);
    				L_MinyuFlg = Convert.ToInt16(P_HF4_MI);
    				break;
    			case 5:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF5FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF5TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF5LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF5SYLN]);
    				L_MinyuFlg = Convert.ToInt16(P_HF5_MI);
    				break;
    			case 6:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF6FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF6TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF6LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF6SYLN]);
    				L_MinyuFlg = Convert.ToInt16(P_HF6_MI);
    				break;
    			case 7:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF7FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF7TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF7LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF7SYLN]);
    				L_MinyuFlg = Convert.ToInt16(P_HF7_MI);
    				break;
    			case 8:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF8FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF8TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF8LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF8SYLN]);
    				L_MinyuFlg = Convert.ToInt16(P_HF8_MI);
    				break;
    			case 9:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF9FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF9TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF9LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF9SYLN]);
    				L_MinyuFlg = Convert.ToInt16(P_HF9_MI);
    				break;
    			case 10:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF10FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF10TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF10LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_DUF10SYLN]);
    				L_MinyuFlg = Convert.ToInt16(P_HF10_MI);
    				break;
    			default:
    				return functionReturnValue;
    		}
    
    		// 英数の場合
    		// 文字囲み外のスペースを削除
    		// ダブルクォートを削除
    		// 文字囲み内末尾からスペースを削除
    		// 文字の場合
    		// 文字囲み外のスペースを削除
    		// ダブルクォートを削除
    		// 英数でも文字でもない場合
    		// 左右からスペースを削除
    		L_Ret = EditImpString_FNC(H_Text, H_CsvFlg, L_Type, ref L_Text);
    
    		if (L_Flag != 0)
            {
    			// 2015/09/02     Ver00.04.02     HFとUFが英数or文字列の場合は未指定でも文字囲みが必要(SIAS-2873) Start
    			// If String.IsNullOrEmpty(L_Text) Then
    			//     If L_MinyuFlg = 1 Then
    			//         '未入力エラー
    			//         ChkHF_FNC = -3
    			//     End If
    			// ElseIf L_Ret = False Then
    			//     '値が不正
    			//     ChkHF_FNC = -8
    			if (L_Ret == false)
                {
    				// 値が不正
    				functionReturnValue = -8;
    			}
                else if (string.IsNullOrEmpty(L_Text))
                {
    				if (L_MinyuFlg == 1)
                    {
    					// 未入力エラー
    					functionReturnValue = -3;
    				}
    				// 2015/09/02     Ver00.04.02     HFとUFが英数or文字列の場合は未指定でも文字囲みが必要(SIAS-2873) End
    			}
                else
                {
    				switch (L_Type)
                    {
    					case 1:
    					case 2:
    						if (ChkCodeType_FNC(L_Text, L_Type) == true)
                            {
    							// 数字タイプでコード0はエラー
    							if (L_Type == 1)
                                {
    								if (IsNumericCode_FNC(L_Text) == false)
                                    {
    									functionReturnValue = -8;
    								}
    							}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= L_Len)
    							if (L_Text.Length <= L_Len)
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                                {
    								if (L_Flag == 2)
                                    {
    									L_Code = EditCode_FNC(L_Text, L_Type.ToString(), L_Len);
    									if (HFExists_FNC(H_Mode, H_Con, H_Kesn, L_Code))
                                        {
    										// 残高有選択不可なので残高レコードの存在チェックはなし
    									}
                                        else
                                        {
    										functionReturnValue = -4;
    									}
    								}
    							}
                                else
                                {
    								functionReturnValue = -2;
    							}
    						}
                            else
                            {
    							functionReturnValue = -1;
    						}
    						break;
    					case 6:
    						if (LenB_FNC(L_Text) > L_Len)
                            {
    							functionReturnValue = -2;
    						}
    						break;
    				}
    			}
    		}
            else if (L_Flag == 0)
            {
    			if (string.IsNullOrEmpty(L_Text) == false)
                {
    				// 使用不可項目
    				functionReturnValue = -7;
    			}
    		}
    		return functionReturnValue;
    	}    
        // ＵＦのチェック
    	private int ChkDummy_FNC(short H_Mode, string H_Text, IDbConnection H_Con, short H_Kesn, DataRow H_VolumRow, DataRow H_KnameRow, bool H_CsvFlg)
    	{
    		int functionReturnValue = 0;
    
    		short  L_Flag     = 0;
    		short  L_Type     = 0;
    		short  L_Len      = 0;
    		short  L_SyoLen   = 0;
    		short  L_MinyuFlg = 0;
    		string L_Code     = "";
    		string L_Text     = "";
    		bool   L_Ret      = false;

    		functionReturnValue = 0;
    
    		switch (H_Mode)
            {
    			case 1:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D1FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D1TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D1LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D1SYLN]);
    				if (H_KnameRow == null)
                    {
    					L_MinyuFlg = 0;
    				}
                    else
                    {
    					L_MinyuFlg = Convert.ToInt16(H_KnameRow[(int)eKNAME.KNAME_DM12]);
    				}
    				break;
    			case 2:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D2FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D2TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D2LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D2SYLN]);
    				if (H_KnameRow == null)
                    {
    					L_MinyuFlg = 0;
    				}
                    else
                    {
    					L_MinyuFlg = Convert.ToInt16(H_KnameRow[(int)eKNAME.KNAME_DM22]);
    				}
    				break;
    			case 3:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D3FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D3TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D3LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D3SYLN]);
    				if (H_KnameRow == null)
                    {
    					L_MinyuFlg = 0;
    				}
                    else
                    {
    					L_MinyuFlg = Convert.ToInt16(H_KnameRow[(int)eKNAME.KNAME_DM32]);
    				}
    				break;
    			// Prj312--->
    			case 4:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D4FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D4TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D4LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D4SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 5:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D5FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D5TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D5LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D5SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 6:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D6FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D6TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D6LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D6SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 7:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D7FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D7TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D7LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D7SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 8:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D8FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D8TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D8LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D8SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 9:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D9FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D9TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D9LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D9SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 10:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D10FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D10TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D10LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D10SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 11:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D11FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D11TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D11LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D11SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 12:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D12FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D12TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D12LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D12SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 13:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D13FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D13TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D13LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D13SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 14:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D14FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D14TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D14LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D14SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 15:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D15FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D15TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D15LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D15SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 16:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D16FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D16TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D16LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D16SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 17:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D17FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D17TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D17LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D17SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 18:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D18FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D18TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D18LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D18SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 19:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D19FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D19TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D19LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D19SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			case 20:
    				L_Flag     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D20FLG]);
    				L_Type     = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D20TY]);
    				L_Len      = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D20LN]);
    				L_SyoLen   = Convert.ToInt16(H_VolumRow[(int)eVOLUM.VOLUM_D20SYLN]);
    				L_MinyuFlg = 0;
    				// UF4～20は未入力チェックをおこなわない仕様
    				break;
    			// <---
    			default:
    				return functionReturnValue;
    		}
    		// Prj312--->
    		// 英数の場合
    		// 文字囲み外のスペースを削除
    		// ダブルクォートを削除
    		// 文字囲み内末尾からスペースを削除
    		// 文字の場合
    		// 文字囲み外のスペースを削除
    		// ダブルクォートを削除
    		// 英数でも文字でもない場合
    		// 左右からスペースを削除
    		L_Ret = EditImpString_FNC(H_Text, H_CsvFlg, L_Type, ref L_Text);
    
    		if (L_Flag != 0)
            {
    			// 2015/09/02     Ver00.04.02     HFとUFが英数or文字列の場合は未指定でも文字囲みが必要(SIAS-2873) Start
    			// If String.IsNullOrEmpty(L_Text) Then
    			//     Select Case L_Flag
    			//         Case 2, 3 '旧システムからの既存の不具合、マスター参照しない場合に未入力チェックされていない
    			//             If L_MinyuFlg = 1 Then
    			//                 '未入力
    			//                 ChkDummy_FNC = -3
    			//             End If
    			//     End Select
    			// ElseIf L_Ret = False Then
    			//     '値が不正
    			//     ChkDummy_FNC = -8
    			if (L_Ret == false)
                {
    				// 値が不正
    				functionReturnValue = -8;
    			}
                else if (string.IsNullOrEmpty(L_Text))
                {
    				// *-01.07.01
    				// Select Case L_Flag
    				//     Case 2, 3 '旧システムからの既存の不具合、マスター参照しない場合に未入力チェックされていない
    				//         If L_MinyuFlg = 1 Then
    				//             '未入力
    				//             ChkDummy_FNC = -3
    				//         End If
    
    				// End Select
    				if (H_Mode <= 3)
                    {
    					if (L_MinyuFlg == 1)
                        {
    						if (P_SUB_TENK == 1 && P_JSOX == true)
                            {
    							// 未入力
    							functionReturnValue = -3;
    						}
    					}
    				}
    				// -*
    
    				// 2015/09/02     Ver00.04.02     HFとUFが英数or文字列の場合は未指定でも文字囲みが必要(SIAS-2873) End
    			}
                else
                {
    				switch (L_Type)
                    {
    					case 1:
    					case 2:
    						if (ChkCodeType_FNC(L_Text, L_Type) == true)
                            {
    							// 数字タイプでコード0はエラー
    							if (L_Type == 1)
                                {
    								if (IsNumericCode_FNC(L_Text) == false)
                                    {
    									functionReturnValue = -8;
    								}
    							}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Strings.Len(L_Text) <= L_Len) {
    							if (L_Text.Length <= L_Len)
                                {
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								if ((L_Flag == 2) || (L_Flag == 3))
                                    {
    									L_Code = EditCode_FNC(L_Text, L_Type.ToString(), L_Len);
    									if (DummyTblExists_FNC(H_Mode, H_Con, H_Kesn, L_Code) == true)
                                        {
    										if ((L_Flag == 3) && (H_KnameRow != null))
                                            {
    											if (DummyZanExists_FNC(H_Mode, H_Con, H_Kesn, L_Code, (H_KnameRow[(int)eKNAME.KNAME_KICD]).ToString()) == true)
                                                {
    											}
                                                else
                                                {
    												functionReturnValue = -5;
    											}
    										}
    									}
                                        else
                                        {
    										functionReturnValue = -4;
    									}
    								}
    							}
                                else
                                {
    								functionReturnValue = -2;
    							}
    						}
                            else
                            {
    							functionReturnValue = -1;
    						}
    						break;
    					case 3:
    						functionReturnValue = ChkCurrency_FNC(L_Text, L_Len);
    						break;
    					case 4:
    						functionReturnValue = ChkSyosu_FNC(L_Text, L_Len, L_SyoLen);
    						break;
    					case 5:
    						if (ChkHiduke_FNC(L_Text) == false)
                            {
    							functionReturnValue = -6;
    						}
    						break;
    					case 6:
    						if (LenB_FNC(L_Text) > L_Len)
                            {
    							functionReturnValue = -2;
    						}
    						break;
    				}
    			}
    		}
            else if (L_Flag == 0)
            {
    			if (string.IsNullOrEmpty(L_Text) == false)
                {
    				functionReturnValue = -7;
    			}
    		}
    		return functionReturnValue;    
    	}
    
        // 課税区分チェック
    	private bool ChkZkbn_FNC(string H_Text, DataRow H_SvolumRow, DataRow H_KnameRow)
    	{
    		bool functionReturnValue = false;
    
    		short L_SGrp  = 0;
    		short L_Zkbn  = 0;
    		short L_Keiri = 0;
    
    		functionReturnValue = false;

            #region ** 科目の処理グループに基づく判定    
            L_SGrp = Convert.ToInt16(H_KnameRow[(int)eKNAME.KNAME_SY01]);    
    		switch (L_SGrp)
            {   
    			case 0:
    				// 該当なし
    				switch (H_Text)
                    {
    					case "100":
    						functionReturnValue = true;
    						break;
    				}    
    				break;
    			case 1:
    				// 対象外
    				switch (H_Text)
                    {
    					case "100":
    						functionReturnValue = true;
    						break;
    				}    
    				break;
    			case 2:
    				// 資産
    				switch (H_Text)
                    {
    					case "0":
    					case "3":
    					case "11":
    					case "12":
    					case "13":
    					case "14":
    					case "41":
    					case "42":
    						functionReturnValue = true;
    						break;
    					case "21":
    					case "22":
    						if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 1)
                            {
    							functionReturnValue = true;
    						}
    						break;
    					case "23":
    					case "24":
    						if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 2)
                            {
    							functionReturnValue = true;
    						}
    						break;
    					case "31":
    						if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 3)
                            {
    							functionReturnValue = true;
    						}
    						break;
    				}    
    				break;
    			case 3:
    				// 負債
    				switch (H_Text)
                    {
    					case "0":
    					case "1":
    					case "2":
    					case "3":
    					case "4":
    						functionReturnValue = true;
    						break;
    					case "21":
    					case "22":
    						if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 1)
                            {
    							functionReturnValue = true;
    						}
    						break;
    					case "23":
    					case "24":
    						if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 2)
                            {
    							functionReturnValue = true;
    						}
    						break;
    				}    
    				break;
    			case 4:
                    // 売上
                    switch (H_Text)
                    {
                        case "0":
                        case "1":
                        case "2":
                        case "3":
                        case "4":
                            functionReturnValue = true;
                            break;
                        case "21":
                        case "22":
                            if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 1)
                            {
                                functionReturnValue = true;
                            }
                            break;
                        case "23":
                        case "24":
                            if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 2)
                            {
                                functionReturnValue = true;
                            }
                            break;
                    }   
    				break;
    			case 5:
    				// 仕入
    				switch (H_Text)
                    {
    					case "0":
    					case "1":
    					case "2":
    					case "3":
    					case "4":
    						functionReturnValue = true;
    						break;
    					case "31":
    						if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 3)
                            {
    							functionReturnValue = true;
    						}
    						break;
    				}    
    				break;
    			case 6:
    				// 経費
    				switch (H_Text)
                    {
    					case "0":
    					case "1":
    					case "2":
    					case "3":
    					case "4":
    						functionReturnValue = true;
    						break;
    					case "31":
    						if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 3)
                            {
    							functionReturnValue = true;
    						}
    						break;
    				}    
    				break;
    			case 7:
    				// 混在
    				switch (H_Text)
                    {
    					// IMPORTER.dll差分対応 de3-8993 Ver.12.09.01 2015.03.06 START
    					// Case "0", "3", "4", "11", "12", "13", "14"
    					case "0":
    					case "3":
    					case "4":
    					case "11":
    					case "12":
    					case "13":
    					case "14":
    					case "41":
    					case "42":
    						// 「41：非課税仕入」「42：非課税売上」
    						// IMPORTER.dll差分対応 de3-8993 Ver.12.09.01 2015.03.06 END
    						functionReturnValue = true;
    						break;
    				}    
    				break;
    			case 8:
    				// 有価証券
    				switch (H_Text)
                    {
    					case "0":
    					case "3":
    					case "11":
    					case "12":
    					case "13":
    					case "14":
    					case "41":
    					case "42":
    						functionReturnValue = true;
    						break;
    					case "21":
    					case "22":
    						if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 1)
                            {
    							functionReturnValue = true;
    						}
    						break;
    					case "23":
    					case "24":
    						if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 2)
                            {
    							functionReturnValue = true;
    						}
    						break;
    				}    
    				break;
    			case 9:
    				// 売上値引
    				switch (H_Text)
                    {
    					case "0":
    					case "1":
    					case "2":
    					case "3":
    					case "4":
    						functionReturnValue = true;
    						break;
    				}    
    				break;
    			case 10:
    				// 仕入値引
    				switch (H_Text)
                    {
    					case "0":
    					case "1":
    					case "2":
    					case "3":
    					case "4":
    						functionReturnValue = true;
    						break;
    					case "31":
    						if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 3)
                            {
    							functionReturnValue = true;
    						}
    						break;
    				}    
    				break;
    			case 21:
    				// 仮払消費税
    				switch (H_Text)
                    {
    					case "99":
    					case "100":
    						functionReturnValue = true;
    						break;
    					case "32":
    					case "33":
    						if (Convert.ToInt32(H_KnameRow[(int)eKNAME.KNAME_SY08]) == 3)
                            {
    							functionReturnValue = true;
    						}
    						break;
    				}
    
    				break;
    			case 22:
    				// 仮受消費税
    				switch (H_Text)
                    {
    					case "99":
    					case "100":
    						functionReturnValue = true;
    						break;
    				}
    
    				break;
    		}
            #endregion

            #region ** 消費税マスターの消費税区分に基づく判定    
            if (functionReturnValue == true)
            {
    			L_Zkbn = Convert.ToInt16(H_Text);
    
    			switch (Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_SKBN]))
                {    
    				case 0:    
    					// ** 税込処理の場合、税抜属性の区分は使用不可
    					switch (L_Zkbn)
                        {
    						case 2:
    						case 13:
    						case 14:
    						case 22:
    						case 24:
    						case 31:
    						case 32:
    						case 33:
    							functionReturnValue = false;
    							break;
    					}    
    					break;
    				case 1:    
    					// ** 税抜処理の場合、処理グループに対応する経理方式に従って判定する
    					if (L_SGrp == 7)
                        {
    						// ** 処理グループ＝混在のとき
    						// ** 売上経理方式が税抜なら「課込売上」使用不可、税込なら「課抜売上」使用不可
    						if (Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_KBN2]) == 0)
                            {
    							if (L_Zkbn == 12) { functionReturnValue = false; }
    						}
                            else
                            {
    							if (L_Zkbn == 14) { functionReturnValue = false; }
    						}
    						// ** 仕入経理方式が税抜なら「課込仕入」使用不可、税込なら「課抜仕入」使用不可
    						if (Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_KBN3]) == 0)
                            {
    							if (L_Zkbn == 11) { functionReturnValue = false; }
    						}
                            else 
                            {
    							if (L_Zkbn == 13) { functionReturnValue = false; }
    						}
    					}
                        else
                        {
    						// ** 処理グループ≠混在のとき
    						// ** 対応する経理方式が税抜なら税込属性の区分は使用不可、税込なら税抜属性の区分は使用不可
    						switch (L_SGrp)
                            {
    							case 2:
    							case 8:
    								L_Keiri = Convert.ToInt16(H_SvolumRow[(int)eSVOLUM.SVOLUM_KBN1]);
    								break;
    							case 3:
    							case 4:
    							case 9:
    								L_Keiri = Convert.ToInt16(H_SvolumRow[(int)eSVOLUM.SVOLUM_KBN2]);
    								break;
    							case 5:
    							case 10:
    								L_Keiri = Convert.ToInt16(H_SvolumRow[(int)eSVOLUM.SVOLUM_KBN3]);
    								break;
    							case 6:
    								L_Keiri = Convert.ToInt16(H_SvolumRow[(int)eSVOLUM.SVOLUM_KBN4]);
    								break;
    							default:
    								L_Keiri = -1;
    								break;
    						}
    						switch (L_Keiri)
                            {
    							case 0:
    								switch (L_Zkbn)
                                    {
    									case 1:
    									case 11:
    									case 12:
    									case 21:
    									case 23:
    										functionReturnValue = false;
    										break;
    								}
    								break;
    							case 1:
    								switch (L_Zkbn)
                                    {
    									case 2:
    									case 13:
    									case 14:
    									case 22:
    									case 24:
    									case 31:
    									case 32:
    									case 33:
    										functionReturnValue = false;
    										break;
    								}
    								break;
    						}
    					}    
    					break;
    			}    
    		}
            #endregion

            return functionReturnValue;    
    	}
    
    	// *===========================================================================================*
    	//    課税区分を判断する（税込/税抜）
    	// 	    H_Mode - 0:対象外 1:税込 2:税抜 3:自動分離
    	// 	    H_Text - 課税区分
    	//      返値   - TRUE:指定された分類の区分である　FALSE：不一致
    	// 	        ※2:税抜,3:自動分類以外は暫定未使用です
    	// *===========================================================================================*
    	private bool ChkZkbn_Mode_FNC(short H_Mode, string H_Text)
    	{
    		bool functionReturnValue = false;    
    
    		functionReturnValue = false;
    
    		// ** 課税区分の切り分け
    		switch (H_Mode)
            {    
    			case 0:  // 対象外    				
    				switch (H_Text)
                    {
    					case "0":
    					case "100":
    						functionReturnValue = true;
    						break;
    				}    
    				break;
    			case 1:  // 税込    				
    				switch (H_Text)
                    {
    					case "1":
    					case "11":
    					case "12":
    					case "18":
    					case "21":
    					case "23":
    						functionReturnValue = true;
    						break;
    				}    
    				break;
    			case 2:  // 税抜    				
    				switch (H_Text)
                    {
    					case "2":
    					case "13":
    					case "14":
    					case "19":
    					case "22":
    					case "24":
    						functionReturnValue = true;
    						break;
    				}    
    				break;
    			case 3:  // 自動分離    				
    				switch (H_Text)
                    {
    					case "18":
    					case "19":
    					case "49":
    						functionReturnValue = true;
    						break;
    				}    
    				break;
    		}

    		return functionReturnValue;    
    	}
    
        // 使用可の税率チェック
    	private bool ChkZritu_FNC(string H_Text, int H_Dymd, DataTable H_dtSritu)
    	{
    		bool functionReturnValue = false;
    
    		decimal   L_Zritu = default(decimal);
    		DataRow[] L_Rows  = null;
    		int       L_I     = 0;
    
    		functionReturnValue = false;

    		if (!string.IsNullOrEmpty(H_Text))
            {
    			if (ChkSyosu_FNC(H_Text, 3, 2) == 0)
                {
    				L_Zritu = Convert.ToDecimal(H_Text);
    				L_Rows  = H_dtSritu.Select("SYMD <= " + H_Dymd);
    				if (L_Rows.Length > 0)
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					for (L_I = 0; L_I <= Information.UBound(L_Rows); L_I++)
                        for (L_I = 0; L_I <= L_Rows.Length - 1; L_I++)
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                        {
    						if (L_Zritu == Convert.ToDecimal(L_Rows[L_I][(int)eSRITU.SRITU_ZRIT]))
                            {
    							functionReturnValue = true;
    							break;
    						}
    					}
    				}
    				L_Rows = null;
    			}
    		}
    		return functionReturnValue;    
    	}
    
    	/// <summary>
    	/// 指定した税率から使用可能な最新の税率を取得
    	/// </summary>
    	/// <returns>使用できる税率が指定された場合：指定された税率, 使用できない税率が指定された場合：使用できる税率のうち最新の税率</returns>
    	private string GetLatestZritu(string H_Text, int H_Dymd, DataTable H_dtSritu)
    	{
    		string functionReturnValue = null;
    
    		decimal   L_Zritu       = default(decimal);
    		decimal   L_ZrituLatest = default(decimal);
    		DataRow[] L_Rows        = null;
    		int       L_I           = 0;
    		bool      L_IsSetZritu  = false;
    
    		//  指定された税率を設定
    		functionReturnValue = H_Text;
    
    		if (!string.IsNullOrEmpty(H_Text))
            {
    			if (ChkSyosu_FNC(H_Text, 3, 2) == 0)
                {
    				L_Zritu = Convert.ToDecimal(H_Text);
    				L_Rows = H_dtSritu.Select("SYMD <= " + H_Dymd);
    				if (L_Rows.Length > 0)
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					for (L_I = 0; L_I <= Information.UBound(L_Rows); L_I++)
                        for (L_I = 0; L_I <= L_Rows.Length - 1; L_I++)
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                        {
    						if (L_Zritu == Convert.ToDecimal(L_Rows[L_I][(int)eSRITU.SRITU_ZRIT]))
                            {
    							L_IsSetZritu = true;
    							break;
    						}
    						L_ZrituLatest = Convert.ToDecimal(L_Rows[L_I][(int)eSRITU.SRITU_ZRIT]);
    					}
    				}
    				if (L_IsSetZritu == false)
                    {
    					//  使用できる税率の中で最新のものを使用する
    					functionReturnValue = L_ZrituLatest.ToString();
    				}
    				L_Rows = null;
    			}
    		}
    		return functionReturnValue;    
    	}
    
    	// / <summary>
    	// / 指定した税率区分よりデフォルトの税率を取得します(共通DBより税率が取得できなかった時用)
    	// / </summary>
    	// / <returns>デフォルト税率(文字列リテラル)</returns>
    	private string GetDefaultLocalZritu(string H_SY07)
    	{
    		string functionReturnValue = null;
    
    		if (H_SY07 == "1")
            {
    			functionReturnValue = "3";
    		}
            else if (H_SY07 == "2")
            {
    			functionReturnValue = "5";
    		}
            else
            {
    			functionReturnValue = "8";
    		}
    		return functionReturnValue;    
    	}
    
        // 業種区分チェック
    	private bool ChkGyosyuKbn_FNC(string H_Text, short H_Zkbn, short H_SyoriGrp, DataRow H_SvolumRow)
    	{
    		bool functionReturnValue = false;
    
    		functionReturnValue = true;

    		switch (Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]))
            {
    			case 11:
    			case 12:
    			case 13:
    			case 14:
    			case 15:
    			case 16:
    				switch (H_SyoriGrp)
                    {
    					case 2:
    					case 3:
    					case 4:
    					case 7:
    					case 8:
    					case 9:
    						switch (H_Zkbn)
                            {
    							case 1:
    							case 2:
    							case 3:
    							case 12:
    							case 14:
    								switch (H_Text)
                                    {
    									case "1":
    										if ((Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) == 11) || (Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_FSW1]) == 1))
                                            {
    										}
                                            else
                                            {
    											functionReturnValue = false;
    										}
    										break;
    									case "2":
    										if ((Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) == 12) || (Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_FSW2]) == 1))
                                            {
    										}
                                            else
                                            {
    											functionReturnValue = false;
    										}
    										break;
    									case "3":
    										if ((Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) == 13) || (Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_FSW3]) == 1))
                                            {
    										}
                                            else
                                            {
    											functionReturnValue = false;
    										}
    										break;
    									case "4":
    										if ((Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) == 14) || (Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_FSW4]) == 1))
                                            {
    										}
                                            else
                                            {
    											functionReturnValue = false;
    										}
    										break;
    									case "5":
    										if ((Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) == 15) || (Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_FSW5]) == 1))
                                            {
    										}
                                            else
                                            {
    											functionReturnValue = false;
    										}
    										break;
    									case "6":
    										if ((Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_KZSW]) == 16) || (Convert.ToInt32(H_SvolumRow[(int)eSVOLUM.SVOLUM_FSW6]) == 1))
                                            {
    										}
                                            else
                                            {
    											functionReturnValue = false;
    										}
    										break;
    									default:
    										functionReturnValue = false;
    										break;
    								}
    								break;
    						}
    						break;
    				}
    				break;
    		}

    		return functionReturnValue;    
    	}
    
        // 仕入区分チェック
    	private bool ChkSiireKbn_FNC(string H_Text, short H_Zkbn, short H_SyoriGrp, ref bool H_Sire_Kyouri)
    	{
    		bool functionReturnValue = false;
    
    		functionReturnValue = false;
    		H_Sire_Kyouri       = false;

    		switch (H_SyoriGrp)
            {
    			case 2:
    			case 5:
    			case 6:
    			case 7:
    			case 8:
    			case 10:
    				switch (H_Zkbn)
                    {
    					// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    					// Case 1, 2, 11, 13, 31
    					case 1:
    					case 2:
    					case 11:
    					case 13:
    					case 31:
    					case 61:
    					case 62:
    						// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    						switch (H_Text)
                            {
    							// 仕入関係科目で仕入区分が未指定であった場合は3：共売をセット
    							case "1":
    							case "2":
    							case "3":
    							case "":
    								functionReturnValue = true;
    								if (string.IsNullOrEmpty(H_Text))
                                    {
    									H_Sire_Kyouri = true;
    								}
    								break;
    						}
    						break;
    					default:
    						functionReturnValue = true;
    						break;
    				}
    				break;
    			default:
    				functionReturnValue = true;
    				break;
    		}
    		return functionReturnValue;    
    	}
    
        // 日付(正規)チェック
    	private bool ChkHiduke_FNC(string H_Hiduke)
    	{
    		bool functionReturnValue = false;
    
    		string   L_YyyyMmDd = null;
            DateTime dt;
    
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    		if (Strings.Len(H_Hiduke) == 8)
//          {
//    		    L_YyyyMmDd = Strings.Left(H_Hiduke, 4) + "/" + Strings.Mid(H_Hiduke, 5, 2) + "/" + Strings.Right(H_Hiduke, 2);
//    			functionReturnValue = Information.IsDate(L_YyyyMmDd);
            if (H_Hiduke.Length == 8 && H_Hiduke != "")
            {
                L_YyyyMmDd          = H_Hiduke.Substring(0, 4) + "/" + H_Hiduke.Substring(4, 2) + "/" + H_Hiduke.Substring(H_Hiduke.Length - 2, 2);
                functionReturnValue = DateTime.TryParse(L_YyyyMmDd, out dt);
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
            }
            else
            {
    			functionReturnValue = false;
    		}
    		return functionReturnValue;    
    	}
    
        // コードタイプ別文字チェック
    	private bool ChkCodeType_FNC(string H_Text, short H_Type)
    	{
    		bool functionReturnValue = false;
    
    		int    L_I    = 0;
    		string L_Char = null;
    
    		switch (H_Type)
            {
    			case 1:
    				functionReturnValue = IsNumeric_FNC(H_Text);
    				break;
    			case 2:
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				for (L_I = 1; L_I <= Strings.Len(H_Text); L_I++)
//                  {
//    					L_Char = Strings.Mid(H_Text, L_I, 1);
                    for (L_I = 1; L_I <= H_Text.Length; L_I++)
                    {
    					L_Char = H_Text.Substring(H_Text.Length - L_I, 1);
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                        char charL_Char = Convert.ToChar(L_Char);
                        if ((charL_Char >= '0') && (charL_Char <= '9')) { }
                        else if ((charL_Char >= 'A') && (charL_Char <= 'Z')) { }
                        else if (charL_Char == '-') { }
                        else if (charL_Char == '/') { }
                        else
                        {
                            functionReturnValue = false;
                            return functionReturnValue;
                        }
    				}
    
    				functionReturnValue = true;
    				break;
    		}
    		return functionReturnValue;    
    	}
    
        // 数値(正規)チェック
    	private bool IsNumeric_FNC(string H_Text)
    	{
    		bool functionReturnValue = false;

            int    nL_Char = 0;
    		int    L_I     = 0;
    		string L_Char  = null;
    
    		functionReturnValue = false;
    		if (string.IsNullOrEmpty(H_Text))
            {
    			return functionReturnValue;
    		}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    		for (L_I = 1; L_I <= Strings.Len(H_Text); L_I++) {
//    			L_Char = Strings.Mid(H_Text, L_I, 1);
            for (L_I = 1; L_I <= H_Text.Length; L_I++)
            {
    			L_Char = H_Text.Substring(H_Text.Length - L_I, 1);
    			if (int.TryParse(L_Char, out nL_Char))
                {
                    if ((nL_Char >= 0) && (nL_Char <= 9))
                    {
                    }
                    else
                    {
                        return functionReturnValue;
                    }
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			}
                else
                {
    				return functionReturnValue;
    			}
    		}
    		functionReturnValue = true;
    		return functionReturnValue;    
    	}    
    	private bool IsNumericCode_FNC(string H_Text)
    	{
    		bool functionReturnValue = false;

            int    nL_Char = 0;
    		int    L_I     = 0;
    		string L_Char  = null;
    
    		functionReturnValue = false;
    		if (string.IsNullOrEmpty(H_Text))
            {
    			return functionReturnValue;
    		}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    		for (L_I = 1; L_I <= Strings.Len(H_Text); L_I++) {
//    			L_Char = Strings.Mid(H_Text, L_I, 1);
            for (L_I = 1; L_I <= H_Text.Length; L_I++)
            {
    			L_Char = H_Text.Substring(H_Text.Length - L_I, 1);
    			if (int.TryParse(L_Char, out nL_Char))
                {
                    if ((nL_Char >= 0) && (nL_Char <= 9))
                    {
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                        functionReturnValue = true;
                        return functionReturnValue;
                    }
    			}
    		}
    		return functionReturnValue;
    	}
    
        // 通貨チェック
    	private int ChkCurrency_FNC(string H_Text, short H_Len)
    	{
    		int    functionReturnValue = 0;    
    		string L_Text              = null;
    
    		if (string.IsNullOrEmpty(H_Text))
            {
    			functionReturnValue = -2;
    			return functionReturnValue;
    		}
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->    
//    		if (Strings.Left(H_Text, 1) == "-") {
//    			L_Text = Strings.Right(H_Text, Strings.Len(H_Text) - 1);
            if (H_Text.Substring(0, 1) == "-")
            {
    			L_Text = H_Text.Substring(H_Text.Length - (H_Text.Length - 1), H_Text.Length - 1);
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    		} else
            {
    			L_Text = H_Text;
    		}
    		if (IsNumeric_FNC(L_Text) == true)
            {
    			L_Text = H_Text;
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->  
//    			if (Strings.Len(L_Text) <= H_Len) {
                if (L_Text.Length <= H_Len)
                {
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				functionReturnValue = 0;
    			}
                else
                {
    				functionReturnValue = -2;
    			}
    		}
            else
            {
    			functionReturnValue = -1;
    		}
    		return functionReturnValue;    
    	}
    
        // 小数チェック
    	private int ChkSyosu_FNC(string H_Text, short H_Len, short H_SyoLen)
    	{
    		int functionReturnValue = 0;
    
    		int      L_I     = 0;
            int      nL_Char = 0;
    		string   L_Char  = null;
    		string[] L_Text  = null;
    		int      L_Len   = 0;
    
    		if (string.IsNullOrEmpty(H_Text))
            {
    			functionReturnValue = -2;
    			return functionReturnValue;
    		}

            #region 2020/01/17 Ver01.19.05.9902 VB.NET → C#関数 対応 --->
//          if (Strings.Left(H_Text, 1) == "-") {
//    			L_I = 2;
//    		} else {
//    			L_I = 1;
//    		}
//    		while (L_I <= Strings.Len(H_Text)) {
//    			L_Char = Strings.Mid(H_Text, L_I, 1);
//    			if ((int.Parse(L_Char) >= 0) && (int.Parse(L_Char) <= 9))
//                {
//    			} else if (L_Char == ".") {
//    			} else {
//    				functionReturnValue = -1;
//    				return functionReturnValue;
//    			}
//    			L_I = L_I + 1;
//    		}
//    		L_Text = Strings.Split(H_Text, ".");
//    		switch (Information.UBound(L_Text)) {
//    			case 1:
//    				if ((!string.IsNullOrEmpty(L_Text[0])) && (!string.IsNullOrEmpty(L_Text[1]))) {
//    					L_Text[0] = L_Text[0];
//    					if (Strings.Len(L_Text[0]) <= H_Len) {
//    						L_Len = Strings.Len(L_Text[1]);
//    						for (L_I = L_Len; L_I >= 2; L_I += -1) {
//    							L_Char = Strings.Mid(L_Text[1], L_I, 1);
//    							if (L_Char == "0") {
//    								L_Len = L_Len - 1;
//    							} else {
//    								break;
//    							}
//    						}
//    						if (L_Len <= H_SyoLen) {
//    							functionReturnValue = 0;
//    						} else {
//    							functionReturnValue = -2;
//    						}
//    					} else {
//    						functionReturnValue = -2;
//    					}
//    				} else {
//    					functionReturnValue = -1;
//    				}
//    				break;
//    			case 0:
//    				L_Text[0] = L_Text[0];
//    				if (Strings.Len(L_Text[0]) <= H_Len) {
//    					functionReturnValue = 0;
//    				} else {
//    					functionReturnValue = -2;
//    				}
//    				break;
//    			default:
//    				functionReturnValue = -1;
//    				break;
//    		}
            #endregion
            if (H_Text.Substring(0, 1) == "-")
            {
    			L_I = 2;
    		}
            else
            {
    			L_I = 1;
    		}
    		while (L_I <= H_Text.Length)
            {
    			L_Char = H_Text.Substring(H_Text.Length - L_I, 1);
    			if (int.TryParse(L_Char, out nL_Char))
                {
                    if ((nL_Char >= 0) && (nL_Char <= 9))
                    {
                    }
                    else
                    {
    				    functionReturnValue = -1;
    				    return functionReturnValue;
    			    }
    			}
                else if (L_Char == ".")
                {
    			}
                else
                {
    				functionReturnValue = -1;
    				return functionReturnValue;
    			}
    			L_I = L_I + 1;
    		}
    		L_Text = H_Text.Split('.');

    		switch (L_Text.Length - 1)
            {
    			case 1:
    				if ((!string.IsNullOrEmpty(L_Text[0])) && (!string.IsNullOrEmpty(L_Text[1])))
                    {
    					L_Text[0] = L_Text[0];
    					if (L_Text[0].Length <= H_Len)
                        {
    						L_Len = L_Text[1].Length;
    						for (L_I = L_Len; L_I >= 2; L_I += -1)
                            {
    							L_Char = L_Text[1].Substring(L_Text[1].Length - L_I, 1);
    							if (L_Char == "0")
                                {
    								L_Len = L_Len - 1;
    							}
                                else
                                {
    								break;
    							}
    						}

    						if (L_Len <= H_SyoLen) { functionReturnValue = 0;  }
                            else                   { functionReturnValue = -2; }
    					}
                        else { functionReturnValue = -2; }
    				}
                    else { functionReturnValue = -1; }
    				break;
    			case 0:
    				L_Text[0] = L_Text[0];
    				if (L_Text[0].Length <= H_Len) { functionReturnValue = 0;  }
                    else                           { functionReturnValue = -2; }
    				break;
    			default:
    				functionReturnValue = -1;
    				break;
    		}
// <---
            L_Text = null;
    		return functionReturnValue;
    	}
        #endregion


        /// <summary>
        /// マスタータイプによるコード成型
        /// </summary>
        /// <returns> 数字タイプ：前0付加
        /// 　        英数タイプ：後ろスペース付加 </returns>
        private string EditCode_FNC(string H_Text, string H_Type, int H_Len)
    	{
    		string functionReturnValue = null;
            // 数字タイプ：前0付加、英数タイプ：後ろスペース付加
    		switch (H_Type)
            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			case "1":
//    				functionReturnValue = Strings.Right(Strings.StrDup(H_Len, "0") + H_Text, H_Len);
//    				break;
//    			case "2":
//    				functionReturnValue = Strings.Left(H_Text + Strings.Space(H_Len), H_Len);
//    				break;
                case "1":
    				functionReturnValue = H_Text.PadLeft(H_Len, '0');
    				break;
    			case "2":
    				functionReturnValue = H_Text.PadRight(H_Len);
    				break;
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			default:
    				functionReturnValue = "";
    				break;
    		}
    		return functionReturnValue;    
    	}
    
    	private int LenB_FNC(string H_Text)
    	{    
    		return System.Text.Encoding.GetEncoding(932).GetByteCount(H_Text);    
    	}

        #region 各種マスター存在チェック
        // 部門科目存在チェック
    	private bool BkzanExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Bcod, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = null;
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd             = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT BCOD FROM BKZAN WHERE KESN = :p AND BCOD = :p AND KICD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@BCOD", DbType.String, H_Bcod);
    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_Kicd);
    		    ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // 科目枝番存在チェック
    	private bool EnameExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Kicd, string H_Ecod)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT ECOD FROM ENAME WHERE KESN = :p AND KICD = :p AND ECOD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_Kicd);
    			AddParameter_FNC(ref L_Cmd, "@ECOD", DbType.String, H_Ecod);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // 部門科目枝番存在チェック
    	private bool BkenmExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Bcod, string H_Kicd, string H_Ecod)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT ECOD FROM BKEZAN WHERE KESN = :p AND BCOD = :p AND KICD = :p AND ECOD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@BCOD", DbType.String, H_Bcod);
    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_Kicd);
    			AddParameter_FNC(ref L_Cmd, "@ECOD", DbType.String, H_Ecod);
    			ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // 部門存在チェック
    	private bool BnameExists_FNC(IDbConnection H_Con, string H_Bcod, int H_Dymd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT BCOD FROM BNAME WHERE BCOD = :p AND ((CASE ISTAYMD WHEN 0 THEN 10101 ELSE ISTAYMD END) <= :p) AND ((CASE IENDYMD WHEN 0 THEN 99991231 ELSE IENDYMD END) >= :p)";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@BCOD", DbType.String, H_Bcod);
    			AddParameter_FNC(ref L_Cmd, "@IENDYMD", DbType.Int32, H_Dymd);
    			AddParameter_FNC(ref L_Cmd, "@ISTAYMD", DbType.Int32, H_Dymd);
    			ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // 取引先存在チェック
    	private bool TrnamExists_FNC(IDbConnection H_Con, string H_Trcd, int H_Dymd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT TRCD FROM TRNAM WHERE TRCD = :p AND ((CASE ISTAYMD WHEN 0 THEN 10101 ELSE ISTAYMD END) <= :p) AND ((CASE IENDYMD WHEN 0 THEN 99991231 ELSE IENDYMD END) >= :p)";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@TRCD", DbType.String, H_Trcd);
    			AddParameter_FNC(ref L_Cmd, "@IENDYMD", DbType.Int32, H_Dymd);
    			AddParameter_FNC(ref L_Cmd, "@ISTAYMD", DbType.Int32, H_Dymd);
    			ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // 取引先科目存在チェック
    	private bool TrzanExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Trcd, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT TRCD FROM TRZAN WHERE KESN = :p AND TRCD = :p AND KICD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@TRCD", DbType.String, H_Trcd);
    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_Kicd);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}

        #region 2024/03/19 不要のためコメントアウト
        //     	private bool BkezanExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Bcod, string H_Kicd, string H_Ecod)
        //    	{
        //    		bool functionReturnValue = false;

        //    		IDbCommand L_Cmd    = default(IDbCommand);
        //    		object     L_Result = null;

        //    		try
        //            {
        //    			L_Cmd = H_Con.CreateCommand();
        //    			L_Cmd.CommandText = "SELECT ECOD FROM BKEZAN WHERE KESN = :p AND BCOD = :p AND KICD = :p AND ECOD = :p";
        //    			L_Cmd.Parameters.Clear();
        //    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Kesn);
        //    			AddParameter_FNC(ref L_Cmd, "@BCOD", DbType.String, H_Bcod);
        //    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_Kicd);
        //    			AddParameter_FNC(ref L_Cmd, "@ECOD", DbType.String, H_Ecod);
        //    			ReplacePlaceHolder_FNC(ref L_Cmd);

        //    			L_Result = L_Cmd.ExecuteScalar();
        //    		}
        //            catch (Exception ex)
        //            {
        //    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
        //    		}

        //    		if (L_Result == null) { functionReturnValue = false; }
        //            else                  { functionReturnValue = true;  }

        //    		return functionReturnValue;    
        //    	}
        #endregion

        // 部門取引先科目存在チェック
        private bool BtkzanExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Bcod, string H_Trcd, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT TRCD FROM BTKZAN WHERE KESN = :p AND BCOD = :p AND TRCD = :p AND KICD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@BCOD", DbType.String, H_Bcod);
    			AddParameter_FNC(ref L_Cmd, "@TRCD", DbType.String, H_Trcd);
    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_Kicd);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // 工事存在チェック
    	private bool KjnameExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Kjcd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT KJCD FROM KJNAME WHERE KESN = :p AND KJCD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@KJCD", DbType.String, H_Kjcd);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // 工事工種存在チェック
    	private bool KjsnameExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Kscd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd = default(IDbCommand);
    		object L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT KSCD FROM KJSNAME WHERE KESN = :p AND KSCD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@KSCD", DbType.String, H_Kscd);
    			ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // プロジェクト存在チェック
    	private bool PrjnamExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Pjcd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT PRJECT FROM PRPNM WHERE PRJECT = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@PRJECT", DbType.String, H_Pjcd);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // セグメント存在チェック
    	private bool SgtblExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Sgcd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT SGCD FROM SGTBL WHERE KESN = :p AND SGCD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@SGCD", DbType.String, H_Sgcd);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // セグメント科目存在チェック
    	private bool SgkzanExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Sgcd, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT SGCD FROM SGKZAN WHERE KESN = :p AND SGCD = :p AND KICD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@SGCD", DbType.String, H_Sgcd);
    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_Kicd);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // セグメント取引先科目存在チェック
    	private bool StkzanExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Sgcd, string H_Trcd, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT SGCD FROM STKZAN WHERE KESN = :p AND SGCD = :p AND TRCD = :p AND KICD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@SGCD", DbType.String, H_Sgcd);
    			AddParameter_FNC(ref L_Cmd, "@TRCD", DbType.String, H_Trcd);
    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_Kicd);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // ヘッダーフィールド存在チェック
    	private bool HFExists_FNC(short H_Mode, IDbConnection H_Con, short H_Kesn, string H_Code)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd       = default(IDbCommand);
    		object     L_Result    = null;
    		string     L_TableName = null;
    
    		if (H_Mode >= 1 && H_Mode <= 10)
            {
    			L_TableName = "DUF" + H_Mode.ToString() + "TBL";
    		}
            else
            {
    			functionReturnValue = false;
    			return functionReturnValue;
    		}
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT KESN FROM " + L_TableName + " WHERE KESN = :p AND HFCD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@HFCD", DbType.String, H_Code);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // ユニバーサルフィールド存在チェック
    	private bool DummyTblExists_FNC(short H_Mode, IDbConnection H_Con, short H_Kesn, string H_Code)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd       = default(IDbCommand);
    		object     L_Result    = null;
    		string     L_TableName = null;
    		string     L_ColName   = null;
    
    		if (H_Mode >= 1 && H_Mode <= 20)
            {
    			L_TableName = "D" + H_Mode.ToString() + "TBL";
    			L_ColName   = "D" + H_Mode.ToString() + "CD";
    		}
            else
            {
    			functionReturnValue = false;
    			return functionReturnValue;
    		}
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT KESN FROM " + L_TableName + " WHERE KESN = :p AND " + L_ColName + " = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN",         DbType.Int32,  H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@" + L_ColName, DbType.String, H_Code);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // UF科目存在チェック
    	private bool DummyZanExists_FNC(short H_Mode, IDbConnection H_Con, short H_Kesn, string H_Code, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd       = default(IDbCommand);
    		object     L_Result    = null;
    		string     L_TableName = null;
    		string     L_ColName   = null;
    
    		switch (H_Mode)
            {
    			case 1:
    				L_TableName = "D1ZAN";
    				L_ColName   = "D1CD";
    				break;
    			case 2:
    				L_TableName = "D2ZAN";
    				L_ColName   = "D2CD";
    				break;
    			case 3:
    				L_TableName = "D3ZAN";
    				L_ColName   = "D3CD";
    				break;
    			default:
    				functionReturnValue = false;
    				return functionReturnValue;
    		}
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT KICD FROM " + L_TableName + " WHERE KESN = :p AND " + L_ColName + " = :p AND KICD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN",         DbType.Int32,  H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@" + L_ColName, DbType.String, H_Code);
    			AddParameter_FNC(ref L_Cmd, "@KICD",         DbType.String, H_Kicd);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // 摘要コード存在チェック
    	private bool ZmtkyExists_FNC(IDbConnection H_Con, short H_Kesn, short H_Tcod)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT TCOD FROM ZMTKY WHERE KESN = :p AND TCOD = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Kesn);

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    			AddParameter_FNC(ref L_Cmd, "@TCOD", DbType.String, H_Tcod);
                AddParameter_FNC(ref L_Cmd, "@TCOD", DbType.Int32, H_Tcod);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

    			ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // 支払方法存在チェック
    	private bool PaywayExists_FNC(IDbConnection H_Con, short H_Kflg, short H_Kbno)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT KBNO FROM PAYWAY WHERE KFLG = :p AND KBNO = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KFLG", DbType.Int32, H_Kflg);

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    			AddParameter_FNC(ref L_Cmd, "@KBNO", DbType.String, H_Kbno);
                AddParameter_FNC(ref L_Cmd, "@KBNO", DbType.Int32, H_Kbno);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

   				ReplacePlaceHolder_FNC(ref L_Cmd);
    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
    	// 伝票入力レイアウトパターン存在チェック
    	private bool Chk_IJPT_FNC(IDbConnection H_Con, short H_Kesn, int H_PTNO, int H_DTYP)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		int L_Dno = 0;
    
    		if (H_DTYP == 0) { L_Dno = 1; }
            else             { L_Dno = 2; }
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT PTNO FROM DINLYPTN WHERE KESN = :p AND DTYP = :p AND PTNO = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Kesn);

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    			AddParameter_FNC(ref L_Cmd, "@DTYP", DbType.String, L_Dno);
//    			AddParameter_FNC(ref L_Cmd, "@PTNO", DbType.String, H_PTNO);
    			AddParameter_FNC(ref L_Cmd, "@DTYP", DbType.Int32, L_Dno);
    			AddParameter_FNC(ref L_Cmd, "@PTNO", DbType.Int32, H_PTNO);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

   				ReplacePlaceHolder_FNC(ref L_Cmd);
    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // 承認ルートグループ名称存在チェック
    	private bool SngnmExists_FNC(IDbConnection H_Con, short H_Kesn, int H_Sgno)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT SGNO FROM SNGNM WHERE KESN = :p AND SGNO = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@SGNO", DbType.Int32, H_Sgno);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        // 承認仕訳入力者存在チェック
    	private bool SnuseExists_FNC(IDbConnection H_Con, short H_Kesn, int H_Iuno, int H_Sgno)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT SGNO FROM SNUSE WHERE KESN = :p AND IUNO = :p AND SGNO = :p";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@IUNO", DbType.Int32, H_Iuno);
    			AddParameter_FNC(ref L_Cmd, "@SGNO", DbType.Int32, H_Sgno);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
        #endregion

        #region セキュリティ
        private void GetSecInfo_SUB(IDbConnection H_Con, short H_Kesn, int H_Suno, ref bool H_KmkSec, ref bool H_BmnSec, ref bool H_EdaSec, ref bool H_ToriSec, ref int H_SecPtn)
    	{
    		IDbDataAdapter L_Adapter = default(IDbDataAdapter);
    		string         L_SQL     = null;
    		DataSet        L_ds      = default(DataSet);
    		DataTable      L_dtScctl = default(DataTable);
    		DataTable      L_dtScuno = default(DataTable);

            #region 2020/03/06 Ver02.19.05.9901 PostgreSQL対応(コメントアウト)
//          if (G_IsOracle) {
////    			L_Adapter = new OleDb.OleDbDataAdapter();
////    			L_Adapter.SelectCommand = new OleDb.OleDbCommand();
//    		} else {
//    			L_Adapter = new SqlDataAdapter();
//    			L_Adapter.SelectCommand = new SqlCommand();
//    		}
//    		L_Adapter.SelectCommand.Connection = H_Con;
            #endregion

            L_SQL = "SELECT ZKMI,ZEDI,ZBMI,ZTRI FROM SCCTL WHERE KESN = " + H_Kesn;

// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//            L_Adapter.SelectCommand.CommandText = L_SQL;
            L_Adapter = G_DbFactory.CreateDbDataAdapterAndSelectCommand(H_Con, L_SQL);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

            L_ds      = new DataSet();
    		L_dtScctl = new DataTable();

    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0) { L_dtScctl = L_ds.Tables[0]; }
    
    		if (L_dtScctl.Rows.Count > 0)
            {
    			H_KmkSec  = Convert.ToBoolean(Convert.ToInt32(L_dtScctl.Rows[0][0]) == 1);
    			H_EdaSec  = Convert.ToBoolean(Convert.ToInt32(L_dtScctl.Rows[0][1]) == 1);
    			H_BmnSec  = Convert.ToBoolean(Convert.ToInt32(L_dtScctl.Rows[0][2]) == 1);
    			H_ToriSec = Convert.ToBoolean(Convert.ToInt32(L_dtScctl.Rows[0][3]) == 1);
    
    			L_SQL                               = "SELECT SPTN FROM SCUNO WHERE KESN = " + H_Kesn + " AND SUNO = " + H_Suno;
    			L_Adapter.SelectCommand.CommandText = L_SQL;
    			L_ds                                = new DataSet();
    			L_dtScuno                           = new DataTable();

    			try
                {
    				L_Adapter.Fill(L_ds);
    			}
                catch (Exception ex)
                {
    				throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    			}

    			if (L_ds.Tables.Count > 0)
                {
                    L_dtScuno = L_ds.Tables[0];
                }

    			if (L_dtScuno.Rows.Count > 0)
                {
    				H_SecPtn = Convert.ToInt32(L_dtScuno.Rows[0][0]);
    			}
                else
                {
    				H_SecPtn = -1;
    			}
    		}
            else
            {
    			H_KmkSec  = false;
    			H_BmnSec  = false;
    			H_EdaSec  = false;
    			H_ToriSec = false;
    			H_SecPtn  = 0;
    		}
    	}
    
    	private bool ChkKmkSec_FNC(IDbConnection H_Con, short H_Kesn, int H_SecPtn, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		switch (H_SecPtn)
            {    
    			case 0:
    				functionReturnValue = true;    
    				break;
    			case -1:
    				functionReturnValue = false;    
    				break;
    			default:
    				try
                    {
    					L_Cmd             = H_Con.CreateCommand();
    					L_Cmd.CommandText = "SELECT SZKM FROM SCZKM WHERE KESN = :p AND SKBN = 1 AND SPTN = :p AND SZKM = :p";
    					L_Cmd.Parameters.Clear();
    					AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  H_Kesn);
    					AddParameter_FNC(ref L_Cmd, "@SPTN", DbType.Int32,  H_SecPtn);
    					AddParameter_FNC(ref L_Cmd, "@SZKM", DbType.String, H_Kicd);
   						ReplacePlaceHolder_FNC(ref L_Cmd);

    					L_Result = L_Cmd.ExecuteScalar();
    				}
                    catch (Exception ex)
                    {
    					throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    				}

    				if (L_Result == null) { functionReturnValue = false; }
                    else                  { functionReturnValue = true;  }

    				break;
    		}
    		return functionReturnValue;
    	}
    
    	private bool ChkBmnSec_FNC(IDbConnection H_Con, short H_Kesn, int H_SecPtn, string H_Bcod)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		switch (H_SecPtn)
            {    
    			case 0:
    				functionReturnValue = true;    
    				break;
    			case -1:
    				functionReturnValue = false;    
    				break;
    			default:
    				try
                    {
    					L_Cmd             = H_Con.CreateCommand();
    					L_Cmd.CommandText = "SELECT SZBM FROM SCZBM WHERE KESN = :p AND SKBN = 1 AND SPTN = :p AND SZBM = :p";
    					L_Cmd.Parameters.Clear();
    					AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  H_Kesn);
    					AddParameter_FNC(ref L_Cmd, "@SPTN", DbType.Int32,  H_SecPtn);
    					AddParameter_FNC(ref L_Cmd, "@SZBM", DbType.String, H_Bcod);
   						ReplacePlaceHolder_FNC(ref L_Cmd);

    					L_Result = L_Cmd.ExecuteScalar();
    				}
                    catch (Exception ex)
                    {
    					throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    				}

    				if (L_Result == null) { functionReturnValue = false; }
                    else                  { functionReturnValue = true;  }

    				break;
    		}
    		return functionReturnValue;
    	}
    
    	private bool ChkEdaSec_FNC(IDbConnection H_Con, short H_Kesn, int H_SecPtn, string H_Kicd, string H_Ecod)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd = default(IDbCommand);
    		object L_Result = null;
    
    		switch (H_SecPtn) {
    
    			case 0:
    				functionReturnValue = true;
    
    				break;
    			case -1:
    				functionReturnValue = false;
    
    				break;
    			default:
    				try
                    {
    					L_Cmd = H_Con.CreateCommand();
    					L_Cmd.CommandText = "SELECT SZED FROM SCZED WHERE KESN = :p AND SKBN = 1 AND SPTN = :p AND SZKM = :p AND SZED = :p";
    					L_Cmd.Parameters.Clear();
    					AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  H_Kesn);
    					AddParameter_FNC(ref L_Cmd, "@SPTN", DbType.Int32,  H_SecPtn);
    					AddParameter_FNC(ref L_Cmd, "@SZKM", DbType.String, H_Kicd);
    					AddParameter_FNC(ref L_Cmd, "@SZED", DbType.String, H_Ecod);
   						ReplacePlaceHolder_FNC(ref L_Cmd);

    					L_Result = L_Cmd.ExecuteScalar();
    				}
                    catch (Exception ex)
                    {
    					throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    				}

    				if (L_Result == null) { functionReturnValue = false; }
                    else                  { functionReturnValue = true;  }

    				break;
    		}
    		return functionReturnValue;
    	}
    
    	private bool ChkToriSec_FNC(IDbConnection H_Con, short H_Kesn, int H_SecPtn, string H_Trcd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		switch (H_SecPtn)
            {    
    			case 0:
    				functionReturnValue = true;    
    				break;
    			case -1:
    				functionReturnValue = false;    
    				break;
    			default:
    				try
                    {
    					L_Cmd             = H_Con.CreateCommand();
    					L_Cmd.CommandText = "SELECT SZTR FROM SCZTR WHERE KESN = :p AND SKBN = 1 AND SPTN = :p AND SZTR = :p";
    					L_Cmd.Parameters.Clear();
    					AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  H_Kesn);
    					AddParameter_FNC(ref L_Cmd, "@SPTN", DbType.Int32,  H_SecPtn);
    					AddParameter_FNC(ref L_Cmd, "@SZTR", DbType.String, H_Trcd);
   						ReplacePlaceHolder_FNC(ref L_Cmd);

    					L_Result = L_Cmd.ExecuteScalar();
    				}
                    catch (Exception ex)
                    {
    					throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    				}

    				if (L_Result == null) { functionReturnValue = false; }
                    else                  { functionReturnValue = true;  }

    
    				break;
    		}
    		return functionReturnValue;    
    	}
        #endregion

        private string CnvDummyKingaku_FNC(string H_Text)
    	{    
    		decimal L_Dec = default(decimal);
    
    		L_Dec = Convert.ToDecimal(H_Text);
    		L_Dec = L_Dec + 1000000000000000L;

// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    		return Strings.Right(Strings.StrDup(16, "0") + Convert.ToString(L_Dec), 16); 
            return L_Dec.ToString().PadLeft(16, '0');
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    	}
    
    	private string CnvDummySyosu_FNC(string H_Text, short H_SyoLen)
    	{    
    		decimal L_Dec = default(decimal);
    
    		L_Dec = Convert.ToDecimal(H_Text) * Convert.ToDecimal(Math.Pow(10, H_SyoLen));
    		L_Dec = L_Dec + 1000000000000000L;

// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    		return Strings.Right(Strings.StrDup(16, "0") + Convert.ToString(L_Dec), 16);
            return L_Dec.ToString().PadLeft(16, '0');
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    	}
    
    	private int GetSgno_FNC(IDbConnection H_Con, short H_Kesn, int H_Iuno)
    	{
    		int functionReturnValue = 0;
    
    		IDbCommand L_Cmd = default(IDbCommand);
    		object L_Result = null;
    
    		try
            {
    			L_Cmd             = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT SGNO FROM SNUSE WHERE KESN = :p AND IUNO = :p AND DGSW = 0";
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@IUNO", DbType.Int32, H_Iuno);
   				ReplacePlaceHolder_FNC(ref L_Cmd);

    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = 0; }
            else                  { functionReturnValue = Convert.ToInt32(L_Result); }

    		return functionReturnValue;    
    	}

        // ３コード使用チェック
    	private bool Get3CodeStat(IDbCommand H_Cmd, int H_Kesn, string H_Rkmk, string H_Skmk, ref bool[,] H_3Code)
    	{
    		bool functionReturnValue = false;
    
    		IDataReader L_Reader = default(IDataReader);
    		string[]    L_Kmk    = new string[3];
    		int         L_i      = 0;
    
    		L_Kmk[0] = H_Rkmk;
    		L_Kmk[1] = H_Skmk;
    
    		for (L_i = 0; L_i <= 2; L_i++)
            {
    			try
                {
    				H_Cmd.CommandText = "SELECT BTK01, BKE01, STK01 FROM KNAME WHERE KESN = " + H_Kesn + " AND KICD = '" + L_Kmk[L_i] + "'";
    				L_Reader          = H_Cmd.ExecuteReader();
    			}
                catch (Exception ex)
                {
    				throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    			}

    			if (L_Reader.Read())
                {
    				//  部門取引先科目使用フラグ
    				H_3Code[L_i, 0] = L_Reader.GetInt16(0) == 1 ? true : false;
    				//  取引先科目枝番使用フラグ
    				H_3Code[L_i, 1] = L_Reader.GetInt16(1) == 1 ? true : false;
    				//  セグメント取引先科目使用フラグ
    				H_3Code[L_i, 2] = L_Reader.GetInt16(2) == 1 ? true : false;
    
    				functionReturnValue = true;
    			}
                else
                {
    				functionReturnValue = false;
    			}    
    			L_Reader.Close();    
    		}
    		return functionReturnValue;    
    	}
    
    	private bool ChkDcno2_FNC(IDbCommand H_Cmd, short H_Kesn, short H_Dkei, int H_Dcno, int H_Dymd)
    	{
    		bool functionReturnValue = false;
    
    		IDataReader L_Reader = default(IDataReader);
    		string      L_Filter = null;
    		bool        L_Exist  = false;
    
    		// 常に既存伝票への追加は不可
    		if (H_Dcno == 0)
            {
    			L_Filter = "KESN = " + H_Kesn + " AND DKEI = " + H_Dkei + " AND DCNO IS NULL AND DELF = 0  ";
    		}
            else
            {
    			L_Filter = "KESN = " + H_Kesn + " AND DKEI = " + H_Dkei + " AND DCNO = " + H_Dcno + " AND DELF = 0  ";
    		}
    
    		try
            {
    			H_Cmd.CommandText = "SELECT DYMD FROM ZDATA_H WHERE " + L_Filter;
    			L_Reader = H_Cmd.ExecuteReader();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Reader.Read()) { L_Exist = true; 	}
            else                 { L_Exist = false; }
    		L_Reader.Close();
    
    		if (L_Exist == false)
            {
    			if (P_JSOX == true || P_ShiwakeRireki == true || volum_dflg[H_Kesn] == 1)
                {
    				if (P_Juse != 0)
                    {
    					functionReturnValue = true;
    					return functionReturnValue;
    				}
    			}
    		}
    
    		if (L_Exist == false)
            {
    			try
                {
    				H_Cmd.CommandText = "SELECT DYMD FROM SJDAT_H WHERE " + L_Filter;
    				L_Reader = H_Cmd.ExecuteReader();
    			}
                catch (Exception ex)
                {
    				throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    			}

                if (L_Reader.Read()) { L_Exist = true;  }
                else                 { L_Exist = false; }
    			L_Reader.Close();
    		}
    
    		functionReturnValue = !L_Exist;

    		return functionReturnValue;    
    	}

    	private bool ChkDcno2_FNC_Fb(IDbCommand H_Cmd, short H_Kesn, short H_Dkei, int H_Dcno, int H_Dymd)
    	{
    		bool functionReturnValue = false;
    
    		IDataReader L_Reader = default(IDataReader);
    		string      L_Filter = null;
    		bool        L_Exist  = false;
    
    		// 既存伝票への追加不可
    		if (H_Dcno == 0)
            {
    			L_Filter = "KESN = " + H_Kesn + " AND DKEI = " + H_Dkei + " AND DCNO IS NULL AND DELF = 0  ";
    		}
            else
            {
    			L_Filter = "KESN = " + H_Kesn + " AND DKEI = " + H_Dkei + " AND DCNO = " + H_Dcno + " AND DELF = 0  ";
    		}
    
    		try
            {
    			H_Cmd.CommandText = "SELECT DYMD FROM ZDATA_H WHERE " + L_Filter;
    			L_Reader          = H_Cmd.ExecuteReader();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Reader.Read()) { L_Exist = true;  }
            else                 { L_Exist = false; }
    		L_Reader.Close();
    
    		if (L_Exist == false)
            {
    			// 部署入出力処理で自動付番使用しない場合はSJDATをチェックしない
    			if (P_Juse != 0 && P_IDM1 == 0)
                {
    				functionReturnValue = true;
    				return functionReturnValue;
    			}
    		}
    
    		if (L_Exist == false)
            {
    			try
                {
    				H_Cmd.CommandText = "SELECT DYMD FROM SJDAT_H WHERE " + L_Filter;
    				L_Reader = H_Cmd.ExecuteReader();
    			}
                catch (Exception ex)
                {
    				throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    			}

    			if (L_Reader.Read()) { L_Exist = true;  }
                else                 { L_Exist = false; }
    			L_Reader.Close();
    		}    
    		functionReturnValue = !L_Exist;
    		return functionReturnValue;    
    	}

        // ユーザーセキュリティ(会社制限・会社別セキュリティ)チェック
    	private int ChkUsrSec_FNC(int H_Ucod, DataRow H_UsrtblRow, DataTable H_dtComcnt, DataTable H_dtUsrsec)
    	{    
    		int       L_Result = 0;
    		DataRow[] L_Rows   = null;
    
    		L_Result = 0;

    		// 会社制限あり
    		if (Convert.ToInt32(H_UsrtblRow[(int)eUSRTBL.USRTBL_KFLG]) == 1)
            {
    			L_Rows = H_dtComcnt.Select("UCOD = " + H_Ucod);
    			if (L_Rows.Length == 0)
                {
    				L_Result = -1;
    			}
                else
                {
    				if (Convert.ToInt32(L_Rows[0][(int)eCOMCNT.COMCNT_FLG1]) == 0)
                    {
    					L_Result = -1;
    				}
    			}
    			L_Rows = null;
    		}
    		if (L_Result == 0)
            {
    			//  会社別セキュリティを使用しない場合は、後述のマスタ権限の状態を代入されなく、
    			//  ゼロ(登録できる権限なし)で以降のロジックで判定されていた。
    			//  会社別セキュリティを使用しない場合でも、登録できるように、2で初期化
    			nUsrSecMFLG = 2;
    			// 
    			// 会社別セキュリティ使用
    			if (Convert.ToInt32(H_UsrtblRow[(int)eUSRTBL.USRTBL_KSEC]) == 1)
                {
    				L_Rows = H_dtUsrsec.Select("UCOD = " + H_Ucod);
    				if (L_Rows.Length > 0)
                    {
    					if (Convert.ToInt32(L_Rows[0][(int)eUSRSEC.USRSEC_DFLG]) < 2)
                        {
    						L_Result = -2;
    					}
    					// マスタ権限の状態を取得する
    					nUsrSecMFLG = Convert.ToInt32(L_Rows[0][(int)eUSRSEC.USRSEC_MFLG]);
    				}
    				L_Rows = null;
    			}
    		}
    		return L_Result;    
    	}
    
    	private bool IsSubjectKmk_FNC(short H_Kesn, short H_Kflg, string H_Kicd, short H_Katt, DataTable H_dtSubject)
    	{
    		bool functionReturnValue = false;
    
    		DataRow[] L_Rows   = null;
    		string    L_Filter = null;
    
    		L_Filter            = "KESN = " + H_Kesn + " AND KFLG = " + H_Kflg + " AND KICD = '" + H_Kicd + "' AND HFLG <> " + (H_Katt == 0 ? "2" : "1");
    		L_Rows              = H_dtSubject.Select(L_Filter);
    		functionReturnValue = Convert.ToBoolean(L_Rows.Length > 0);
    		L_Rows              = null;

    		return functionReturnValue;    
    	}    
    
    	private void SetErrLog_SUB(ref structERRORLOG[] H_ErrLog, ref int H_ErrCnt, string[] H_Data, int H_ColIdx, string H_Description)
    	{
    		Array.Resize(ref H_ErrLog, H_ErrCnt + 1);
// 2020/03/06 Ver02.19.05.9902 分離子仕訳の未登録・未入力複数ログ対応 --->
    		if (H_ColIdx >= 0 && H_ColIdx != 102)
            {
    			H_ErrLog[H_ErrCnt].Value = H_Data[H_ColIdx];
    		}
            else
            {
                H_ErrLog[H_ErrCnt].Value = H_Data[0];
            }
// <--- 2020/03/06 Ver02.19.05.9902 分離子仕訳の未登録・未入力複数ログ対応
            H_ErrLog[H_ErrCnt].ItemNo      = H_ColIdx + 1;
            H_ErrLog[H_ErrCnt].Description = H_Description;
            H_ErrCnt                       = H_ErrCnt + 1;
        }
    
    	// *-リンク情報    
    	private void SetErrLog_SUB_LINK(ref strucERRORLOGLINK[] H_ErrLogLink, ref int H_ErrCnt, int H_LKNO, int H_NO, string H_Value, string H_Value2, string H_Description)
    	{
    		Array.Resize(ref H_ErrLogLink, H_ErrCnt + 1);
    		H_ErrLogLink[H_ErrCnt].LKNO   = H_LKNO;
    		H_ErrLogLink[H_ErrCnt].ItemNo = H_NO;
    
    		switch (H_NO)
            {
    			case 2:
    				H_ErrLogLink[H_ErrCnt].ItemName = "リンク名称";
    				break;
    			case 3:
    				H_ErrLogLink[H_ErrCnt].ItemName = "形式";
    				break;
    			case 4:
    				H_ErrLogLink[H_ErrCnt].ItemName = "リンク先";
    				break;
    			case 5:
    				H_ErrLogLink[H_ErrCnt].ItemName = "e文書番号";
    				break;
    			case 6:
    				// ---> Ver01.14.02 2018.08.02 MDCR_WWK e文書複数書類種別の不具合対応
    				// .ItemName = "" '現在は空
    				H_ErrLogLink[H_ErrCnt].ItemName = "書類種別";
    				break;
    			// <--- Ver01.14.02 2018.08.02 MDCR_WWK e文書複数書類種別の不具合対応
    			case 7:
    				H_ErrLogLink[H_ErrCnt].ItemName = "日付";
    				break;
    			case 8:
    				H_ErrLogLink[H_ErrCnt].ItemName = "金額";
    				break;
    			case 9:
    				H_ErrLogLink[H_ErrCnt].ItemName = "発行者名称";
    				break;
    			case 10:
    				H_ErrLogLink[H_ErrCnt].ItemName = "申請者名称";
    				break;
    			case 11:
    				H_ErrLogLink[H_ErrCnt].ItemName = "最終承認者名称";
    				break;
    			// ---> Ver01.14.02 2018.08.02 MDCR_WWK e文書複数書類種別の不具合対応
    			case 12:
    				H_ErrLogLink[H_ErrCnt].ItemName = "品名";
    				break;
    			// <--- Ver01.14.02 2018.08.02 MDCR_WWK e文書複数書類種別の不具合対応
    
    		}
    		// -*01.07.03
    
    		H_ErrLogLink[H_ErrCnt].Value       = H_Value;
    		H_ErrLogLink[H_ErrCnt].Value2      = H_Value2;
    		H_ErrLogLink[H_ErrCnt].Description = H_Description;

    		H_ErrCnt = H_ErrCnt + 1;    
    	}
        // -*

        #region 消費税マスタ(SVOLUM)関連
        private int SvolumDefZkbn_FNC(DataRow H_drSvolum, int H_PSY01, int H_PSY02, int H_PSY03, int H_PSY08, int H_PAiteSY01, int H_PAiteZeik, int H_PAiteBunri, int H_PAiteTaika, bool H_PKrks, bool H_bGaiCut)
    	{
    		int[] L_LZeiFlg   = null;
    		int   L_LZeiCnt   = 0;
    		int   L_LCount    = 0;
    
    		int   L_LZeiAuto1 = 0;
    		int   L_LZeiAuto2 = 0;

    		// 変数初期化
    		P_ZeiAuto[0] = 0;
    		P_ZeiAuto[1] = 0;
    
    		// 選択可能区分
    		// de2-7931③ チェック処理で当期固定ではなく処理期の課税区分を使用するように修正
    		L_LZeiCnt = SvolumDefSelZkbn_FNC(H_drSvolum, H_PSY01, H_PSY02, H_PSY08, H_PAiteSY01, H_PAiteZeik, H_PAiteBunri, H_PAiteTaika, ref L_LZeiFlg, H_bGaiCut, H_PKrks);
    		if (L_LZeiCnt == 0)
            {
    			return 100;
    		}
    
    		// 特殊課税区分
    		L_LZeiAuto1 = -1;
    		L_LZeiAuto2 = -1;
    
    		// 18:課込自動
    		if (H_PSY03 == 18)
            {
    			// 税抜+分離で込みが選択可能なのでOKとする（他で判断）
    			// 課税込み仕入
    			L_LZeiAuto1 = 11;
    			// 課税込み売上
    			L_LZeiAuto2 = 12;    		
    		}
            // 19:課抜自動
            else if (H_PSY03 == 19)
            {
    			// 税抜処理（税抜)
    			if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1)
                {
    				// (課抜仕入)
    				// 資産：税抜　科目Ｇｒ：資産・有価証券
    				// 仕入:税抜　科目ＧＲ：混在
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0 && (H_PSY01 == 2 || H_PSY01 == 8)) || 
                        (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0 && H_PSY01 == 7))
                    {
    					L_LZeiAuto1 = 13;
    				}
    				// (課抜売上)
    				// 資産：税抜　科目Ｇｒ：資産・有価証券
    				// 仕入：税抜　科目ＧＲ：混在
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0 && (H_PSY01 == 2 | H_PSY01 == 8)) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0 && H_PSY01 == 7)) {
    					L_LZeiAuto2 = 14;
    				}    				
    			}
                // 一括税抜
                else if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2)
                {
    				// 課税仕入
    				L_LZeiAuto1 = 13;
    				// 課税売上
    				L_LZeiAuto2 = 14;
    			}    
    		}
    		// 49:非課税自動
    		if (H_PSY03 == 49)
            {
    			L_LZeiAuto1 = 41;
    			L_LZeiAuto2 = 42;
    		}
    
    		if (L_LZeiAuto1 == -1 && L_LZeiAuto2 != -1)
            {
    			L_LZeiAuto1 = L_LZeiAuto2;
    		}
    		if (L_LZeiAuto2 == -1 && L_LZeiAuto1 != -1)
            {
    			L_LZeiAuto2 = L_LZeiAuto1;
    		}
    
    		L_LCount = 0;
    		while (L_LCount < L_LZeiCnt)
            {
    			if (L_LZeiFlg[L_LCount] == H_PSY03)
                {
    				return H_PSY03;
    			}
    
    			if (H_PSY03 == 18)
                {
    				if (H_PKrks == false && L_LZeiFlg[L_LCount] == L_LZeiAuto1) { return L_LZeiAuto1; }
    				if (H_PKrks == true  && L_LZeiFlg[L_LCount] == L_LZeiAuto2) { return L_LZeiAuto2; }
    			}
    
    			if (H_PSY03 == 19)
                {
    				if (H_PKrks == false && L_LZeiFlg[L_LCount] == L_LZeiAuto1) { return L_LZeiAuto1; }
    				if (H_PKrks == true  && L_LZeiFlg[L_LCount] == L_LZeiAuto2) { return L_LZeiAuto2; }
    			}
    
    			if (H_PSY03 == 49)
                {
    				if (H_PKrks == false && L_LZeiFlg[L_LCount] == L_LZeiAuto1) { return L_LZeiAuto1; }
    				if (H_PKrks == true  && L_LZeiFlg[L_LCount] == L_LZeiAuto2) { return L_LZeiAuto2; }
    			}
    
    			L_LCount = L_LCount + 1;
    		}

    		if (H_PSY01 == 21 || H_PSY01 == 22)
            {
    			return L_LZeiFlg[L_LZeiCnt - 1];
    		}
    		return 0;
    	}
    
    	private int SvolumDefSelZkbn_FNC(DataRow H_drSvolum, int H_PSY01, int H_PSY02, int H_PSY08, int H_PAiteSY01, int H_PAiteZeik, int H_PAiteBunri, int H_PAiteTaika, ref int[] H_RZeik, bool H_bGaiCut, bool H_bKrKs)
    	{
    		int   L_LCount  = 0;
    		int   L_LGroup  = 0;
    		bool  L_LKomiOk = false;
    		int[] L_LZeik   = null;
    
    		int   L_Sta     = 0;
    		int   L_End     = 0;
    
    		L_LGroup = 0;
    
    		// 区分の組合せの判断
    		if (H_PAiteSY01 == 2 || H_PAiteSY01 == 3 || H_PAiteSY01 == 4 || H_PAiteSY01 == 5 || H_PAiteSY01 == 6 || H_PAiteSY01 == 7 || H_PAiteSY01 == 8 || H_PAiteSY01 == 9 || H_PAiteSY01 == 10)
            {
    			// 消費税関連科目
    			if (H_PSY01 == 2 || H_PSY01 == 3 || H_PSY01 == 4 || H_PSY01 == 5 || H_PSY01 == 6 || H_PSY01 == 7 || H_PSY01 == 8 || H_PSY01 == 9 || H_PSY01 == 10)
                {
    				// 両科目が消費税関連科目
    				L_LGroup = 1;
    			}
    			// 仮払・仮受消費税
    			if (H_PSY01 == 21 || H_PSY01 == 22)
                {
    				// 自科目のみ仮払・仮受消費税
    				L_LGroup = 2;
    			}
    		}
    		if (H_PAiteSY01 == 21 || H_PAiteSY01 == 22)
            {
    			// 消費税関連科目
    			if (H_PSY01 == 2 || H_PSY01 == 3 || H_PSY01 == 4 || H_PSY01 == 5 || H_PSY01 == 6 || H_PSY01 == 7 || H_PSY01 == 8 || H_PSY01 == 9 || H_PSY01 == 10)
                {
    				// 相手科目が仮払・仮受消費税
    				L_LGroup = 3;
    			}
    			// 仮払・仮受消費税
    			if (H_PSY01 == 21 || H_PSY01 == 22)
                {
    				// 両科目が仮払・仮受消費税
    				L_LGroup = 4;
    			}
    		}
    
    		// 税抜マスタの場合に、込区分の使用可否
    		if (H_PAiteZeik == 0 || H_PAiteZeik == 99 || H_PAiteZeik == 100)
            {
    			L_LKomiOk = true;
    		}
            else
            {
    			L_LKomiOk = false;
    		}    
    
    		L_LCount   = 0;
    		L_LZeik    = new int[2];
    		L_LZeik[0] = -1;
    
    		// de2-7931③ チェック処理で当期固定ではなく処理期の課税区分を使用するように修正
    		H_RZeik = new int[1];
    		do
            {
                #region 資産
                if (H_PSY01 == 2)
                {
    				// 対象外
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if (Information.UBound(H_RZeik) != L_LCount + 1) {
    				if (H_RZeik.Length - 1 != L_LCount + 1)
                    {
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					Array.Resize(ref H_RZeik, L_LCount + 2);
    				}
    				H_RZeik[L_LCount] = 0;
    				L_LCount = L_LCount + 1;
    				// 相手科目が消費税関連科目
    				if (L_LGroup == 1)
                    {
    					// 分離区分を使用時
    					if (H_PAiteBunri == 1 || H_PAiteBunri == 2 || H_PAiteBunri == 3)
                        {
    						if (SvolumChkBunriZeik_FNC(H_drSvolum, H_PSY01, H_PSY02, H_PSY08, H_PAiteBunri, H_PAiteTaika, ref L_LZeik) <= 0)
                            {
    							break;
    						}
    					}
    				}
    				// 免税
    				if (SvolumFlgChk_FNC(3, L_LZeik))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 3;
    					L_LCount = L_LCount + 1;
    				}
    				// 課込仕入
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                    {
    					if (SvolumFlgChk_FNC(11, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1)
    						if (H_RZeik.Length - 1 != L_LCount + 1)
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                            {
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 11;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 課込売上
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0 && L_LGroup != 3 && L_LKomiOk == true)) {
    					if (SvolumFlgChk_FNC(12, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1)                                 
    						if (H_RZeik.Length - 1 != L_LCount + 1) 
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応                                
                            {
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 12;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 課抜仕入
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2)) {
    					if (SvolumFlgChk_FNC(13, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応   
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 13;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 課抜売上
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                    {
    					if (SvolumFlgChk_FNC(14, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応  
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 14;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 貸倒損失
    				if (H_PSY08 == 1)
                    {
    					// 貸倒損込
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                        {
    						if (SvolumFlgChk_FNC(21, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応  
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 21;
    							L_LCount = L_LCount + 1;
    						}
    					}
    					// 貸倒損抜
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0) | (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                        {
    						if (SvolumFlgChk_FNC(22, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応  
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 22;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    				// 貸倒回収
    				if (H_PSY08 == 2)
                    {
    					// 貸倒回込
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                        {
    						if (SvolumFlgChk_FNC(23, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 23;
    							L_LCount = L_LCount + 1;
    						}
    					}
    					// 貸倒回抜
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                        {
    						if (SvolumFlgChk_FNC(24, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 24;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    				// 課税貨物
    				if (H_PSY08 == 3)
                    {
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                        {
    						if (SvolumFlgChk_FNC(31, L_LZeik) == true)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
                                if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 31;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    				// 非課税仕入
    				if (SvolumFlgChk_FNC(41, L_LZeik) == true) {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 41;
    					L_LCount = L_LCount + 1;
    				}
    				// 非課税売上
    				if (SvolumFlgChk_FNC(42, L_LZeik) == true) {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 42;
    					L_LCount = L_LCount + 1;
    				}
    			}
                #endregion
                #region 負債
                if (H_PSY01 == 3)
                {
    				// 対象外
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    				if (Information.UBound(H_RZeik) != L_LCount + 1) {
    				if (H_RZeik.Length - 1 != L_LCount + 1)
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    					Array.Resize(ref H_RZeik, L_LCount + 2);
    				}
    				H_RZeik[L_LCount] = 0;
    				L_LCount = L_LCount + 1;
    				// 相手科目が消費税関連科目
    				if (L_LGroup == 1)
                    {
    					// 分離区分を使用時
    					if (H_PAiteBunri == 1 || H_PAiteBunri == 2 || H_PAiteBunri == 3)
                        {
    						if (SvolumChkBunriZeik_FNC(H_drSvolum, H_PSY01, H_PSY02, H_PSY08, H_PAiteBunri, H_PAiteTaika, ref L_LZeik) <= 0)
                            {
    							break;
    						}
    					}
    				}
    				// 税込
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                    {
    					if (SvolumFlgChk_FNC(1, L_LZeik) == true)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 1;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 税抜
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                    {
    					if (SvolumFlgChk_FNC(2, L_LZeik) == true)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 2;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 免税
    				if (SvolumFlgChk_FNC(3, L_LZeik))
                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 3;
    					L_LCount = L_LCount + 1;
    				}
    				// 非課税
    				if (SvolumFlgChk_FNC(4, L_LZeik)) {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 4;
    					L_LCount = L_LCount + 1;
    				}
    				// 貸倒損失
    				if (H_PSY08 == 1) {
    					// 貸倒損込
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0 && L_LGroup != 3 && L_LKomiOk == true)) {
    						if (SvolumFlgChk_FNC(21, L_LZeik) == true) {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//   							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 21;
    							L_LCount = L_LCount + 1;
    						}
    					}
    					// 貸倒損抜
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2)) {
    						if (SvolumFlgChk_FNC(22, L_LZeik) == true) {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 22;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    				// 貸倒回収
    				if (H_PSY08 == 2) {
    					// 貸倒回込
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0 && L_LGroup != 3 && L_LKomiOk == true)) {
    						if (SvolumFlgChk_FNC(23, L_LZeik) == true) {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                { 
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 23;
    							L_LCount = L_LCount + 1;
    						}
    					}
    					// 貸倒回抜
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2)) {
    						if (SvolumFlgChk_FNC(24, L_LZeik) == true) {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 24;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    			}
                #endregion
                #region 売上
                if (H_PSY01 == 4)
                {
    				// 対象外
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    				if (Information.UBound(H_RZeik) != L_LCount + 1) {
    				if (H_RZeik.Length - 1 != L_LCount + 1)
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    					Array.Resize(ref H_RZeik, L_LCount + 2);
    				}
    				H_RZeik[L_LCount] = 0;
    				L_LCount = L_LCount + 1;
    				// 相手科目が消費税関連科目
    				if (L_LGroup == 1)
                    {
    					// 分離区分を使用時
    					if (H_PAiteBunri == 1 || H_PAiteBunri == 2 || H_PAiteBunri == 3)
                        {
    						if (SvolumChkBunriZeik_FNC(H_drSvolum, H_PSY01, H_PSY02, H_PSY08, H_PAiteBunri, H_PAiteTaika, ref L_LZeik) <= 0)
                            {
    							break;
    						}
    					}
    				}
    				// 税込
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) | (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                    {
    					if (SvolumFlgChk_FNC(1, L_LZeik) == true)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 1;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 税抜
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                    {
    					if (SvolumFlgChk_FNC(2, L_LZeik) == true)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 2;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 免税
    				if (SvolumFlgChk_FNC(3, L_LZeik)) {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 3;
    					L_LCount = L_LCount + 1;
    				}
    				// 非課税
    				if (SvolumFlgChk_FNC(4, L_LZeik))
                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 4;
    					L_LCount = L_LCount + 1;
    				}
    				// 貸倒損失
    				if (H_PSY08 == 1)
                    {
    					// 貸倒損込
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                        {
    						if (SvolumFlgChk_FNC(21, L_LZeik) == true)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 21;
    							L_LCount = L_LCount + 1;
    						}
    					}
    					// 貸倒損抜
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                        {
    						if (SvolumFlgChk_FNC(22, L_LZeik) == true)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 22;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    				// 貸倒回収
    				if (H_PSY08 == 2)
                    {
    					// 貸倒回込
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                        {
    						if (SvolumFlgChk_FNC(23, L_LZeik) == true)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 23;
    							L_LCount = L_LCount + 1;
    						}
    					}
    					// 貸倒回抜
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                        {
    						if (SvolumFlgChk_FNC(24, L_LZeik) == true)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
//   							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 24;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    			}
                #endregion
                #region 仕入
                if (H_PSY01 == 5)
                {
    				// 対象外
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if (Information.UBound(H_RZeik) != L_LCount + 1) {
    				if (H_RZeik.Length - 1 != L_LCount + 1)
                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					Array.Resize(ref H_RZeik, L_LCount + 2);
    				}
    				H_RZeik[L_LCount] = 0;
    				L_LCount = L_LCount + 1;
    				// 相手科目が消費税関連科目
    				if (L_LGroup == 1)
                    {
    					// 分離区分を使用時
    					if (H_PAiteBunri == 1 || H_PAiteBunri == 2 || H_PAiteBunri == 3)
                        {
    						if (SvolumChkBunriZeik_FNC(H_drSvolum, H_PSY01, H_PSY02, H_PSY08, H_PAiteBunri, H_PAiteTaika, ref L_LZeik) <= 0)
                            {
    							break;
    						}
    					}
    				}
    				// 税込
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                    {
    					if (SvolumFlgChk_FNC(1, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 1;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 税抜
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                    {
    					if (SvolumFlgChk_FNC(2, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 2;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 免税
    				if (SvolumFlgChk_FNC(3, L_LZeik))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 3;
    					L_LCount = L_LCount + 1;
    				}
    				// 非課税
    				if (SvolumFlgChk_FNC(4, L_LZeik))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 4;
    					L_LCount = L_LCount + 1;
    				}
    				// 課税貨物
    				if (H_PSY08 == 3)
                    {
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                        {
    						if (SvolumFlgChk_FNC(31, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 31;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    			}
                #endregion
                #region 経費
                if (H_PSY01 == 6)
                {
    				// 対象外
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if (Information.UBound(H_RZeik) != L_LCount + 1) {
    				if (H_RZeik.Length - 1 != L_LCount + 1)
                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					Array.Resize(ref H_RZeik, L_LCount + 2);
    				}
    				H_RZeik[L_LCount] = 0;
    				L_LCount = L_LCount + 1;
    				// 相手科目が消費税関連科目
    				if (L_LGroup == 1)
                    {
    					// 分離区分を使用時
    					if (H_PAiteBunri == 1 || H_PAiteBunri == 2 || H_PAiteBunri == 3)
                        {
    						if (SvolumChkBunriZeik_FNC(H_drSvolum, H_PSY01, H_PSY02, H_PSY08, H_PAiteBunri, H_PAiteTaika, ref L_LZeik) <= 0)
                            {
    							break;
    						}
    					}
    				}
    				// 税込
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN4]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN4]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                    {
    					if (SvolumFlgChk_FNC(1, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 1;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 税抜
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN4]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                    {
    					if (SvolumFlgChk_FNC(2, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 2;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 免税
    				if (SvolumFlgChk_FNC(3, L_LZeik))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//   					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 3;
    					L_LCount = L_LCount + 1;
    				}
    				// 非課税
    				if (SvolumFlgChk_FNC(4, L_LZeik))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//   					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 4;
    					L_LCount = L_LCount + 1;
    				}
    				// 課税貨物
    				if (H_PSY08 == 3)
                    {
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN4]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                        {
    						if (SvolumFlgChk_FNC(31, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 31;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    			}
                #endregion
                #region 混在
                if (H_PSY01 == 7)
                {
    				// 対象外
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if (Information.UBound(H_RZeik) != L_LCount + 1) {
    				if (H_RZeik.Length - 1 != L_LCount + 1)
                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					Array.Resize(ref H_RZeik, L_LCount + 2);
    				}
    				H_RZeik[L_LCount] = 0;
    				L_LCount = L_LCount + 1;
    				// 相手科目が消費税関連科目
    				if (L_LGroup == 1)
                    {
    					// 分離区分を使用時
    					if (H_PAiteBunri == 1 || H_PAiteBunri == 2 || H_PAiteBunri == 3)
                        {
    						if (SvolumChkBunriZeik_FNC(H_drSvolum, H_PSY01, H_PSY02, H_PSY08, H_PAiteBunri, H_PAiteTaika, ref L_LZeik) <= 0)
                            {
    							break;
    						}
    					}
    				}
    				// 免税
    				if (SvolumFlgChk_FNC(3, L_LZeik))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 3;
    					L_LCount = L_LCount + 1;
    				}
    				// 非課税
    				if (SvolumFlgChk_FNC(4, L_LZeik))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 4;
    					L_LCount = L_LCount + 1;
    				}
    				// 課込仕入
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                    {
    					if (SvolumFlgChk_FNC(11, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 11;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 課込売上
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                    {
    					if (SvolumFlgChk_FNC(12, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 12;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 課抜仕入
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                    {
    					if (SvolumFlgChk_FNC(13, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 13;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 課抜売上
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                    {
    					if (SvolumFlgChk_FNC(14, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 14;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// IMPORTER.dll差分対応 de3-8993 Ver.12.09.01 2015.03.06 START
    				// 消費税処理グループが「混在」の場合に「41：非課税仕入」「42：非課税売上」を有効値として処理します。
    				// 非課税仕入
    				if (SvolumFlgChk_FNC(41, L_LZeik)) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 41;
    					L_LCount = L_LCount + 1;
    				}
    				// 非課税売上
    				if (SvolumFlgChk_FNC(42, L_LZeik)) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 42;
    					L_LCount = L_LCount + 1;
    				}
    				// IMPORTER.dll差分対応 de3-8993 Ver.12.09.01 2015.03.06 END
    			}
                #endregion
                #region 有価証券
                if (H_PSY01 == 8)
                {
    				// 対象外
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if (Information.UBound(H_RZeik) != L_LCount + 1) {
    				if (H_RZeik.Length - 1 != L_LCount + 1)
                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					Array.Resize(ref H_RZeik, L_LCount + 2);
    				}
    				H_RZeik[L_LCount] = 0;
    				L_LCount = L_LCount + 1;
    				// 相手科目が消費税関連科目
    				if (L_LGroup == 1)
                    {
    					// 分離区分を使用時
    					if (H_PAiteBunri == 1 || H_PAiteBunri == 2 || H_PAiteBunri == 3)
                        {
    						if (SvolumChkBunriZeik_FNC(H_drSvolum, H_PSY01, H_PSY02, H_PSY08, H_PAiteBunri, H_PAiteTaika, ref L_LZeik) <= 0)
                            {
    							break;
    						}
    					}
    				}
    				// 免税
    				if (SvolumFlgChk_FNC(3, L_LZeik)) {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 3;
    					L_LCount = L_LCount + 1;
    				}
    				// 課込仕入
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                    {
    					if (SvolumFlgChk_FNC(11, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 11;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 課込売上
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) | (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                    {
    					if (SvolumFlgChk_FNC(12, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 12;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 課抜仕入
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                    {
    					if (SvolumFlgChk_FNC(13, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 13;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 課抜売上
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                    {
    					if (SvolumFlgChk_FNC(14, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 14;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 貸倒損失
    				if (H_PSY08 == 1)
                    {
    					// 貸倒損込
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                        {
    						if (SvolumFlgChk_FNC(21, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//   							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 21;
    							L_LCount = L_LCount + 1;
    						}
    					}
    					// 貸倒損抜
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                        {
    						if (SvolumFlgChk_FNC(22, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 22;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    				// 貸倒回収
    				if (H_PSY08 == 2)
                    {
    					// 貸倒回込
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                        {
    						if (SvolumFlgChk_FNC(23, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 23;
    							L_LCount = L_LCount + 1;
    						}
    					}
    					// 貸倒回抜
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                        {
    						if (SvolumFlgChk_FNC(24, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 24;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    				// 非課税仕入
    				if (SvolumFlgChk_FNC(41, L_LZeik) == true)
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 41;
    					L_LCount = L_LCount + 1;
    				}
    				// 非課税売上
    				if (SvolumFlgChk_FNC(42, L_LZeik) == true)
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 42;
    					L_LCount = L_LCount + 1;
    				}
    			}
                #endregion
                #region 売上値引
                if (H_PSY01 == 9)
                {
    				// 対象外
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if (Information.UBound(H_RZeik) != L_LCount + 1) {
    				if (H_RZeik.Length - 1 != L_LCount + 1)
                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					Array.Resize(ref H_RZeik, L_LCount + 2);
    				}
    				H_RZeik[L_LCount] = 0;
    				L_LCount = L_LCount + 1;
    				// 相手科目が消費税関連科目
    				if (L_LGroup == 1)
                    {
    					// 分離区分を使用時
    					if (H_PAiteBunri == 1 || H_PAiteBunri == 2 || H_PAiteBunri == 3)
                        {
    						if (SvolumChkBunriZeik_FNC(H_drSvolum, H_PSY01, H_PSY02, H_PSY08, H_PAiteBunri, H_PAiteTaika, ref L_LZeik) <= 0)
                            {
    							break;
    						}
    					}
    				}
    				// 税込
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                    {
    					if (SvolumFlgChk_FNC(1, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 1;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 税抜
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                    {
    					if (SvolumFlgChk_FNC(2, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 2;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 免税
    				if (SvolumFlgChk_FNC(3, L_LZeik))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 3;
    					L_LCount = L_LCount + 1;
    				}
    				// 非課税
    				if (SvolumFlgChk_FNC(4, L_LZeik))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 4;
    					L_LCount = L_LCount + 1;
    				}
    			}
                #endregion
                #region 仕入値引
                if (H_PSY01 == 10)
                {
    				// 対象外
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if (Information.UBound(H_RZeik) != L_LCount + 1) {
    				if (H_RZeik.Length - 1 != L_LCount + 1)
                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					Array.Resize(ref H_RZeik, L_LCount + 2);
    				}
    				H_RZeik[L_LCount] = 0;
    				L_LCount = L_LCount + 1;
    				// 相手科目が消費税関連科目
    				if (L_LGroup == 1)
                    {
    					// 分離区分を使用時
    					if (H_PAiteBunri == 1 || H_PAiteBunri == 2 || H_PAiteBunri == 3)
                        {
    						if (SvolumChkBunriZeik_FNC(H_drSvolum, H_PSY01, H_PSY02, H_PSY08, H_PAiteBunri, H_PAiteTaika, ref L_LZeik) <= 0)
                            {
    							break;
    						}
    					}
    				}
    				// 税込
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) != 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 1) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0 && L_LGroup != 3 && L_LKomiOk == true))
                    {
    					if (SvolumFlgChk_FNC(1, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 1;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 税抜
    				if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                    {
    					if (SvolumFlgChk_FNC(2, L_LZeik) == true)
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						if (Information.UBound(H_RZeik) != L_LCount + 1) {
    						if (H_RZeik.Length - 1 != L_LCount + 1)
                            {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    							Array.Resize(ref H_RZeik, L_LCount + 2);
    						}
    						H_RZeik[L_LCount] = 2;
    						L_LCount = L_LCount + 1;
    					}
    				}
    				// 免税
    				if (SvolumFlgChk_FNC(3, L_LZeik))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 3;
    					L_LCount = L_LCount + 1;
    				}
    				// 非課税
    				if (SvolumFlgChk_FNC(4, L_LZeik))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 4;
    					L_LCount = L_LCount + 1;
    				}
    				// 課税貨物
    				if (H_PSY08 == 3)
                    {
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                        {
    						if (SvolumFlgChk_FNC(31, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 31;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    			}
                #endregion
                #region 仮払消費税
                if (H_PSY01 == 21)
                {
    				// 両科目が仮払・仮受消費税
    				if (L_LGroup == 4)
                    {
    					// 異なるグループ
    					if (H_PSY01 != H_PAiteSY01)
                        {
    						// 課税区分が計算外以外
    						// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    						// If H_PAiteZeik <> 99 Then
    						if (H_PAiteZeik != 99 && H_PAiteZeik != 61 && H_PAiteZeik != 62)
                            {
    							// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    							// 計算外
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 99;
    							L_LCount = L_LCount + 1;
    							// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    							// 特定課税仕入
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 61;
    							L_LCount = L_LCount + 1;
    							// 控除対象外仕入
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 62;
    							L_LCount = L_LCount + 1;
    							// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    							break;
    						}
    					}
    				}
    				// 貨物国、貨物地方
    				if (H_PSY08 == 3)
                    {
    					if ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1 && ((Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0) || (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0) | (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN4]) == 0))) | (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2))
                        {
    						// 相手科目が『仮払消費税』で『100:計算する』の場合は除外
    						// (L_LGroup = 4 And H_PAiteZeik = 100)
    						if (!(L_LGroup == 4 && (H_PAiteZeik == 32 || H_PAiteZeik == 33)))
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 32;
    							L_LCount = L_LCount + 1;
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 33;
    							L_LCount = L_LCount + 1;
    						}
    					}
    				}
    				// 計算外
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if (Information.UBound(H_RZeik) != L_LCount + 1) {
    				if (H_RZeik.Length - 1 != L_LCount + 1)
                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					Array.Resize(ref H_RZeik, L_LCount + 2);
    				}
    				H_RZeik[L_LCount] = 99;
    				L_LCount = L_LCount + 1;
    				// 対象外
    				// 相手科目が『仮払消費税』で『32,33:貨物関連』の場合は除外
    				if (!(L_LGroup == 4 && (H_PAiteZeik == 32 || H_PAiteZeik == 33)))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					if (Information.UBound(H_RZeik) != L_LCount + 1) {
    					if (H_RZeik.Length - 1 != L_LCount + 1)
                        {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    						Array.Resize(ref H_RZeik, L_LCount + 2);
    					}
    					H_RZeik[L_LCount] = 100;
    					L_LCount = L_LCount + 1;
    				}
    			}
                #endregion
                #region 仮受消費税
                if (H_PSY01 == 22)
                {
    				// 計算外
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if (Information.UBound(H_RZeik) != L_LCount + 1) {
    				if (H_RZeik.Length - 1 != L_LCount + 1)
                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					Array.Resize(ref H_RZeik, L_LCount + 2);
    				}
    				H_RZeik[L_LCount] = 99;
    				L_LCount = L_LCount + 1;
    				// 両科目が仮払・仮受消費税
    				if (L_LGroup == 4)
                    {
    					// 異なるグループ
    					if (H_PSY01 != H_PAiteSY01)
                        {
    						// 課税区分が計算外以外
    						// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    						// If H_PAiteZeik <> 99 Then
    						if (H_PAiteZeik != 99 && H_PAiteZeik != 61 && H_PAiteZeik != 62)
                            {
    							// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    							// 計算外
    							// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
    							// 特定課税仕入
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 61;
    							L_LCount = L_LCount + 1;
    							// 控除対象外仕入
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 62;
    							L_LCount = L_LCount + 1;
    							// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End
    							break;
    						}
    					}
    				}
    				// 対象外
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if (Information.UBound(H_RZeik) != L_LCount + 1) {
    				if (H_RZeik.Length - 1 != L_LCount + 1)
                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					Array.Resize(ref H_RZeik, L_LCount + 2);
    				}
    				H_RZeik[L_LCount] = 100;
    				L_LCount = L_LCount + 1;
    			}
                #endregion
                // 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) Start
                switch (H_PSY01)
                {
    				case 2:
    				case 5:
    				case 6:
    				case 7:
    				case 8:
    				case 10:
    				case 21:
    				case 22:
    					// 2:資産、5:仕入、6:経費、7:混在、8:有価証券、10:仕入値引、21:仮払消費税、22仮受消費税
    					// 特殊区分「4:特課控外」「5:特課貨外」
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_TKSIRE]) == 1)
                        {
    						if (SvolumFlgChk_FNC(61, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 61;
    							L_LCount          = L_LCount + 1;
    						}
    						// 「5:特課貨外」は仮受消費税を除く
    						if (H_PSY01 != 22 && SvolumFlgChk_FNC(62, L_LZeik) == true)
                            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    							if (Information.UBound(H_RZeik) != L_LCount + 1) {
    							if (H_RZeik.Length - 1 != L_LCount + 1)
                                {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    								Array.Resize(ref H_RZeik, L_LCount + 2);
    							}
    							H_RZeik[L_LCount] = 62;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    					break;
    			}
    			// 2015/09/02    Ver00.05.01     リバースチャージ対応(de3-9976) End    
    			break;
    		} while (true);
    
    		// 外貨対応
    		L_Sta    = 0;
    		L_End    = L_LCount;
    		L_LCount = 0;
    		while (L_Sta < L_End)
            {
    			if (H_bGaiCut == true)
                {
    				if (SvolumDefTaika_FNC(H_PSY01, H_PSY02, H_RZeik[L_Sta], H_bKrKs) == 0)
                    {
    					H_RZeik[L_LCount] = H_RZeik[L_Sta];
    					L_LCount          = L_LCount + 1;
    				}
    			}
                else
                {
    				H_RZeik[L_LCount] = H_RZeik[L_Sta];
    				L_LCount          = L_LCount + 1;
    
    			}
    			L_Sta = L_Sta + 1;
    		}
    
    		return L_LCount;
    	}
    
    	private bool SvolumFlgChk_FNC(int H_Flg1, int[] H_Flg2)
    	{    
    		if (H_Flg2.Length >= 1)
            {
    			if (H_Flg2[0] == -1)     { return true; }
    			if (H_Flg1 == H_Flg2[0]) { return true; }
    		}
    		if (H_Flg2.Length >= 2)
            {
                if (H_Flg1 == H_Flg2[1]) { return true; }
    		}
    		if (H_Flg2.Length >= 3)
            {
    			if (H_Flg1 == H_Flg2[2]) { return true; }
    		}
    		if (H_Flg2.Length >= 4)
            {
                if (H_Flg1 == H_Flg2[3]) { return true; }
    		}

    		return false;
    	}
    
    	private int SvolumChkBunriZeik_FNC(DataRow H_drSvolum, int H_PSY01, int H_PSY02, int H_PSY08, int H_PAiteBunri, int H_PAiteTaika, ref int[] H_RZeik)
    	{
    		int L_LCount = 0;
    		int L_Num    = 0;
    
    		L_Num    = 4;    
    		L_LCount = 0;
    		H_RZeik  = new int[L_Num + 1];

    		while (L_LCount < L_Num)
            {
    			H_RZeik[L_LCount] = 0;
    			L_LCount          = L_LCount + 1;
    		}
    
    		L_LCount = 0;
    		// 税抜処理
    		if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 1)
            {
    			// 自動分離
    			if (H_PAiteBunri == 1)
                {
                    // 税込関連のみ選択可能
                    #region 資産
                    if (H_PSY01 == 2)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 課込仕入
    							H_RZeik[L_LCount] = 11;
    							L_LCount          = L_LCount + 1;
    							// 課込売上
    							if (H_PSY02 == 0)
                                {
    								H_RZeik[L_LCount] = 12;
    								L_LCount          = L_LCount + 1;
    							}
    							// 貸倒損込
    							if (H_PSY08 == 1)
                                {
    								H_RZeik[L_LCount] = 21;
    								L_LCount          = L_LCount + 1;
    							}
    							// 貸倒回込
    							if (H_PSY08 == 2)
                                {
    								H_RZeik[L_LCount] = 23;
    								L_LCount          = L_LCount + 1;
    							}
    						}
    						// 対価使用時
    						if (H_PAiteTaika == 1)
                            {
    							// 課込売上
    							if (H_PSY02 == 1)
                                {
    								H_RZeik[L_LCount] = 12;
    								L_LCount          = L_LCount + 1;
    							}
    						}
    					}
    				}
                    #endregion
                    #region 負債
                    if (H_PSY01 == 3)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 税込
    							H_RZeik[L_LCount] = 1;
    							L_LCount          = L_LCount + 1;
    							// 貸倒損込
    							if (H_PSY08 == 1)
                                {
    								H_RZeik[L_LCount] = 21;
    								L_LCount          = L_LCount + 1;
    							}
    							// 貸倒回込
    							if (H_PSY08 == 2)
                                {
    								H_RZeik[L_LCount] = 23;
    								L_LCount          = L_LCount + 1;
    							}
    						}
    					}
    				}
                    #endregion
                    #region 売上
                    if (H_PSY01 == 4)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 税込
    							H_RZeik[L_LCount] = 1;
    							L_LCount          = L_LCount + 1;
    							// 貸倒損込
    							if (H_PSY08 == 1)
                                {
    								H_RZeik[L_LCount] = 21;
    								L_LCount          = L_LCount + 1;
    							}
    							// 貸倒回込
    							if (H_PSY08 == 2)
                                {
    								H_RZeik[L_LCount] = 23;
    								L_LCount          = L_LCount + 1;
    							}
    						}
    					}
    				}
                    #endregion
                    #region 仕入
                    if (H_PSY01 == 5)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 税込
    							H_RZeik[L_LCount] = 1;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 経費
                    if (H_PSY01 == 6)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN4]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 税込
    							H_RZeik[L_LCount] = 1;
    							L_LCount          = L_LCount + 1;    
    						}
    					}
    				}
                    #endregion
                    #region 混在
                    if (H_PSY01 == 7)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税抜経理（仕入）
    						if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0)
                            {
    							// 課込仕入
    							H_RZeik[L_LCount] = 11;
    							L_LCount          = L_LCount + 1;
    						}
    						// 税抜経理（売上）
    						if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0)
                            {
    							// 課込売上
    							H_RZeik[L_LCount] = 12;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 有価証券
                    if (H_PSY01 == 8)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 課込仕入
    							H_RZeik[L_LCount] = 11;
    							L_LCount          = L_LCount + 1;
    							// 課込売上
    							if (H_PSY02 == 0)
                                {
    								H_RZeik[L_LCount] = 12;
    								L_LCount          = L_LCount + 1;
    							}
    							// 貸倒損込
    							if (H_PSY08 == 1)
                                {
    								H_RZeik[L_LCount] = 21;
    								L_LCount          = L_LCount + 1;
    							}
    							// 貸倒回込
    							if (H_PSY08 == 2)
                                {
    								H_RZeik[L_LCount] = 23;
    								L_LCount          = L_LCount + 1;
    							}
    						}
    						// 対価使用時
    						if (H_PAiteTaika == 1)
                            {
    							// 課込売上
    							if (H_PSY02 == 1)
                                {
    								H_RZeik[L_LCount] = 12;
    								L_LCount          = L_LCount + 1;
    							}
    						}
    					}
    				}
                    #endregion
                    #region 売上値引
                    if (H_PSY01 == 9)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 税込
    							H_RZeik[L_LCount] = 1;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 仕入値引
                    if (H_PSY01 == 10)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 税込
    							H_RZeik[L_LCount] = 1;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                }
                // 税作成
                if (H_PAiteBunri == 3)
                {
                    // 税抜関連のみ選択可能
                    #region 資産
                    if (H_PSY01 == 2)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN1]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 課抜仕入
    							H_RZeik[L_LCount] = 13;
    							L_LCount          = L_LCount + 1;
    							// 課抜売上
    							if (H_PSY02 == 0)
                                {
    								H_RZeik[L_LCount] = 14;
    								L_LCount          = L_LCount + 1;
    							}
    							// 貸倒損抜
    							if (H_PSY08 == 1)
                                {
    								H_RZeik[L_LCount] = 22;
    								L_LCount          = L_LCount + 1;
    							}
    							// 貸倒回抜
    							if (H_PSY08 == 2)
                                {
    								H_RZeik[L_LCount] = 24;
    								L_LCount          = L_LCount + 1;
    							}
    						}
    						// 対価使用時
    						if (H_PAiteTaika == 1)
                            {
    							// 課抜売上
    							if (H_PSY02 == 1)
                                {
    								H_RZeik[L_LCount] = 14;
    								L_LCount          = L_LCount + 1;
    							}
    						}
    					}
    				}
                    #endregion
                    #region 負債
                    if (H_PSY01 == 3)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 税抜
    							H_RZeik[L_LCount] = 2;
    							L_LCount          = L_LCount + 1;
    							// 貸倒損抜
    							if (H_PSY08 == 1)
                                {
    								H_RZeik[L_LCount] = 22;
    								L_LCount          = L_LCount + 1;
    							}
    							// 貸倒回抜
    							if (H_PSY08 == 2)
                                {
    								H_RZeik[L_LCount] = 24;
    								L_LCount          = L_LCount + 1;
    							}
    						}
    					}
    				}
                    #endregion
                    #region 売上
                    if (H_PSY01 == 4)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 税抜
    							H_RZeik[L_LCount] = 2;
    							L_LCount          = L_LCount + 1;
    							// 貸倒損抜
    							if (H_PSY08 == 1)
                                {
    								H_RZeik[L_LCount] = 22;
    								L_LCount          = L_LCount + 1;
    							}
    							// 貸倒回抜
    							if (H_PSY08 == 2)
                                {
    								H_RZeik[L_LCount] = 24;
    								L_LCount          = L_LCount + 1;
    							}
    						}
    					}
    				}
                    #endregion
                    #region 仕入
                    if (H_PSY01 == 5)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 税抜
    							H_RZeik[L_LCount] = 2;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 経費
                    if (H_PSY01 == 6)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN4]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 税抜
    							H_RZeik[L_LCount] = 2;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 混在
                    if (H_PSY01 == 7)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税抜経理（仕入）
    						if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0)
                            {
    							// 課抜仕入
    							H_RZeik[L_LCount] = 13;
    							L_LCount          = L_LCount + 1;
    						}
    						// 税抜経理（売上）
    						if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0)
                            {
    							// 課抜売上
    							H_RZeik[L_LCount] = 14;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 有価証券
                    if (H_PSY01 == 8)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN4]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 課抜仕入
    							H_RZeik[L_LCount] = 13;
    							L_LCount          = L_LCount + 1;
    							// 課抜売上
    							if (H_PSY02 == 0)
                                {
    								H_RZeik[L_LCount] = 14;
    								L_LCount          = L_LCount + 1;
    							}
    							// 貸倒損抜
    							if (H_PSY08 == 1)
                                {
    								H_RZeik[L_LCount] = 22;
    								L_LCount          = L_LCount + 1;
    							}
    							// 貸倒回抜
    							if (H_PSY08 == 2)
                                {
    								H_RZeik[L_LCount] = 24;
    								L_LCount          = L_LCount + 1;
    							}
    						}
    						// 対価使用時
    						if (H_PAiteTaika == 1)
                            {
    							// 課抜売上
    							if (H_PSY02 == 1)
                                {
    								H_RZeik[L_LCount] = 14;
    								L_LCount          = L_LCount + 1;
    							}
    						}
    					}
    				}
                    #endregion
                    #region 売上値引
                    if (H_PSY01 == 9)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN2]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 税抜
    							H_RZeik[L_LCount] = 2;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 仕入値引
                    if (H_PSY01 == 10)
                    {
    					// 税抜経理
    					if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_KBN3]) == 0)
                        {
    						// 対価未使用時
    						if (H_PAiteTaika != 1)
                            {
    							// 税抜
    							H_RZeik[L_LCount] = 2;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                }
    		}
    
    		// 一括税抜
    		if (Convert.ToInt32(H_drSvolum[(int)eSVOLUM.SVOLUM_SKBN]) == 2)
            {
    			// 自動分離、振替作成
    			if (H_PAiteBunri == 1 || H_PAiteBunri == 2)
                {
                    // 税込関連のみ選択可能
                    #region 資産
                    if (H_PSY01 == 2)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 課込仕入
    						H_RZeik[L_LCount] = 11;
    						L_LCount          = L_LCount + 1;
    						// 課込売上
    						if (H_PSY02 == 0)
                            {
    							H_RZeik[L_LCount] = 12;
    							L_LCount          = L_LCount + 1;
    						}
    						// 貸倒損込
    						if (H_PSY08 == 1)
                            {
    							H_RZeik[L_LCount] = 21;
    							L_LCount          = L_LCount + 1;
    						}
    						// 貸倒回込
    						if (H_PSY08 == 2)
                            {
    							H_RZeik[L_LCount] = 23;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    					// 対価使用時
    					if (H_PAiteTaika == 1)
                        {
    						// 課込売上
    						if (H_PSY02 == 1)
                            {
    							H_RZeik[L_LCount] = 12;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 負債
                    if (H_PSY01 == 3)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税込
    						H_RZeik[L_LCount] = 1;
    						L_LCount          = L_LCount + 1;
    						// 貸倒損込
    						if (H_PSY08 == 1)
                            {
    							H_RZeik[L_LCount] = 21;
    							L_LCount          = L_LCount + 1;
    						}
    						// 貸倒回込
    						if (H_PSY08 == 2)
                            {
    							H_RZeik[L_LCount] = 23;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 売上
                    if (H_PSY01 == 4)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税込
    						H_RZeik[L_LCount] = 1;
    						L_LCount          = L_LCount + 1;
    						// 貸倒損込
    						if (H_PSY08 == 1)
                            {
    							H_RZeik[L_LCount] = 21;
    							L_LCount          = L_LCount + 1;
    						}
    						// 貸倒回込
    						if (H_PSY08 == 2)
                            {
    							H_RZeik[L_LCount] = 23;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 仕入
                    if (H_PSY01 == 5)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税込
    						H_RZeik[L_LCount] = 1;
    						L_LCount          = L_LCount + 1;
    					}
    				}
                    #endregion
                    #region 経費
                    if (H_PSY01 == 6)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税込
    						H_RZeik[L_LCount] = 1;
    						L_LCount          = L_LCount + 1;
    					}
    				}
                    #endregion
                    #region 混在
                    if (H_PSY01 == 7)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 課込仕入
    						H_RZeik[L_LCount] = 11;
    						L_LCount          = L_LCount + 1;
    						// 課込売
    						H_RZeik[L_LCount] = 12;
    						L_LCount          = L_LCount + 1;
    					}
    				}
                    #endregion
                    #region 有価証券
                    if (H_PSY01 == 8)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 課込仕入
    						H_RZeik[L_LCount] = 11;
    						L_LCount          = L_LCount + 1;
    						// 課込売上
    						if (H_PSY02 == 0)
                            {
    							H_RZeik[L_LCount] = 12;
    							L_LCount          = L_LCount + 1;
    						}
    						// 貸倒損込
    						if (H_PSY08 == 1)
                            {
    							H_RZeik[L_LCount] = 21;
    							L_LCount          = L_LCount + 1;
    						}
    						// 貸倒回込
    						if (H_PSY08 == 2)
                            {
    							H_RZeik[L_LCount] = 23;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    					// 対価使用時
    					if (H_PAiteTaika == 1)
                        {
    						// 課込売上
    						if (H_PSY02 == 1)
                            {
    							H_RZeik[L_LCount] = 12;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 売上値引
                    if (H_PSY01 == 9)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税込
    						H_RZeik[L_LCount] = 1;
    						L_LCount          = L_LCount + 1;
    					}
    
    				}
                    #endregion
                    #region 仕入値引
                    if (H_PSY01 == 10)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税込
    						H_RZeik[L_LCount] = 1;
    						L_LCount          = L_LCount + 1;
    					}
    				}
                    #endregion
                }
                // 税作成
                if (H_PAiteBunri == 3)
                {
                    // 税抜関連のみ選択可能
                    #region 資産
                    if (H_PSY01 == 2)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 課抜仕入
    						H_RZeik[L_LCount] = 13;
    						L_LCount          = L_LCount + 1;
    						// 課抜売上
    						if (H_PSY02 == 0)
                            {
    							H_RZeik[L_LCount] = 14;
    							L_LCount          = L_LCount + 1;
    						}
    						// 貸倒損抜
    						if (H_PSY08 == 1)
                            {
    							H_RZeik[L_LCount] = 22;
    							L_LCount          = L_LCount + 1;
    						}
    						// 貸倒回抜
    						if (H_PSY08 == 2)
                            {
    							H_RZeik[L_LCount] = 24;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    					// 対価使用時
    					if (H_PAiteTaika == 1)
                        {
    						// 課抜売上
    						if (H_PSY02 == 1)
                            {
    							H_RZeik[L_LCount] = 14;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 負債
                    if (H_PSY01 == 3)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税抜
    						H_RZeik[L_LCount] = 2;
    						L_LCount          = L_LCount + 1;
    						// 貸倒損抜
    						if (H_PSY08 == 1)
                            {
    							H_RZeik[L_LCount] = 22;
    							L_LCount          = L_LCount + 1;
    						}
    						// 貸倒回抜
    						if (H_PSY08 == 2)
                            {
    							H_RZeik[L_LCount] = 24;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 売上
                    if (H_PSY01 == 4)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税抜
    						H_RZeik[L_LCount] = 2;
    						L_LCount          = L_LCount + 1;
    						// 貸倒損抜
    						if (H_PSY08 == 1)
                            {
    							H_RZeik[L_LCount] = 22;
    							L_LCount          = L_LCount + 1;
    						}
    						// 貸倒回抜
    						if (H_PSY08 == 2)
                            {
    							H_RZeik[L_LCount] = 24;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 仕入
                    if (H_PSY01 == 5)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税抜
    						H_RZeik[L_LCount] = 2;
    						L_LCount          = L_LCount + 1;
    					}
    				}
                    #endregion
                    #region 経費
                    if (H_PSY01 == 6)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税抜
    						H_RZeik[L_LCount] = 2;
    						L_LCount          = L_LCount + 1;
    					}
    				}
                    #endregion
                    #region 混在
                    if (H_PSY01 == 7)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 課抜仕入
    						H_RZeik[L_LCount] = 13;
    						L_LCount          = L_LCount + 1;
    						// 課抜売上
    						H_RZeik[L_LCount] = 14;
    						L_LCount          = L_LCount + 1;
    					}
    				}
                    #endregion
                    #region 有価証券
                    if (H_PSY01 == 8)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 課抜仕入
    						H_RZeik[L_LCount] = 13;
    						L_LCount          = L_LCount + 1;
    						// 課抜売上
    						if (H_PSY02 == 0)
                            {
    							H_RZeik[L_LCount] = 14;
    							L_LCount          = L_LCount + 1;
    						}
    						// 貸倒損抜
    						if (H_PSY08 == 1)
                            {
    							H_RZeik[L_LCount] = 22;
    							L_LCount          = L_LCount + 1;
    						}
    						// 貸倒回抜
    						if (H_PSY08 == 2)
                            {
    							H_RZeik[L_LCount] = 24;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    					// 対価使用時
    					if (H_PAiteTaika == 1)
                        {
    						// 課抜売上
    						if (H_PSY02 == 1)
                            {
    							H_RZeik[L_LCount] = 14;
    							L_LCount          = L_LCount + 1;
    						}
    					}
    				}
                    #endregion
                    #region 売上値引
                    if (H_PSY01 == 9)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税抜
    						H_RZeik[L_LCount] = 2;
    						L_LCount          = L_LCount + 1;
    					}
    				}
                    #endregion
                    #region 仕入値引
                    if (H_PSY01 == 10)
                    {
    					// 対価未使用時
    					if (H_PAiteTaika != 1)
                        {
    						// 税抜
    						H_RZeik[L_LCount] = 2;
    						L_LCount          = L_LCount + 1;
    					}
    				}
                    #endregion
                }
            }

    		return L_LCount;
    	}
    
    	// 外貨用(課税区分の排除対象の可能性チェック)
    	private bool SvolumGaicutFlg(int H_GaiUse, string H_strKicd, string H_strHei, string H_strAiteKicd, string H_strAiteHei)
    	{
    		bool functionReturnValue = false;
    		// !外貨未使用()
    		if (H_GaiUse != 1)
            {
    			functionReturnValue = false;
    		}
    		// !相手科目が外貨()
    		if (!string.IsNullOrEmpty(H_strKicd) && string.IsNullOrEmpty(H_strHei) && !string.IsNullOrEmpty(H_strAiteKicd) && !string.IsNullOrEmpty(H_strAiteHei))
            {
    			functionReturnValue = true;
    		}
    		return functionReturnValue;
    	}

    	private bool SyoZKbn_Check_FNC(DataRow H_drSvolum, bool H_Aite, ref string H_JZkbn, string H_AZkbn, int H_JSy01, int H_JSy02, int H_JSy03, int H_JSy08, int H_ASy01, int H_ASy02, int H_ASy03, int H_ASy04, bool H_PGaicut)
    	{
    		int L_ChkJZkbn = 0;
    		int L_ChkAZkbn = 0;
    		int L_UseZkbn  = 0;

            #region 課税区分セット（自税区分は無条件でセット）
            if (string.IsNullOrEmpty(H_JZkbn))
            {
    			L_ChkJZkbn = H_JSy03;
    		}
            else
            {
    			L_ChkJZkbn = Convert.ToInt32(H_JZkbn);
    		}
    		if (H_Aite)
            {
    			if (string.IsNullOrEmpty(H_AZkbn))
                {
    				L_ChkAZkbn = H_ASy03;
    			}
                else
                {
    				L_ChkAZkbn = Convert.ToInt32(H_AZkbn);
    			}
    		}    
    		if (H_Aite)
            {
    			L_UseZkbn = SvolumDefZkbn_FNC(H_drSvolum, H_JSy01, H_JSy02, L_ChkJZkbn, H_JSy08, H_ASy01, L_ChkAZkbn, H_ASy04, H_ASy02, H_Aite, H_PGaicut);
    		}
            else
            {
    			L_UseZkbn = SvolumDefZkbn_FNC(H_drSvolum, H_JSy01, H_JSy02, L_ChkJZkbn, H_JSy08, H_ASy01, L_ChkAZkbn, H_ASy04, H_ASy02, false, H_PGaicut);
    		}
            #endregion

            #region 課税区分チェック
            if (string.IsNullOrEmpty(H_JZkbn))
            {
    			H_JZkbn = L_UseZkbn.ToString();
    			return true;
    		}
            else if (H_JZkbn == "18" || H_JZkbn == "19" || H_JZkbn == "49")
            {
    			// レコードの課税区分が存在しなければ、使用できる区分をセット
    			// （必ず科目デフォルトになるとは限らない）
    			if (L_UseZkbn == 11 || L_UseZkbn == 12 || L_UseZkbn == 13 || L_UseZkbn == 14 || L_UseZkbn == 41 || L_UseZkbn == 42)
                {
    				H_JZkbn = L_UseZkbn.ToString();
    				return true;
    			}
                else
                {
    				return false;
    			}    
    		}
            else
            {
    			// レコードの課税区分と使用できる課税区分が一致しなければエラー
    			if (L_ChkJZkbn == L_UseZkbn)
                {
    				return true;
    			}
                else
                {
    				return false;
    			}
    		}
            #endregion
        }
    
    	private int SvolumDefRitu_SUB(DataTable H_dtSritu, int H_PSY07)
    	{
    		int L_LCount = 0;
    
    		L_LCount = 0;

    		while (L_LCount < H_dtSritu.Rows.Count)
            {
    			if (H_PSY07 == Convert.ToInt32(H_dtSritu.Rows[L_LCount][(int)eSRITU.SRITU_SY07]))
                {
    				return Convert.ToInt32(H_dtSritu.Rows[L_LCount][(int)eSRITU.SRITU_ZRIT]);
    			}
    			L_LCount = L_LCount + 1;
    		}
    		return Convert.ToInt32(H_dtSritu.Rows[H_dtSritu.Rows.Count - 1][(int)eSRITU.SRITU_ZRIT]);
    	}
    
    	private int SvolumDefTaika_FNC(int H_PSY01, int H_PSY02, int H_PZeik, bool H_PKrKs)
    	{
    		// 対価入力無し
    		if (H_PSY02 != 1)
            {
    			return 0;
    		}
    		// 資産、有価証券
    		if (H_PSY01 == 2 || H_PSY01 == 8)
            {
    			// 課込売上、課抜売上、非課税売上
    			if (H_PZeik == 12 || H_PZeik == 14 || H_PZeik == 42)
                {
    				return 1;
    			}
    			if (H_PZeik == 3 && H_PKrKs == true)
                {
    				return 1;
    			}
    		}
    		return 0;
    	}
        #endregion

        private void SyoTaik_Check_SUB(ref int H_TaikaOk, int H_Sy01, int H_Sy02, string H_Zkbn, bool H_PKrKs)
    	{
    		int L_Zkbn = 0;
    
    		L_Zkbn    = Convert.ToInt32(H_Zkbn);    
    		H_TaikaOk = SvolumDefTaika_FNC(H_Sy01, H_Sy02, L_Zkbn, H_PKrKs);

    		return;
    	}    
    
    	private void InsKhkzan_SUB(IDbCommand H_Cmd, short H_Kesn, string H_Kicd, short H_Tcod)
    	{
    		IDataReader L_Reader = default(IDataReader);
    		bool        L_Exist  = false;
    
    		H_Cmd.CommandText = "SELECT TCOD FROM KHKZAN WHERE KESN = " + H_Kesn + " AND KICD = '" + H_Kicd + "' AND TCOD = " + H_Tcod;
    		L_Reader          = H_Cmd.ExecuteReader();

    		if (L_Reader.Read())
            {
    			L_Exist = true;
    		}
            else
            {
    			L_Exist = false;
    		}
    		L_Reader.Close();

    		if (L_Exist == false)
            {
    			H_Cmd.CommandText = "INSERT INTO KHKZAN (KESN,KICD,TCOD,R010,S010,R015,S015,R020,S020,R025,S025," + "R030,S030,R035,S035,R040,S040,R045,S045,R050,S050,R055,S055," +  // <--- PostgreSQL対応
                                                        "R060,S060,R065,S065,R070,S070,R075,S075,R080,S080,R085," + "S085,R090,S090,R095,S095,R100,S100,R105,S105,R110,S110,R115," +
                                                        "S115,R120,S120,R125,S125) " + 
                                           " VALUES (" + H_Kesn + ",'" + H_Kicd + "'," + H_Tcod + ",0,0,0,0,0,0,0,0," + "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0," +
                                                        "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 " + 
                                                   ")";
    			H_Cmd.ExecuteNonQuery();
    		}
    	}
    
    	// *===========================================================================================*
    	//    処理グループ(SY01)が該当なし･対象外･仮払消費税･仮受消費税で課税区分に0が指定されているかチェック
    	// 		【パラメータ】
    	// 		    1.指定課税区分
    	// 		　  2.科目の処理グループ
    	// 		【返送値】
    	// 		　　 TRUE：変換条件該当
    	// 		　　FALSE：変換処理不要
    	// *===========================================================================================*
    	private bool ChkZkbn_0to100(string H_Zkbn, short H_SGrp)
    	{
    		bool functionReturnValue = false;
    
    		functionReturnValue = false;

    		if (H_SGrp == 0 || H_SGrp == 1 || H_SGrp == 21 || H_SGrp == 22)
            {
    			if (H_Zkbn == "0")
                {
    				functionReturnValue = true;
    			}
    		}
    		return functionReturnValue;
    	}
    
    	// *===========================================================================================*
    	//    内部統制フラグ（会社DBデータベース）が設定されているかチェックします。
    	// 		【パラメータ】
    	// 		    1.ハンドル
    	// 		【返送値】
    	// 		　　 TRUE：内部統制を使用する
    	// 		　　FALSE：内部統制を使用しない
    	// *===========================================================================================*
    	private bool ChkJSOX_FNC(IDbConnection H_Con)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd = default(IDbCommand);
    		int        L_Val = 0;
    
    		L_Cmd             = H_Con.CreateCommand();
    		L_Cmd.Connection  = H_Con;    
    		L_Cmd.CommandText = "SELECT FLG FROM SETSTK WHERE IDNO = 1 AND RSEQ >= 1 ORDER BY RSEQ DESC ";    
    		L_Val             = Convert.ToInt32(L_Cmd.ExecuteScalar());    
    
    		if (L_Val > 0)
            {
    			functionReturnValue = true;
    			return functionReturnValue;
    		}
    		functionReturnValue = false;
    		return functionReturnValue;    
    	}
    
    	// *===========================================================================================*
    	//    内部統制フラグ（共通DBデータベース）が設定されているかチェック
    	// 		【パラメータ】
    	// 		    1.ハンドル
    	// 		【返送値】
    	// 		　　 TRUE：内部統制を使用する
    	// 		　　FALSE：内部統制を使用しない
    	// *===========================================================================================*
    	private bool ChkJSOX_Common_FNC(IDbConnection H_Con)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd = default(IDbCommand);
    		int        L_Val = 0;
    
    		L_Cmd             = H_Con.CreateCommand();
    		L_Cmd.Connection  = H_Con;    
    		L_Cmd.CommandText = "SELECT FLG FROM SETST WHERE IDNO = 1 AND RSEQ >= 1 ORDER BY RSEQ DESC ";    
    		L_Val             = Convert.ToInt32(L_Cmd.ExecuteScalar());    
    
    		if (L_Val > 0)
            {
    			functionReturnValue = true;
    			return functionReturnValue;
    		}
    		functionReturnValue = false;
    		return functionReturnValue;    
    	}
    
    	// *===========================================================================================*
    	//    子仕訳の税額を対価から作成する科目であるかチェック
    	// 		【パラメータ】
    	// 		    1.対価使用フラグ（SY02：科目テーブル）
    	// 		    2.分離区分
    	// 		    3.課税区分
    	// 		    4.
    	// 		【返送値】
    	// 		　　 TRUE：対価から税額を作成する仕訳
    	// 		　　FALSE：本体仕訳から税額を作成する仕訳
    	// *===========================================================================================*
    	private bool ChkTaika_FNC(int H_SY02, short H_BKBN, short H_Zkb)
    	{
    		bool functionReturnValue = false;
    
    		// 対価入力フラグ有りで消費税自動生成仕訳かチェックします。
    		if (H_SY02 == 1 && (H_BKBN == 1 || H_BKBN == 2 || H_BKBN == 3))
            {
    			// 対価の入力可能なのみ
    			switch (H_Zkb)
                {
    				case 12:
    				case 14:
    				case 42:
    					functionReturnValue = true;
    					break;
    				default:
    					functionReturnValue = false;
    					break;
    			}
    		}
            else
            {
    			functionReturnValue = false;
    		}

    		return functionReturnValue;    
    	}
    
    	// *===========================================================================================*
    	//    税対象科目に指定された課税区分が自動判定課税区分の場合は使用可能な課税区分に変換
    	// 		【パラメータ】
    	// 		    1.借方科目
    	// 		    2.貸方科目
    	// 		    3.税対象科目に指定されている課税区分（返送値）
    	// *===========================================================================================*
    	private int ChkAUTOZeiKamoku_FNC(int H_RSY01, string H_SSY01, int H_Kubun)
    	{    
    		int L_ChgVal = 0;
    
    		L_ChgVal = H_Kubun;
    
    		// 自動判定課税区分の場合のみ変換
    		if (H_Kubun == 18 || H_Kubun == 19 || H_Kubun == 49)
            {
    			// 指定されている科目が仮払消費税を指定されている場合は仕入関係に変換（相手に仮受消費税を指定されている場合も同様）
    			if (H_RSY01 == 21 || H_SSY01 == "21")
                {
    				switch (H_Kubun)
                    {
    					case 18:
    						L_ChgVal = 11;
    						break;
    					case 19:
    						L_ChgVal = 13;
    						break;
    					case 49:
    						L_ChgVal = 41;
    						break;
    				}
    				// 相手に仮払消費税が指定されておらず、仮受消費税が指定されている場合は売上関係に変換
    			}
                else if ((H_RSY01 != 21 && H_SSY01 == "22") || (H_RSY01 == 22 && H_SSY01 != "22"))
                {
    				switch (H_Kubun)
                    {
    					case 18:
    						L_ChgVal = 12;
    						break;
    					case 19:
    						L_ChgVal = 14;
    						break;
    					case 49:
    						L_ChgVal = 42;
    						break;
    				}
    			}
    		}    
    		return L_ChgVal;    
    	}

        #region 外貨
        // *===========================================================================================*
        //    業務起動時の外貨システム使用状況のチェック処理
        // 		【パラメータ】
        // 		    1.共通DB用ハンドル
        //        　2.会社DB用ハンドル
        //          3.外貨システム使用フラグ（返送）
        //          4.処理期別の外貨システムの使用状況
        // 		【返送値】
        // 		　　 TRUE：論理チェックOK（外貨システムの使用状況は返送パラメータから判断）
        // 		　　FALSE：論理チェック不正（この値を取得した場合は業務を終了してください。）
        // *===========================================================================================*
        private bool ChkGaika_Use_FNC(IDbConnection H_Con_C, IDbConnection H_Con_Z, string H_CCOD, ref bool H_ReGaika, ref DataTable H_ReGactl, ref bool H_ReTableFlg)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand     L_Cmd         = default(IDbCommand);
    		int            L_Val         = 0;
    		IDbDataAdapter L_Adapter     = default(IDbDataAdapter);
    		DataSet        L_ds          = default(DataSet);
    		bool           L_SubsysTable = false;
    
    		// 返送値初期化
    		H_ReGaika           = false;
    		H_ReTableFlg        = true;
    		H_ReGactl           = null;
    		functionReturnValue = true;
    
    		// ①外貨システム使用チェック(会社別サブシステム)
    		L_Cmd             = H_Con_C.CreateCommand();
    		L_Val             = 0;
    		L_Cmd.CommandText = "SELECT COUNT(*) FROM SUBSYS WHERE SUBID = 170";
    		L_Val             = Convert.ToInt32(L_Cmd.ExecuteScalar());
    		if (L_Val == 0)
            {
    			H_ReGaika           = false;
    			functionReturnValue = false;
    			L_SubsysTable       = false;
    		}
            else
            {
    			L_SubsysTable = true;
    		}
    		L_Val             = 0;
    		L_Cmd.CommandText = "SELECT COUNT(*) FROM KSUBSYS WHERE CCOD = '" + H_CCOD + "' AND SUBID = 170";  // <--- PostgreSQL対応
    		L_Val             = Convert.ToInt32(L_Cmd.ExecuteScalar());
    		if (L_Val == 0)
            {
    			H_ReGaika = false;
    		}
            else
            {
    			H_ReGaika = true;
    			if (L_SubsysTable == false)
                {
    				// サブシステム存在しないのに会社別サブシステムで登録されている
    				functionReturnValue = false;
    				return functionReturnValue;
    			}
    		}
            // 外貨初期設定取得
// 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
//    		if (G_IsOracle) {
//    			L_Adapter = new OleDb.OleDbDataAdapter();
//    		} else {
//    			L_Adapter = new SqlDataAdapter();
//    		}
            L_Adapter = G_DbFactory.CreateDbDataAdapterAndSelectCommand(H_Con_Z, "SELECT KESN, F_USE, HSSW FROM GAIKACTL ORDER BY 1 DESC");
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

    		L_Adapter.SelectCommand             = H_Con_Z.CreateCommand();
    		L_Adapter.SelectCommand.Connection  = H_Con_Z;
    		L_Adapter.SelectCommand.CommandText = "SELECT KESN, F_USE, HSSW FROM GAIKACTL ORDER BY 1 DESC";
    		L_ds                                = new DataSet();
    		L_Adapter.Fill(L_ds);
    		if (L_ds.Tables.Count > 0)
            {
    			H_ReGactl           = L_ds.Tables[0];
    			functionReturnValue = true;
    		}
    		return functionReturnValue;
    	}
    
    	// *===========================================================================================*
    	//    指定されている科目が外貨科目として登録されているかチェック
    	//    ※整合性チェックは事前におこなっていることが前提です。
    	// 		【パラメータ】
    	//        　1.会社DB用ハンドル
    	//          2.該当仕訳データの処理期（伝票日付から判断）
    	//          3.科目内部コード
    	// 		【返送値】
    	// 		　　 TRUE：外貨科目として登録済み
    	// 		　　FALSE：外貨科目として未登録
    	// *===========================================================================================*
    	private bool ChkGaika_Kamoku_FNC(IDbConnection H_Con_Z, string H_KESN, string H_KICD)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd = default(IDbCommand);
    		int        L_Val = 0;
    
    		L_Cmd = H_Con_Z.CreateCommand();
    
    		// 外貨科目チェック
    		L_Cmd.CommandText = " SELECT COUNT(*) FROM KMKHEI WHERE KESN = :p AND KICD = '" + H_KICD.ToString() + "' AND HEIKBN = 1";
    		L_Cmd.Parameters.Clear();
    		AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  int.Parse(H_KESN));
   			ReplacePlaceHolder_FNC(ref L_Cmd);
    		L_Val = Convert.ToInt32(L_Cmd.ExecuteScalar());

    		if (L_Val > 0)
            {
    			functionReturnValue = false;
    			return functionReturnValue;
    		}    
    		functionReturnValue = true;
    		return functionReturnValue;    
    	}

    	// *===========================================================================================*
    	//    外貨関数を使用した場合に、外貨関連項目のチェック処理等
    	//
    	//       幣種を指定している場合は指定した幣種でチェックをおこないます。
    	//       幣種を指定していない場合は初期選択幣種を取得しチェックをおこないます。
    	// 		【パラメータ】
    	//        　  1.会社DB用ハンドル
    	//            2.該当仕訳データの処理期（伝票日付から判断）
    	//            3.科目内部コード
    	//            4.通貨コード（返送）
    	// 		【返送値】
    	// 		　　  3：貸借両科目に外貨科目が使用されている。         ←]
    	// 		　　  2：借方のみ外貨科目が使用されている。             ←]外貨仕訳
    	// 		　　  1：貸方のみ外貨科目が使用されている。             ←]
    	// 		　　  0：外貨科目未使用                                 ←]邦貨仕訳
    	// 		　　 -1：幣種エラー
    	// 		　　 -2：
    	// *===========================================================================================*
    	private int ChkGaika_Siwake_FNC(IDbConnection H_Con_Z, string H_KESN, string H_KICD_R, string H_KICD_S, ref string H_HEI_CD)
    	{
    		int functionReturnValue = 0;
    
    		IDbCommand L_Cmd      = default(IDbCommand);
    		string     L_HEI_CD_R = null;
    		string     L_HEI_CD_S = null;
    		int        L_Tani     = 0;
    		int        L_Syosu    = 0;
    
    		L_HEI_CD_R       = "";
    		L_HEI_CD_S       = "";
    		P_Int_GaikaTani  = 0;
    		P_Int_GaikaSyosu = 0;
    
    		L_Cmd = H_Con_Z.CreateCommand();

            #region 幣種が入力されている場合は科目幣種を取得
            if (string.IsNullOrEmpty(H_HEI_CD) == false)
            {
    			L_Cmd.CommandText = "SELECT HEI_CD FROM KMKHEI WHERE KESN = :p AND KICD = '" + H_KICD_R.ToString() + "' AND HEI_CD = '" + H_HEI_CD.ToString() + "'";  // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応(KICDに ' ' を付加)
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  int.Parse(H_KESN));

// 2020/06/26 Ver02.22.04 SQL文不備修正 --->
//    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_KICD_R);
// <--- 2020/06/26 Ver02.22.04 SQL文不備修正

    			ReplacePlaceHolder_FNC(ref L_Cmd);

// 2020/01/16 Ver01.19.05.9902 NullReference対応 --->
//              L_HEI_CD_R = (L_Cmd.ExecuteScalar()).ToString();
                if (L_Cmd.ExecuteScalar() == null)
                {
                    L_HEI_CD_R = "";
                }
                else
                {
                    L_HEI_CD_R = (L_Cmd.ExecuteScalar()).ToString();
                }
// <--- 2020/01/16 Ver01.19.05.9902 NullReference対応

    			L_Cmd.CommandText = "SELECT HEI_CD FROM KMKHEI WHERE KESN = :p AND KICD = '" + H_KICD_S.ToString() + "' AND HEI_CD = '" + H_HEI_CD.ToString() + "'";  // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応(KICDに ' ' を付加)
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32, int.Parse(H_KESN));

// 2020/06/26 Ver02.22.04 SQL文不備修正 --->
//    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_KICD_S);
// <--- 2020/06/26 Ver02.22.04 SQL文不備修正
    			
   				ReplacePlaceHolder_FNC(ref L_Cmd);

// 2020/01/16 Ver01.19.05.9902 NullReference対応 --->
//              L_HEI_CD_S = (L_Cmd.ExecuteScalar()).ToString();
                if (L_Cmd.ExecuteScalar() == null)
                {
                    L_HEI_CD_S = "";
                }
                else
                {
                    L_HEI_CD_S = (L_Cmd.ExecuteScalar()).ToString();
                }
// <--- 2020/01/16 Ver01.19.05.9902 NullReference対応

    			if (string.IsNullOrEmpty(L_HEI_CD_R) && string.IsNullOrEmpty(L_HEI_CD_S))
                {
    				// 貸借ともに登録されていない場合は、未登録エラー
    				functionReturnValue = -2;
    				return functionReturnValue;
    			}
    		}
            #endregion

            #region 科目幣種が取得されていない場合はデフォルト幣種を取得
            // 借方
            if (string.IsNullOrEmpty(L_HEI_CD_R))
            {
    			L_Cmd.CommandText = "SELECT HEI_CD FROM KMKHEI WHERE KESN = :p AND KICD = '" + H_KICD_R.ToString() + "'  AND HEIKBN = 1";  // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応(KICDに ' ' を付加)
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  int.Parse(H_KESN));

// 2020/06/26 Ver02.22.04 SQL文不備修正 --->
//    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_KICD_R);
// <--- 2020/06/26 Ver02.22.04 SQL文不備修正

   				ReplacePlaceHolder_FNC(ref L_Cmd);

                if (L_Cmd.ExecuteScalar() != null)
                {
                    L_HEI_CD_R = (L_Cmd.ExecuteScalar()).ToString();
                }
    		}
            // 貸方
    		if (string.IsNullOrEmpty(L_HEI_CD_S))
            {
    			L_Cmd.CommandText = "SELECT HEI_CD FROM KMKHEI WHERE KESN = :p AND KICD = '" + H_KICD_S.ToString() + "' AND HEIKBN = 1";  // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応(KICDに ' ' を付加)
    			L_Cmd.Parameters.Clear();
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  int.Parse(H_KESN));

// 2020/06/26 Ver02.22.04 SQL文不備修正 --->
//    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_KICD_S);
// <--- 2020/06/26 Ver02.22.04 SQL文不備修正

    			ReplacePlaceHolder_FNC(ref L_Cmd);

                if (L_Cmd.ExecuteScalar() != null)
                {
                    L_HEI_CD_S = (L_Cmd.ExecuteScalar()).ToString();
                }
    		}
    
    		H_HEI_CD = "";
    		if (string.IsNullOrEmpty(L_HEI_CD_R) && string.IsNullOrEmpty(L_HEI_CD_S))
            {
    			// 貸借ともに登録されていない場合は、邦貨仕訳
    			functionReturnValue = 0;
    			return functionReturnValue;
    		}
            else if (string.IsNullOrEmpty(L_HEI_CD_R) == false && string.IsNullOrEmpty(L_HEI_CD_S) == false && L_HEI_CD_R != L_HEI_CD_S)
            {
    			// 貸借の通貨コードが異なる場合はエラー処理
    			functionReturnValue = -1;
    			return functionReturnValue;
    		}
            else if (string.IsNullOrEmpty(L_HEI_CD_R) == false && string.IsNullOrEmpty(L_HEI_CD_S) == false && L_HEI_CD_R == L_HEI_CD_S)
            {
    			// 貸借両科目外貨（通貨コード同一）
    			functionReturnValue = 3;
    			H_HEI_CD = L_HEI_CD_R;
    		}
            else if (string.IsNullOrEmpty(L_HEI_CD_S) && string.IsNullOrEmpty(L_HEI_CD_R) == false)
            {
    			// 借方のみ外貨科目が入力されている
    			functionReturnValue = 2;
    			H_HEI_CD = L_HEI_CD_R;
    		}
            else if (string.IsNullOrEmpty(L_HEI_CD_R) && string.IsNullOrEmpty(L_HEI_CD_S) == false)
            {
    			// 貸方のみ外貨科目が入力されている
    			functionReturnValue = 1;
    			H_HEI_CD = L_HEI_CD_S;
    		}
            else
            {
    			return functionReturnValue;
    		}
            #endregion

            #region 通貨コードから該当科目の小数点以下の桁数及び換算単位を取得
            L_Cmd.CommandText = "SELECT TANI FROM USEHEI WHERE KESN = :p AND HEI_CD = '" + H_HEI_CD.ToString() + "'";
    		L_Cmd.Parameters.Clear();
    		AddParameter_FNC(ref L_Cmd, "@KESN",   DbType.Int32,  int.Parse(H_KESN));
    		ReplacePlaceHolder_FNC(ref L_Cmd);

    		L_Tani          = Convert.ToInt32(L_Cmd.ExecuteScalar());
    		P_Int_GaikaTani = L_Tani;
    
    		L_Cmd.CommandText = "SELECT SYOSU FROM USEHEI WHERE KESN = :p AND HEI_CD = '" + H_HEI_CD.ToString() + "'";
    		L_Cmd.Parameters.Clear();
    		AddParameter_FNC(ref L_Cmd, "@KESN",   DbType.Int32,  int.Parse(H_KESN));
    		ReplacePlaceHolder_FNC(ref L_Cmd);

    		L_Syosu          = Convert.ToInt32(L_Cmd.ExecuteScalar());
    		P_Int_GaikaSyosu = L_Syosu;
            #endregion

            return functionReturnValue;    
    	}
    
    	// *===========================================================================================*
    	//    指定値の小数点以下桁数を返送
    	// 		【パラメータ】
    	//        　1.値
    	// 		【返送値】
    	// 		　　  小数点以下桁数
    	// *===========================================================================================*
    	private int ChkCountDigit_FNC(object num)
    	{
    		int functionReturnValue = 0;
    
    		object numDec   = null;
    		object numDigit = null;
    		string strDigit = null;
    
    		// 絶対値を得る 
    		numDec   = Math.Abs(Convert.ToDecimal(num));
    		// 小数部だけを得る 
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    		numDigit = Convert.ToDecimal(numDec) - Convert.ToDecimal(Conversion.Fix(numDec));
    		numDigit = Convert.ToDecimal(numDec) - Math.Truncate(Convert.ToDecimal(numDec));
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    		// 数値の文字数をカウントして小数点桁数とする 
    		strDigit = Convert.ToString(numDigit);
    
    		if (strDigit == "0")
            {
    			functionReturnValue = 0;
    		}
            else
            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			functionReturnValue = Strings.Len(strDigit) - 2;
    			functionReturnValue = strDigit.Length - 2;
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    		}
    		return functionReturnValue;
    	}
    
    	// *===========================================================================================*
    	//    邦貨換算後の値を返送
    	// 		【パラメータ】
    	//        　1.外貨金額
    	//          2.レート
    	//          3.換算単位
    	//          4.邦貨換算端数処理
    	//          5.換算後金額
    	// 		【返送値】
    	// 		　　TRUE:換算処理OK　FALSE:換算処理不可（桁数オーバー）
    	// *===========================================================================================*
    	private bool Get_Gaika_Kanzan_FNC(object H_VALUE_G, decimal H_RATE, int H_TANI, int H_HSSW, ref long HR_Value)
    	{
    		bool functionReturnValue = false;
    
    		long   L_Value  = 0;    
    		object numDec   = null;
    		object numDigit = null;    
    		int    strDigit = 0;
    
    		// 絶対値を得る
            if (H_TANI == 0 || H_TANI == 1)
            {
                numDec = Math.Abs(Convert.ToDecimal(H_VALUE_G) * H_RATE);
            }
            else
            {
                numDec = Math.Abs((Convert.ToDecimal(H_VALUE_G) * H_RATE) / H_TANI);
            }
    
    		// 小数部だけを得る
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    		numDigit = Convert.ToDecimal(numDec) - Convert.ToDecimal(Conversion.Fix(numDec));
    		numDigit = Convert.ToDecimal(numDec) - Math.Truncate(Convert.ToDecimal(numDec));
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応

    		// 数値の文字数をカウントして小数点桁数とする
    		strDigit = Convert.ToString(numDigit).Length;
    
    		if (strDigit == 0)
            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			HR_Value = Convert.ToInt64(Strings.FormatNumber(numDec));
    			HR_Value = Convert.ToInt64(numDec);
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    		}
            else
            {
                #region 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
                //                if (H_HSSW == 0)
                //                {
                //                    HR_Value = Convert.ToInt64(Strings.FormatNumber((long)numDec - (long)numDigit));
                //                }
                //                else if (H_HSSW == 1)
                //                {
                //                    HR_Value = Convert.ToInt64(Strings.FormatNumber((long)numDec - (long)numDigit) + 1);
                //                }
                //                else
                //                {
                //                    L_Value = Convert.ToInt64(Strings.Format(numDigit, "0.0"));
                //                    if (L_Value > 0 && L_Value < 0.5)
                //                    {
                //                        HR_Value = Convert.ToInt64(Strings.FormatNumber((long)numDec - (long)numDigit));
                //                    }
                //                    else
                //                    {
                //                        HR_Value = Convert.ToInt64(Strings.FormatNumber((long)numDec - (long)numDigit) + 1);
                //                    }
                //                }
                #endregion
                if (H_HSSW == 0)       // 切り捨て
                {
                    HR_Value = Convert.ToInt64(Convert.ToDouble(numDec) - Convert.ToDouble(numDigit));
                }
                else if (H_HSSW == 1)  // 切り上げ
                {
                    HR_Value = Convert.ToInt64(Convert.ToDouble(numDec) - Convert.ToDouble(numDigit) + 1);
                }
                else                   // 四捨五入
                {
                    L_Value = Convert.ToInt64(string.Format("0.0", numDigit));
                    if (L_Value > 0 && L_Value < 0.5)
                    {
                        HR_Value = Convert.ToInt64(Convert.ToDouble(numDec) - Convert.ToDouble(numDigit));
                    }
                    else
                    {
                        HR_Value = Convert.ToInt64(Convert.ToDouble(numDec) - Convert.ToDouble(numDigit) + 1);
                    }
                }
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
            }

    		if (Convert.ToDecimal(H_VALUE_G) < 0)
            {
//    			L_Value  = L_Value  * -1;
    			HR_Value = HR_Value * -1;
    		}
    
    		if (HR_Value.ToString().Length > 13)
            {
    			functionReturnValue = false;
    		}
            else
            {
    			functionReturnValue = true;
    		}
    		return functionReturnValue;
    	}
        #endregion

        // ==================================================================================================================
        //  「伝票入力設定」
        //       起票者・起票部門・ＨＦ１～10　未入力チェック
        // ==================================================================================================================
        private void GetCCINFOMNTOption_SUB(IDbConnection H_Con)
    	{
    		IDbDataAdapter L_Adapter = default(IDbDataAdapter);
            string         L_Sql     = null;    
    		DataSet        L_ds      = default(DataSet);
    		DataTable      L_dt      = default(DataTable);
    		DataRow[]      L_Rows    = null;
    
    		L_Sql = "SELECT KEYNM2, IDATA FROM OPTION1 WHERE PRGID ='CCINFOMNT' AND USNO = '10000' AND KEYNM1 = 'DMNTFRIV'";

            #region 2020/03/06 Ver02.19.05.9901 PostgreSQL対応 --->    
////            if (G_IsOracle)
//            {
////    			L_Adapter = new OleDb.OleDbDataAdapter();
////    			L_Adapter.SelectCommand = new SqlCommand(L_Sql, H_Con);
//    		}
//            else
//            {
//                SqlConnection S_Con     = (SqlConnection)H_Con;
//    			L_Adapter               = new SqlDataAdapter();
//    			L_Adapter.SelectCommand = new SqlCommand(L_Sql, S_Con);
//    		}
            #endregion
            L_Adapter = G_DbFactory.CreateDbDataAdapterAndSelectCommand(H_Con, L_Sql);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応            

            L_ds = new DataSet();
    		L_dt = new DataTable();
    		try
            {
    			L_Adapter.Fill(L_ds);
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_ds.Tables.Count > 0)
            {
    			L_dt = L_ds.Tables[0];
    		}
            else
            {
    			// 設定なし
    			return;
    		}
    
    		L_Rows = L_dt.Select("KEYNM2 = 'KIHYOSYA_MI'");
    		if (L_Rows.Length > 0)
            {
    			P_KIHYOSYA_MI = Convert.ToInt32(L_Rows[0][1]);
    		}
            else
            {
    			P_KIHYOSYA_MI = 0;
    		}

    		L_Rows = L_dt.Select("KEYNM2 = 'KIHYOBMN_MI'");
    		if (L_Rows.Length > 0)
            {
    			P_KIHYOBMN_MI = Convert.ToInt32(L_Rows[0][1]);
    		}
            else
            {
    			P_KIHYOBMN_MI = 0;
    		}

// 2022/09/22 Ver02.25.01 AT-OCR ＨＦ未入力チェック「しない」対応 --->
            if (P_SKUBUN != (int)eSKUBUN.SKUBUN_AIOCR)
            {
// <---
                L_Rows = L_dt.Select("KEYNM2 = 'HDF1'");
                if (L_Rows.Length > 0)
                {
                    P_HF1_MI = Convert.ToInt32(L_Rows[0][1]);
                } else {
                    P_HF1_MI = 0;
                }

                L_Rows = L_dt.Select("KEYNM2 = 'HDF2'");
                if (L_Rows.Length > 0)
                {
                    P_HF2_MI = Convert.ToInt32(L_Rows[0][1]);
                }
                else
                {
                    P_HF2_MI = 0;
                }

                L_Rows = L_dt.Select("KEYNM2 = 'HDF3'");
                if (L_Rows.Length > 0)
                {
                    P_HF3_MI = Convert.ToInt32(L_Rows[0][1]);
                }
                else
                {
                    P_HF3_MI = 0;
                }

                L_Rows = L_dt.Select("KEYNM2 = 'HDF4'");
                if (L_Rows.Length > 0)
                {
                    P_HF4_MI = Convert.ToInt32(L_Rows[0][1]);
                }
                else
                {
                    P_HF4_MI = 0;
                }

                L_Rows = L_dt.Select("KEYNM2 = 'HDF5'");
                if (L_Rows.Length > 0)
                {
                    P_HF5_MI = Convert.ToInt32(L_Rows[0][1]);
                }
                else
                {
                    P_HF5_MI = 0;
                }

                L_Rows = L_dt.Select("KEYNM2 = 'HDF6'");
                if (L_Rows.Length > 0)
                {
                    P_HF6_MI = Convert.ToInt32(L_Rows[0][1]);
                }
                else
                {
                    P_HF6_MI = 0;
                }

                L_Rows = L_dt.Select("KEYNM2 = 'HDF7'");
                if (L_Rows.Length > 0)
                {
                    P_HF7_MI = Convert.ToInt32(L_Rows[0][1]);
                }
                else
                {
                    P_HF7_MI = 0;
                }

                L_Rows = L_dt.Select("KEYNM2 = 'HDF8'");
                if (L_Rows.Length > 0)
                {
                    P_HF8_MI = Convert.ToInt32(L_Rows[0][1]);
                }
                else
                {
                    P_HF8_MI = 0;
                }

                L_Rows = L_dt.Select("KEYNM2 = 'HDF9'");
                if (L_Rows.Length > 0)
                {
                    P_HF9_MI = Convert.ToInt32(L_Rows[0][1]);
                }
                else
                {
                    P_HF9_MI = 0;
                }

                L_Rows = L_dt.Select("KEYNM2 = 'HDF10'");
                if (L_Rows.Length > 0)
                {
                    P_HF10_MI = Convert.ToInt32(L_Rows[0][1]);
                }
                else
                {
                    P_HF10_MI = 0;
                }
// --->
            }
            // AT-OCRではＨＦ未入力チェック「しない」固定（AT-OCRからＨＦの転記は未対応）
            else
            {
                P_HF1_MI  = 0;
                P_HF2_MI  = 0;
                P_HF3_MI  = 0;
                P_HF4_MI  = 0;
                P_HF5_MI  = 0;
                P_HF6_MI  = 0;
                P_HF7_MI  = 0;
                P_HF8_MI  = 0;
                P_HF9_MI  = 0;
                P_HF10_MI = 0;
            }
// <--- 2022/09/22 Ver02.25.01 AT-OCR ＨＦ未入力チェック「しない」対応
    
    		// *-リンク情報対応
    		L_Rows = L_dt.Select("KEYNM2 = 'PDF'");
    		if (L_Rows.Length > 0)
            {
    			P_PDF = Convert.ToInt32(L_Rows[0][1]);
    		}
            else
            {
    			P_PDF = 0;
    		}

    		L_Rows = L_dt.Select("KEYNM2 = 'XPS'");
    		if (L_Rows.Length > 0)
            {
    			P_XPS = Convert.ToInt32(L_Rows[0][1]);
    		}
            else
            {
    			P_XPS = 0;
    		}

    		L_Rows = L_dt.Select("KEYNM2 = 'OXPS'");
    		if (L_Rows.Length > 0)
            {
    			P_OXPS = Convert.ToInt32(L_Rows[0][1]);
    		}
            else
            {
    			P_OXPS = 0;
    		}

    		L_Rows = L_dt.Select("KEYNM2 = 'DOCDOCX'");
    		if (L_Rows.Length > 0)
            {
    			P_DOCDOCX = Convert.ToInt32(L_Rows[0][1]);
    		}
            else
            {
    			P_DOCDOCX = 0;
    		}

    		L_Rows = L_dt.Select("KEYNM2 = 'XLSXLSX'");
    		if (L_Rows.Length > 0)
            {
    			P_XLSXLSX = Convert.ToInt32(L_Rows[0][1]);
    		}
            else
            {
    			P_XLSXLSX = 0;
    		}

// 2022/05/27 Ver02.24.02 拡張子MSG対応不足 --->
            L_Rows = L_dt.Select("KEYNM2 = 'MSG'");
            if (L_Rows.Length > 0)
            {
                P_MSG = Convert.ToInt32(L_Rows[0][1]);
            }
            else
            {
                P_MSG = 0;
            }
// <--- 2022/05/27 Ver02.24.02 拡張子MSG対応不足

    		L_Rows = L_dt.Select("KEYNM2 = 'SUB_TENK'");
    		if (L_Rows.Length > 0)
            {
    			P_SUB_TENK = Convert.ToInt32(L_Rows[0][1]);
    		}
            else
            {
    			P_SUB_TENK = 0;
    		}
    	}
    
    	// *===========================================================================================*
    	// 【説明】
    	//    ImpMain_FNCと同じ
    	//    テキストファイルの変わりにデータテーブルをループするように変更
    	//    外貨のときのH_Kanzanの整合値チェックをChkPara_FNC内から外だし
    	//    上記以外の内部処理はそのまま
    	// *===========================================================================================*
// ▼ ツルハ様カスタマイズ ▼
//    	private int ImpMain_M_FNC(string H_CCOD, int H_PrcFlg, int H_DFUK, int H_LogFlg, ref C_SetData H_Siwake, string H_LogPath, string H_LogFname, int H_RNo, int H_RUCOD, int H_SKUBUN,
//    	                          bool H_Kakutyo, int H_IJPT = 0, int H_Kanzan = 0, string H_Kakutei = "", int H_IsAuto = 0)
        private int ImpMain_M_FNC(string H_CCOD, int H_PrcFlg, int H_DFUK, int H_LogFlg, ref C_SetData H_Siwake, string H_LogPath, string H_LogFname, int H_RNo, int H_RUCOD, int H_SKUBUN,
                                  bool H_Kakutyo, int H_IJPT = 0, int H_Kanzan = 0, string H_Kakutei = "", string H_SYBMNCD = "", int H_IsAuto = 0)
// ▲ ツルハ様カスタマイズ ▲
        {
            #region 変数初期化
            int functionReturnValue = 0;
    
    		int                  L_Result          = 0;
    		bool                 L_ImpFlg          = false;
    		bool                 L_ChkFlg          = false;
    		bool                 L_LogFlg          = false;
    		string               L_LogFileName     = null;
    		StreamWriter         L_LogWriter       = null;
    		StreamWriter         L_LogWriter_1     = null;
    		// 処理情報ログ用    
    		StreamWriter         L_LogWriter_2     = null;
    		// 不良伝票ログ用    
    		DataTable            L_dtKaisya        = null;
    		DataTable            L_dtVolum         = null;
    		DataTable            L_dtSvolum        = null;
    		DataTable            L_dtJfctl         = null;
    		DataTable            L_dtVolum2        = null;
    		DataTable            L_dtKname         = null;
    		DataTable            L_dtSubject       = null;
    		DataTable            L_dtUsrtbl        = null;
    		DataTable            L_dtComcnt        = null;
    		DataTable            L_dtUsrsec        = null;
    		DataTable            L_dtSritu         = null;
    		DataTable            L_dtTantou        = null;
    		DataTable            L_dtSnctl         = null;
    		DataTable            L_dtDcno          = null;
    		short                L_Touki           = 0;
    		IDbConnection        L_Con             = null;
    		string[]             L_Data            = null;
    		int                  L_LineCnt         = 0;
    		int                  L_OKCnt           = 0;
    		int                  L_NGCnt           = 0;
    		int                  L_ImportCnt       = 0;
    		int                  L_ErrCnt          = 0;
    		structERRORLOG[]     L_ErrLog          = null;
    		structZDATA          L_Zdata           = new structZDATA();
    		structDENPYO         L_DenInfo         = new structDENPYO();
    		short                L_Juse            = 0;
    		int                  L_I               = 0;
    		structZDATA          L_Zdata_Bunri     = new structZDATA();
    		int                  L_BunriOk_R       = 0;
    		int                  L_BunriOk_S       = 0;
    		structSVOLKM[]       L_SVolumKm        = new structSVOLKM[9];
    		bool                 L_Khkzan          = false;
    		int                  L_Gaikakamoku_Flg = 0;
    		// 金額アンマッチﾁｪｯｸ用（※ChkImpData_FNC関数ﾊﾟﾗﾒｰﾀｰ用でこちらの関数では下記変数の値を使用しません。）
    		string[]             L_Zkbn            = new string[2];    
    		// 起動履歴対応      
    		int                  L_Rireki          = 0;
    
    		// 仕訳データを下記変数に一括して取得する
    		ArrayList            L_SWK_Data        = new ArrayList();
    		// 仕訳データを格納{仕訳データと同一}
    		structDEN_INFO[]     L_Den_Data        = null;
    		long                 L_SWK_Value       = 0;
    		int                  L_SWK_Record      = 0;
    		ArrayList            L_SWK_DenNo       = new ArrayList();

    		// 各仕訳行が何伝票目かを判別する配列{仕訳の行番号,L_DEN_DataのインデックスNo}
    		structDEN_ERRORLOG[] L_Den_ErrLog = null;

    		// 不良伝票エラーログ用
    		int                  L_AllCnt          = 0;
    		bool                 L_CntFlg          = false;
    		bool                 L_Denpyo_End      = false;
    		bool                 L_ImpBreak        = true;
    		// 取込中のエラー処理用
    		DataTable            L_SiwakeTb        = default(DataTable);
    		DataRow              L_SiwakeRow       = default(DataRow);
    		short                L_Dkei            = 0;
    		int                  L_Den_ErriFlg     = 1;
    		IDbConnection        L_Con_2           = null;
    		short                L_kesn            = 13;
                                 
    		int                  L_ZeroSiwake_R    = 0;
    		int                  L_ZeroSiwake_S    = 0;
                                 
    		IDbCommand           L_Cmd             = null;
    		IDbConnection        L_ConCommon       = null;

    		Microsoft.Win32.RegistryKey regkey    = null;
    		object               obj               = null;
    		string               strRegVal         = null;
                                 
    		// 行区切り          
    		string L_GsepText                      = null;
                                 
    		// *-リンク情報      
    		ArrayList            L_LINK_Data       = new ArrayList();
    		DataTable            L_LinkTb          = default(DataTable);
    		DataRow              L_LinkRow         = default(DataRow);
    		string[]             L_DataLink        = null;
    		strucERRORLOGLINK[]  L_ErrLogink       = null;
    		// -*リンク情報      
                                 
    		bool                 L_SiwakeColumnFlg = false;
    		bool                 L_SRITUColumnFlg  = false;
                                 
    		DataTable            L_AIOCRTb         = default(DataTable);
            #endregion

            try
            {
                #region 行区切り使用判断フラグ
                    if (H_SKUBUN == (int)eSKUBUN.SKUBUN_WORK_FLOW || H_SKUBUN == (int)eSKUBUN.SKUBUN_INFOMART || H_SKUBUN == (int)eSKUBUN.SKUBUN_AIOCR)
                {
    				P_b_GsepFC = true;    
    			}
                else
                {
    				P_b_GsepFC = false;
    			}    
    
    			if (H_RNo == 0) { P_DataLen = 61;  }
                else            { P_DataLen = 108; }
                #endregion

                #region ３コード自動登録判断
                //  自動登録の引数をなくして、仕訳区分[41:ワークフロー][51:BtoBプラットフォーム連携]かで判定するように変更
                if ((H_SKUBUN == (int)eSKUBUN.SKUBUN_WORK_FLOW || H_SKUBUN == (int)eSKUBUN.SKUBUN_INFOMART))
                {
    				H_IsAuto = 1;
    			}
                else
                {
    				H_IsAuto = 0;
    			}
                #endregion

                #region 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			H_CCOD     = Strings.Trim(H_CCOD);
//    			H_LogPath  = Strings.Trim(H_LogPath);
//    			H_LogFname = Strings.Trim(H_LogFname);
//    			H_Kakutei  = Strings.Trim(H_Kakutei);
                #endregion
                H_CCOD     = H_CCOD.Trim();
    			H_LogPath  = H_LogPath.Trim();
    			H_LogFname = H_LogFname.Trim();
    			H_Kakutei  = H_Kakutei.Trim();
// ▼ ツルハ様カスタマイズ ▼
                H_SYBMNCD  = H_SYBMNCD.Trim();
// ▲ ツルハ様カスタマイズ ▲
                // <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応

                #region ** パラメータチェック
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.INFO, "パラメータチェック");
                //*
                mLogger.LogClose();
                //*
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

// ▼ ツルハ様カスタマイズ ▼
//              L_Result = ChkPara_FNC(H_CCOD, H_PrcFlg, H_DFUK, H_LogFlg, "", "", H_LogPath, H_LogFname, H_RNo, H_IJPT, H_Kanzan, H_Kakutei, H_RUCOD, 0);
                L_Result = ChkPara_FNC(H_CCOD, H_PrcFlg, H_DFUK, H_LogFlg, "", "", H_LogPath, H_LogFname, H_RNo, H_IJPT, H_Kanzan, H_Kakutei, H_SYBMNCD, H_RUCOD, 0);
// ▲ ツルハ様カスタマイズ ▲

    			if (L_Result != MC_RESULT_OK)
                {
    				functionReturnValue = L_Result;
    				return functionReturnValue;
    			}

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.OK, "パラメータチェック");
                //*
                mLogger.LogClose();
                //*

// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                #endregion

                // 引数追加に伴うチェック
                #region ** 処理区分チェック
                // 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.INFO, "処理区分チェック");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                L_Result = ChkSKUBUN_FNC(H_SKUBUN);
    			if (L_Result != MC_RESULT_OK)
                {
    				functionReturnValue = L_Result;
    				return functionReturnValue;
    			}
    
    			switch (H_PrcFlg)
                {
    				case 0:
    					L_ImpFlg = true;
    					L_ChkFlg = true;
    					break;
    				case 1:
    					L_ImpFlg = false;
    					L_ChkFlg = true;
    					break;
    				case 2:
    					L_ImpFlg = true;
    					L_ChkFlg = false;
    					break;
    			}
    			if (L_ChkFlg == true)
                {
    				if (H_LogFlg == 1 || H_LogFlg == 11)
                    {
    					L_LogFlg = true;
    				}
                    else
                    {
    					L_LogFlg = false;
    				}
    			}
                else
                {
    				L_LogFlg = false;
    			}

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.OK, "処理区分チェック");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                #endregion

                #region レジストリ取得
                // 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.INFO, "レジストリ取得");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                // 2020/05/31 
                regkey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey("SOFTWARE\\\\（株）ＩＣＳパートナーズ\\\\Prj312");
    			obj    = regkey.GetValue("DBEngine");

                #region 2020/03/06 Ver02.19.05.9901 PostgreSQL対応 --->
//    			if (strRegVal == "1")
//                {
//    				G_IsOracle = true;
//    			}
//                else
//                {
//    				G_IsOracle = false;
//    			}
//    			if (G_IsOracle)
//                {
//    				obj       = regkey.GetValue("TYPE");
//    				strRegVal = obj.ToString();
//    				if (strRegVal == "1")
//                    {
//    					G_ServerName = "localhost";
//    					G_ServerPort = "";
//    				}
//                    else
//                    {
//    					obj          = regkey.GetValue("SVIP");
//    					strRegVal    = obj.ToString();
//    					G_ServerName = strRegVal;
//    					obj          = regkey.GetValue("SVPORT");
//    					strRegVal    = obj.ToString();
//    					if (strRegVal != "1521" && string.IsNullOrEmpty(strRegVal) == false)
//                        {
//    						G_ServerPort = ":" + strRegVal;
//    					}
//                        else
//                        {
//    						G_ServerPort = "";
//    					}
//    				}
//    			}
//                else
//                {
//    				obj       = regkey.GetValue("TYPE");
//    				strRegVal = obj.ToString();

//    				if (strRegVal == "1")
//                    {
//    					G_ServerName = "(local)";
//    					G_ServerPort = "";
//    				}
//                    else
//                    {
//    					obj          = regkey.GetValue("SVIP");
//    					strRegVal    = obj.ToString();
//    					G_ServerName = strRegVal;
//    					obj          = regkey.GetValue("SVPORT");
//    					strRegVal    = obj.ToString();
//    					if (strRegVal != "1434" && string.IsNullOrEmpty(strRegVal) == false)
//                        {
//    						G_ServerPort = "," + strRegVal;
//    					}
//                        else
//                        {
//    						G_ServerPort = "";
//    					}
//    				}
//    			}
                #endregion
                strRegVal = obj.ToString();
                if (strRegVal == "3")
                {
                    G_IsPostgre = true;
                }
                else
                {
                    G_IsPostgre = false;
                }

                RegistryInfo registryInfo = new RegistryInfo();
                obj                     = regkey.GetValue("TYPE");
                registryInfo.Type       = obj.ToString();
                obj                     = regkey.GetValue("SVIP");
                registryInfo.ServerName = obj.ToString();
                obj                     = regkey.GetValue("SVPORT");
                registryInfo.ServerPort = obj.ToString();

                if (G_IsPostgre)
                {
                    G_DbFactory = new DbFactoryForNpgsql(registryInfo);
                }
                else
                {
                    G_DbFactory = new DbFactoryForSqlServer(registryInfo);
                }
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
    
    			// *-リンク情報
    			obj = regkey.GetValue("LINKdir");
    			if (obj == null)
                {
    				G_LinkPass = "";
    			}
                else
                {
    				strRegVal  = obj.ToString();
    				G_LinkPass = strRegVal;
    			}
    
    			// *-e文書(スキャナ)、e文書(電子取引)(タイムスタンプあり)
    			obj = regkey.GetValue("EDOCdir");
    			if (obj == null)
                {
    				G_EdocPass = "";
    			}
                else
                {
    				strRegVal  = obj.ToString();
    				G_EdocPass = strRegVal;
    			}

// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応 --->
                // *-e文書(電子取引)(タイムスタンプなし)
                obj = regkey.GetValue("EDOCNAdir");
                if (obj == null)
                {
                    G_EdocNaPass = "";
                }
                else
                {
                    strRegVal    = obj.ToString();
                    G_EdocNaPass = strRegVal;
                }
// <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応(証明済みe文書)

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.OK, "レジストリ取得");
                //*
                mLogger.LogClose();
                //*
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                #endregion

                #region 共通DB接続
                try
                {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                    mLogger.LogWrite(Logger.Level.INFO, "共通DB接続");
                    //*
                    mLogger.LogClose();
                    //*

                    // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                    #region 2020/03/06 Ver02.20.01.9901 PostgreSQL対応 --->
                    //                    if (G_IsOracle){
                    //    					// Oracle版処理
                    ////    					L_ConCommon = new OleDb.OleDbConnection(CreateConnectionStriong_Oracle());
                    ////    					L_ConCommon.Open();
                    ////    					SetCurrentSchema_SUB(L_ConCommon, "ICSP_312C9999");
                    //    				} else {
                    //    					L_ConCommon = new SqlConnection(CreateConnectionStriong("ICSP_312C9999"));
                    //    					L_ConCommon.Open();
                    //    					SetUserIdToConnectionInfo_SUB(L_ConCommon, H_RUCOD.ToString());
                    //    					SetLockTimeOut_SUB(L_ConCommon);
                    //    				}
                    #endregion
                    L_ConCommon = G_DbFactory.CreateAndOpenDbConnection("ICSP_312C9999", H_RUCOD);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                    mLogger.LogWrite(Logger.Level.OK, "共通DB接続");
                    //*
                    mLogger.LogClose();
                    //*

                    // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                }
                catch (Exception ex)
                {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                    mLogger.LogWrite(Logger.Level.ERROR, "共通DB接続 " + ex.Message);
                    //*
                    mLogger.LogClose();
                    //*

                    // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                    functionReturnValue = MC_RESULT_ERR_DBCONNECT;
    				return functionReturnValue;
    			}
                #endregion
                #region ** 会社情報取得
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.INFO, "会社情報取得");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                L_dtKaisya = GetKaisyaInfo_FNC(L_ConCommon, H_CCOD);
    			if (L_dtKaisya.Rows.Count == 0)
                {
    				functionReturnValue = MC_RESULT_ERR_CCODNOTEXIST;
    				return functionReturnValue;
    			}    
    			L_Touki = Convert.ToInt16(L_dtKaisya.Rows[0][(int)eKAISYA.KAISYA_KESN]);

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.OK, "会社情報取得");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                #endregion
                #region ** 会社DB接続
                try
                {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                    mLogger.LogWrite(Logger.Level.INFO, "会社DB接続");
                    //*
                    mLogger.LogClose();
                    //*

                    // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                    #region 2020/03/06 Ver02.20.01.9901 PosgtreSQL対応 --->
                    //                    if (G_IsOracle) {
                    //    					// Oracle版処理
                    ////    					G_KaisyaDb = "ICSP_312Z" + H_CCOD;
                    ////    					L_Con = new OleDb.OleDbConnection(CreateConnectionStriong_Oracle());
                    ////    					L_Con.Open();
                    ////    					SetCurrentSchema_SUB(L_Con, G_KaisyaDb);
                    //    				} else {
                    //    					G_KaisyaDb = "ICSP_312Z" + H_CCOD;
                    //    					L_Con = new SqlConnection(CreateConnectionStriong(G_KaisyaDb));
                    //    					L_Con.Open();
                    //    					SetUserIdToConnectionInfo_SUB(L_Con, H_RUCOD.ToString());
                    //    					SetLockTimeOut_SUB(L_Con);
                    //    				}
                    #endregion
                    G_KaisyaDb = "ICSP_312Z" + H_CCOD;
                    L_Con      = G_DbFactory.CreateAndOpenDbConnection(G_KaisyaDb, H_RUCOD);
// <--- 2020/03/06 Ver02.20.01.9901 PosgtreSQL対応
                }
                catch (Exception ex)
                {

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                    mLogger.LogWrite(Logger.Level.ERROR, "会社DB接続 " + ex.Message);
                    //*
                    mLogger.LogClose();
                    //*

                    // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                    functionReturnValue = MC_RESULT_ERR_DBCONNECT;
    				return functionReturnValue;
    			}
                
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.OK, "会社DB接続");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                #endregion

                // 仕訳履歴情報を取得
                CheckShiwakeRireki(L_Con);

                #region 消込システム使用チェック
//              DBSUB.Kesi_Check(L_ConCommon, L_Con, H_CCOD, G_IsOracle);
                DBSUB.Kesi_Check(L_ConCommon, L_Con, H_CCOD, G_IsPostgre);      // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
    			if (H_Kakutyo == true)
                {
//    				P_Int_Sub900 = DBSUB.CheckSubsys(L_ConCommon, H_CCOD, 900, G_IsOracle);
//    				P_Int_Sub901 = DBSUB.CheckSubsys(L_ConCommon, H_CCOD, 901, G_IsOracle);
                    P_Int_Sub900 = DBSUB.CheckSubsys(L_ConCommon, H_CCOD, 900, G_IsPostgre);      // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
    				P_Int_Sub901 = DBSUB.CheckSubsys(L_ConCommon, H_CCOD, 901, G_IsPostgre);      // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
    			}

    			InitKSKMK(L_Con);   // 消込対象科目の取得
                #endregion

                #region 内部統制
                if (ChkJSOX_FNC(L_Con) == true)
                {
    				P_JSOX = true;
    			}
                else
                {
    				P_JSOX = false;
    			}
                #endregion

                // 電子帳簿保存
    			InitVolumDflg(L_Con);           

                // ** 決算期情報・月情報・科目一覧取得
                GetKiInfo_SUB(L_Con, L_Touki, ref L_dtVolum, ref L_dtSvolum, ref L_dtJfctl, ref L_dtVolum2, ref L_dtKname, ref L_dtSubject);

                #region 伝票入力レイアウトパターン存在チェック
                P_IJPT = 0;
    			if (H_IJPT != 0)
                {
    				if (Chk_IJPT_FNC(L_Con, L_Touki, H_IJPT, H_DFUK) == false)
                    {
    					functionReturnValue = MC_RESULT_ERR_IJPT_NO;
    					return functionReturnValue;
    				}
                    else
                    {
    					P_IJPT = H_IJPT;
    				}
    			}
                #endregion

                // ** 部署入力データの場合、承認初期設定取得
                if (H_Kakutyo == true) { L_dtSnctl = GetSnctl_FNC(L_Con, L_Touki); }

                #region 軽減税率対応チェック
                // 消費税税率テーブル（SRITU）に、軽減税率区分（KEIGEN）カラムが追加されているかどうか
                // 仕訳テーブルに軽減税率用のカラムが追加されているかどうかをチェック
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.INFO, "軽減税率カラム存在チェック");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                CheckKeigen(L_ConCommon, L_Con, H_Kakutyo, ref L_SiwakeColumnFlg, ref L_SRITUColumnFlg);
    			if (L_SiwakeColumnFlg == false || L_SRITUColumnFlg == false)
                {
    				functionReturnValue = MC_RESULT_ERR_KEIGENKUBUN;
    				return functionReturnValue;
    			}
                // --->Ver01.16.02

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.OK, "軽減税率カラム存在チェック");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                #endregion

                #region ** ユーザー一覧・税率・担当者一覧取得
                if (L_ChkFlg == true)
                {
    				GetUsrAndSritu_SUB(L_ConCommon, H_CCOD, ref L_dtUsrtbl, ref L_dtComcnt, ref L_dtUsrsec, ref L_dtSritu, L_dtKaisya, H_RUCOD, ref L_Rireki, H_Kakutyo, L_ImpFlg);
    				switch (L_Rireki)
                    {
    					case 0:
    						break;
    					// 正常
    					case -1:
    						// 起動ユーザー不正
    						functionReturnValue = MC_RESULT_ERR_RirekiUcod;
    						return functionReturnValue;
    					case -2:
    						// 起動ユーザー会社制限
    						functionReturnValue = MC_RESULT_ERR_RUcodKaisyaNo;
    						return functionReturnValue;
    					case 1 - 10:
    						// DB接続 or 更新エラー
    						functionReturnValue = MC_RESULT_ERR_DBWRITE_Rireki;
    						return functionReturnValue;
    				}
    				L_dtTantou = GetTantou_FNC(L_Con);
    			}
                #endregion

// Ver02.26.01 インボイス対応 --->
                L_Cmd = L_Con.CreateCommand();
                menzeiZigyousyaTrcdList = GetMenzeiZigyousyaTorihikisakiList(L_Con);
// <--- Ver02.26.01 インボイス対応

                #region ** 科目摘要残高更新チェック
                if (L_ImpFlg == true)
                {
    				if (H_Kakutyo == true) { L_Khkzan = false; }
                    else                   { L_Khkzan = true;  }
    			}
                #endregion

                #region 外貨対応（起動時チェック処理）
                // Prj312--->
                ChkGaika_Use_FNC(L_ConCommon, L_Con, H_CCOD, ref P_b_GaikaSUB, ref P_GaiCtl, ref P_b_GaikaTable_Flg);
    			// If ChkGaika_Use_FNC(L_ConCommon, L_Con, H_CCOD, P_b_GaikaSUB, P_GaiCtl, P_b_GaikaTable_Flg) = False Then
    			//     P_b_GaikaFC = True
    			// Else
    			//     P_b_GaikaFC = P_b_GaikaSUB
    			// End If
    			// <---
    			if (P_b_GaikaFC == true)
                {
    				// 外貨換算フラグ(ChkPara_FNC内でのチェックを外だし)
    				if (!(H_Kanzan == 0 || H_Kanzan == 1))
                    {
    					functionReturnValue = MC_RESULT_ERR_KANZANFLG;
    					return functionReturnValue;
    				}
    				// 外貨関数使用時は換算フラグを変数に取得
    				if (H_Kanzan == 0) { P_b_Kanzan_Flg = false; }
                    else               { P_b_Kanzan_Flg = true;  }
    			}
                #endregion

                // *-01.07.01　外貨換算仕訳対応
//              DBSUB.CheckGSWKCHK(L_Con, G_IsOracle);
                DBSUB.CheckGSWKCHK(L_Con, G_IsPostgre);      // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
                // -*01.07.01
// Ver02.26.02 摘要120バイト対応(変更) --->
                DBSUB.CheckInvoice(L_Con, G_IsPostgre);
// <--- // Ver02.26.02 摘要120バイト対応(変更)

                #region ** ログファイル出力する場合    
                if (L_LogFlg == true)
                {
    				// ** ログファイル名生成
    				L_LogFileName = H_LogPath;
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				if (Strings.Right(L_LogFileName, 1) != "\\") {
    				if (L_LogFileName.Substring(L_LogFileName.Length - 1, 1) != "\\")
                    {
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					L_LogFileName = L_LogFileName + "\\";
    				}
    				L_LogFileName = L_LogFileName + H_LogFname;
    
    				// ** ユニバーサルフィールド名を項目名一覧にセット
    				SetHfUfName(L_dtVolum, H_RNo);
    			}
                #endregion

                #region 伝票ヘッダー変数初期化
                L_LineCnt   = 0;
    			L_OKCnt     = 0;
    			L_NGCnt     = 0;
    			L_ImportCnt = 0;
    
    			if (L_ImpFlg == true)
                {
    				L_DenInfo.KESN    = 0;
    				L_DenInfo.DKEI    = 0;
    				L_DenInfo.DYMD    = 0;
    				L_DenInfo.OrgDcno = "";
    				L_DenInfo.KYMD    = 0;
    				L_DenInfo.KBMN    = "";
    				L_DenInfo.KUSR    = "";
    				L_DenInfo.FUSR    = 0;
    			}
    
    			if ((L_ChkFlg == true) && (L_ImpFlg == false))
                {
    				L_dtDcno = new DataTable("DCNO");
    				L_dtDcno.Columns.Add("KESN", Type.GetType("System.Int16"));
    				L_dtDcno.Columns.Add("DKEI", Type.GetType("System.Int16"));
    				L_dtDcno.Columns.Add("DCNO", Type.GetType("System.Int32"));
    				L_dtDcno.Columns.Add("DYMD", Type.GetType("System.Int32"));
    			}
                #endregion

                #region 仕訳・リンク・AT-OCRデータ取得
                L_SiwakeTb = H_Siwake.GetSiwakeDt();
    			// *-リンク情報
//    			P_Int_SubEDOC = DBSUB.CheckSubsys(L_ConCommon, H_CCOD, 310, G_IsOracle);
                P_Int_SubEDOC = DBSUB.CheckSubsys(L_ConCommon, H_CCOD, 310, G_IsPostgre);    // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
    			L_LinkTb      = H_Siwake.GetLinkDt();
    			// -*リンク情報
    
    			// <---Ver01.17.04　2019/02/28　hirano　AI-OCR対応
    			L_AIOCRTb = H_Siwake.GetAIOCRDt();
                // --->Ver01.17.04
                #endregion

                #region データを配列に一括取得
                // 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.INFO, "仕訳データ配列取得");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                if (Get_SWK_M_Data(ref L_SWK_Data, ref L_Den_Data, ref L_SWK_DenNo, ref L_SWK_Value, ref L_SWK_Record, H_Siwake.GetSiwakeDt(), L_dtVolum2, H_Kakutyo, H_RNo) == false)
                {
    				L_Con.Close();
    				functionReturnValue = MC_RESULT_ERR_IMPFILEOPEN;
    				return functionReturnValue;
    			}
    			L_AllCnt = L_SWK_Data.Count;
                
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.OK, "仕訳データ配列取得");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                #endregion

                #region ログファイルを作成する場合は不良伝票及び不良仕訳ログを初期化
                if (L_LogFlg == true)
                {
    				if (L_LogWriter == null && L_LogWriter_2 == null)
                    {
    					if (LogWrite_Clear_FNC(L_LogFileName) == false)
                        {
    						// L_DataReader.Close()
    						L_Con.Close();
    						functionReturnValue = MC_RESULT_ERR_LOGFILEWRITE;
    					}
    				}
    			}
                #endregion

                #region ▼　チェック処理　▼
                L_CntFlg = true;

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.INFO, "データチェック処理");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                // インポートファイルを最終行まで読込    
                foreach (DataRow L_SiwakeRowLoop in L_SiwakeTb.Rows)
                {
                    L_SiwakeRow = L_SiwakeRowLoop;

    				L_LineCnt   = L_LineCnt + 1;
    				L_BunriOk_R = 0;
    				L_BunriOk_S = 0;
    
    				ColumnToAry(ref L_SiwakeRow, ref L_Data, ref H_RNo);
    
    				// ** データチェック
    				L_ErrCnt      = 0;
    				L_Den_ErriFlg = 1;

    				if (L_ChkFlg == true)
                    {
    					L_ErrCnt = ChkImpData_FNC(L_Data, L_Con, L_Touki, L_dtVolum, L_dtSvolum, L_dtJfctl, L_dtVolum2, L_dtKname, L_dtSubject, L_dtTantou, L_dtUsrtbl, L_dtComcnt,
                                                  L_dtUsrsec, L_dtSritu, L_dtDcno, ref L_ErrLog, H_Kakutyo, ref L_BunriOk_R, ref L_BunriOk_S, ref L_SVolumKm, ref L_Zkbn, ref L_Dkei,
                                                  ref L_kesn, (short)H_DFUK, H_RNo, false, L_dtSnctl, H_IsAuto);
    
    					L_SWK_Data[L_LineCnt - 1] = L_Data;

                        #region 取込処理用に分離フラグ設定保管
                        ((int[])(L_SWK_DenNo[L_LineCnt - 1]))[1] = L_BunriOk_R;
    					((int[])(L_SWK_DenNo[L_LineCnt - 1]))[2] = L_BunriOk_S;
    
    					((int[])(L_SWK_DenNo[L_LineCnt - 1]))[3] = P_ZeroSiwake[0];
    					((int[])(L_SWK_DenNo[L_LineCnt - 1]))[4] = P_ZeroSiwake[1];
                        #endregion
                        #region ■不良仕訳に対応した不良伝票ログ作成
                        if (L_ErrCnt > 0)
                        {
    						L_CntFlg = false;
    						if (Set_Den_Err_FNC(L_Den_Data, L_SWK_DenNo, L_LineCnt, MC_DEN_SUM_ERRLOG_FURYO, MC_DEN_COM_ERRLOG_FURYO, ref L_Den_ErrLog) == false)
                            {
    							// 伝票ログの処理に失敗
    						}
    					}
                        #endregion
                        #region ■諸口金額チェック
                        L_Den_ErriFlg = Chk_Value_FNC(L_Con, L_Data, L_Den_Data, L_SWK_DenNo, L_LineCnt, L_dtVolum, L_dtVolum2, L_dtKname, L_dtSvolum, H_DFUK, L_dtJfctl, 
    					                              L_dtSubject, H_Kakutyo, L_BunriOk_R, L_BunriOk_S, L_SVolumKm, P_ZeroSiwake[0], P_ZeroSiwake[1], H_IsAuto, H_RNo, false);    
    					if (L_Den_ErriFlg != 1)
                        {
    						L_CntFlg = false;
    						// 行区切り対応
    						// If Set_Den_Err_FNC(L_Den_Data, L_SWK_DenNo, L_LineCnt, MC_DEN_SUM_ERRLOG_SYOKUTI, MC_DEN_COM_ERRLOG_SYOKUTI, L_Den_ErrLog) = False Then
    						//     '伝票ログの処理に失敗
    						// End If
    						// 同一伝票内の行区切り単位で、貸借諸口金額が一致しないエラーがある場合
    						if (P_b_GsepFC == true && L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].GSEP_FLG == true)
                            {
    							if (Set_Den_Err_FNC(L_Den_Data, L_SWK_DenNo, L_LineCnt, MC_DEN_SUM_ERRLOG_SYOKUTI, MC_DEN_COM_ERRLOG_SYOKUTI_GS, ref L_Den_ErrLog) == false)
                                {
    								// 伝票ログの処理に失敗
    							}
    						} else {
    							if (Set_Den_Err_FNC(L_Den_Data, L_SWK_DenNo, L_LineCnt, MC_DEN_SUM_ERRLOG_SYOKUTI, MC_DEN_COM_ERRLOG_SYOKUTI, ref L_Den_ErrLog) == false)
                                {
    								// 伝票ログの処理に失敗
    							}
    						}
    					}
                        #endregion
                        #region ■伝票番号のチェック処理は正しい伝票日付・伝票番号が入力されてる場合のみ処理    
                        if (ChkHiduke_FNC(L_Data[G_Index_DYMD]) == true)
                        {
                            #region ■伝票番号のチェック処理(DBデータとのチェック)(自動付番を使用しない場合のみ)
                            if (P_Juse == 0)
                            {
    							L_Den_ErriFlg = Chk_DCNOtoDB_FNC(L_Con, L_Den_Data, L_SWK_DenNo, L_LineCnt, L_kesn, L_Dkei);
    
    							if (L_Den_ErriFlg != 1)
                                {
    								if (L_Den_ErriFlg == -1)
                                    {
    									if (P_JSOX == true || P_ShiwakeRireki == true || volum_dflg[L_kesn] == 1)
                                        {
    										// 同一伝票番号・同一伝票日付のデータが存在
    										L_CntFlg = false;
    										if (Set_Den_Err_FNC(L_Den_Data, L_SWK_DenNo, L_LineCnt, MC_DEN_SUM_ERRLOG_FURYO, MC_DEN_COM_ERRLOG_SUDEDCNO, ref L_Den_ErrLog) == false)
                                            {
    										}
    									}
    								}
                                    else if (L_Den_ErriFlg == -2)
                                    {
    									// 同一伝票番号だが異なる伝票日付の伝票が存在
    									L_CntFlg = false;
    									if (Set_Den_Err_FNC(L_Den_Data, L_SWK_DenNo, L_LineCnt, MC_DEN_SUM_ERRLOG_FURYO, MC_DEN_COM_ERRLOG_DIFFDB, ref L_Den_ErrLog) == false)
                                        {
    									}
    								}
    							}
    						}
                            #endregion
                            #region ■伝票番号のチェック処理(仕訳ファイル内でのチェック)
                            if (P_Juse == 0)
                            {
    							// de2-xxxxx 仕訳履歴等使用状況を参照していない不具合を修正
    							L_Den_ErriFlg = Chk_DCNOtoDATA_FNC(L_SWK_Data, L_Den_Data, L_SWK_DenNo, L_LineCnt, true, L_dtVolum2, L_kesn);
    							if (L_Den_ErriFlg != 1)
                                {
    								L_CntFlg = false;
    								// 伝票番号が同一で伝票日付が異なる伝票が存在
    								if (Set_Den_Err_FNC(L_Den_Data, L_SWK_DenNo, L_LineCnt, MC_DEN_SUM_ERRLOG_FURYO, MC_DEN_COM_ERRLOG_DIFFDATA, ref L_Den_ErrLog) == false)
                                    {
    								}
    							}
    						}
                            #endregion
                            #region ■混在伝票チェック(仕訳データファイル内)
                            // Prj312--->
                            // 既存伝票への仕訳追加が不可であるため自動付番を除き常にチェック
                            if (P_Juse == 0)
                            {
    							L_Den_ErriFlg = Chk_DCNOtoDATA_FNC(L_SWK_Data, L_Den_Data, L_SWK_DenNo, L_LineCnt, false, L_dtVolum2, L_kesn);
    							if (L_Den_ErriFlg != 1)
                                {
    								L_CntFlg = false;
    								if (Set_Den_Err_FNC(L_Den_Data, L_SWK_DenNo, L_LineCnt, MC_DEN_SUM_ERRLOG_FURYO, MC_DEN_COM_ERRLOG_KONZAI, ref L_Den_ErrLog) == false)
                                    {
    								}
    							}
    						}
                            #endregion
                        }
                        #endregion
                        #region ■チェック処理にてエラーとならなかった仕訳の行数を保存
                        do
                        {
    						if (L_SWK_DenNo.Count == L_LineCnt)
                            {
    							// 最終行
    						}
                            else if (((int[])L_SWK_DenNo[L_LineCnt - 1])[0] != ((int[])L_SWK_DenNo[L_LineCnt])[0])
                            {
    							// 該当行が現在伝票の最終行
    						}
                            else
                            {
    							// 伝票の途中
    							break;
    						}
    						if (L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].ERR_FLG == false)
                            {
    							// エラーがあった場合は該当伝票の行数を差し引く
    							L_AllCnt = L_AllCnt - ((L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].EDNO - L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].STNO) + 1);
    						}
    						break;
    					} while (true);
                        #endregion

                        // ** 不正データありの場合、必要ならログファイルにエラー情報を書き込む    
                        if ((L_LogFlg == true) && ((L_ErrCnt > 0) || (L_CntFlg == false)))
                        {
                            #region 不良仕訳ログ
                            if (L_ErrCnt > 0)
                            {
    							// 初回書込み時にOPENする
    							if (L_LogWriter == null)
                                {
    								try
                                    {
    									L_LogWriter = new StreamWriter(L_LogFileName, false, System.Text.Encoding.GetEncoding(932));
    								}
                                    catch
                                    {
    									if ((L_LogWriter_2 != null))
                                        {
    										L_LogWriter_2.Close();
    									}
    									L_Con.Close();
    									functionReturnValue = MC_RESULT_ERR_LOGFILEOPEN;
    									return functionReturnValue;
    								}
    							}
    							try
                                {
    								for (L_I = 0; L_I <= L_ErrCnt - 1; L_I++)
                                    {    
    									// 行区切り対応
    									// L_LogWriter.WriteLine(L_LineCnt && "," && IIf(.ItemNo = 0, "", .ItemNo) && "," _
    									//                         && M_ItemName(.ItemNo) && "," && .Value && "," && .Description)
    									// 行区切り対応かつ外貨なしかつ行区切り項目
    									if (P_b_GsepFC == true && P_b_GaikaFC == false && L_ErrLog[L_I].ItemNo == G_Index_GSEP - 2) 
                                        {
    										L_LogWriter.WriteLine(L_LineCnt + "," + G_Index_GSEP + 1 + "," + M_ItemName[G_Index_GSEP + 1] + "," + L_ErrLog[L_I].Value + "," + L_ErrLog[L_I].Description);
    									}
                                        else
                                        {
    										L_LogWriter.WriteLine(L_LineCnt + "," + (L_ErrLog[L_I].ItemNo == 0 ? "NULL" : L_ErrLog[L_I].ItemNo.ToString()) + "," +
                                                                  M_ItemName[L_ErrLog[L_I].ItemNo] + "," + L_ErrLog[L_I].Value + "," + L_ErrLog[L_I].Description);    
    									}    
    								}
    							}
                                catch
                                {
    								L_LogWriter.Close();
    								if ((L_LogWriter_2 != null))
                                    {
    									L_LogWriter_2.Close();
    								}
    								L_Con.Close();
    								functionReturnValue = MC_RESULT_ERR_LOGFILEWRITE;
    								return functionReturnValue;
    							}
    						}
                            #endregion
                            #region ■不良伝票ログ(伝票毎にログ出力)
                            if (L_CntFlg == false)
                            {    							
    							do
                                {
    								// Prj312--->
    								// If L_SWK_DenNo.Count = L_LineCnt Then
    								//     '最終行
    								// ElseIf L_SWK_DenNo(L_LineCnt - 1)(0) <> L_SWK_DenNo(L_LineCnt)(0) Then
    								//     '該当行が現在伝票の最終行
    								// Else
    								//     '伝票の途中
    								//     Exit Do
    								// End If
    								// <---
    								if (L_CntFlg == false)
                                    {
    									L_CntFlg = true;
    									// 伝票ログ書込処理
    									// 初回書込み時にOPENする
    									if (L_LogWriter_2 == null)
                                        {
    										try
                                            {
    											L_LogWriter_2 = new StreamWriter(Get_LogName_FNC(L_LogFileName, 2), false, System.Text.Encoding.GetEncoding(932));
    										}
                                            catch
                                            {
    											L_LogWriter_2.Close();
    											if ((L_LogWriter != null))
                                                {
    												L_LogWriter.Close();
    											}
    											L_Con.Close();
    											functionReturnValue = MC_RESULT_ERR_LOGFILEOPEN;
    											return functionReturnValue;
    										}
    									}
    									try
                                        {
    										for (L_I = 0; L_I <= L_Den_ErrLog.Length - 1; L_I++)
                                            {
    											// 現在の仕訳行が含まれる伝票のエラー情報を出力(伝票単位のエラーログ出力)
    											L_LogWriter_2.WriteLine(L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].STNO   + "," +
                                                                        L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].EDNO   + "," +
                                                                        L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].DYMD   + "," +
                                                                        L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].DCNO   + "," +
                                                                        L_Den_ErrLog[L_I].Value + "," + L_Den_ErrLog[L_I].Summary + "," +
                                                                        L_Den_ErrLog[L_I].Description);
    										}    
    									}
                                        catch
                                        {
    										L_LogWriter_2.Close();
    										if ((L_LogWriter != null))
                                            {
    											L_LogWriter.Close();
    										}
    										L_Con.Close();
    										functionReturnValue = MC_RESULT_ERR_LOGFILEWRITE;
    										return functionReturnValue;
    									}
    									L_Den_ErrLog = null;
    
    									// ログを書き込んだらループを抜ける
    									break;
    								}    
    							} while (true);
    						}
                            #endregion
                        }
    					L_ErrLog = null;
    				}    
    			}
                // ▲　チェック処理　▲


// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.OK, "データチェック処理");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                #endregion

                #region ▼　LogFlg=11指定でエラーが発生した場合は処理中断 &　データチェックのみの場合はここで中断　▼
                if ((H_LogFlg == 11 && L_SWK_Data.Count != L_AllCnt) || (H_PrcFlg == 1 && L_LinkTb.Rows.Count == 0))
                {
    				// 一件でもエラーがあった場合は処理を中断し処理情報ログ作成
    				if (L_SWK_Data.Count != L_AllCnt)
                    {
                        
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                        mLogger.LogWrite(Logger.Level.NG, "データチェック");
                        //*
                        mLogger.LogClose();
                        //*

                        // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                        if (L_LogFlg == true)
                        {
    						if (H_LogFlg == 11)
                            {
    							L_AllCnt = 0;
    						}
    
    						if (LogWrite_Syori_FNC(ref L_LogWriter_1, Get_LogName_FNC(L_LogFileName, 1), H_PrcFlg, L_SWK_Record, L_AllCnt, L_SWK_Value) == false)
                            {
    							L_LogWriter_1.Close();
    							if ((L_LogWriter != null))   { L_LogWriter.Close();   }
    							if ((L_LogWriter_2 != null)) { L_LogWriter_2.Close(); }
    							L_Con.Close();

    							functionReturnValue = MC_RESULT_ERR_LOGFILEWRITE;
    							return functionReturnValue;
    						}
    					}
    				}
    
    				functionReturnValue = 0;
    				if ((L_LogWriter != null))   { L_LogWriter.Close();   }
    				if ((L_LogWriter_1 != null)) { L_LogWriter_1.Close(); }
    				if ((L_LogWriter_2 != null)) { L_LogWriter_2.Close(); }
    				L_Con.Close();

    				if (H_PrcFlg == 1 && !(L_SWK_Data.Count != L_AllCnt))
                    {
    					functionReturnValue = L_AllCnt;
    				}
    				return functionReturnValue;                    
    			}
                #endregion
                #region -*リンク情報（リンク情報は仕訳が全てOKの場合のみ実行）
                if (L_SWK_Data.Count == L_AllCnt)
                {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                    mLogger.LogWrite(Logger.Level.INFO, "リンクチェック処理");
                    //*
                    mLogger.LogClose();
                    //*

// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                    L_ErrCnt  = 0;
    				L_LineCnt = 0;

    				if ((L_LinkTb.Rows.Count > 0))
                    {
                        L_Cmd = L_Con.CreateCommand();
    					GetTimeStampData(L_Cmd);

    					// リンク情報のチェック
    					foreach (DataRow L_LinkRowLoop in L_LinkTb.Rows)
                        {
                            L_LinkRow = L_LinkRowLoop;

    						L_LineCnt = L_LineCnt + 1;
    						ColumnToAryLink(ref L_LinkRow, ref L_DataLink);
    
    						if (L_ChkFlg == true)
                            {
                                //*
                                //mLogger.LogWrite(Logger.Level.INFO, "リンク情報のチェック処理");
                                //mLogger.LogClose();
                                //*
    							// リンク情報のチェック処理
    							ChkLinkInfo(H_CCOD, L_DataLink, L_Touki, ref L_ErrCnt, ref L_ErrLogink);
                                //*
                                //mLogger.LogWrite(Logger.Level.OK, "リンク情報のチェック処理 & ErrCnt:" + L_ErrCnt.ToString());
                                //mLogger.LogClose();
                                //*
                            }
                        }
    
    					// <---Ver01.17.04　2019/02/28　hirano　AI-OCR対応
//    					L_Cmd = L_Con.CreateCommand();
//    					GetTimeStampData(L_Cmd);
    					// --->Ver01.17.04
    
    					if (H_LogFlg != 0)
                        {
    						// エラーログファイルの作成
    						if (L_ErrCnt > 0)
                            {
    							// 初回書込み時にOPENする
    							if (L_LogWriter == null)
                                {
    								try
                                    {
    									L_LogWriter = new StreamWriter(L_LogFileName, false, System.Text.Encoding.GetEncoding(932));
    								}
                                    catch
                                    {
    									if ((L_LogWriter_2 != null))
                                        {
    										L_LogWriter_2.Close();
    									}
    									L_Con.Close();

    									functionReturnValue = MC_RESULT_ERR_LOGFILEOPEN;
    									return functionReturnValue;
    								}
    							}

    							try
                                {
    								for (L_I = 0; L_I <= L_ErrCnt - 1; L_I++)
                                    {
    									L_LogWriter.WriteLine(L_ErrLogink[L_I].LKNO + "," + L_ErrLogink[L_I].ItemNo + "," + L_ErrLogink[L_I].ItemName + "," + L_ErrLogink[L_I].Value + "," +
                                                              L_ErrLogink[L_I].Value2 + "," + L_ErrLogink[L_I].Description);    
    								}
    							}
                                catch
                                {
    								L_LogWriter.Close();
    								if ((L_LogWriter_2 != null))
                                    {
    									L_LogWriter_2.Close();
    								}
    								L_Con.Close();

    								functionReturnValue = MC_RESULT_ERR_LOGFILEWRITE;
    								return functionReturnValue;
    							}    
    
    							if ((L_LogWriter != null))   { L_LogWriter.Close();   }
    							if ((L_LogWriter_1 != null)) { L_LogWriter_1.Close(); }
    							if ((L_LogWriter_2 != null)) { L_LogWriter_2.Close(); }   
    						}    
    					}
    
    					if (L_ErrCnt > 0)
                        {
    						functionReturnValue = MC_RESULT_ERR_IN_LINK;
    						return functionReturnValue;
    					}
    				}
                    
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                    mLogger.LogWrite(Logger.Level.OK, "リンクチェック処理");
                    //*
                    mLogger.LogClose();
                    //*

                    // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                }
                #endregion

                if (H_PrcFlg == 1 && !(L_SWK_Data.Count != L_AllCnt))
                {
    				functionReturnValue = L_AllCnt;
    			}    
    
    			// -*リンク情報
    
    			// If (H_PrcFlg = 1) Then
    			//     ImpMain_M_FNC = L_AllCnt
    			//     Exit Function
    			// End If
    			if (L_SWK_Data.Count != L_AllCnt)
                {
    				functionReturnValue = 0;
    				return functionReturnValue;
    			}
                // ▲　ログ作成　▲    

                #region ▼　取込処理ルーティン　▼
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.INFO, "取込処理");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                // 会社データベースに接続2(取込処理時使用)
                try
                {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                    mLogger.LogWrite(Logger.Level.INFO, "  取込処理内会社DB接続");
                    //*
                    mLogger.LogClose();
                    //*

                    // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                    #region 2020/03/06 Ver02.20.01.9901 PostgreSQL対応（コメントアウト）
                    //                  if (G_IsOracle)
                    //                  {
                    //    					// Oracle版処理
                    //    					// Ver01.01.01--->
                    ////    					L_Con_2 = new OleDb.OleDbConnection(CreateConnectionStriong_Oracle());
                    ////    					L_Con_2.Open();
                    ////    					SetCurrentSchema_SUB(L_Con_2, G_KaisyaDb);
                    //    					// <---
                    //    				}
                    //                  else
                    //                  {
                    //    					// Ver01.01.01--->
                    //    					L_Con_2 = new SqlConnection(CreateConnectionStriong(G_KaisyaDb));
                    //    					// L_Con_2 = New SqlConnection("Data Source = " + L_ServerName + "\ICSP;Initial Catalog = " && G_KaisyaDb && ";Integrated Security = FALSE;User Id=ICSP_312IUSER;Password=icsp;")
                    //    					// <---
                    //    					L_Con_2.Open();
                    //    					// Ver00.02.01--->
                    //    					SetUserIdToConnectionInfo_SUB(L_Con_2, H_RUCOD.ToString());
                    //    					SetLockTimeOut_SUB(L_Con_2);
                    //    					// <---
                    //    				}
                    #endregion
                    L_Con_2 = G_DbFactory.CreateAndOpenDbConnection(G_KaisyaDb, H_RUCOD);
// <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
                }
                catch (Exception ex)
                {
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                    mLogger.LogWrite(Logger.Level.ERROR, "  取込処理内会社DB接続 " + ex.Message);
                    //*
                    mLogger.LogClose();
                    //*

                    // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                    functionReturnValue = MC_RESULT_ERR_DBCONNECT;
    				return functionReturnValue;
    			}
// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.OK, "  取込処理内会社DB接続");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                L_LineCnt = 0;
    			L_ImpBreak = true;
    
    			// コマンド作成
    			L_Cmd = L_Con.CreateCommand();
    			// 伝票情報保存変数宣言
    			structDENPYO L_DenInfoTmp = new structDENPYO();
    			// 仕訳登録数保存変数宣言
    			int L_ImportCntTmp = 0;
    
    			// ** 必要ならデータをＤＢに取り込む
    			do
                {
    				L_LineCnt = L_LineCnt + 1;
    
    				if (L_SWK_Data.Count < L_LineCnt)
    					break;
    
    				if (L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].ERR_FLG == true)
                    {    
    					if (L_ImpFlg == true)
                        {
    						// 取込データをセット
    						L_Data         = (string[])L_SWK_Data[L_LineCnt - 1];
    						L_BunriOk_R    = ((int[])L_SWK_DenNo[L_LineCnt - 1])[1];
    						L_BunriOk_S    = ((int[])L_SWK_DenNo[L_LineCnt - 1])[2];
    
    						L_ZeroSiwake_R = ((int[])L_SWK_DenNo[L_LineCnt - 1])[3];
    						L_ZeroSiwake_S = ((int[])L_SWK_DenNo[L_LineCnt - 1])[4];
    
    						L_Den_ErriFlg = 1;
    
    						int IsError_SetImpData_FNC = 0;
    						//  0=エラーなし、1=エラーあり
    
    						if (SetImpData_FNC(L_Data, H_DFUK, L_Con_2, L_Touki, L_dtVolum, L_dtSvolum, L_dtJfctl, L_dtVolum2, L_dtKname, L_dtSubject, ref L_Zdata, ref L_Juse, H_Kakutyo,
                                               L_BunriOk_R, L_BunriOk_S, ref L_Zdata_Bunri, L_SVolumKm, ref L_ErrLog, ref IsError_SetImpData_FNC, ref L_Gaikakamoku_Flg, ref L_ZeroSiwake_R,
                                               ref L_ZeroSiwake_S, ref H_RNo, false, H_IsAuto, H_Kakutei, L_dtSnctl) == true)
                            {
    							if (IsError_SetImpData_FNC == 0)
                                {
                                    #region 行区切り取得
                                    if (P_b_GsepFC)
                                    {
    									if (L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].STNO != L_LineCnt)
                                        {
    										// 前の行取得
    										string[] L_Data2 = null;
    										L_Data2 = (string[])L_SWK_Data[L_LineCnt - 2];
    
    										// 行区切り取得
    										L_GsepText = "";
    										if (P_b_GsepFC)
                                            {
    											if (P_b_GaikaFC)
                                                {
    												L_GsepText = NullColToString(L_Data2[G_Index_GSEP]);
    											}
    										}
    
    										// 前の行も行区切りの場合
    										if (L_GsepText == "1")
                                            {
    											// グループ番号Up
    											L_DenInfo.GRNO = L_DenInfo.GRNO + 1;
    										}
    									}
    								}
                                    #endregion
                                    #region 伝票単位の識別
                                    if (L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].EDNO == L_LineCnt)
                                    {
    									L_Denpyo_End = true;
    								}
                                    else if (L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].STNO == L_LineCnt)
                                    {
    									// 登録仕訳数カウント保存
    									L_ImportCntTmp = L_ImportCnt;
    									// 伝票情報保存
    									L_DenInfoTmp   = L_DenInfo;
    									L_Denpyo_End   = false;
    								}
                                    else
                                    {
    									L_Denpyo_End = false;
    								}
                                    #endregion

                                    // トランザクション開始
                                    if (L_Cmd.Transaction == null)
                                    {
    									L_Cmd.Transaction = L_Con.BeginTransaction(IsolationLevel.Serializable);
    								}
                                    else
                                    {
    									if (L_Cmd.Transaction.Connection == null)
                                        {
    										L_Cmd.Transaction = L_Con.BeginTransaction(IsolationLevel.Serializable);
    									}
    								}

    								// 伝票、仕訳の追加
    								// *-リンク情報
    								// L_Den_ErriFlg = Writ(int)eIMPDATA_FNC(L_Zdata, L_DenInfo, L_Juse, L_Cmd, L_dtVolum, H_Kakutyo, L_Zdata_Bunri, L_BunriOk_R, L_BunriOk_S, L_Khkzan, H_DFUK, L_Gaikakamoku_Flg, L_Denpyo_End, L_ZeroSiwake_R, L_ZeroSiwake_S, H_IsAuto, L_Touki, L_Con_2)
    								// <---Ver01.17.04　2019/02/28　hirano　AI-OCR対応
    								// L_Den_ErriFlg = Writ(int)eIMPDATA_FNC(L_Zdata, L_DenInfo, L_Juse, L_Cmd, L_dtVolum, H_Kakutyo, L_Zdata_Bunri, L_BunriOk_R, L_BunriOk_S, L_Khkzan, H_DFUK, L_Gaikakamoku_Flg, L_Denpyo_End, L_ZeroSiwake_R, L_ZeroSiwake_S, H_IsAuto, L_Touki, L_Con_2, L_LinkTb, H_CCOD)
    								L_Den_ErriFlg = WriteIMPDATA_FNC(ref L_Zdata, ref L_DenInfo, L_Juse, L_Cmd, L_dtVolum, H_Kakutyo, ref L_Zdata_Bunri, L_BunriOk_R, L_BunriOk_S, L_Khkzan, H_DFUK,
    								                                 L_Gaikakamoku_Flg, L_Denpyo_End, L_ZeroSiwake_R, L_ZeroSiwake_S, H_IsAuto, L_Touki, L_Con_2, ref L_LinkTb, H_CCOD, L_AIOCRTb);
    								// --->Ver01.17.04
    								// -*
    								// 仕訳登録成功
    								if (L_Den_ErriFlg == 1)
                                    {
    									// 仕訳(子仕訳)登録数カウントアップ
    									L_ImportCnt = L_ImportCnt + 1;
    
    									if (((L_Zdata.Bkbn == 1) || (L_Zdata.Bkbn == 2) || (L_Zdata.Bkbn == 3)) && ((L_BunriOk_R == 1 && (L_ZeroSiwake_R == 1)) || (L_BunriOk_S == 1) && (L_ZeroSiwake_S == 1)) &&
                                            (P_Int_ZERO == 1 || (P_Int_ZERO == 0 && L_Zdata_Bunri.Valu != 0)))
                                        {
    										L_ImportCnt = L_ImportCnt + 1;
    									}
    									// 最終行または伝票の最終行の場合は正常伝票に更新
    									if (L_SWK_DenNo.Count == L_LineCnt)
                                        {
    										WriteTransaction_H2_FNC(ref L_Zdata, ref L_DenInfo, L_Cmd, H_Kakutyo, L_Con_2);
    									}
                                        else if (((int[])L_SWK_DenNo[L_LineCnt - 1])[0] != ((int[])L_SWK_DenNo[L_LineCnt])[0])
                                        {
    										WriteTransaction_H2_FNC(ref L_Zdata, ref L_DenInfo, L_Cmd, H_Kakutyo, L_Con_2);
    									}
    									// 仕訳単位のCOMMITに変更
    									L_Cmd.Transaction.Commit();   								
    								}
                                    else  // 仕訳登録失敗
                                    {
    									// ロールバック
    									L_Cmd.Transaction.Rollback();
    									throw new MyException(L_Den_ErriFlg);
    								}    
    							}
                                else
                                {
    								L_NGCnt = L_NGCnt + 1;
    								// 取り込み中にエラーが発生した場合は処理中断
    								throw new MyException(0);
    							}
    						}
                            else
                            {
    							// 登録用データのセットに失敗
    							L_Den_ErriFlg = -41;
    							throw new MyException(MC_RESULT_ERR_DATA);
    						}
    						// 伝票単位で取込数をカウント
    						do
                            {
    							if (L_SWK_DenNo.Count == L_LineCnt)
                                {
    								// 最終行
    							}
                                else if (((int[])L_SWK_DenNo[L_LineCnt - 1])[0] != ((int[])L_SWK_DenNo[L_LineCnt])[0])
                                {
    								// 該当行が現在伝票の最終行
    							}
                                else
                                {
    								// 伝票の途中
    								break;
    							}

    							if (L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].ERR_FLG == true)
                                {
    								// エラーがなかった場合はインポート数に加算
    								L_OKCnt = L_OKCnt + ((L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].EDNO - L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].STNO) + 1);
    							}
    							break;
    						} while (true);
    
    						L_ErrLog = null;
    					}
    				}
                    else
                    {
    					L_NGCnt = L_NGCnt + 1;
    				}
    				L_Data = null;    
    			} while (true);

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.OK, "取込処理");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                #endregion

                #region ▼　インポート終了処理　▼
                // 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.INFO, "終了処理");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成

                if (L_NGCnt == 0)
                {
    				functionReturnValue = (L_ImpFlg ? L_ImportCnt : L_SWK_Record);
    			}
                else
                {
    				functionReturnValue = 0;
    			}

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.OK, "終了処理");
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                #endregion
            }
            catch (MyException ex)
            {
    			// コマンド、トランザクション、コネクションが有効ならロールバック
    			if ((L_Cmd != null))
                {
    				if ((L_Cmd.Transaction != null))
                    {
    					if ((L_Cmd.Transaction.Connection != null))
                        {
    						L_Cmd.Transaction.Rollback();
    					}
    				}
    			}
    
    			L_ImpBreak          = false;
    			functionReturnValue = ex.ErrNo;
    			L_Den_ErriFlg       = functionReturnValue;
    		}
            catch (Exception ex)
            {
    			// コマンド、トランザクション、コネクションが有効ならロールバック
    			if ((L_Cmd != null))
                {
    				if ((L_Cmd.Transaction != null))
                    {
    					if ((L_Cmd.Transaction.Connection != null))
                        {
    						L_Cmd.Transaction.Rollback();
    					}
    				}
    			}
    
    			Trace.WriteLine(ex.Message);
    			L_ImpBreak          = false;
    			functionReturnValue = MC_RESULT_ERR_OTHERS;
    			L_Den_ErriFlg       = -41;
                

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                mLogger.LogWrite(Logger.Level.ERROR, "メイン処理 " + ex.Message);
                //*
                mLogger.LogClose();
                //*

                // <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
            }
            finally
            {
    			// ★★　ｲﾝﾎﾟｰﾄ処理を行った数を再調整　★★    
    			if (functionReturnValue != MC_RESULT_ERR_FILENOTEXIST)
                {
                    #region ▼　処理情報ログ書き込み　▼
                    if (L_LogFlg == true && L_LogFileName != null)
                    {   
    					if (LogWrite_Syori_FNC(ref L_LogWriter_1, Get_LogName_FNC(L_LogFileName, 1), H_PrcFlg, L_SWK_Record, L_OKCnt, L_SWK_Value) == false)
                        {
    					}
    				}
    
    				if (L_ImpBreak == false)
                    {
    					// 初回書込み時OPEN
    					if (L_LogWriter_2 == null)
                        {
    						try
                            {
    							L_LogWriter_2 = new StreamWriter(Get_LogName_FNC(L_LogFileName, 2), false, System.Text.Encoding.GetEncoding(932));
    						}
                            catch
                            {
    						}
    					}

    					try
                        {
                            // 現在の仕訳行が含まれる伝票のエラー情報を出力(伝票単位のエラーログ出力)
                            L_LogWriter_2.WriteLine(L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].STNO + "," + L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].EDNO + "," + L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].DYMD + "," + L_Den_Data[((int[])L_SWK_DenNo[L_LineCnt - 1])[0]].DCNO + "," + "0" + "," + MC_DEN_SUM_ERRLOG_TYUDAN + "," + Get_TyuDan_Cmt(L_Den_ErriFlg, L_Zdata.Dcno_h.ToString()));
    					}
                        catch
                        {
    						// *-01.10.01　既にエラーが発生している場合は、エラー値を書き換えないように修正
    						// ImpMain_M_FNC = MC_RESULT_ERR_LOGFILEWRITE
    						// *-01.10.03
    						if (functionReturnValue != 0)
                            {
    						}
                            else
                            {
    							functionReturnValue = MC_RESULT_ERR_LOGFILEWRITE;
    						}
    						// -*01.10.03
    						// -*01.10.01　既にエラーが発生している場合は、エラー値を書き換えないように修正
    					}
    				}
                    #endregion

                    #region ** ログファイルclose
                    if (L_LogFlg == true)
                    {
                        if ((L_LogWriter != null))   { L_LogWriter.Close();   }
                        if ((L_LogWriter_1 != null)) { L_LogWriter_1.Close(); }
    					if ((L_LogWriter_2 != null)) { L_LogWriter_2.Close(); }
    				}

// 2020/04/10 Ver02.22.01 簡易ログファイル作成 --->
                    mLogger.LogClose();
// <--- 2020/04/10 Ver02.22.01 簡易ログファイル作成
                    #endregion

                    #region データベースから切断
                    // 共通データベースから切断
                    if ((L_ConCommon != null))
                    {
    					if ((L_ConCommon.State & ConnectionState.Open) == ConnectionState.Open)
                        {
    						L_ConCommon.Close();
    					}
    				}
    				// ** 会社データベースから切断
    				if ((L_Con != null))
                    {
    					if ((L_Con.State & ConnectionState.Open) == ConnectionState.Open)
                        {
    						L_Con.Close();
    					}
    				}
    				if ((L_Con_2 != null))
                    {
    					if ((L_Con_2.State & ConnectionState.Open) == ConnectionState.Open)
                        {
    						L_Con_2.Close();
    					}
    				}
                    #endregion
                }
    		}
    		return functionReturnValue;
    	}
    
    	// *===========================================================================================*
    	// 【説明】
    	//    ＲＯＷの内容を配列に変換する
    	// *===========================================================================================*    
    	private void ColumnToAry(ref DataRow H_Row, ref string[] H_Ary, ref int H_Lno)
    	{
    		H_Ary = null;
    		H_Ary = new string[G_Index_ITEM_COUNT];
    
    		H_Ary[G_Index_DYMD]    = NullColToString(H_Row["DYMD"]);
    		H_Ary[G_Index_SEIRI]   = NullColToString(H_Row["SEIRI"]);
    		H_Ary[G_Index_DCNO]    = NullColToString(H_Row["DCNO"]);
    		H_Ary[G_Index_RBMN]    = NullColToString(H_Row["RBMN"]);
    		H_Ary[G_Index_RTOR]    = NullColToString(H_Row["RTOR"]);
    		H_Ary[G_Index_RKMK]    = NullColToString(H_Row["RKMK"]);
    		H_Ary[G_Index_REDA]    = NullColToString(H_Row["REDA"]);
    		H_Ary[G_Index_RKOJ]    = NullColToString(H_Row["RKOJ"]);
    		H_Ary[G_Index_RKOS]    = NullColToString(H_Row["RKOS"]);
    		H_Ary[G_Index_RPRJ]    = NullColToString(H_Row["RPRJ"]);
    		H_Ary[G_Index_RSEG]    = NullColToString(H_Row["RSEG"]);
    		H_Ary[G_Index_RDM1]    = NullColToString(H_Row["RDM1"]);
    		H_Ary[G_Index_RDM2]    = NullColToString(H_Row["RDM2"]);
    		H_Ary[G_Index_RDM3]    = NullColToString(H_Row["RDM3"]);
    		H_Ary[G_Index_SBMN]    = NullColToString(H_Row["SBMN"]);
    		H_Ary[G_Index_STOR]    = NullColToString(H_Row["STOR"]);
    		H_Ary[G_Index_SKMK]    = NullColToString(H_Row["SKMK"]);
    		H_Ary[G_Index_SEDA]    = NullColToString(H_Row["SEDA"]);
    		H_Ary[G_Index_SKOJ]    = NullColToString(H_Row["SKOJ"]);
    		H_Ary[G_Index_SKOS]    = NullColToString(H_Row["SKOS"]);
    		H_Ary[G_Index_SPRJ]    = NullColToString(H_Row["SPRJ"]);
    		H_Ary[G_Index_SSEG]    = NullColToString(H_Row["SSEG"]);
    		H_Ary[G_Index_SDM1]    = NullColToString(H_Row["SDM1"]);
    		H_Ary[G_Index_SDM2]    = NullColToString(H_Row["SDM2"]);
    		H_Ary[G_Index_SDM3]    = NullColToString(H_Row["SDM3"]);
    		H_Ary[G_Index_EXVL]    = NullColToString(H_Row["EXVL"]);
    		H_Ary[G_Index_VALU]    = NullColToString(H_Row["VALU"]);
    		H_Ary[G_Index_ZKMK]    = NullColToString(H_Row["ZKMK"]);
    		H_Ary[G_Index_ZRIT]    = NullColToString(H_Row["ZRIT"]);
    		H_Ary[G_Index_ZZKB]    = NullColToString(H_Row["ZZKB"]);
    		H_Ary[G_Index_ZGYO]    = NullColToString(H_Row["ZGYO"]);
    		H_Ary[G_Index_ZSRE]    = NullColToString(H_Row["ZSRE"]);
    		H_Ary[G_Index_RRIT]    = NullColToString(H_Row["RRIT"]);
    		H_Ary[G_Index_SRIT]    = NullColToString(H_Row["SRIT"]);
    		H_Ary[G_Index_RZKB]    = NullColToString(H_Row["RZKB"]);
    		H_Ary[G_Index_RGYO]    = NullColToString(H_Row["RGYO"]);
    		H_Ary[G_Index_RSRE]    = NullColToString(H_Row["RSRE"]);
    		H_Ary[G_Index_SZKB]    = NullColToString(H_Row["SZKB"]);
    		H_Ary[G_Index_SGYO]    = NullColToString(H_Row["SGYO"]);
    		H_Ary[G_Index_SSRE]    = NullColToString(H_Row["SSRE"]);
    		H_Ary[G_Index_SYMD]    = NullColToString(H_Row["SYMD"]);
    		H_Ary[G_Index_SKBN]    = NullColToString(H_Row["SKBN"]);
    		H_Ary[G_Index_SKIZ]    = NullColToString(H_Row["SKIZ"]);
    		H_Ary[G_Index_UYMD]    = NullColToString(H_Row["UYMD"]);
    		H_Ary[G_Index_UKBN]    = NullColToString(H_Row["UKBN"]);
    		H_Ary[G_Index_UKIZ]    = NullColToString(H_Row["UKIZ"]);
    		H_Ary[G_Index_DKEC]    = NullColToString(H_Row["DKEC"]);
    		H_Ary[G_Index_KYMD]    = NullColToString(H_Row["KYMD"]);
    		H_Ary[G_Index_KBMN]    = NullColToString(H_Row["KBMN"]);
    		H_Ary[G_Index_KUSR]    = NullColToString(H_Row["KUSR"]);
    		// H_Ary(G_Index_FUSR) = NullColToString(H_Row["FUSR"));
    		H_Ary[G_Index_FUSR]    = NullColToString(P_RUCOD);
    		H_Ary[G_Index_FSEN]    = NullColToString(H_Row["FSEN"]);
    		H_Ary[G_Index_SGNO]    = NullColToString(H_Row["SGNO"]);
    		H_Ary[G_Index_BUNRI]   = NullColToString(H_Row["BUNRI"]);
    
    		//  日付の０は空白に置き換える
    		if (H_Ary[G_Index_SYMD] == "0") { H_Ary[G_Index_SYMD] = ""; }
    		if (H_Ary[G_Index_SKIZ] == "0") { H_Ary[G_Index_SKIZ] = ""; }
    		if (H_Ary[G_Index_UYMD] == "0") { H_Ary[G_Index_UYMD] = ""; }
    		if (H_Ary[G_Index_UKIZ] == "0") { H_Ary[G_Index_UKIZ] = ""; }
    		if (H_Ary[G_Index_KYMD] == "0") { H_Ary[G_Index_KYMD] = ""; }
    
    		H_Ary[G_Index_RATE]  = NullColToString(H_Row["RATE"]);
    		H_Ary[G_Index_GEXVL] = NullColToString(H_Row["GEXVL"]);
    		H_Ary[G_Index_GAIKA] = NullColToString(H_Row["GVALU"]);    
    		// 行区切り
    		H_Ary[G_Index_GSEP] = NullColToString(H_Row["GSEP"]);
            
    		// *-リンク情報
    		H_Ary[G_Index_ZLNO] = NullColToString(H_Row["LNO"]);
            
    		// 軽減税率＆10％
    		H_Ary[G_Index_RKEIGEN] = NullColToString(H_Row["RKEIGEN"]);
    		H_Ary[G_Index_SKEIGEN] = NullColToString(H_Row["SKEIGEN"]);
    		H_Ary[G_Index_ZKEIGEN] = NullColToString(H_Row["ZKEIGEN"]);
    
    		// SIASレイアウト
// Ver02.26.01 インボイス対応 --->
//    		if (H_Lno == 1) {
            if (isNewLayout) { 
// <--- Ver02.26.01 インボイス対応
    			H_Ary[G_Index_HF1]   = NullColToString(H_Row["HF1"]);
    			H_Ary[G_Index_HF2]   = NullColToString(H_Row["HF2"]);
    			H_Ary[G_Index_HF3]   = NullColToString(H_Row["HF3"]);
    			H_Ary[G_Index_HF4]   = NullColToString(H_Row["HF4"]);
    			H_Ary[G_Index_HF5]   = NullColToString(H_Row["HF5"]);
    			H_Ary[G_Index_HF6]   = NullColToString(H_Row["HF6"]);
    			H_Ary[G_Index_HF7]   = NullColToString(H_Row["HF7"]);
    			H_Ary[G_Index_HF8]   = NullColToString(H_Row["HF8"]);
    			H_Ary[G_Index_HF9]   = NullColToString(H_Row["HF9"]);
    			H_Ary[G_Index_HF10]  = NullColToString(H_Row["HF10"]);
    
    			H_Ary[G_Index_RDM4]  = NullColToString(H_Row["RDM4"]);
    			H_Ary[G_Index_RDM5]  = NullColToString(H_Row["RDM5"]);
    			H_Ary[G_Index_RDM6]  = NullColToString(H_Row["RDM6"]);
    			H_Ary[G_Index_RDM7]  = NullColToString(H_Row["RDM7"]);
    			H_Ary[G_Index_RDM8]  = NullColToString(H_Row["RDM8"]);
    			H_Ary[G_Index_RDM9]  = NullColToString(H_Row["RDM9"]);
    			H_Ary[G_Index_RDM10] = NullColToString(H_Row["RDM10"]);
    			H_Ary[G_Index_RDM11] = NullColToString(H_Row["RDM11"]);
    			H_Ary[G_Index_RDM12] = NullColToString(H_Row["RDM12"]);
    			H_Ary[G_Index_RDM13] = NullColToString(H_Row["RDM13"]);
    			H_Ary[G_Index_RDM14] = NullColToString(H_Row["RDM14"]);
    			H_Ary[G_Index_RDM15] = NullColToString(H_Row["RDM15"]);
    			H_Ary[G_Index_RDM16] = NullColToString(H_Row["RDM16"]);
    			H_Ary[G_Index_RDM17] = NullColToString(H_Row["RDM17"]);
    			H_Ary[G_Index_RDM18] = NullColToString(H_Row["RDM18"]);
    			H_Ary[G_Index_RDM19] = NullColToString(H_Row["RDM19"]);
    			H_Ary[G_Index_RDM20] = NullColToString(H_Row["RDM20"]);
    
    			H_Ary[G_Index_RTKY]  = NullColToString(H_Row["RTKY"]);
    			H_Ary[G_Index_RTNO]  = NullColToString(H_Row["RTNO"]);
    
    			H_Ary[G_Index_SDM4]  = NullColToString(H_Row["SDM4"]);
    			H_Ary[G_Index_SDM5]  = NullColToString(H_Row["SDM5"]);
    			H_Ary[G_Index_SDM6]  = NullColToString(H_Row["SDM6"]);
    			H_Ary[G_Index_SDM7]  = NullColToString(H_Row["SDM7"]);
    			H_Ary[G_Index_SDM8]  = NullColToString(H_Row["SDM8"]);
    			H_Ary[G_Index_SDM9]  = NullColToString(H_Row["SDM9"]);
    			H_Ary[G_Index_SDM10] = NullColToString(H_Row["SDM10"]);
    			H_Ary[G_Index_SDM11] = NullColToString(H_Row["SDM11"]);
    			H_Ary[G_Index_SDM12] = NullColToString(H_Row["SDM12"]);
    			H_Ary[G_Index_SDM13] = NullColToString(H_Row["SDM13"]);
    			H_Ary[G_Index_SDM14] = NullColToString(H_Row["SDM14"]);
    			H_Ary[G_Index_SDM15] = NullColToString(H_Row["SDM15"]);
    			H_Ary[G_Index_SDM16] = NullColToString(H_Row["SDM16"]);
    			H_Ary[G_Index_SDM17] = NullColToString(H_Row["SDM17"]);
    			H_Ary[G_Index_SDM18] = NullColToString(H_Row["SDM18"]);
    			H_Ary[G_Index_SDM19] = NullColToString(H_Row["SDM19"]);
    			H_Ary[G_Index_SDM20] = NullColToString(H_Row["SDM20"]);
    
    			H_Ary[G_Index_STKY]  = NullColToString(H_Row["STKY"]);
    			H_Ary[G_Index_STNO]  = NullColToString(H_Row["STNO"]);
    
    			H_Ary[G_Index_TKFLG] = NullColToString(H_Row["TKFLG"]);
    
    			H_Ary[G_Index_HEIC]  = NullColToString(H_Row["HEIC"]);
    		}
            // de3レイアウト
            else
            {
    			H_Ary[G_Index_RTKY]  = NullColToString(H_Row["TKY"]);
    			H_Ary[G_Index_RTNO]  = NullColToString(H_Row["TNO"]);
    		}

// Ver02.26.01 インボイス対応 --->
            if (H_Lno == 2)
            {
                H_Ary[G_Index_RURIZEIKEISAN] = NullColToString(H_Row["RURIZEIKEISAN"]);
                H_Ary[G_Index_SURIZEIKEISAN] = NullColToString(H_Row["SURIZEIKEISAN"]);
                H_Ary[G_Index_ZURIZEIKEISAN] = NullColToString(H_Row["ZURIZEIKEISAN"]);
                H_Ary[G_Index_RMENZEIKEIKA]  = NullColToString(H_Row["RMENZEIKEIKA"]);
                H_Ary[G_Index_SMENZEIKEIKA]  = NullColToString(H_Row["SMENZEIKEIKA"]);
                H_Ary[G_Index_ZMENZEIKEIKA]  = NullColToString(H_Row["ZMENZEIKEIKA"]);
            }
// <--- Ver02.26.01 インボイス対応
    	}    
    	private void ColumnToAryLink(ref DataRow H_Row, ref string[] H_Ary)
    	{
    		H_Ary = null;
    		H_Ary = new string[13];
    
    		H_Ary[G_Index_LNO]                       = NullColToString(H_Row["LNO"]);
    		H_Ary[Convert.ToInt32(G_Index_LNAM)]     = NullColToString(H_Row["LNAM"]);
    		H_Ary[G_Index_FLG1]                      = NullColToString(H_Row["FLG1"]);
    		H_Ary[Convert.ToInt32(G_Index_LINK)]     = NullColToString(H_Row["LINK"]);
    
    		// *-e文書
    		H_Ary[Convert.ToInt32(G_Index_E_EDOC)]   = NullColToString(H_Row["EDOC"]);
    		H_Ary[Convert.ToInt32(G_Index_E_NUSR)]   = NullColToString(H_Row["NUSR"]);
    		H_Ary[Convert.ToInt32(G_Index_E_SUSR)]   = NullColToString(H_Row["SUSR"]);
    		H_Ary[G_Index_E_SYUBETSU]                = NullColToString(H_Row["SYUBETSU"]);
    		H_Ary[G_Index_E_SYMD]                    = NullColToString(H_Row["SYMD"]);
    		H_Ary[G_Index_E_SVALU]                   = NullColToString(H_Row["SVALU"]);
    		H_Ary[Convert.ToInt32(G_Index_E_STRNAM)] = NullColToString(H_Row["STRNAM"]);
    		H_Ary[Convert.ToInt32(G_Index_E_HINMEI)] = NullColToString(H_Row["HINMEI"]);
    		H_Ary[Convert.ToInt32(G_Index_E_BIKO)]   = NullColToString(H_Row["BIKO"]);

// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応 --->
//          if (Convert.ToInt32(H_Ary[G_Index_FLG1]) == 3)
            if (Convert.ToInt32(H_Ary[G_Index_FLG1]) >= 3 && Convert.ToInt32(H_Ary[G_Index_FLG1]) <= 5)
// <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応
            {
                // 「0」はNullに置き換え
                if (H_Ary[G_Index_E_SYMD] == "0")
                {
                    H_Ary[G_Index_E_SYMD] = "";
                }
            }
            else
            {
                // 念の為、e文書以外の場合はe文書関連項目を削除
                H_Ary[Convert.ToInt32(G_Index_E_EDOC)]   = "";
                H_Ary[Convert.ToInt32(G_Index_E_NUSR)]   = "";
                H_Ary[Convert.ToInt32(G_Index_E_SUSR)]   = "";
                H_Ary[G_Index_E_SYUBETSU]                = "";
                H_Ary[G_Index_E_SYMD]                    = "";
                H_Ary[G_Index_E_SVALU]                   = "";
                H_Ary[Convert.ToInt32(G_Index_E_STRNAM)] = "";
                H_Ary[Convert.ToInt32(G_Index_E_HINMEI)] = "";
                H_Ary[Convert.ToInt32(G_Index_E_BIKO)]   = "";

            }
    
// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応(FLG1への4,5の追加) --->
//    		if (Convert.ToInt32(H_Ary[G_Index_FLG1]) < 0 || Convert.ToInt32(H_Ary[G_Index_FLG1]) > 3)
            if (Convert.ToInt32(H_Ary[G_Index_FLG1]) < 0 || Convert.ToInt32(H_Ary[G_Index_FLG1]) > 5)
// <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応(FLG1への4,5の追加)

            {
    			H_Ary[G_Index_FLG1] = "0";
    		}    
    	}
    
    	// *===========================================================================================*
    	// 【説明】
    	//    フィールドがヌルのときは空文字を返す
    	// *===========================================================================================*
    	private string NullColToString(object H_Col)
    	{
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->    
//    		if (Information.IsDBNull(H_Col))    
    		if (DBNull.Value.Equals(H_Col))
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
            {
    			return "";
    		}
            else
            {
// 2019/12/26 Ver01.19.05.9901 ダブルコーテーションの削除 --->
//    			return Convert.ToString(H_Col);
                return Convert.ToString(H_Col).Replace("\"", "");
// <--- 2019/12/26 Ver01.19.05.9901 ダブルコーテーションの削除 
            }
        }

        #region 起動履歴
        // *===========================================================================================*
        // 【説明】
        //    起動履歴保存用のデータ取得
        // *===========================================================================================*    
        private void Get_MathineNado_Info_FNC(IDbConnection H_Con, ref structACCLOG L_UCOD_acc, int H_UCOD, string H_CCOD, bool H_B_Kakutyo, DataTable H_Dt_Kaisya)
    	{
    		int    L_yyyyMMdd = 0;
    		int    L_HHmmssff = 0;    
    		string L_username = "";
    
    		// DBから時間を取得
    		Get_DBTime(H_Con, ref L_yyyyMMdd, ref L_HHmmssff);
    
    		try
            {
                #region コメントアウト
//    			Microsoft.VisualBasic.ApplicationServices.User instance2 = new Microsoft.VisualBasic.ApplicationServices.User();
//                instance2.InitializeWithWindowsUser();

//                string[] parts = Strings.Split(My.User.Name, "\\");
//    			if (parts.Length < 1) {
//    				L_username = "";
//    			} else {
//    				L_username = parts[parts.Length - 1];
//                }
                #endregion
                L_username = Environment.UserName;
    
    			// ※　下記NULLのカラムはデータ書き込み時にNULL又は文字列無しを指定　※    
    			L_UCOD_acc.nSYMD  = L_yyyyMMdd;
    			L_UCOD_acc.nSHMS  = L_HHmmssff;
    			L_UCOD_acc.nUCOD  = Convert.ToInt32(H_UCOD);
    			L_UCOD_acc.sPCNM  = Environment.MachineName;
    			L_UCOD_acc.sLOGID = L_username;
    			L_UCOD_acc.sJOBS  = "IMPORTERSUB.dll";
    			if (H_B_Kakutyo == false)
                {
    				L_UCOD_acc.sJOBN = "サブシステムインポーター";
    			}
                else
                {
    				L_UCOD_acc.sJOBN = "サブシステムインポーター(拡張)";
    			}
    			L_UCOD_acc.sAPNO  = DBNull.Value.ToString();
    			L_UCOD_acc.sJOBID = DBNull.Value.ToString();
    			L_UCOD_acc.nTYPE  = 0;
    			L_UCOD_acc.sKAKU  = DBNull.Value.ToString();
    			L_UCOD_acc.sPATH  = DBNull.Value.ToString();
    			L_UCOD_acc.nHPRO  = 0;
    			L_UCOD_acc.sHIKI  = DBNull.Value.ToString();
    			L_UCOD_acc.nSUBID = 0;
    			L_UCOD_acc.sCCOD  = H_Dt_Kaisya.Rows[0][(int)eKAISYA.KAISYA_CCOD].ToString();
    			L_UCOD_acc.sCNAM  = H_Dt_Kaisya.Rows[0][(int)eKAISYA.KAISYA_CNAM].ToString();
    			L_UCOD_acc.sCPID  = DBNull.Value.ToString();
    			L_UCOD_acc.sCDM1  = "";
    			L_UCOD_acc.sCDM2  = "";
    			L_UCOD_acc.sCDM3  = DBNull.Value.ToString();
    			L_UCOD_acc.sCDM4  = "";
    			L_UCOD_acc.nIMD1  = 0;
    			L_UCOD_acc.nIMD2  = 0;
    			L_UCOD_acc.nIMD3  = 0;
    			L_UCOD_acc.nIMD4  = 0;    
    		}
            catch
            {
    		}    
    	}
    
    	// 起動履歴対応    
    	private void Get_DBTime(IDbConnection H_Con, ref int H_yyyyMMdd, ref int H_HHmmssff)
    	{
    		IDbCommand L_Cmd = default(IDbCommand);
    		DateTime   L_Now = new DateTime();
    
    		L_Cmd             = H_Con.CreateCommand();

//    		L_Cmd.CommandText = "SELECT CURRENT_TIMESTAMP";
            L_Cmd.CommandText = "SELECT " + (G_IsPostgre ? "CLOCK_TIMESTAMP()" : " CURRENT_TIMESTAMP");    // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応

    		L_Now             = (DateTime)L_Cmd.ExecuteScalar();

            #region 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    		H_yyyyMMdd        = Convert.ToInt32(Strings.Format(L_Now, "yyyyMMdd"));
//          H_yyyyMMdd = Convert.ToInt32(L_Now.ToString("yyyyMMdd"));
//    		H_HHmmssff        = Convert.ToInt32(Strings.Format(L_Now, "HHmmssff"));    
//    		P_Str_KidouDate   = Strings.Format(L_Now, "yyyy/MM/dd") + " " + Strings.Format(L_Now, "HH:mm:ss:ff"); 
            #endregion
            H_yyyyMMdd        = Convert.ToInt32(L_Now.ToString("yyyyMMdd"));
    		H_HHmmssff        = Convert.ToInt32(L_Now.ToString("HHmmssff"));
    
    		P_Str_KidouDate   = L_Now.ToString("yyyy/MM/dd") + " " + L_Now.ToString("HH:mm:ss:ff");   
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応  
    	}
        #endregion

        #region インポーター用のため不要(コメントアウト)
        // *===========================================================================================*
        // 【説明】
        //    仕訳データを一括して仕訳用及び伝票用の配列に値を取得(インポーター用)　→　コメントアウト
        // *===========================================================================================*
        private bool Get_SWK_Data(ref ArrayList H_SWK_Data, ref structDEN_INFO[] H_Den_Data, ref ArrayList H_SWK_DenNo, ref long H_SWK_Value, ref int H_SWK_Record, string H_Path, string H_File,
                                  DataTable dtVolum2, bool H_Kakucho, int H_Lno)
    	{
            #region インポーター用なので不要(コメントアウト)
            //            bool functionReturnValue = false;

            //    		ArrayList       L_CSVRecords = new ArrayList();
            //    		TextFieldParser L_TFP        = new TextFieldParser(H_Path + H_File, System.Text.Encoding.GetEncoding(932));

            //    		string L_DYMD      = "";
            //    		string L_DCNO      = "";
            //    		string L_KYMD      = "";
            //    		string L_KBMN      = "";
            //    		string L_KUSR      = "";
            //    		string L_FUSR      = "";
            //    		string L_SGNO      = "";
            //    		// SIASレイアウト専用項目
            //    		string L_HF1       = "";
            //    		string L_HF2       = "";
            //    		string L_HF3       = "";
            //    		string L_HF4       = "";
            //    		string L_HF5       = "";
            //    		string L_HF6       = "";
            //    		string L_HF7       = "";
            //    		string L_HF8       = "";
            //    		string L_HF9       = "";
            //    		string L_HF10      = "";
            //    		// 同一伝票化判断するフラグ
            //    		bool   L_DoitsuFlg = false;

            //    		int    L_FirstRow  = 1;
            //    		int    L_LastRow   = 0;
            //    		int    L_DenCount  = 0;
            //    		// 何伝票目かを判別、開始は0
            //    		long   L_Value     = 0;
            //    		int    L_ChkCurren = 0;
            //    		string L_SEIRI     = "0";

            //    		functionReturnValue = true;

            //    		L_TFP.TextFieldType = FieldType.Delimited;
            //    		// 区切り文字は”,”
            //    		L_TFP.Delimiters = new string[] { "," };
            //    		// SIAS-4296--->
            //    		if (H_Lno == 0) {
            //    			// de3レイアウトの場合は文字囲み削除
            //    			L_TFP.HasFieldsEnclosedInQuotes = true;
            //    		} else {
            //    			// SIASレイアウトの場合は文字囲み削除しない
            //    			L_TFP.HasFieldsEnclosedInQuotes = false;
            //    		} 
            //    		// 空白文字の削除は行わない
            //    		L_TFP.TrimWhiteSpace = false;

            //    		try
            //            {
            //    			while (!L_TFP.EndOfData)
            //                {
            //    				// フィールドを読込む
            //    				string[] L_fields = L_TFP.ReadFields();

            //    				// 保存
            //    				L_CSVRecords.Add(L_fields);

            //    				// 金額を保存

            //    				L_ChkCurren = ChkCurrency_FNC(Strings.Trim(L_fields[G_Index_VALU]), 13);
            //    				if (L_ChkCurren == -1 || L_ChkCurren == -2) {
            //    					// 金額を判別できなかった場合は金額の加算なし
            //    					L_Value = L_Value + 0;
            //    				} else {
            //    					L_Value = L_Value + Convert.ToInt64(Strings.Trim(L_fields[G_Index_VALU]));
            //    				}
            //    				// 伝票情報が一致する場合は同一伝票とする
            //    				// 部署入出力処理へのインポートの場合は入力者についても伝票情報とする
            //    				if (H_Lno == 0) {
            //    					// de3レイアウト
            //    					if (((L_DYMD == L_fields[G_Index_DYMD]) && (L_SEIRI == L_fields[G_Index_SEIRI]) && (L_DCNO == L_fields[G_Index_DCNO]) && (L_KYMD == L_fields[G_Index_KYMD]) && (L_KBMN == L_fields[G_Index_KBMN]) && (L_KUSR == L_fields[G_Index_KUSR]) && (L_SGNO == L_fields[G_Index_SGNO]) && (H_Kakucho == false || (H_Kakucho && (L_FUSR == L_fields[G_Index_FUSR])))) || L_LastRow == 0)
            //                        {
            //    						L_DoitsuFlg = true;
            //    					} else {
            //    						L_DoitsuFlg = false;
            //    					}
            //    				} else if (H_Lno == 1) {
            //    					// SIASレイアウト
            //    					if (((L_DYMD == L_fields[G_Index_DYMD]) && (L_DCNO == L_fields[G_Index_DCNO]) && (L_SEIRI == L_fields[G_Index_SEIRI]) && (L_KYMD == L_fields[G_Index_KYMD]) && (L_KBMN == L_fields[G_Index_KBMN]) && (L_KUSR == L_fields[G_Index_KUSR]) && (L_SGNO == L_fields[G_Index_SGNO]) && (L_HF1 == L_fields[G_Index_HF1]) && (L_HF2 == L_fields[G_Index_HF2]) && (L_HF3 == L_fields[G_Index_HF3]) && (L_HF4 == L_fields[G_Index_HF4]) && (L_HF5 == L_fields[G_Index_HF5]) && (L_HF6 == L_fields[G_Index_HF6]) && (L_HF7 == L_fields[G_Index_HF7]) && (L_HF8 == L_fields[G_Index_HF8]) && (L_HF9 == L_fields[G_Index_HF9]) && (L_HF10 == L_fields[G_Index_HF10]) && (H_Kakucho == false || (H_Kakucho && (L_FUSR == L_fields[G_Index_FUSR])))) || L_LastRow == 0)
            //                        {
            //    						L_DoitsuFlg = true;
            //    					} else {
            //    						L_DoitsuFlg = false;
            //    					}
            //    				}

            //    				if (L_DoitsuFlg)
            //                    {
            //    					// 【同一伝票の場合】
            //    					int[] L_ChkNo = {
            //    						L_DenCount,
            //    						0,
            //    						0,
            //    						0,
            //    						0
            //    					};
            //    					H_SWK_DenNo.Add(L_ChkNo);
            //    				} else {
            //    					// 【異なる伝票単位の場合】
            //    					// 配列に値をセット{伝票日付,伝票番号,伝票開始行,伝票終了行,借方諸口金額(初期値は0),貸方諸口金額(初期値は0),伝票エラーフラグ（初期値は0）}
            //    					Array.Resize(ref H_Den_Data, L_DenCount + 1);
            //    					H_Den_Data[L_DenCount].DYMD    = L_DYMD;
            //    					H_Den_Data[L_DenCount].CKEI    = GetCkei(dtVolum2, L_DYMD, L_SEIRI);
            //    					H_Den_Data[L_DenCount].DCNO    = L_DCNO;
            //    					H_Den_Data[L_DenCount].STNO    = L_FirstRow;
            //    					H_Den_Data[L_DenCount].EDNO    = L_LastRow;
            //    					H_Den_Data[L_DenCount].R_Value = 0;
            //    					H_Den_Data[L_DenCount].S_Value = 0;
            //    					H_Den_Data[L_DenCount].ERR_FLG = true;

            //    					// 行区切り対応
            //    					H_Den_Data[L_DenCount].R_ValueTotal = 0;
            //    					H_Den_Data[L_DenCount].S_ValueTotal = 0;

            //    					// 次伝票の開始行を変数にセット
            //    					L_FirstRow = L_LastRow  + 1;    
            //    					L_DenCount = L_DenCount + 1;

            //    					int[] L_ChkNo =
            //                        {
            //    						L_DenCount,
            //    						0,
            //    						0,
            //    						0,
            //    						0
            //    					};
            //    					H_SWK_DenNo.Add(L_ChkNo);    
            //    				}

            //    				// 伝票の判別情報を保管
            //    				L_DYMD  = L_fields[G_Index_DYMD];
            //    				L_SEIRI = L_fields[G_Index_SEIRI];
            //    				L_DCNO  = L_fields[G_Index_DCNO];
            //    				L_KYMD  = L_fields[G_Index_KYMD];
            //    				L_KBMN  = L_fields[G_Index_KBMN];
            //    				L_KUSR  = L_fields[G_Index_KUSR];
            //    				L_FUSR  = L_fields[G_Index_FUSR];
            //    				L_SGNO  = L_fields[G_Index_SGNO];
            //    				if (H_Lno == 1)
            //                    {
            //    					// SIASレイアウト専用項目
            //    					L_HF1  = L_fields[G_Index_HF1];
            //    					L_HF2  = L_fields[G_Index_HF2];
            //    					L_HF3  = L_fields[G_Index_HF3];
            //    					L_HF4  = L_fields[G_Index_HF4];
            //    					L_HF5  = L_fields[G_Index_HF5];
            //    					L_HF6  = L_fields[G_Index_HF6];
            //    					L_HF7  = L_fields[G_Index_HF7];
            //    					L_HF8  = L_fields[G_Index_HF8];
            //    					L_HF9  = L_fields[G_Index_HF9];
            //    					L_HF10 = L_fields[G_Index_HF10];
            //    				}
            //    				L_LastRow = L_LastRow + 1;
            //    			}

            //    			Array.Resize(ref H_Den_Data, L_DenCount + 1);
            //    			H_Den_Data[L_DenCount].DYMD    = L_DYMD;
            //    			H_Den_Data[L_DenCount].CKEI    = GetCkei(dtVolum2, L_DYMD, L_SEIRI);
            //    			H_Den_Data[L_DenCount].DCNO    = L_DCNO;
            //    			H_Den_Data[L_DenCount].STNO    = L_FirstRow;
            //    			H_Den_Data[L_DenCount].EDNO    = L_LastRow;
            //    			H_Den_Data[L_DenCount].R_Value = 0;
            //    			H_Den_Data[L_DenCount].S_Value = 0;
            //    			H_Den_Data[L_DenCount].ERR_FLG = true;

            //    			// 行区切り対応
            //    			H_Den_Data[L_DenCount].R_ValueTotal = 0;
            //    			H_Den_Data[L_DenCount].S_ValueTotal = 0;


            //    		}
            //            catch
            //            {
            //    			functionReturnValue = false;
            //    			L_TFP.Close();
            //    			return functionReturnValue;    
            //    		}

            //    		H_SWK_Data = L_CSVRecords;
            //    		L_TFP.Close();

            //    		H_SWK_Record = L_LastRow;
            //    		H_SWK_Value  = L_Value;
            //    		return functionReturnValue;
            #endregion
            return false;
        }
        #endregion

        #region 元からコメントアウト
        // Private Function Get_SWK_M_Data(ByRef H_SWK_Data As ArrayList, ByRef H_Den_Data() As structDEN_INFO, ByRef H_SWK_DenNo As ArrayList, _
        //                       ByRef H_SWK_Value As Long, ByRef H_SWK_Record As Integer, ByVal H_SiwakeTb As DataTable, ByVal dtVolum2 As DataTable, _
        //                       ByVal H_Kakucho As Boolean, ByVal H_Lno As Integer) As Boolean

        //     Dim L_CSVRecords As New System.Collections.ArrayList()
        //     Dim L_DYMD As String = "", L_DCNO As String = "", L_KYMD As String = "", L_KBMN As String = "", L_KUSR As String = "", L_FUSR As String = "", L_SGNO As String = ""
        //     'SIASレイアウト専用項目
        //     Dim L_HF1 As String = "", L_HF2 As String = "", L_HF3 As String = "", L_HF4 As String = "", L_HF5 As String = "", L_HF6 As String = "", L_HF7 As String = "", L_HF8 As String = "", L_HF9 As String = "", L_HF10 As String = ""
        //     '同一伝票化判断するフラグ
        //     Dim L_DoitsuFlg As Boolean = False

        //     Dim L_FirstRow As Integer = 1
        //     Dim L_LastRow As Integer = 0
        //     Dim L_DenCount As Integer = 0  '何伝票目かを判別、開始は0
        //     Dim L_Value As Long = 0
        //     Dim L_ChkCurren As Integer = 0
        //     Dim L_SiwakeRow As DataRow
        //     Dim L_fields() As String = Nothing
        //     Dim L_SEIRI As String = "0"

        //     Get_SWK_M_Data = True

        //     Try

        //         For Each L_SiwakeRow In H_SiwakeTb.Rows

        //             Call ColumnToAry(L_SiwakeRow, L_fields, H_Lno)
        //             '保存
        //             L_CSVRecords.Add(L_fields)

        //             '金額を保存

        //             L_ChkCurren = ChkCurrency_FNC(Trim(L_fields((int)eIMPDATA.DATA_VALU)), 13)
        //             If L_ChkCurren = -1 Or L_ChkCurren = -2 Then
        //                 '金額を判別できなかった場合は金額の加算なし
        //                 L_Value = L_Value + 0
        //             Else
        //                 L_Value = L_Value + Val(Trim(L_fields((int)eIMPDATA.DATA_VALU)))
        //             End If
        //             '伝票情報が一致する場合は同一伝票とする
        //             '部署入出力処理へのインポートの場合は入力者についても伝票情報とする
        //             If H_Lno = 0 Then
        //                 'de3レイアウト
        //                 If ((L_DYMD = L_fields(G_Index_DYMD)) And (L_SEIRI = L_fields(G_Index_SEIRI)) And (L_DCNO = L_fields(G_Index_DCNO)) And _
        //                     (L_KYMD = L_fields(G_Index_KYMD)) And (L_KBMN = L_fields(G_Index_KBMN)) And (L_KUSR = L_fields(G_Index_KUSR)) And _
        //                     (L_SGNO = L_fields(G_Index_SGNO)) And _
        //                     (H_Kakucho = False Or (H_Kakucho And (L_FUSR = L_fields(G_Index_FUSR))))) Or L_LastRow = 0 Then
        //                     L_DoitsuFlg = True
        //                 Else
        //                     L_DoitsuFlg = False
        //                 End If
        //             ElseIf H_Lno = 1 Then
        //                 'SIASレイアウト
        //                 If ((L_DYMD = L_fields(G_Index_DYMD)) And (L_DCNO = L_fields(G_Index_DCNO)) And (L_SEIRI = L_fields(G_Index_SEIRI)) And _
        //                     (L_KYMD = L_fields(G_Index_KYMD)) And (L_KBMN = L_fields(G_Index_KBMN)) And (L_KUSR = L_fields(G_Index_KUSR)) And _
        //                     (L_SGNO = L_fields(G_Index_SGNO)) And _
        //                     (L_HF1 = L_fields(G_Index_HF1)) And (L_HF2 = L_fields(G_Index_HF2)) And _
        //                     (L_HF3 = L_fields(G_Index_HF3)) And (L_HF4 = L_fields(G_Index_HF4)) And _
        //                     (L_HF5 = L_fields(G_Index_HF5)) And (L_HF6 = L_fields(G_Index_HF6)) And _
        //                     (L_HF7 = L_fields(G_Index_HF7)) And (L_HF8 = L_fields(G_Index_HF8)) And _
        //                     (L_HF9 = L_fields(G_Index_HF9)) And (L_HF10 = L_fields(G_Index_HF10)) And _
        //                     (H_Kakucho = False Or (H_Kakucho And (L_FUSR = L_fields(G_Index_FUSR))))) Or L_LastRow = 0 Then
        //                     L_DoitsuFlg = True
        //                 Else
        //                     L_DoitsuFlg = False
        //                 End If
        //             End If

        //             If L_DoitsuFlg Then
        //                 '【同一伝票の場合】
        //                 Dim L_ChkNo() As Integer = {L_DenCount, 0, 0, 0, 0}
        //                 H_SWK_DenNo.Add(L_ChkNo)
        //             Else
        //                 '【異なる伝票単位の場合】
        //                 '伝票ヘッダーを取得
        //                 ReDim Preserve H_Den_Data(L_DenCount)
        //                 H_Den_Data(L_DenCount]).DYMD = L_DYMD
        //                 H_Den_Data(L_DenCount]).CKEI = GetCkei(dtVolum2, L_DYMD, L_SEIRI)
        //                 H_Den_Data(L_DenCount]).DCNO = L_DCNO
        //                 H_Den_Data(L_DenCount]).STNO = L_FirstRow
        //                 H_Den_Data(L_DenCount]).EDNO = L_LastRow
        //                 H_Den_Data(L_DenCount]).R_Value = 0
        //                 H_Den_Data(L_DenCount]).S_Value = 0
        //                 H_Den_Data(L_DenCount]).ERR_FLG = True

        //                 '次伝票の開始行を変数にセット
        //                 L_FirstRow = L_LastRow + 1

        //                 L_DenCount = L_DenCount + 1
        //                 Dim L_ChkNo() As Integer = {L_DenCount, 0, 0, 0, 0}
        //                 H_SWK_DenNo.Add(L_ChkNo)

        //             End If

        //             '伝票の判別情報を保管
        //             L_DYMD = L_fields(G_Index_DYMD)
        //             L_SEIRI = L_fields(G_Index_SEIRI)
        //             L_DCNO = L_fields(G_Index_DCNO)
        //             L_KYMD = L_fields(G_Index_KYMD)
        //             L_KBMN = L_fields(G_Index_KBMN)
        //             L_KUSR = L_fields(G_Index_KUSR)
        //             L_FUSR = L_fields(G_Index_FUSR)
        //             L_SGNO = L_fields(G_Index_SGNO)
        //             If H_Lno = 1 Then
        //                 'SIASレイアウト専用項目
        //                 L_HF1 = L_fields(G_Index_HF1)
        //                 L_HF2 = L_fields(G_Index_HF2)
        //                 L_HF3 = L_fields(G_Index_HF3)
        //                 L_HF4 = L_fields(G_Index_HF4)
        //                 L_HF5 = L_fields(G_Index_HF5)
        //                 L_HF6 = L_fields(G_Index_HF6)
        //                 L_HF7 = L_fields(G_Index_HF7)
        //                 L_HF8 = L_fields(G_Index_HF8)
        //                 L_HF9 = L_fields(G_Index_HF9)
        //                 L_HF10 = L_fields(G_Index_HF10)
        //             End If
        //             L_LastRow = L_LastRow + 1
        //         Next

        //         '最後の伝票の情報を取得

        //         ReDim Preserve H_Den_Data(L_DenCount)
        //         H_Den_Data(L_DenCount]).DYMD = L_DYMD
        //         H_Den_Data(L_DenCount]).CKEI = GetCkei(dtVolum2, L_DYMD, L_SEIRI)
        //         H_Den_Data(L_DenCount]).DCNO = L_DCNO
        //         H_Den_Data(L_DenCount]).STNO = L_FirstRow
        //         H_Den_Data(L_DenCount]).EDNO = L_LastRow
        //         H_Den_Data(L_DenCount]).R_Value = 0
        //         H_Den_Data(L_DenCount]).S_Value = 0
        //         H_Den_Data(L_DenCount]).ERR_FLG = True

        //     Catch ex As Exception

        //         Get_SWK_M_Data = False

        //         Exit Function
        //     End Try

        //     H_SWK_Data = L_CSVRecords

        //     H_SWK_Record = L_LastRow
        //     H_SWK_Value = L_Value

        // End Function
        #endregion

        // *===========================================================================================*
    	// 【説明】
    	//    仕訳データをDataRowに取得
    	// *===========================================================================================*
        private bool Get_SWK_M_Data(ref ArrayList H_SWK_Data, ref structDEN_INFO[] H_Den_Data, ref ArrayList H_SWK_DenNo, ref long H_SWK_Value, ref int H_SWK_Record,
                                    DataTable H_SiwakeTb, DataTable dtVolum2, bool H_Kakucho, int H_Lno)
    	{
            #region 変数初期化
            bool functionReturnValue = false;
    
    		ArrayList L_CSVRecords = new ArrayList();

    		string L_DYMD = "";
    		string L_DCNO = "";
    		string L_KYMD = "";
    		string L_KBMN = "";
    		string L_KUSR = "";
    		string L_FUSR = "";
    		string L_SGNO = "";
    		// SIASレイアウト専用項目
    		string L_HF1  = "";
    		string L_HF2  = "";
    		string L_HF3  = "";
    		string L_HF4  = "";
    		string L_HF5  = "";
    		string L_HF6  = "";
    		string L_HF7  = "";
    		string L_HF8  = "";
    		string L_HF9  = "";
    		string L_HF10 = "";
    		// 同一伝票化判断するフラグ
    		bool L_DoitsuFlg = false;
    
    		int L_FirstRow = 1;
    		int L_LastRow  = 0;
    		int L_DenCount = 0;
    		// 何伝票目かを判別、開始は0
    		long     L_Value     = 0;
    		int      L_ChkCurren = 0;
    		DataRow  L_SiwakeRow = default(DataRow);
    		string[] L_fields    = null;
    		string   L_SEIRI     = "0";
    
    		functionReturnValue = true;
            #endregion

            try
            {
    			foreach (DataRow L_SiwakeRowLoop in H_SiwakeTb.Rows)
                {
                    L_SiwakeRow = L_SiwakeRowLoop;

    				ColumnToAry(ref L_SiwakeRow, ref L_fields, ref H_Lno);
    				// 保存
    				L_CSVRecords.Add(L_fields);
    
    				// 金額を保存
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_ChkCurren = ChkCurrency_FNC(Strings.Trim(L_fields[G_Index_VALU]), 13);
    				L_ChkCurren = ChkCurrency_FNC(L_fields[G_Index_VALU].Trim(), 13);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (L_ChkCurren == -1 || L_ChkCurren == -2)
                    {
    					// 金額を判別できなかった場合は金額の加算なし
    					L_Value = L_Value + 0;
    				}
                    else
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Value = L_Value + Convert.ToInt64(Strings.Trim(L_fields[G_Index_VALU]));
    					L_Value = L_Value + Convert.ToInt64(L_fields[G_Index_VALU].Trim());
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				}

    				// 伝票情報が一致する場合は同一伝票とする
    				// 部署入出力処理へのインポートの場合は入力者についても伝票情報とする
    				if (H_Lno == 0)
                    {
    					// de3レイアウト
    					if (((L_DYMD == L_fields[G_Index_DYMD]) && (L_SEIRI == L_fields[G_Index_SEIRI]) && (L_DCNO == L_fields[G_Index_DCNO]) && (L_KYMD == L_fields[G_Index_KYMD]) && (L_KBMN == L_fields[G_Index_KBMN]) && (L_KUSR == L_fields[G_Index_KUSR]) && (L_SGNO == L_fields[G_Index_SGNO]) && (H_Kakucho == false || (H_Kakucho && (L_FUSR == L_fields[G_Index_FUSR])))) || L_LastRow == 0)
                        {
    						L_DoitsuFlg = true;
    					} else {
    						L_DoitsuFlg = false;
    					}
    				}
// Ver02.26.01 インボイス対応 --->
//                  else if (H_Lno == 1) {
                    else if (isNewLayout) {
// <--- Ver02.26.01 インボイス対応

    					// SIASレイアウト
    					if (((L_DYMD == L_fields[G_Index_DYMD]) && (L_DCNO == L_fields[G_Index_DCNO]) && (L_SEIRI == L_fields[G_Index_SEIRI]) && (L_KYMD == L_fields[G_Index_KYMD]) && (L_KBMN == L_fields[G_Index_KBMN]) && (L_KUSR == L_fields[G_Index_KUSR]) && (L_SGNO == L_fields[G_Index_SGNO]) && (L_HF1 == L_fields[G_Index_HF1]) && (L_HF2 == L_fields[G_Index_HF2]) && (L_HF3 == L_fields[G_Index_HF3]) && (L_HF4 == L_fields[G_Index_HF4]) && (L_HF5 == L_fields[G_Index_HF5]) && (L_HF6 == L_fields[G_Index_HF6]) && (L_HF7 == L_fields[G_Index_HF7]) && (L_HF8 == L_fields[G_Index_HF8]) && (L_HF9 == L_fields[G_Index_HF9]) && (L_HF10 == L_fields[G_Index_HF10]) && (H_Kakucho == false || (H_Kakucho && (L_FUSR == L_fields[G_Index_FUSR])))) || L_LastRow == 0)
                        {
    						L_DoitsuFlg = true;
    					}
                        else
                        {
    						L_DoitsuFlg = false;
    					}
    				}
    
    				if (L_DoitsuFlg)
                    {
    					// 【同一伝票の場合】
    					int[] L_ChkNo = {
    						L_DenCount,
    						0,
    						0,
    						0,
    						0
    					};
    					H_SWK_DenNo.Add(L_ChkNo);
    				}
                    else
                    {
    					// 【異なる伝票単位の場合】
    					// 伝票ヘッダーを取得
    					Array.Resize(ref H_Den_Data, L_DenCount + 1);
    					H_Den_Data[L_DenCount].DYMD    = L_DYMD;
    					H_Den_Data[L_DenCount].CKEI    = GetCkei(dtVolum2, L_DYMD, L_SEIRI);
    					H_Den_Data[L_DenCount].DCNO    = L_DCNO;
    					H_Den_Data[L_DenCount].STNO    = L_FirstRow;
    					H_Den_Data[L_DenCount].EDNO    = L_LastRow;
    					H_Den_Data[L_DenCount].R_Value = 0;
    					H_Den_Data[L_DenCount].S_Value = 0;
    					H_Den_Data[L_DenCount].ERR_FLG = true;
    
    					// 行区切り対応
    					H_Den_Data[L_DenCount].R_ValueTotal = 0;
    					H_Den_Data[L_DenCount].S_ValueTotal = 0;
    
    					// 次伝票の開始行を変数にセット
    					L_FirstRow = L_LastRow + 1;
    
    					L_DenCount = L_DenCount + 1;
    					int[] L_ChkNo = {
    						L_DenCount,
    						0,
    						0,
    						0,
    						0
    					};
    					H_SWK_DenNo.Add(L_ChkNo);    
    				}
    
    				// 伝票の判別情報を保管
    				L_DYMD  = L_fields[G_Index_DYMD];
    				L_SEIRI = L_fields[G_Index_SEIRI];
    				L_DCNO  = L_fields[G_Index_DCNO];
    				L_KYMD  = L_fields[G_Index_KYMD];
    				L_KBMN  = L_fields[G_Index_KBMN];
    				L_KUSR  = L_fields[G_Index_KUSR];
    				L_FUSR  = L_fields[G_Index_FUSR];
    				L_SGNO  = L_fields[G_Index_SGNO];

// Ver02.26.01 インボイス対応 --->
//    				if (H_Lno == 1) {
                    if (isNewLayout) { 
// <--- Ver02.26.01 インボイス対応

    					// SIASレイアウト専用項目
    					L_HF1  = L_fields[G_Index_HF1];
    					L_HF2  = L_fields[G_Index_HF2];
    					L_HF3  = L_fields[G_Index_HF3];
    					L_HF4  = L_fields[G_Index_HF4];
    					L_HF5  = L_fields[G_Index_HF5];
    					L_HF6  = L_fields[G_Index_HF6];
    					L_HF7  = L_fields[G_Index_HF7];
    					L_HF8  = L_fields[G_Index_HF8];
    					L_HF9  = L_fields[G_Index_HF9];
    					L_HF10 = L_fields[G_Index_HF10];
    				}
    				L_LastRow = L_LastRow + 1;
    			}
    
    			// 最後の伝票の情報を取得    
    			Array.Resize(ref H_Den_Data, L_DenCount + 1);
    			H_Den_Data[L_DenCount].DYMD    = L_DYMD;
    			H_Den_Data[L_DenCount].CKEI    = GetCkei(dtVolum2, L_DYMD, L_SEIRI);
    			H_Den_Data[L_DenCount].DCNO    = L_DCNO;
    			H_Den_Data[L_DenCount].STNO    = L_FirstRow;
    			H_Den_Data[L_DenCount].EDNO    = L_LastRow;
    			H_Den_Data[L_DenCount].R_Value = 0;
    			H_Den_Data[L_DenCount].S_Value = 0;
    			H_Den_Data[L_DenCount].ERR_FLG = true;
    
    			// 行区切り対応
    			H_Den_Data[L_DenCount].R_ValueTotal = 0;
    			H_Den_Data[L_DenCount].S_ValueTotal = 0;    
    		}
            catch
            {
    			functionReturnValue = false;
    			return functionReturnValue;
    		}
    
    		H_SWK_Data   = L_CSVRecords;    
    		H_SWK_Record = L_LastRow;
    		H_SWK_Value  = L_Value;
    		return functionReturnValue;    
    	}

    	// *===========================================================================================*
    	// 【説明】
    	//    伝票エラーログ情報の作成
    	// *===========================================================================================*
    	private bool Set_Den_Err_FNC(structDEN_INFO[] H_Den_Data, ArrayList H_SWK_DenNo, int H_SWK_Count, string H_Err_Summary, string H_Err_Description, ref structDEN_ERRORLOG[] H_DenErrLog)
    	{
    		bool functionReturnValue = false;
    
    		structDEN_INFO L_Check = H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]];
    		int L_Count = 0;
    
    		// 伝票情報配列のエラーフラグを変更
    		// 4番目は伝票エラーがあったかどうかで判断する。
    		if (!(L_Check.ERR_FLG == false))
            {
    			H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]].ERR_FLG = false;
    		}
    
    		// エラー情報を検索
    		try
            {
    			if (H_DenErrLog == null)
                {
    				// エラー情報未登録
    				Array.Resize(ref H_DenErrLog, L_Count + 1);
    				if (H_Err_Summary == MC_DEN_SUM_ERRLOG_SYOKUTI)
                    {
    					H_DenErrLog[0].Value = L_Check.R_Value - L_Check.S_Value;
    				}
                    else
                    {
    					H_DenErrLog[0].Value = 0;
    				}
    				H_DenErrLog[0].Summary     = H_Err_Summary;
    				H_DenErrLog[0].Description = H_Err_Description;
    			}
                else
                {
    				// エラー情報を文字列検索
    				for (L_Count = 0; L_Count <= H_DenErrLog.Length - 1; L_Count++)
                    {
    					if (H_DenErrLog[L_Count].Description == H_Err_Description)
                        {
    						return functionReturnValue;
    					}
    					L_Count = L_Count + 1;
    				}
    
    				// 配列内に当該エラー情報が無い場合追加
    				Array.Resize(ref H_DenErrLog, L_Count);
    
    				if (H_Err_Summary == MC_DEN_SUM_ERRLOG_SYOKUTI)
                    {
    					H_DenErrLog[L_Count - 1].Value = L_Check.R_Value - L_Check.S_Value;
    				}
                    else
                    {
    					H_DenErrLog[L_Count - 1].Value = 0;
    				}
    				H_DenErrLog[L_Count - 1].Summary     = H_Err_Summary;
    				H_DenErrLog[L_Count - 1].Description = H_Err_Description;
    			}
    		}
            catch
            {
    			// 行区切り対応
    			if (P_b_GsepFC == true)
                {
    				if (MC_DEN_COM_ERRLOG_SYOKUTI_GS == H_Err_Description)
                    {
    					// 金額合計をセット
    					H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]].R_ValueTotal = H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]].R_ValueTotal + H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]].R_Value;
    					H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]].S_ValueTotal = H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]].S_ValueTotal + H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]].S_Value;
    
    					// 最終行
    					if (H_SWK_DenNo.Count == H_SWK_Count)
                        {
    						// 1行目の場合
    						if (L_Count == 0)
                            {
    							L_Count = L_Count + 1;
    						}
    						H_DenErrLog[L_Count - 1].Value = H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]].R_ValueTotal - H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]].S_ValueTotal;
    					}
    
    					// 金額クリア
    					H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]].R_Value = 0;
    					H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]].S_Value = 0;
    				}
    			}
    		}
    		return functionReturnValue;
    	}
    
    	// *===========================================================================================*
    	// 【説明】
    	//    伝票単位の諸口金額チェック
    	//    伝票毎の貸借別の諸口金額を保存及び伝票単位で貸借諸口金額がバランスしているかチェック
    	// *===========================================================================================*
    	private int Chk_Value_FNC(IDbConnection H_Con, string[] H_SWK_Data, structDEN_INFO[] H_Den_Data, ArrayList H_SWK_DenNo, int H_SWK_Count, DataTable H_dtVolum, DataTable H_dtVolum2,
                                  DataTable H_dtKname, DataTable H_dtSvolum, int H_DFUK, DataTable H_dtJfctl, DataTable H_dtSubject, bool H_Kakutyo, int H_BunriOk_R, int H_BunriOk_S,
                                  structSVOLKM[] H_SVolumKm, int H_ZeroSiwake_R, int H_ZeroSiwake_S, int H_IsWf, int H_Lno, bool H_CsvFlg)
    	{
    		int functionReturnValue = 0;    
    
    		structDEN_INFO   L_Check           = H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]];    
    		structZDATA      L_Zdata_Bunri     = new structZDATA();
    		int              L_Gaikakamoku_Flg = 0;
    		structERRORLOG[] L_ErrLog          = null;
    		structZDATA      L_Zdata           = new structZDATA();
    		short            L_Juse            = 0;
//    		short            L_Dkei            = 0;  (未使用)
    		int              L_ErrCnt          = 0;
    
    		functionReturnValue = 1;
    
    		// ≪該当レコードの諸口金額を加算≫
    		try
            {
    			int       L_ChkCurren   = 0;
    			string    L_text        = "";
    			int       L_kesn        = 0;
    			string    LStr_R_Kicd   = "";
    			string    LStr_S_Kicd   = "";
    			int       L_CodeType    = 0;
    			int       L_CodeLen     = 0;
    			DataRow[] L_Volum2Rows  = null;
    			DataRow   L_VolumRow    = default(DataRow);
    			DataRow[] L_Rows_GaiCtl = null;
    			int       L_HSSW        = 0;
    			long      L_Kan_Value   = 0;
    			// 外貨換算後の金額を出力
    			bool      L_KanFlg      = false;
    			// 該当仕訳が外貨換算処理されたかどうか判断
    
    			long      L_R_ZeiVal    = 0;
    			long      L_S_ZeiVal    = 0;
    
    			DataRow[] L_Rows        = null;
    
    			// 該当仕訳の決算期を取得
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			L_text = Strings.Trim(H_SWK_Data[G_Index_DYMD]);
    			L_text = H_SWK_Data[G_Index_DYMD].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			L_Volum2Rows = H_dtVolum2.Select("SYMD <= " + L_text + " AND EYMD >= " + L_text, "KESN,CKEI");
    			L_kesn       = Convert.ToInt32(L_Volum2Rows[0][(int)eVOLUM2.VOLUM2_KESN]);
    			// 会社情報を取得
    			L_VolumRow   = H_dtVolum.Select("KESN = " + L_kesn)[0];
                #region ** 借方／貸方科目を取得
                LStr_R_Kicd  = "";
    			LStr_S_Kicd  = "";
    			L_CodeType   = Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMTY]);
    			L_CodeLen    = Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_KMLN]);
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			L_text = EditCode_FNC(Strings.Trim(H_SWK_Data[G_Index_RKMK]), L_CodeType.ToString(), L_CodeLen);
    			L_text       = EditCode_FNC(H_SWK_Data[G_Index_RKMK].Trim(), L_CodeType.ToString(), L_CodeLen);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			L_Rows      = H_dtKname.Select("KESN = " + L_kesn + " AND KCOD = '" + L_text + "'");
    			if (L_Rows.Length > 0)
                {
    				LStr_R_Kicd = (L_Rows[0][(int)eKNAME.KNAME_KICD]).ToString();
    			}
    			L_Rows = null;
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			L_text = EditCode_FNC(Strings.Trim(H_SWK_Data[G_Index_SKMK]), L_CodeType.ToString(), L_CodeLen);
    			L_text = EditCode_FNC(H_SWK_Data[G_Index_SKMK].Trim(), L_CodeType.ToString(), L_CodeLen);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			L_Rows = H_dtKname.Select("KESN = " + L_kesn + " AND KCOD = '" + L_text + "'");
    			if (L_Rows.Length > 0)
                {
    				LStr_S_Kicd = (L_Rows[0][(int)eKNAME.KNAME_KICD]).ToString();
    			}
    			L_Rows = null;
                #endregion

                #region 行区切り
                if (P_b_GsepFC)
                {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_Check.GSEP = Strings.Trim(H_SWK_Data[G_Index_GSEP]);
    				L_Check.GSEP = H_SWK_Data[G_Index_GSEP].Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			}
                #endregion

// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			if (ChkCurrency_FNC(Strings.Trim(H_SWK_Data[G_Index_VALU]), 13) == 0)
                if (ChkCurrency_FNC(H_SWK_Data[G_Index_VALU].Trim(), 13) == 0)
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                {
                    #region ▼▼　外貨換算金額を考慮　▼▼
                    // ** 外貨システムの端数処理を取得&外貨換算処理 **
                    if (P_b_GaikaSUB == true && (P_GaiCtl != null))
                    {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    					L_Kan_Value = Convert.ToInt64(Conversion.Val(H_SWK_Data[G_Index_VALU]));
    					L_Kan_Value = Convert.ToInt64(Regex.Replace(H_SWK_Data[G_Index_VALU], @"[^0-9]", ""));
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    					L_Rows_GaiCtl = P_GaiCtl.Select(" KESN = " + L_kesn + " AND F_USE = 1 ");
    					// Ver01.12.01 -->
    					// If L_Rows_GaiCtl(0]).ItemArray(1) = 1 Then
    					if (L_Rows_GaiCtl.Length > 0)
                        {
    						L_HSSW = Convert.ToInt32(L_Rows_GaiCtl[0].ItemArray[2]);
    						if (H_SWK_Data.Length > P_DataLen && P_b_Kanzan_Flg == true)
                            {
    							// 邦貨換算処理
    							if (H_SWK_Data[G_Index_GAIKA] != "0" && H_SWK_Data[G_Index_RATE] != "0")
                                {
    								Get_Gaika_Kanzan_FNC(H_SWK_Data[G_Index_GAIKA], Convert.ToDecimal(H_SWK_Data[G_Index_RATE]), P_Int_GaikaTani, L_HSSW, ref L_Kan_Value);
    								L_KanFlg = true;
    							}
    						}
    					}
    					// Ver01.12.01 <--
    				}
                    #endregion

                    #region ▼▼　税作成の金額を考慮　▼▼
                    // 分離処理を行う場合は、分離子仕訳の金額を取得
                    if (H_SWK_Data[G_Index_BUNRI] == "3")
                    {
    					// 分離処理を追加 ※確定日については、パラメーター値のチェックにて処理済み
    					if (SetImpData_FNC(H_SWK_Data, H_DFUK, H_Con, (short)L_kesn, H_dtVolum, H_dtSvolum, H_dtJfctl, H_dtVolum2, H_dtKname, H_dtSubject, ref L_Zdata, 
    					                   ref L_Juse, H_Kakutyo, H_BunriOk_R, H_BunriOk_S, ref L_Zdata_Bunri, H_SVolumKm, ref L_ErrLog, ref L_ErrCnt, ref L_Gaikakamoku_Flg,
    					                   ref H_ZeroSiwake_R, ref H_ZeroSiwake_S, ref H_Lno, H_CsvFlg, H_IsWf) == true)
                        {
    						// 正常処理であった場合
    						// 分離区分が指定されている場合で、分離子仕訳に諸口が入力されている場合
    						if (L_Zdata_Bunri.Rkmk == "000000000001001" || L_Zdata_Bunri.Rkmk == "000000000001002")
                            {
    							L_R_ZeiVal = Convert.ToInt64(L_Zdata_Bunri.Valu);
    						}
    						if (L_Zdata_Bunri.Skmk == "000000000001001" || L_Zdata_Bunri.Skmk == "000000000001002")
                            {
    							L_S_ZeiVal = Convert.ToInt64(L_Zdata_Bunri.Valu);
    						}
    					}
    				}
                    #endregion
                }

                #region 借方金額
                if (LStr_R_Kicd == "000000000001001" || LStr_R_Kicd == "000000000001002")
                {
    				// L_ChkCurren = ChkCurrency_FNC(Trim(H_SWK_Data((int)eIMPDATA.DATA_VALU)), 13)
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_ChkCurren = ChkCurrency_FNC(Strings.Trim(L_Kan_Value.ToString()), 13);
    				L_ChkCurren = ChkCurrency_FNC(L_Kan_Value.ToString().Trim(), 13);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (L_ChkCurren == -1 || L_ChkCurren == -2)
                    {
    					// 金額を判別できない場合は金額の加算処理なし
    				}
                    else
                    {
    					// 金額を加算
    					if (L_KanFlg == true)
                        {
    						L_Check.R_Value = L_Check.R_Value + L_Kan_Value + L_R_ZeiVal;
    					}
                        else
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Check.R_Value = L_Check.R_Value + Convert.ToInt64(Conversion.Val(H_SWK_Data[G_Index_VALU])) + L_R_ZeiVal;
//      2021/01/08 Ver02.22.07 不具合対応 --->
//    						L_Check.R_Value = L_Check.R_Value + Convert.ToInt64(Regex.Replace(H_SWK_Data[G_Index_VALU], @"[^0-9]", "")) + L_R_ZeiVal;
                            L_Check.R_Value = L_Check.R_Value + Convert.ToInt64(H_SWK_Data[G_Index_VALU]) + L_R_ZeiVal;
//      <--- 2021/01/08 Ver02.22.07 不具合対応
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                        }
                    }
    			}
                #endregion
                #region 貸方金額
                if (LStr_S_Kicd == "000000000001001" || LStr_S_Kicd == "000000000001002")
                {
                    // L_ChkCurren = ChkCurrency_FNC(Trim(H_SWK_Data((int)eIMPDATA.DATA_VALU)), 13)
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    				L_ChkCurren = ChkCurrency_FNC(Strings.Trim(L_Kan_Value.ToString()), 13)
                    L_ChkCurren = ChkCurrency_FNC(L_Kan_Value.ToString().Trim(), 13);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    				if (L_ChkCurren == -1 || L_ChkCurren == -2)
                    {
    					// 金額を判別できない場合は金額の加算処理なし
    				}
                    else
                    {
    					// 金額を加算
    					if (L_KanFlg == true)
                        {
    						L_Check.S_Value = L_Check.S_Value + L_Kan_Value + L_S_ZeiVal;
    					}
                        else
                        {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    						L_Check.S_Value = L_Check.S_Value + Convert.ToInt64(Conversion.Val(H_SWK_Data[G_Index_VALU])) + L_S_ZeiVal;
//      2021/01/08 Ver02.22.07 不具合対応 --->
//                          L_Check.S_Value = L_Check.S_Value + Convert.ToInt64(Regex.Replace(H_SWK_Data[G_Index_VALU], @"[^0-9]", "")) + L_S_ZeiVal;
                            L_Check.S_Value = L_Check.S_Value + Convert.ToInt64(H_SWK_Data[G_Index_VALU]) + L_S_ZeiVal;
//      <--- 2021/01/08 Ver02.22.07 不具合対応
// <--- 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
                        }
                    }
    			}
                #endregion
            }
            catch
            {
    		}
    
    		H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]] = L_Check;
    
    		// ≪伝票単位の諸口金額をチェック≫
    		functionReturnValue = 1;
    
    		// 次の仕訳と異なる仕訳の場合は伝票の金額をチェック
    		do
            {
    			if (H_SWK_DenNo.Count == H_SWK_Count)
                {
    				break;
    				// 最終行
    			}
    
    			// 行区切り対応
    			if (P_b_GsepFC)
                {
    				if (L_Check.GSEP == "1")
                    {
    					H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]].GSEP_FLG = true;
    					break;
    					// 行区切り
    				}
    			}
    
    			if (((int[])H_SWK_DenNo[H_SWK_Count - 1])[0] != ((int[])H_SWK_DenNo[H_SWK_Count])[0])
                {
    				break;
    				// 該当行が現在伝票の最終行
    			}
    			return functionReturnValue;
    
    			// 最終行でもなく該当行が現在伝票の最終行でもない
    		} while (true);
    
    		// 伝票の最終行の場合は金額チェック
    		if (L_Check.R_Value != L_Check.S_Value)
            {
    			functionReturnValue = 0;
    		}
    		return functionReturnValue;    
    	}
    
    	// *===========================================================================================*
    	// 【説明】
    	//    財務データとの伝票番号チェック処理
    	// *===========================================================================================*
    	private int Chk_DCNOtoDB_FNC(IDbConnection H_Con, structDEN_INFO[] H_Den_Data, ArrayList H_SWK_DenNo, int H_SWK_Count, short H_Touki, short H_Dkei)
    	{
    		int functionReturnValue = 0;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		int        L_Val    = 0;    
    		string     L_Filter = "";
    
    		L_Cmd = H_Con.CreateCommand();
    
    		// 正常
    		functionReturnValue = 1;
    
    		// 次の伝票と現在伝票が異なる場合にチェックをおこなう。
    		do
            {
    			if (H_SWK_DenNo.Count == H_SWK_Count)
                {
    				break;
    				// 最終行
    			}
    			if (((int[])H_SWK_DenNo[H_SWK_Count - 1])[0] != ((int[])H_SWK_DenNo[H_SWK_Count])[0])
                {
    				break;
    				// 該当行が現在伝票の最終行
    			}
    			return functionReturnValue;
    			// 最終行でもなく該当行が現在伝票の最終行でもない
    		} while (true);
    
    		structDEN_INFO L_Check = H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]];
    
    		if (IsNumeric_FNC(L_Check.DCNO) == false)
            {
    			L_Check.DCNO = "0";
    		}
    
    		if (L_Check.DCNO == "0")
            {
    			// 伝票番号未入力は内部統制、電子帳簿保存、履歴を除いてチェックしない
    			// de2-xxxxx 仕訳履歴等使用状況を参照していない不具合を修正
    			if (P_JSOX == false && P_ShiwakeRireki == false && volum_dflg[H_Touki] != 1)
                {
    				return functionReturnValue;
    			}
    			L_Filter = " AND DCNO IS NULL ";
    		}
            else
            {
    			L_Filter = " AND DCNO = " + L_Check.DCNO + " ";
    		}
    
    		// 財務データベースとのチェック
    		try
            {
    			if (H_Den_Data == null)
                {
    				return functionReturnValue;
    			}
    
    			// 伝票番号-伝票日付チェック
    			L_Cmd.CommandText = "SELECT DYMD FROM ZDATA_H WHERE DELF = 0 AND KESN = " + H_Touki + " AND DKEI = " + H_Dkei + L_Filter;
    			L_Val             = Convert.ToInt32(L_Cmd.ExecuteScalar());
    			if (L_Val > 0)
                {
    				if (L_Val == Convert.ToInt32(L_Check.DYMD))
                    {
    					// 同一伝票番号・同一伝票日付のデータが存在
    					functionReturnValue = -1;
    				}
                    else
                    {
    					// 同一伝票番号だが異なる伝票日付の伝票が存在
    					functionReturnValue = -2;    
    				}
    			}
                else
                {
    				// 日次で使用されていなかった場合は拡張の値をチェック
    				L_Cmd.CommandText = "SELECT DYMD FROM SJDAT_H WHERE DELF = 0 AND KESN = " + H_Touki + " AND DKEI = " + H_Dkei + L_Filter;
    				L_Val = Convert.ToInt32(L_Cmd.ExecuteScalar());
    				if (L_Val > 0) {
    					if (L_Val == Convert.ToInt32(L_Check.DYMD))
                        {
    						// 同一伝票番号・同一伝票日付のデータが存在
    						functionReturnValue = -1;
    					}
                        else
                        {
    						// 同一伝票番号だが異なる伝票日付の伝票が存在
    						functionReturnValue = -2;
    					}
    				}
    			}
    		} catch
            {
    		}
    		return functionReturnValue;  
    	}

        // 経過月取得
    	private short GetCkei(DataTable dtVolum2, string dymd, string seiflg)
    	{
    		try
            {
    			string @orderby = null;

    			if (seiflg == "1")
                {
    				@orderby = "KESN,CKEI DESC";
    			}
                else
                {
    				@orderby = "KESN,CKEI";
    			}
    			DataRow[] rows = dtVolum2.Select("SYMD <= " + dymd + " AND EYMD >= " + dymd, @orderby);

    			if (rows.Length > 0)
                {
    				return Convert.ToInt16(rows[0]["CKEI"]);
    			}
                else
                {
    				return 0;
    			}
    		}
            catch (SyntaxErrorException)
            {
    			return 0;
    		}
    	}

    	// *===========================================================================================*
    	// 【説明】
    	//    仕訳データとの伝票番号チェック処理
    	// *===========================================================================================*
    	private int Chk_DCNOtoDATA_FNC(ArrayList H_SWK_Data, structDEN_INFO[] H_Den_Data, ArrayList H_SWK_DenNo, int H_SWK_Count, bool H_BChkSel, DataTable dtVolum2, int H_Kesn)
    	{
    		int functionReturnValue = 0;
    
    		int L_Count = 0;
    
    		// 正常
    		functionReturnValue = 1;

            #region 元からコメントアウト
            // Prj312--->
    		// 常にチェックをおこなうように変更
    		// '次の伝票と現在伝票が異なる場合にチェックをおこなう。
    		// Do
    		//     If H_SWK_DenNo.Count = H_SWK_Count Then
    		//         Exit Do
    		//         '最終行
    		//     End If
    		//     If ((int[])H_SWK_DenNo[H_SWK_Count - 1])[0] <> H_SWK_DenNo(H_SWK_Count)(0) Then
    		//         Exit Do
    		//         '該当行が現在伝票の最終行
    		//     End If
    		//     '最終行でもなく該当行が現在伝票の最終行でもない
    		//     Exit Function
    		// Loop
            // <---
            #endregion

            structDEN_INFO L_Check = H_Den_Data[((int[])H_SWK_DenNo[H_SWK_Count - 1])[0]];
    		if (string.IsNullOrEmpty(L_Check.DCNO) && P_JSOX == false && P_ShiwakeRireki == false && volum_dflg.ContainsKey(H_Kesn) == false)
            {
    			return functionReturnValue;
    		}
    		// 次の伝票と現在伝票が異なる場合、チェック
    		if (H_BChkSel == true)
            {
    			// 自分の仕訳より後にある伝票のチェックは行わない
    			// 伝票番号と経過月が同一で伝票日付が異なる伝票が複数存在する場合はエラー ※エラーとなった伝票は除く
    			for (L_Count = 0; L_Count <= H_SWK_Count - 1; L_Count++)
                {
                    if (((((string[])(H_SWK_Data[L_Count]))[2]) == L_Check.DCNO) && ((((string[])(H_SWK_Data[L_Count]))[0]) != L_Check.DYMD) &&
                         (GetCkei(dtVolum2, (((string[])(H_SWK_Data[L_Count]))[0]), (((string[])(H_SWK_Data[L_Count]))[1])) == L_Check.CKEI) &&
                         (H_Den_Data[((int[])(H_SWK_DenNo[L_Count]))[0]].ERR_FLG != false) && L_Count != (H_SWK_Count - 1))
                    {
    					functionReturnValue = -3;
    					// Prj312--->
    					return functionReturnValue;
    					// <---
    				}
    			}
    		}
            else
            {
    			// 伝票番号・伝票日付が同一の伝票がある場合(混在伝票チェック)　※エラーとなった伝票は除く
    			// 修正(自分の仕訳より後にある伝票のチェックは行わない)
    			for (L_Count = 0; L_Count <= H_SWK_Count - 1; L_Count++)
                {
    				if (H_Den_Data[((int[])H_SWK_DenNo[L_Count])[0]].ERR_FLG != false)
                    {
    					if (L_Check.STNO - 1 > L_Count || L_Check.EDNO - 1 < L_Count) {
                            // Prj312--->
                            if (((((string[])(H_SWK_Data[L_Count]))[2]) == L_Check.DCNO) && ((((string[])(H_SWK_Data[L_Count]))[0]) == L_Check.DYMD) &&
                                (GetCkei(dtVolum2, (((string[])(H_SWK_Data[L_Count]))[0]), (((string[])(H_SWK_Data[L_Count]))[1])) == L_Check.CKEI))
                            {
    							// If (H_SWK_Data(L_Count)(2) = L_Check.DCNO) And (H_SWK_Data(L_Count)(0) = L_Check.DYMD) Then
    							// <---
    							functionReturnValue = -4;
    							// Prj312--->
    							return functionReturnValue;
    							// <---
    						}
    					}
    				}
    			}
    		}
    		return functionReturnValue;    
    	}

        #region ログ
        // *===========================================================================================*
        // 【説明】
        //    不良伝票ログ及び処理ログ用のファイル名を返送
        // *===========================================================================================*
        private string Get_LogName_FNC(string H_LogFileName, short H_Sel)
    	{
    		string functionReturnValue = null;
    
    		string L_Str1  = null;
    		string L_Str2  = null;
    		int    L_All   = 0;
    		int    L_Colon = 0;
//    		int    L_S_cnt = 0;
    		string L_ReLog = "";
    
    		// 初期値
    		functionReturnValue = H_LogFileName;

            #region 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    		// 全文字数
//    		L_All = Strings.Len(H_LogFileName);
//    		// 右端から’.’が含まれる文字数
//    		L_Colon = Strings.InStrRev(H_LogFileName, ".", -1, CompareMethod.Binary);
//    		// 左端からコロンがあるところまでの文字数を取得する。
//    		L_Str1 = Strings.Left(H_LogFileName, L_Colon - 1);
//    		// 拡張子を取得する
//    		L_Str2 = Strings.Right(H_LogFileName, L_All - (L_Colon - 1));
            #endregion
            // 全文字数
            L_All = H_LogFileName.Length;
            // 右端から’.’が含まれる文字数
            L_Colon = H_LogFileName.LastIndexOf(".");
    		// 左端からコロンがあるところまでの文字列を取得する。
    		L_Str1 = H_LogFileName.Substring(0, L_Colon);
    		// 拡張子を取得する
    		L_Str2 = H_LogFileName.Substring(L_Colon, L_All - L_Colon);
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    		// ログファイル名連結
    		L_ReLog = L_Str1 + "_" + H_Sel.ToString() + L_Str2;
    
    		// 返送値
    		functionReturnValue = L_ReLog;
    		return functionReturnValue;    
    	}
    
    	// *===========================================================================================*
    	// 【説明】
    	//    処理情報ログを出力
    	// *===========================================================================================*
    	private bool LogWrite_Syori_FNC(ref StreamWriter H_LogWriter, string H_LogFileName, int H_PrcFlg, int H_AllGyo, int H_ToriCnt, long H_ToriValue)
    	{
    		bool functionReturnValue = false;
    
    		string L_StrCmt = "";
    
    		functionReturnValue = true;
    
    		// □　ログファイル出力　□
    
    		// <コメント欄作成>
    		if (H_PrcFlg == 0)
            {
                #region チェック＆取込処理
                if (H_ToriCnt == 0)
                {
    				L_StrCmt = MC_SYORILOG_I_NOALL;
    			}
                else
                {
    				if (H_AllGyo == H_ToriCnt)
                    {
    					L_StrCmt = MC_SYORILOG_I_ALL;
    				}
                    else
                    {
    					L_StrCmt = MC_SYORILOG_I_PART;
    				}
    			}
                #endregion
            }
            else
            {
                #region チェック処理のみ
                if (H_ToriCnt == 0)
                {
    				L_StrCmt = MC_SYORILOG_C_NOALL;
    			}
                else
                {
    				if (H_AllGyo == H_ToriCnt)
                    {
    					L_StrCmt = MC_SYORILOG_C_ALL;
    				}
                    else
                    {
    					L_StrCmt = MC_SYORILOG_C_PART;
    				}
    			}
                #endregion
            }
    
    		// 初回書込み時OPEN
    		if (H_LogWriter == null)
            {
    			try
                {
    				H_LogWriter = new StreamWriter(H_LogFileName, true, System.Text.Encoding.GetEncoding(932));
    			}
                catch
                {
    				H_LogWriter.Close();
    				// 他の接続は関数返送後にClose
    				functionReturnValue = false;
    				return functionReturnValue;
    			}
    		}
    		try
            {
    			// 処理情報ログ(_1)
    			H_LogWriter.WriteLine(P_Str_KidouDate + "," + H_PrcFlg + "," + H_AllGyo + "," + H_ToriCnt + "," + H_ToriValue + "," + L_StrCmt);
    		}
            catch
            {
    			H_LogWriter.Close();
    			// 他の接続は関数返送後にClose
    			functionReturnValue = false;
    			return functionReturnValue;
    		}
    		return functionReturnValue;    
    	}
    

    	// *===========================================================================================*
    	// 【説明】
    	//    不良仕訳ログ及び不良伝票ログを初期化（ファイルの中身をクリアー）
    	// *===========================================================================================*
    	private bool LogWrite_Clear_FNC(string H_LogFileName)
    	{
    		bool functionReturnValue = false;
    
    		StreamWriter L_LogWriter = null;
    		int          L_Li        = 1;

    		functionReturnValue = true;
    
    		// □　ログファイル初期化　□
    		for (L_Li = 1; L_Li <= 2; L_Li++)
            {
    			try
                {
    				if (L_Li == 1)
                    {
    					L_LogWriter = new StreamWriter(H_LogFileName, false, System.Text.Encoding.GetEncoding(932));
    				}
                    else
                    {
    					L_LogWriter = new StreamWriter(Get_LogName_FNC(H_LogFileName, 2), false, System.Text.Encoding.GetEncoding(932));
    				}
    
    			}
                catch
                {
    				L_LogWriter.Close();
    				// 他の接続は関数返送後にClose
    				functionReturnValue = false;
    				return functionReturnValue;
    			}
    
    			try
                {
    				// ログファイルをNULLで更新
    				L_LogWriter.Write(System.DBNull.Value);
    			}
                catch
                {
    				L_LogWriter.Close();
    				// 他の接続は関数返送後にClose
    				functionReturnValue = false;
    				return functionReturnValue;
    			}
    
    			// クローズ
    			L_LogWriter.Close();    
    		}
    		return functionReturnValue;    
    	}
        #endregion

        // *===========================================================================================*
        // 【説明】
        //    処理中断時のエラー値に対応した文字列を返送
        // *===========================================================================================*
        private string Get_TyuDan_Cmt(int H_LogValue, string H_JFDCNO)
    	{    
    		string L_StrWord = "";
    
    		switch (H_LogValue)
            {
    			case -30:
    				L_StrWord = MC_DEN_COM_ERRLOG_BREAK_DBWRI;
    				break;
    			case -32:
    				L_StrWord = MC_DEN_COM_ERRLOG_BREAK_DBRE;
    				break;
    			case -33:
    				L_StrWord = MC_DEN_COM_ERRLOG_BREAK_DBWRI;
    				break;
    			case -50:
    				L_StrWord = MC_DEN_COM_ERRLOG_BREAK_JIDOU_ST + H_JFDCNO + MC_DEN_COM_ERRLOG_BREAK_JIDOU_END;
    				break;
    			case -51:
    				L_StrWord = MC_DEN_COM_ERRLOG_BREAK_DEN;
    				break;
    			case -52:
    				L_StrWord = MC_DEN_COM_ERRLOG_BREAK_DIFFDB;
    				break;
    			case -53:
    				L_StrWord = "受付番号" + MC_DEN_COM_ERRLOG_BREAK_UP;
    				break;
    			case -54:
    				L_StrWord = "伝票番号" + MC_DEN_COM_ERRLOG_BREAK_UP;
    				break;
    			case -55:
    				L_StrWord = MC_DEN_COM_ERRLOG_BREAK_INVALIDDUNO;
    
    				break;
    			// *-リンク情報
    			case -56:
    				L_StrWord = MC_DEN_COM_ERRLOG_LINK;
    				break;
    			// -*
    			default:
    				L_StrWord = MC_DEN_COM_ERRLOG_BREAK_ELSE;
    
    				break;
    		}
    
    		return L_StrWord;    
    	}

        #region 履歴
        /// <summary>
        /// アクセス履歴保存設定取得
        /// </summary>
        private void CheckAccessRireki(IDbConnection H_Con)
    	{
    		IDbCommand L_Cmd    = null;
    		object     L_Result = null;
    
    		L_Cmd             = H_Con.CreateCommand();
    		L_Cmd.CommandText = "SELECT FLG FROM SETRKI WHERE IDNO = 1";    
    		L_Result          = L_Cmd.ExecuteScalar();

    		if (L_Result == null)
            {
    			access_rireki = 0;
    		}
            else
            {
    			access_rireki = Convert.ToInt32(L_Result);
    		}    
    	}

    	/// <summary>
        /// 仕訳履歴    
        /// </summary>
    	private void CheckShiwakeRireki(IDbConnection H_Con)
    	{
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		L_Cmd             = H_Con.CreateCommand();
    		L_Cmd.CommandText = "SELECT FLG FROM SETRKIK WHERE IDNO = 1";    
    		L_Result          = L_Cmd.ExecuteScalar();

    		if (L_Result == null)
            {
    			P_ShiwakeRireki = false;
    		}
            else
            {
    			P_ShiwakeRireki = true;
    		}    
    	}
        #endregion

        #region 消込対象科目
        // 消込対象科目の取得
        private void InitKSKMK(IDbConnection H_Con)
    	{
    		kskmk = new Dictionary<int, List<string>>();

    		if (DBSUB.Kesi_Status < 2)
            {
    			return;
    		}
    
    		IDbCommand  L_Cmd    = null;
    		IDataReader L_Reader = default(IDataReader);
    
    		L_Cmd             = H_Con.CreateCommand();
    		L_Cmd.CommandText = "SELECT KESN, KICD FROM KSKMK ORDER BY KESN, KICD";    
    		L_Reader          = L_Cmd.ExecuteReader();

    		while (L_Reader.Read())
            {
    			int          kesn  = Convert.ToInt32(L_Reader[0]);
    			string       kicd  = Convert.ToString(L_Reader[1]);
    			List<string> kicds = null;

    			if (kskmk.ContainsKey(kesn))
                {
    				kicds = kskmk[kesn];
    			}
                else
                {
    				kicds = new List<string>();
    				kskmk.Add(kesn, kicds);
    			}
    			kicds.Add(kicd);
    		}
    		L_Reader.Close();    
    	}

    	// 消込対象科目チェック
    	private bool CheckKSKMK(int kesn, params string[] kicds)
    	{
    		if (kskmk == null)
            {
    			return false;
    		}
    		if (DBSUB.Kesi_Status < 2)
            {
    			return false;
    		}
    		foreach (string kicd in kicds)
            {
    			if (kskmk.ContainsKey(kesn))
                {
    				if (kskmk[kesn].Contains(kicd))
                    {
    					return true;
    				}
    			}
    		}
    		return false;
    	}
        #endregion

        // / <summary>
        // / 部門仕入区分、枝番課税区分を反映したKNAMEのDataRowを取得する
        // / </summary>
        private DataRow GetApplyKnameRow(DataTable knameTable, DataRow resourceKanmeRow, BumonInfo bumonInfo, EdabanInfo edabanInfo)
    	{
    		//  部門仕入区分、枝番課税区分を使用しない場合は元のDataRowを使用する
    		if (!bumonInfo.HasDefaultSiireKubun() && !edabanInfo.HasDefaultKazeiKubun())
            {
    			return resourceKanmeRow;
    		}
    		//  resourceKanmeRowを変更すると以降DataTableから再取得するデータも変わってしまうため複製
    		DataRow applyKnameRow = knameTable.NewRow();
    		for (int i = 0; i <= knameTable.Columns.Count - 1; i++)
            {
    			applyKnameRow[i] = resourceKanmeRow[i];
    		}
    		if (bumonInfo.HasDefaultSiireKubun())
            {
    			applyKnameRow[(int)eKNAME.KNAME_SY05] = bumonInfo.DefaultSiireKubun;
    		}
    		if (edabanInfo.HasDefaultKazeiKubun())
            {
    			applyKnameRow[(int)eKNAME.KNAME_SY03] = edabanInfo.DefaultKazeiKubun;
    		}
    		if (edabanInfo.HasDefaultBunriKubun())
            {
    			applyKnameRow[(int)eKNAME.KNAME_SY04] = edabanInfo.DefaultBunriKubun;
    		}
    		return applyKnameRow;
    	}

    	// ＨＦ・ＵＦ名称設定    
    	private void SetHfUfName(DataTable H_dtVolum, int H_Lno)
        {
            #region 元からコメントアウト
            // *-01.10.01 名称がセットされていない場合にエラーとなる為、修正
    		// M_ItemName(G_Index_RDM1 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D1NM)
    		// M_ItemName(G_Index_SDM1 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D1NM)
    		// M_ItemName(G_Index_RDM2 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D2NM)
    		// M_ItemName(G_Index_SDM2 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D2NM)
    		// M_ItemName(G_Index_RDM3 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D3NM)
    		// M_ItemName(G_Index_SDM3 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D3NM)
    		// If H_Lno = 1 Then
    		//     M_ItemName(G_Index_HF1 + 1) = H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_DUF1NM)
    		//     M_ItemName(G_Index_HF2 + 1) = H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_DUF2NM)
    		//     M_ItemName(G_Index_HF3 + 1) = H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_DUF3NM)
    		//     M_ItemName(G_Index_HF4 + 1) = H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_DUF4NM)
    		//     M_ItemName(G_Index_HF5 + 1) = H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_DUF5NM)
    		//     M_ItemName(G_Index_HF6 + 1) = H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_DUF6NM)
    		//     M_ItemName(G_Index_HF7 + 1) = H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_DUF7NM)
    		//     M_ItemName(G_Index_HF8 + 1) = H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_DUF8NM)
    		//     M_ItemName(G_Index_HF9 + 1) = H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_DUF9NM)
    		//     M_ItemName(G_Index_HF10 + 1) = H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_DUF10NM)
    
    		//     M_ItemName(G_Index_RDM4 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D4NM)
    		//     M_ItemName(G_Index_SDM4 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D4NM)
    		//     M_ItemName(G_Index_RDM5 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D5NM)
    		//     M_ItemName(G_Index_SDM5 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D5NM)
    		//     M_ItemName(G_Index_RDM6 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D6NM)
    		//     M_ItemName(G_Index_SDM6 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D6NM)
    		//     M_ItemName(G_Index_RDM7 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D7NM)
    		//     M_ItemName(G_Index_SDM7 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D7NM)
    		//     M_ItemName(G_Index_RDM8 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D8NM)
    		//     M_ItemName(G_Index_SDM8 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D8NM)
    		//     M_ItemName(G_Index_RDM9 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D9NM)
    		//     M_ItemName(G_Index_SDM9 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D9NM)
    		//     M_ItemName(G_Index_RDM10 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D10NM)
    		//     M_ItemName(G_Index_SDM10 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D10NM)
    		//     M_ItemName(G_Index_RDM11 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D11NM)
    		//     M_ItemName(G_Index_SDM11 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D11NM)
    		//     M_ItemName(G_Index_RDM12 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D12NM)
    		//     M_ItemName(G_Index_SDM12 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D12NM)
    		//     M_ItemName(G_Index_RDM13 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D13NM)
    		//     M_ItemName(G_Index_SDM13 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D13NM)
    		//     M_ItemName(G_Index_RDM14 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D14NM)
    		//     M_ItemName(G_Index_SDM14 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D14NM)
    		//     M_ItemName(G_Index_RDM15 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D15NM)
    		//     M_ItemName(G_Index_SDM15 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D15NM)
    		//     M_ItemName(G_Index_RDM16 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D16NM)
    		//     M_ItemName(G_Index_SDM16 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D16NM)
    		//     M_ItemName(G_Index_RDM17 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D17NM)
    		//     M_ItemName(G_Index_SDM17 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D17NM)
    		//     M_ItemName(G_Index_RDM18 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D18NM)
    		//     M_ItemName(G_Index_SDM18 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D18NM)
    		//     M_ItemName(G_Index_RDM19 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D19NM)
    		//     M_ItemName(G_Index_SDM19 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D19NM)
    		//     M_ItemName(G_Index_RDM20 + 1) = "借方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D20NM)
    		//     M_ItemName(G_Index_SDM20 + 1) = "貸方" && H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_D20NM)
            // End If
            #endregion

            M_ItemName[G_Index_RDM1 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D1NM].ToString();
    		M_ItemName[G_Index_SDM1 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D1NM].ToString();
    		M_ItemName[G_Index_RDM2 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D2NM].ToString();
    		M_ItemName[G_Index_SDM2 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D2NM].ToString();
    		M_ItemName[G_Index_RDM3 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D3NM].ToString();
    		M_ItemName[G_Index_SDM3 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D3NM].ToString();

// Ver02.26.01 インボイス対応 --->
//    		if (H_Lno == 1) {
            if (isNewLayout) {
// <--- Ver02.26.01 インボイス対応

    			// *-01.10.02
    			// M_ItemName(G_Index_HF1 + 1) = H_dtVolum.Rows(0)[(int)eVOLUM.VOLUM_DUF1NM)
    			M_ItemName[G_Index_HF1 + 1]   = H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_DUF1NM].ToString();
    			// -*01.10.02
    			M_ItemName[G_Index_HF2 + 1]   = H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_DUF2NM].ToString();
    			M_ItemName[G_Index_HF3 + 1]   = H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_DUF3NM].ToString();
    			M_ItemName[G_Index_HF4 + 1]   = H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_DUF4NM].ToString();
    			M_ItemName[G_Index_HF5 + 1]   = H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_DUF5NM].ToString();
    			M_ItemName[G_Index_HF6 + 1]   = H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_DUF6NM].ToString();
    			M_ItemName[G_Index_HF7 + 1]   = H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_DUF7NM].ToString();
    			M_ItemName[G_Index_HF8 + 1]   = H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_DUF8NM].ToString();
    			M_ItemName[G_Index_HF9 + 1]   = H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_DUF9NM].ToString();
    			M_ItemName[G_Index_HF10 + 1]  = H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_DUF10NM].ToString();
    
    			M_ItemName[G_Index_RDM4 + 1]  = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D4NM].ToString();
    			M_ItemName[G_Index_SDM4 + 1]  = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D4NM].ToString();
    			M_ItemName[G_Index_RDM5 + 1]  = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D5NM].ToString();
    			M_ItemName[G_Index_SDM5 + 1]  = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D5NM].ToString();
    			M_ItemName[G_Index_RDM6 + 1]  = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D6NM].ToString();
    			M_ItemName[G_Index_SDM6 + 1]  = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D6NM].ToString();
    			M_ItemName[G_Index_RDM7 + 1]  = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D7NM].ToString();
    			M_ItemName[G_Index_SDM7 + 1]  = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D7NM].ToString();
    			M_ItemName[G_Index_RDM8 + 1]  = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D8NM].ToString();
    			M_ItemName[G_Index_SDM8 + 1]  = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D8NM].ToString();
    			M_ItemName[G_Index_RDM9 + 1]  = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D9NM].ToString();
    			M_ItemName[G_Index_SDM9 + 1]  = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D9NM].ToString();
    			M_ItemName[G_Index_RDM10 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D10NM].ToString();
    			M_ItemName[G_Index_SDM10 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D10NM].ToString();
    			M_ItemName[G_Index_RDM11 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D11NM].ToString();
    			M_ItemName[G_Index_SDM11 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D11NM].ToString();
    			M_ItemName[G_Index_RDM12 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D12NM].ToString();
    			M_ItemName[G_Index_SDM12 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D12NM].ToString();
    			M_ItemName[G_Index_RDM13 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D13NM].ToString();
    			M_ItemName[G_Index_SDM13 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D13NM].ToString();
    			M_ItemName[G_Index_RDM14 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D14NM].ToString();
    			M_ItemName[G_Index_SDM14 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D14NM].ToString();
    			M_ItemName[G_Index_RDM15 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D15NM].ToString();
    			M_ItemName[G_Index_SDM15 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D15NM].ToString();
    			M_ItemName[G_Index_RDM16 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D16NM].ToString();
    			M_ItemName[G_Index_SDM16 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D16NM].ToString();
    			M_ItemName[G_Index_RDM17 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D17NM].ToString();
    			M_ItemName[G_Index_SDM17 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D17NM].ToString();
    			M_ItemName[G_Index_RDM18 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D18NM].ToString();
    			M_ItemName[G_Index_SDM18 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D18NM].ToString();
    			M_ItemName[G_Index_RDM19 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D19NM].ToString();
    			M_ItemName[G_Index_SDM19 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D19NM].ToString();
    			M_ItemName[G_Index_RDM20 + 1] = "借方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D20NM].ToString();
    			M_ItemName[G_Index_SDM20 + 1] = "貸方" + H_dtVolum.Rows[0][(int)eVOLUM.VOLUM_D20NM].ToString();
    		}    
    		// -*01.10.01 名称がセットされていない場合にエラーとなる為、修正
    	}
    	// インポートデータのＨＦ・ＵＦをセット
    	private string SetImpHfUf_FNC(int H_UfFlg, int H_CodeType, int H_CodeLen, int H_CodeSyoLen, string H_ImpString, bool H_CsvFlg)
    	{
    		string L_Text         = "";
    		string L_TrimText     = "";
    		string L_ReturnString = "";
    
    		if (H_UfFlg != 0)
            {
// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//    			L_TrimText = Strings.Trim(H_ImpString);
    			L_TrimText = H_ImpString.Trim();
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応
    			EditImpString_FNC(H_ImpString, H_CsvFlg, H_CodeType, ref L_Text);
    			if (string.IsNullOrEmpty(L_Text) == false)
                {
    				switch (H_CodeType)
                    {
    					case 1:
    					case 2:
    						L_ReturnString = EditCode_FNC(L_Text, H_CodeType.ToString(), H_CodeLen);
    						break;
    					case 3:
    						L_ReturnString = CnvDummyKingaku_FNC(L_TrimText);
    						break;
    					case 4:
    						L_ReturnString = CnvDummySyosu_FNC(L_TrimText.ToString(), (short)H_CodeSyoLen);
    						break;
    					case 5:
    						L_ReturnString = L_TrimText;
    						break;
    					case 6:
    						L_ReturnString = L_Text;
    						break;
    				}
    			}
    		}
    		return L_ReturnString;
    	}    
    
    	// *===========================================================================================*
    	//    処理区分チェック
    	// *===========================================================================================*
    	private int ChkSKUBUN_FNC(int H_SKUBUN)
    	{
    		int functionReturnValue = 0;
    		// ** 区分存在チェック
    		if (!(Enum.IsDefined(typeof(eSKUBUN), H_SKUBUN)))
            {
    			functionReturnValue = MC_RESULT_ERR_SKUBUN;
    			return functionReturnValue;
    		}
    
    		P_SKUBUN = H_SKUBUN;
    
    		functionReturnValue = MC_RESULT_OK;
    		return functionReturnValue;    
    	}

    	// *===========================================================================================*
    	//    入力手段・最終変更手段 取得
    	// *===========================================================================================*
    	private int Get_WayDefNo_FNC(bool H_Kakutyo)
    	{
    		int functionReturnValue = 0;
    		// Prj312では予算執行なし
    		// ** SKUBUN判定
    		switch (P_SKUBUN)
            {
    			case (int)eSKUBUN.SKUBUN_KYUYO:
    				// 人事給与区分
    				functionReturnValue = (H_Kakutyo ? 8022 : 8021);
    				break;
    			// Case eSKUBUN.SKUBUN_YOSAN_SIKKOU    '予算執行区分
    			//     Get_WayDefNo_FNC = IIf(H_Kakutyo, 8032, 8031)
    			case (int)eSKUBUN.SKUBUN_WORK_FLOW:
    				// ワークフロー
    				functionReturnValue = (H_Kakutyo ? 8042 : 8041);
    				break;
    			case (int)eSKUBUN.SKUBUN_INFOMART:
    				// BtoBプラットフォーム連携
    				functionReturnValue = (H_Kakutyo ? 8052 : 8051);
    				break;
    			// <---Ver01.17.04　2019/02/28　hirano　AI-OCR対応
    			case (int)eSKUBUN.SKUBUN_AIOCR:
                    // AT-OCR
    				functionReturnValue = (H_Kakutyo ? 8062 : 8061);
    				break;
    			// --->Ver01.17.04
    		}
    		return functionReturnValue;    
    	}

        #region 元からコメントアウト
        // *-01.06.01　不具合修正により再作成
    	// *===========================================================================================*
    	//  3コードマスタのレコードを作成していきます。
    	//    【対象テーブル】
    	//        [部門科目取引先]
    	//            部門科目取引先残高(BTKZAN)
    	//            部門科目取引先予算(BTKYSN1～4)
    	//            部門科目取引先外貨残高(GBTKZAN)
    	// 
    	//        [部門科目枝番]
    	//            部門科目枝番残高(BKEZAN)
    	//            部門科目枝番予算(BKEYSN1～4)
    	//            部門科目枝番外貨残高(GBKEZAN)
    	// 
    	//        [セグメント取引先科目残高]
    	//            セグメント取引先科目残高(STKZAN)
    	//    
    	// 		【パラメータ】
    	// 		【返送値】
    	// *===========================================================================================*
    	//  3コードマスタのレコードを作成していきます。
    	//    【対象テーブル】
    	//        [部門科目取引先]
    	//            部門科目取引先残高(BTKZAN)
    	//            部門科目取引先予算(BTKYSN1～4)
    	//            部門科目取引先外貨残高(GBTKZAN)
    	// 
    	//        [部門科目枝番]
    	//            部門科目枝番残高(BKEZAN)
    	//            部門科目枝番予算(BKEYSN1～4)
    	//            部門科目枝番外貨残高(GBKEZAN)
    	// 
    	//        [セグメント取引先科目残高]
    	//            セグメント取引先科目残高(STKZAN)
    	//    
    	// 		【パラメータ】
    	// 		【返送値】    '*===========================================================================================*
    	// Private Function Make3CodeRecord(ByVal H_Con As IDbConnection, ByVal H_Zdata As structZDATA, _
    	//                                  ByVal H_dtVolum As DataTable, ByRef L_Cmd As IDbCommand, ByVal H_Touki As Short) _
    	//                                 As Integer
    
    	//     Dim L_KesnCnt As Short
    	//     Dim L_Reader As IDataReader
    	//     Dim L_Filter As String
    	//     Dim L_Exist As Boolean
    
    	//     ' 科目単位の3コード使用状態 - Ture:使用する False:使用しない
    	//     ' (0, 0) 借方 - 部門取引先科目使用フラグ
    	//     ' (0, 1)        部門科目枝番フラグ
    	//     ' (0, 2)        セグメント取引先科目使用フラグ
    	//     ' (1, 0) 貸方 - 部門取引先科目使用フラグ
    	//     ' (1, 1)        部門科目枝番フラグ
    	//     ' (1, 2)        セグメント取引先科目使用フラグ
    	//     Dim Use3CodeStat(2, 3) As Boolean
    
    	//     '決算期単位で反復します。最大2周(当期の場合、翌期まで)
    	//     For L_KesnCnt = H_Zdata.Kesn To If(H_Zdata.Kesn = H_Touki, H_Zdata.Kesn + 1, H_Zdata.Kesn)
    
    	//         ' 対象となる科目の3コードの使用状態を取得
    
    	//         Get3CodeStat(L_Cmd, L_KesnCnt, H_Zdata.Rkmk, H_Zdata.Skmk, Use3CodeStat)
    
    	//         '// // /
    
    	//         ' ■■■ 部門科目取引先レコード[借方] ■■■
    	//         If (H_Zdata.Rbmn <> "") And (H_Zdata.Rtor <> "") And (Use3CodeStat(0, 0)) Then
    	//             ' 借方部門コード有かつ、借方取引先コード有かつ、借方科目コード部門取引先科目使用
    
    	//             If ((If(L_KesnCnt = H_Touki + 1, ChkImpData_Bmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rbmn, H_Zdata.Rkmk), True)) And
    	//                 (If(L_KesnCnt = H_Touki + 1, ChkImpData_Tr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rtor, H_Zdata.Rkmk), True)) And
    	//                 (If(L_KesnCnt = H_Touki + 1, ChkImpData_Btk(H_Con, H_dtVolum, H_Touki, H_Zdata.Rbmn, H_Zdata.Rtor, H_Zdata.Rkmk), True))) Then
    
    	//                 L_Filter = "KESN = " && L_KesnCnt && " AND BCOD = " && H_Zdata.Rbmn && " AND TRCD = " && H_Zdata.Rtor && " AND KICD =" && H_Zdata.Rkmk && ""
    	//                 L_Cmd.CommandText = "SELECT * FROM BTKZAN WHERE " && L_Filter
    	//                 L_Reader = L_Cmd.ExecuteReader()
    	//                 If L_Reader.Read() Then
    	//                     L_Exist = True
    	//                 Else
    	//                     L_Exist = False
    	//                 End If
    	//                 L_Reader.Close()
    
    	//                 If L_Exist = False Then
    
    
    	//                     ' ■■ 部門科目取引先残高レコード作成[借方] ■■
    	//                     L_Cmd.CommandText = "INSERT INTO BTKZAN (" _
    	//                                         && " KESN,BCOD,TRCD,KICD,ESGN, " _
    	//                                         && " R000,S000,R010,S010,R015,S015,R020,S020,R025,S025,R030,S030, " _
    	//                                         && " R035,S035,R040,S040,R045,S045,R050,S050,R055,S055,R060,S060, " _
    	//                                         && " R065,S065,R070,S070,R075,S075,R080,S080,R085,S085,R090,S090, " _
    	//                                         && " R095,S095,R100,S100,R105,S105,R110,S110,R115,S115,R120,S120,R125,S125,GTNK) " _
    	//                                         && " VALUES " _
    	//                                         && " ( " && L_KesnCnt && ", '" && H_Zdata.Rbmn && "', '" && H_Zdata.Rtor && "', '" && H_Zdata.Rkmk && "', " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ")"
    	//                     L_Cmd.ExecuteNonQuery()
    
    	//                     ' ■■ 部門科目取引先予算レコード作成[借方] ■■
    	//                     For i As Integer = 1 To 4
    	//                         L_Cmd.CommandText = "INSERT INTO BTKYSN" && i.ToString(0) && "(" _
    	//                                             && " KESN ,BCOD ,TRCD,KICD, " _
    	//                                             && " Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, " _
    	//                                             && " Y060, Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, " _
    	//                                             && " Y120, Y125) " _
    	//                                             && " VALUES " _
    	//                                             && " ( " && L_KesnCnt && ", '" && H_Zdata.Rbmn && "', '" && H_Zdata.Rtor && "', '" && H_Zdata.Rkmk && "', " _
    	//                                             && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                             && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                             && 0 && ", " && 0 && ")"
    	//                         L_Cmd.ExecuteNonQuery()
    	//                     Next
    
    	//                     'If P_b_GaikaTable_Flg = True Then
    	//                     '    ' 外貨対応済会社DB
    
    	//                     '    If ((ChkImpData_GBmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rbmn, H_Zdata.Rkmk, H_Zdata.Rhei_cd)) And
    	//                     '        (ChkImpData_GTr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rtor, H_Zdata.Rkmk, H_Zdata.Rhei_cd)) And
    	//                     '        (ChkImpData_Btk(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rbmn, H_Zdata.Rtor, H_Zdata.Rkmk)) And
    	//                     '        (ChkImpData_Khei(H_Con, L_KesnCnt, H_Zdata.Rkmk)) And
    	//                     '        (If(L_KesnCnt = H_Touki + 1, ChkImpData_GBtk(H_Con, H_dtVolum, H_Touki, H_Zdata.Rbmn, H_Zdata.Rtor, H_Zdata.Rkmk, H_Zdata.Rhei_cd), True))) Then
    	//                     '        ' ■■ 部門科目取引先外貨残高レコード作成[借方] ■■
    	//                     '        L_Cmd.CommandText = "INSERT INTO GBTKZAN (" _
    	//                     '                            && "KESN, BCOD, TRCD, KICD, HEI_CD, " _
    	//                     '                            && "GR000, GS000, GR010, GS010, GR015, GS015, GR020, GS020, GR025, GS025, GR030, GS030, " _
    	//                     '                            && "GR035, GS035, GR040, GS040, GR045, GS045, GR050, GS050, GR055, GS055, GR060, GS060, " _
    	//                     '                            && "GR065, GS065, GR070, GS070, GR075, GS075, GR080, GS080, GR085, GS085, GR090, GS090, " _
    	//                     '                            && "GR095, GS095, GR100, GS100, GR105, GS105, GR110, GS110, GR115, GS115, GR120, GS120, GR125, GS125, " _
    	//                     '                            && "HR000, HS000, HR010, HS010, HR015, HS015, HR020, HS020, HR025, HS025, HR030, HS030, " _
    	//                     '                            && "HR035, HS035, HR040, HS040, HR045, HS045, HR050, HS050, HR055, HS055, HR060, HS060, " _
    	//                     '                            && "HR065, HS065, HR070, HS070, HR075, HS075, HR080, HS080, HR085, HS085, HR090, HS090, " _
    	//                     '                            && "HR095, HS095, HR100, HS100, HR105, HS105, HR110, HS110, HR115, HS115, HR120, HS120, HR125, HS125) " _
    	//                     '                            && "ON EXISTING SKIP VALUES " _
    	//                     '                            && "(" && L_KesnCnt && ", '" && H_Zdata.Rbmn && "', '" && H_Zdata.Rtor && "', '" && H_Zdata.Rkmk && "', '" && H_Zdata.Rhei_cd && "', " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)"
    	//                     '        L_Cmd.ExecuteNonQuery()
    	//                     '    End If
    	//                     'End If
    	//                 End If
    	//             End If
    	//         End If
    
    	//         ' ■■■ 部門科目取引先レコード[貸方] ■■■
    	//         If (H_Zdata.Sbmn <> "") And (H_Zdata.Stor <> "") And (Use3CodeStat(1, 0)) Then
    	//             ' 貸方部門コード有かつ、貸方取引先コード有かつ、貸方科目コード部門取引先科目使用
    
    	//             If ((If(L_KesnCnt = H_Touki + 1, ChkImpData_Bmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sbmn, H_Zdata.Skmk), True)) And
    	//                 (If(L_KesnCnt = H_Touki + 1, ChkImpData_Tr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Stor, H_Zdata.Skmk), True)) And
    	//                 (If(L_KesnCnt = H_Touki + 1, ChkImpData_Btk(H_Con, H_dtVolum, H_Touki, H_Zdata.Sbmn, H_Zdata.Stor, H_Zdata.Skmk), True))) Then
    
    	//                 L_Filter = "KESN = " && L_KesnCnt && " AND BCOD = " && H_Zdata.Sbmn && " AND TRCD = " && H_Zdata.Stor && " AND KICD =" && H_Zdata.Skmk && ""
    	//                 L_Cmd.CommandText = "SELECT * FROM BTKZAN WHERE " && L_Filter
    	//                 L_Reader = L_Cmd.ExecuteReader()
    	//                 If L_Reader.Read() Then
    	//                     L_Exist = True
    	//                 Else
    	//                     L_Exist = False
    	//                 End If
    	//                 L_Reader.Close()
    
    	//                 If L_Exist = False Then
    
    	//                     ' ■■ 部門科目取引先残高レコード作成[貸方] ■■
    	//                     L_Cmd.CommandText = "INSERT INTO BTKZAN (" _
    	//                                         && " KESN,BCOD,TRCD,KICD,ESGN, " _
    	//                                         && " R000,S000,R010,S010,R015,S015,R020,S020,R025,S025,R030,S030, " _
    	//                                         && " R035,S035,R040,S040,R045,S045,R050,S050,R055,S055,R060,S060, " _
    	//                                         && " R065,S065,R070,S070,R075,S075,R080,S080,R085,S085,R090,S090, " _
    	//                                         && " R095,S095,R100,S100,R105,S105,R110,S110,R115,S115,R120,S120,R125,S125,GTNK) " _
    	//                                         && " VALUES " _
    	//                                         && " ( " && L_KesnCnt && ", '" && H_Zdata.Sbmn && "', '" && H_Zdata.Stor && "', '" && H_Zdata.Skmk && "', " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ")"
    	//                     L_Cmd.ExecuteNonQuery()
    
    	//                     ' ■■ 部門科目取引先予算レコード作成[貸方] ■■
    	//                     For i As Integer = 1 To 4
    	//                         L_Cmd.CommandText = "INSERT INTO BTKYSN" && i.ToString(0) && "(" _
    	//                                             && " KESN ,BCOD ,TRCD,KICD, " _
    	//                                             && " Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, " _
    	//                                             && " Y060, Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, " _
    	//                                             && " Y120, Y125) " _
    	//                                             && " VALUES " _
    	//                                             && " ( " && L_KesnCnt && ", '" && H_Zdata.Sbmn && "', '" && H_Zdata.Stor && "', '" && H_Zdata.Skmk && "', " _
    	//                                             && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                             && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                             && 0 && ", " && 0 && ")"
    	//                         L_Cmd.ExecuteNonQuery()
    	//                     Next
    
    	//                     'If P_b_GaikaTable_Flg = True Then
    	//                     '    ' 外貨対応済会社DB
    
    	//                     '    If ((ChkImpData_GBmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sbmn, H_Zdata.Skmk, H_Zdata.Shei_cd)) And
    	//                     '        (ChkImpData_GTr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Stor, H_Zdata.Skmk, H_Zdata.Shei_cd)) And
    	//                     '        (ChkImpData_Btk(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sbmn, H_Zdata.Stor, H_Zdata.Skmk)) And
    	//                     '        (ChkImpData_Khei(H_Con, L_KesnCnt, H_Zdata.Skmk)) And
    	//                     '        (If(L_KesnCnt = H_Touki + 1, ChkImpData_GBtk(H_Con, H_dtVolum, H_Touki, H_Zdata.Sbmn, H_Zdata.Stor, H_Zdata.Skmk, H_Zdata.Shei_cd), True))) Then
    	//                     '        ' ■■ 部門科目取引先外貨残高レコード作成[貸方] ■■
    	//                     '        L_Cmd.CommandText = "INSERT INTO GBTKZAN (" _
    	//                     '                            && "KESN, BCOD, TRCD, KICD, HEI_CD, " _
    	//                     '                            && "R000, S000, R010, S010, R015, S015, R020, S020, R025, S025, R030, S030, " _
    	//                     '                            && "R035, S035, R040, S040, R045, S045, R050, S050, R055, S055, R060, S060, " _
    	//                     '                            && "R065, S065, R070, S070, R075, S075, R080, S080, R085, S085, R090, S090, " _
    	//                     '                            && "R095, S095, R100, S100, R105, S105, R110, S110, R115, S115, R120, S120, R125, S125) " _
    	//                     '                            && "ON EXISTING SKIP VALUES " _
    	//                     '                            && "( " && L_KesnCnt && ", '" && H_Zdata.Sbmn && "', '" && H_Zdata.Stor && "', '" && H_Zdata.Skmk && "', '" && H_Zdata.Shei_cd && "', " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)"
    	//                     '        L_Cmd.ExecuteNonQuery()
    	//                     '    End If
    	//                     'End If
    	//                 End If
    	//             End If
    	//         End If
    
    	//         ' ■■■ 部門科目枝番レコード[借方] ■■■
    	//         If (H_Zdata.Rbmn <> "") And (H_Zdata.Reda <> "") And (Use3CodeStat(0, 1)) Then
    	//             ' 借方部門コード有かつ、借方枝番コード有かつ、借方科目コード部門科目枝番使用
    
    	//             If ((If(L_KesnCnt = H_Touki + 1, ChkImpData_Bmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rbmn, H_Zdata.Rkmk), True)) And
    	//                 (If(L_KesnCnt = H_Touki + 1, ChkImpData_Enm(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Reda, H_Zdata.Rkmk), True)) And
    	//                 (If(L_KesnCnt = H_Touki + 1, ChkImpData_Bke(H_Con, H_dtVolum, H_Touki, H_Zdata.Rbmn, H_Zdata.Reda, H_Zdata.Rkmk), True))) Then
    
    	//                 L_Filter = "KESN = " && L_KesnCnt && " AND BCOD = " && H_Zdata.Rbmn && " AND KICD = " && H_Zdata.Rkmk && " AND ECOD =" && H_Zdata.Reda && ""
    	//                 L_Cmd.CommandText = "SELECT * FROM BKEZAN WHERE " && L_Filter
    	//                 L_Reader = L_Cmd.ExecuteReader()
    	//                 If L_Reader.Read() Then
    	//                     L_Exist = True
    	//                 Else
    	//                     L_Exist = False
    	//                 End If
    	//                 L_Reader.Close()
    
    	//                 If L_Exist = False Then
    	//                     ' ■■ 部門科目枝番残高レコード作成[借方] ■■
    	//                     L_Cmd.CommandText = "INSERT INTO BKEZAN (" _
    	//                                         && " KESN,BCOD,KICD,ECOD,DSGN, " _
    	//                                         && " R000,S000,R010,S010,R015,S015,R020,S020,R025,S025,R030,S030, " _
    	//                                         && " R035,S035,R040,S040,R045,S045,R050,S050,R055,S055,R060,S060, " _
    	//                                         && " R065,S065,R070,S070,R075,S075,R080,S080,R085,S085,R090,S090, " _
    	//                                         && " R095,S095,R100,S100,R105,S105,R110,S110,R115,S115,R120,S120,R125,S125,GTNK) " _
    	//                                         && " VALUES " _
    	//                                         && " ( " && L_KesnCnt && ", '" && H_Zdata.Rbmn && "', '" && H_Zdata.Rkmk && "', '" && H_Zdata.Reda && "', " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ")"
    	//                     L_Cmd.ExecuteNonQuery()
    
    	//                     ' ■■ 部門科目枝番予算レコード作成[借方] ■■
    	//                     For i As Integer = 1 To 4
    	//                         L_Cmd.CommandText = "INSERT INTO BKEYSN" && i.ToString(0) && "(" _
    	//                                             && " KESN ,BCOD ,KICD, ECOD, " _
    	//                                             && " Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, " _
    	//                                             && " Y060, Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, " _
    	//                                             && " Y120, Y125) " _
    	//                                             && " VALUES " _
    	//                                             && " ( " && L_KesnCnt && ", '" && H_Zdata.Rbmn && "', '" && H_Zdata.Rkmk && "', '" && H_Zdata.Reda && "', " _
    	//                                             && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                             && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                             && 0 && ", " && 0 && ")"
    	//                         L_Cmd.ExecuteNonQuery()
    	//                     Next
    
    	//                     'If P_b_GaikaTable_Flg = True Then
    	//                     '    ' 外貨対応済会社DB
    
    	//                     '    If ((ChkImpData_GBmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rbmn, H_Zdata.Rkmk, H_Zdata.Rhei_cd)) And
    	//                     '        (ChkImpData_GEnm(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Reda, H_Zdata.Rkmk, H_Zdata.Rhei_cd)) And
    	//                     '        (ChkImpData_Bke(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rbmn, H_Zdata.Reda, H_Zdata.Rkmk)) And
    	//                     '        (ChkImpData_Khei(H_Con, L_KesnCnt, H_Zdata.Rkmk)) And
    	//                     '        (If(L_KesnCnt = H_Touki + 1, ChkImpData_GBke(H_Con, H_dtVolum, H_Touki, H_Zdata.Rbmn, H_Zdata.Reda, H_Zdata.Rkmk, H_Zdata.Rhei_cd), True))) Then
    	//                     '        ' ■■ 部門科目枝番外貨残高レコード作成[借方] ■■
    	//                     '        L_Cmd.CommandText = "INSERT INTO GBKEZAN (" _
    	//                     '                            && "KESN, BCOD, KICD, ECOD, HEI_CD, " _
    	//                     '                            && "R000, S000, R010, S010, R015, S015, R020, S020, R025, S025, R030, S030, " _
    	//                     '                            && "R035, S035, R040, S040, R045, S045, R050, S050, R055, S055, R060, S060, " _
    	//                     '                            && "R065, S065, R070, S070, R075, S075, R080, S080, R085, S085, R090, S090, " _
    	//                     '                            && "R095, S095, R100, S100, R105, S105, R110, S110, R115, S115, R120, S120, R125, S125) " _
    	//                     '                            && "ON EXISTING SKIP VALUES " _
    	//                     '                            && "( " && L_KesnCnt && ", '" && H_Zdata.Rbmn && "', '" && H_Zdata.Rkmk && "', '" && H_Zdata.Reda && "', '" && H_Zdata.Rhei_cd && "', " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)"
    	//                     '        L_Cmd.ExecuteNonQuery()
    	//                     '    End If
    	//                     'End If
    	//                 End If
    	//             End If
    	//         End If
    
    	//         ' ■■■ 部門科目枝番レコード[貸方] ■■■
    	//         If (H_Zdata.Sbmn <> "") And (H_Zdata.Seda <> "") And (Use3CodeStat(1, 1)) Then
    	//             ' 貸方部門コード有かつ、貸方枝番コード有かつ、貸方科目コード部門科目枝番使用
    
    	//             If ((If(L_KesnCnt = H_Touki + 1, ChkImpData_Bmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sbmn, H_Zdata.Skmk), True)) And
    	//                 (If(L_KesnCnt = H_Touki + 1, ChkImpData_Enm(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Seda, H_Zdata.Skmk), True)) And
    	//                 (If(L_KesnCnt = H_Touki + 1, ChkImpData_Bke(H_Con, H_dtVolum, H_Touki, H_Zdata.Sbmn, H_Zdata.Seda, H_Zdata.Skmk), True))) Then
    
    	//                 L_Filter = "KESN = " && L_KesnCnt && " AND BCOD = " && H_Zdata.Sbmn && " AND KICD = " && H_Zdata.Skmk && " AND ECOD =" && H_Zdata.Seda && ""
    	//                 L_Cmd.CommandText = "SELECT * FROM BKEZAN WHERE " && L_Filter
    	//                 L_Reader = L_Cmd.ExecuteReader()
    	//                 If L_Reader.Read() Then
    	//                     L_Exist = True
    	//                 Else
    	//                     L_Exist = False
    	//                 End If
    	//                 L_Reader.Close()
    
    	//                 If L_Exist = False Then
    
    	//                     ' ■■ 部門科目枝番残高レコード作成[貸方] ■■
    	//                     L_Cmd.CommandText = "INSERT INTO BKEZAN (" _
    	//                                         && " KESN,BCOD,KICD,ECOD,DSGN, " _
    	//                                         && " R000,S000,R010,S010,R015,S015,R020,S020,R025,S025,R030,S030, " _
    	//                                         && " R035,S035,R040,S040,R045,S045,R050,S050,R055,S055,R060,S060, " _
    	//                                         && " R065,S065,R070,S070,R075,S075,R080,S080,R085,S085,R090,S090, " _
    	//                                         && " R095,S095,R100,S100,R105,S105,R110,S110,R115,S115,R120,S120,R125,S125,GTNK) " _
    	//                                         && " VALUES " _
    	//                                         && " ( " && L_KesnCnt && ", '" && H_Zdata.Sbmn && "', '" && H_Zdata.Skmk && "', '" && H_Zdata.Seda && "', " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ")"
    	//                     L_Cmd.ExecuteNonQuery()
    
    	//                     ' ■■ 部門科目枝番予算レコード作成[貸方] ■■
    	//                     For i As Integer = 1 To 4
    	//                         L_Cmd.CommandText = "INSERT INTO BKEYSN" && i.ToString(0) && "(" _
    	//                                             && " KESN ,BCOD ,KICD, ECOD, " _
    	//                                             && " Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, " _
    	//                                             && " Y060, Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, " _
    	//                                             && " Y120, Y125) " _
    	//                                             && " VALUES " _
    	//                                             && " ( " && L_KesnCnt && ", '" && H_Zdata.Sbmn && "', '" && H_Zdata.Skmk && "', '" && H_Zdata.Seda && "', " _
    	//                                             && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                             && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                             && 0 && ", " && 0 && ")"
    	//                         L_Cmd.ExecuteNonQuery()
    	//                     Next
    
    	//                     'If P_b_GaikaTable_Flg = True Then
    	//                     '    ' 外貨対応済会社DB
    
    	//                     '    If ((ChkImpData_GBmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sbmn, H_Zdata.Skmk, H_Zdata.Shei_cd)) And
    	//                     '        (ChkImpData_GEnm(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Seda, H_Zdata.Skmk, H_Zdata.Shei_cd)) And
    	//                     '        (ChkImpData_Bke(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sbmn, H_Zdata.Seda, H_Zdata.Skmk)) And
    	//                     '        (ChkImpData_Khei(H_Con, L_KesnCnt, H_Zdata.Skmk)) And
    	//                     '        (If(L_KesnCnt = H_Touki + 1, ChkImpData_GBke(H_Con, H_dtVolum, H_Touki, H_Zdata.Sbmn, H_Zdata.Seda, H_Zdata.Skmk, H_Zdata.Shei_cd), True))) Then
    	//                     '        ' ■■ 部門科目枝番外貨残高レコード作成[貸方] ■■
    	//                     '        L_Cmd.CommandText = "INSERT INTO GBKEZAN (" _
    	//                     '                            && "KESN, BCOD, KICD, ECOD, HEI_CD, " _
    	//                     '                            && "R000, S000, R010, S010, R015, S015, R020, S020, R025, S025, R030, S030, " _
    	//                     '                            && "R035, S035, R040, S040, R045, S045, R050, S050, R055, S055, R060, S060, " _
    	//                     '                            && "R065, S065, R070, S070, R075, S075, R080, S080, R085, S085, R090, S090, " _
    	//                     '                            && "R095, S095, R100, S100, R105, S105, R110, S110, R115, S115, R120, S120, R125, S125) " _
    	//                     '                            && "ON EXISTING SKIP VALUES " _
    	//                     '                            && "( " && L_KesnCnt && ", '" && H_Zdata.Sbmn && "', '" && H_Zdata.Skmk && "', '" && H_Zdata.Seda && "', '" && H_Zdata.Shei_cd && "', " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    	//                     '                            && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)"
    	//                     '        L_Cmd.ExecuteNonQuery()
    	//                     '    End If
    	//                     'End If
    	//                 End If
    	//             End If
    	//         End If
    
    	//         ' ■■■ セグメント取引先科目レコード[借方] ■■■
    	//         If (H_Zdata.Rseg <> "") And (H_Zdata.Rtor <> "") And (Use3CodeStat(0, 2)) Then
    	//             ' 借方セグメントコード有かつ、借方取引先コード有かつ、借方科目コードセグメント取引先科目枝番使用
    
    	//             If ((If(L_KesnCnt = H_Touki + 1, ChkImpData_Seg(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rseg, H_Zdata.Rkmk), True)) And
    	//                 (If(L_KesnCnt = H_Touki + 1, ChkImpData_Tr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rtor, H_Zdata.Rkmk), True)) And
    	//                 (If(L_KesnCnt = H_Touki + 1, ChkImpData_Stk(H_Con, H_dtVolum, H_Touki, H_Zdata.Rseg, H_Zdata.Rtor, H_Zdata.Rkmk), True))) Then
    
    
    	//                 L_Filter = "KESN = " && L_KesnCnt && " AND SGCD = " && H_Zdata.Rseg && " AND TRCD = " && H_Zdata.Rtor && " AND KICD =" && H_Zdata.Rkmk && ""
    	//                 L_Cmd.CommandText = "SELECT * FROM STKZAN WHERE " && L_Filter
    	//                 L_Reader = L_Cmd.ExecuteReader()
    	//                 If L_Reader.Read() Then
    	//                     L_Exist = True
    	//                 Else
    	//                     L_Exist = False
    	//                 End If
    	//                 L_Reader.Close()
    
    	//                 If L_Exist = False Then
    
    
    	//                     ' ■■ セグメント取引先科目残高レコード作成[借方] ■■
    	//                     L_Cmd.CommandText = "INSERT INTO STKZAN (" _
    	//                                         && " KESN,SGCD,TRCD,KICD,HSGN, " _
    	//                                         && " R000,S000,R010,S010,R015,S015,R020,S020,R025,S025,R030,S030, " _
    	//                                         && " R035,S035,R040,S040,R045,S045,R050,S050,R055,S055,R060,S060, " _
    	//                                         && " R065,S065,R070,S070,R075,S075,R080,S080,R085,S085,R090,S090, " _
    	//                                         && " R095,S095,R100,S100,R105,S105,R110,S110,R115,S115,R120,S120,R125,S125) " _
    	//                                         && " VALUES " _
    	//                                         && " ( " && L_KesnCnt && ", '" && H_Zdata.Rseg && "', '" && H_Zdata.Rtor && "', '" && H_Zdata.Rkmk && "', " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ")"
    	//                     L_Cmd.ExecuteNonQuery()
    
    
    	//                     ' ■■ セグメント取引先科目予算レコード作成[借方] ■■
    	//                     For i As Integer = 1 To 4
    	//                         L_Cmd.CommandText = "INSERT INTO STKYSN" && i.ToString(0) && "(" _
    	//                                             && " KESN,SGCD,TRCD,KICD, " _
    	//                                         && " Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, " _
    	//                                             && " Y060, Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, " _
    	//                                             && " Y120, Y125) " _
    	//                                             && " VALUES " _
    	//                                             && " ( " && L_KesnCnt && ", '" && H_Zdata.Rseg && "', '" && H_Zdata.Rtor && "', '" && H_Zdata.Rkmk && "', " _
    	//                                             && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                             && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                             && 0 && ", " && 0 && ")"
    	//                         L_Cmd.ExecuteNonQuery()
    	//                     Next
    
    	//                 End If
    	//             End If
    	//         End If
    	//         ' ■■■ セグメント取引先科目レコード[貸方] ■■■
    	//         If (H_Zdata.Sseg <> "") And (H_Zdata.Stor <> "") And (Use3CodeStat(1, 2)) Then
    	//             ' 貸方セグメントコード有かつ、貸方取引先コード有かつ、貸方科目コードセグメント取引先科目枝番使用
    
    	//             If ((If(L_KesnCnt = H_Touki + 1, ChkImpData_Seg(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sseg, H_Zdata.Skmk), True)) And
    	//                 (If(L_KesnCnt = H_Touki + 1, ChkImpData_Tr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Stor, H_Zdata.Skmk), True)) And
    	//                 (If(L_KesnCnt = H_Touki + 1, ChkImpData_Stk(H_Con, H_dtVolum, H_Touki, H_Zdata.Sseg, H_Zdata.Stor, H_Zdata.Skmk), True))) Then
    
    	//                 L_Filter = "KESN = " && L_KesnCnt && " AND SGCD = " && H_Zdata.Sseg && " AND TRCD = " && H_Zdata.Stor && " AND KICD =" && H_Zdata.Skmk && ""
    	//                 L_Cmd.CommandText = "SELECT * FROM STKZAN WHERE " && L_Filter
    	//                 L_Reader = L_Cmd.ExecuteReader()
    	//                 If L_Reader.Read() Then
    	//                     L_Exist = True
    	//                 Else
    	//                     L_Exist = False
    	//                 End If
    	//                 L_Reader.Close()
    
    	//                 If L_Exist = False Then
    
    	//                     ' ■■ セグメント取引先科目残高レコード作成[貸方] ■■
    	//                     L_Cmd.CommandText = "INSERT INTO STKZAN (" _
    	//                                         && " KESN,SGCD,TRCD,KICD,HSGN, " _
    	//                                         && " R000,S000,R010,S010,R015,S015,R020,S020,R025,S025,R030,S030, " _
    	//                                         && " R035,S035,R040,S040,R045,S045,R050,S050,R055,S055,R060,S060, " _
    	//                                         && " R065,S065,R070,S070,R075,S075,R080,S080,R085,S085,R090,S090, " _
    	//                                         && " R095,S095,R100,S100,R105,S105,R110,S110,R115,S115,R120,S120,R125,S125) " _
    	//                                         && " VALUES " _
    	//                                         && " ( " && L_KesnCnt && ", '" && H_Zdata.Sseg && "', '" && H_Zdata.Stor && "', '" && H_Zdata.Skmk && "', " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                         && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ")"
    	//                     L_Cmd.ExecuteNonQuery()
    
    
    	//                     ' ■■ セグメント取引先科目予算レコード作成[貸方] ■■
    	//                     For i As Integer = 1 To 4
    	//                         L_Cmd.CommandText = "INSERT INTO STKYSN" && i.ToString(0) && "(" _
    	//                                             && " KESN,SGCD,TRCD,KICD, " _
    	//                                         && " Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, " _
    	//                                             && " Y060, Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, " _
    	//                                             && " Y120, Y125) " _
    	//                                             && " VALUES " _
    	//                                             && " ( " && L_KesnCnt && ", '" && H_Zdata.Sseg && "', '" && H_Zdata.Stor && "', '" && H_Zdata.Skmk && "', " _
    	//                                             && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                             && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " && 0 && ", " _
    	//                                             && 0 && ", " && 0 && ")"
    	//                         L_Cmd.ExecuteNonQuery()
    	//                     Next
    
    	//                 End If
    	//             End If
    	//         End If
    	//     Next
    	// End Function
        // -*01.06.01
        #endregion
        // *===========================================================================================*
    	//  3コードマスタのレコードを作成していきます。
    	//    【対象テーブル】
    	//        [部門科目取引先]
    	//            部門科目取引先残高(BTKZAN)
    	//            部門科目取引先予算(BTKYSN1～4)
    	//            部門科目取引先外貨残高(GBTKZAN)
    	// 
    	//        [部門科目枝番]
    	//            部門科目枝番残高(BKEZAN)
    	//            部門科目枝番予算(BKEYSN1～4)
    	//            部門科目枝番外貨残高(GBKEZAN)
    	// 
    	//        [セグメント取引先科目残高]
    	//            セグメント取引先科目残高(STKZAN)
    	//    
    	// 		【パラメータ】
    	// 		【返送値】
        // *===========================================================================================*
    	private void Make3CodeRecord(IDbConnection H_Con, structZDATA H_Zdata, DataTable H_dtVolum, ref IDbCommand L_Cmd, short H_Touki)
    	{    
    		short       L_KesnCnt = 0;
    		IDataReader L_Reader  = default(IDataReader);
    		string      L_Filter  = null;
    		bool        L_Exist   = false;
    
    		//  科目単位の3コード使用状態 - Ture:使用する False:使用しない
    		//  (0, 0) 借方 - 部門取引先科目使用フラグ
    		//  (0, 1)        部門科目枝番フラグ
    		//  (0, 2)        セグメント取引先科目使用フラグ
    		//  (1, 0) 貸方 - 部門取引先科目使用フラグ
    		//  (1, 1)        部門科目枝番フラグ
    		//  (1, 2)        セグメント取引先科目使用フラグ
    		bool[,] Use3CodeStat = new bool[3, 4];
    
    		// 決算期単位で反復します。最大2周(当期の場合、翌期まで)
    		for (L_KesnCnt = H_Zdata.Kesn; L_KesnCnt <= (H_Zdata.Kesn == H_Touki ? H_Zdata.Kesn + 1 : H_Zdata.Kesn); L_KesnCnt++)
            {
    			// 対象となる科目の3コードの使用状態を取得    
    			Get3CodeStat(L_Cmd, L_KesnCnt, H_Zdata.Rkmk, H_Zdata.Skmk, ref Use3CodeStat);

                #region ■■■ 部門科目取引先レコード[借方] ■■■
                if ((!string.IsNullOrEmpty(H_Zdata.Rbmn)) && (!string.IsNullOrEmpty(H_Zdata.Rtor)) && (Use3CodeStat[0, 0])) {
    				//  借方部門コード有かつ、借方取引先コード有かつ、借方科目コード部門取引先科目使用
    
    				// If ((If(L_KesnCnt = H_Touki + 1, ChkImpData_Bmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rbmn, H_Zdata.Rkmk), True)) And
    				//     (If(L_KesnCnt = H_Touki + 1, ChkImpData_Tr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rtor, H_Zdata.Rkmk), True)) And
    				//     (If(L_KesnCnt = H_Touki + 1, ChkImpData_Btk(H_Con, H_dtVolum, H_Touki, H_Zdata.Rbmn, H_Zdata.Rtor, H_Zdata.Rkmk), True))) Then
    				if (((L_KesnCnt == H_Touki + 1 ? ChkImpData_Bmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rbmn, H_Zdata.Rkmk) : true) && (L_KesnCnt == H_Touki + 1 ? ChkImpData_Tr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rtor, H_Zdata.Rkmk) : true))) {
    					L_Filter = "KESN = " + L_KesnCnt + " AND BCOD = '" + H_Zdata.Rbmn + "' AND TRCD = '" + H_Zdata.Rtor + "' AND KICD = '" + H_Zdata.Rkmk + "'";
    					L_Cmd.CommandText = "SELECT * FROM BTKZAN WHERE " + L_Filter;
    					L_Reader = L_Cmd.ExecuteReader();
    					if (L_Reader.Read()) {
    						L_Exist = true;
    					} else {
    						L_Exist = false;
    					}
    					L_Reader.Close();    
    
    					if (L_Exist == false) {
    
    						//  ■■ 部門科目取引先残高レコード作成[借方] ■■
    						L_Cmd.CommandText = "INSERT INTO BTKZAN (" + " KESN,BCOD,TRCD,KICD,ESGN, " + " R000,S000,R010,S010,R015,S015,R020,S020,R025,S025,R030,S030, " + " R035,S035,R040,S040,R045,S045,R050,S050,R055,S055,R060,S060, " + " R065,S065,R070,S070,R075,S075,R080,S080,R085,S085,R090,S090, " + " R095,S095,R100,S100,R105,S105,R110,S110,R115,S115,R120,S120,R125,S125,GTNK) " + " VALUES " + " ( " + L_KesnCnt + ", '" + H_Zdata.Rbmn + "', '" + H_Zdata.Rtor + "', '" + H_Zdata.Rkmk
    						L_Cmd.ExecuteNonQuery();
    
    						//  ■■ 部門科目取引先予算レコード作成[借方] ■■
    						for (int i = 1; i <= 4; i++) {
    							L_Cmd.CommandText = "INSERT INTO BTKYSN" + i.ToString("0") + "(" + " KESN ,BCOD ,TRCD,KICD, " + " Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, " + " Y060, Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, " + " Y120, Y125) " + " VALUES " + " ( " + L_KesnCnt + ", '" + H_Zdata.Rbmn + "', '" + H_Zdata.Rtor + "', '" + H_Zdata.Rkmk + "', " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ")";
    							L_Cmd.ExecuteNonQuery();
                            }

                            #region 元からコメントアウト
                            //     If ((ChkImpData_GBmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rbmn, H_Zdata.Rkmk, H_Zdata.Rhei_cd)) And
    						//         (ChkImpData_GTr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rtor, H_Zdata.Rkmk, H_Zdata.Rhei_cd)) And
    						//         (ChkImpData_Btk(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rbmn, H_Zdata.Rtor, H_Zdata.Rkmk)) And
    						//         (ChkImpData_Khei(H_Con, L_KesnCnt, H_Zdata.Rkmk)) And
    						//         (If(L_KesnCnt = H_Touki + 1, ChkImpData_GBtk(H_Con, H_dtVolum, H_Touki, H_Zdata.Rbmn, H_Zdata.Rtor, H_Zdata.Rkmk, H_Zdata.Rhei_cd), True))) Then
    						//         ' ■■ 部門科目取引先外貨残高レコード作成[借方] ■■
    						//         L_Cmd.CommandText = "INSERT INTO GBTKZAN (" _
    						//                             && "KESN, BCOD, TRCD, KICD, HEI_CD, " _
    						//                             && "GR000, GS000, GR010, GS010, GR015, GS015, GR020, GS020, GR025, GS025, GR030, GS030, " _
    						//                             && "GR035, GS035, GR040, GS040, GR045, GS045, GR050, GS050, GR055, GS055, GR060, GS060, " _
    						//                             && "GR065, GS065, GR070, GS070, GR075, GS075, GR080, GS080, GR085, GS085, GR090, GS090, " _
    						//                             && "GR095, GS095, GR100, GS100, GR105, GS105, GR110, GS110, GR115, GS115, GR120, GS120, GR125, GS125, " _
    						//                             && "HR000, HS000, HR010, HS010, HR015, HS015, HR020, HS020, HR025, HS025, HR030, HS030, " _
    						//                             && "HR035, HS035, HR040, HS040, HR045, HS045, HR050, HS050, HR055, HS055, HR060, HS060, " _
    						//                             && "HR065, HS065, HR070, HS070, HR075, HS075, HR080, HS080, HR085, HS085, HR090, HS090, " _
    						//                             && "HR095, HS095, HR100, HS100, HR105, HS105, HR110, HS110, HR115, HS115, HR120, HS120, HR125, HS125) " _
    						//                             && "ON EXISTING SKIP VALUES " _
    						//                             && "(" && L_KesnCnt && ", '" && H_Zdata.Rbmn && "', '" && H_Zdata.Rtor && "', '" && H_Zdata.Rkmk && "', '" && H_Zdata.Rhei_cd && "', " _
    						//                             && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    						//                             && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    						//                             && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    						//                             && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    						//                             && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    						//                             && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    						//                             && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " _
    						//                             && "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)"
    						//         L_Cmd.ExecuteNonQuery()
    						//     End If
                            // End If
                            #endregion
                        }
    				}
    			}
                #endregion
                #region ■■■ 部門科目取引先レコード[貸方] ■■■
                if ((!string.IsNullOrEmpty(H_Zdata.Sbmn)) && (!string.IsNullOrEmpty(H_Zdata.Stor)) && (Use3CodeStat[1, 0])) {
    				//  貸方部門コード有かつ、貸方取引先コード有かつ、貸方科目コード部門取引先科目使用
    
    				// If ((If(L_KesnCnt = H_Touki + 1, ChkImpData_Bmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sbmn, H_Zdata.Skmk), True)) And
    				//     (If(L_KesnCnt = H_Touki + 1, ChkImpData_Tr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Stor, H_Zdata.Skmk), True)) And
    				//     (If(L_KesnCnt = H_Touki + 1, ChkImpData_Btk(H_Con, H_dtVolum, H_Touki, H_Zdata.Sbmn, H_Zdata.Stor, H_Zdata.Skmk), True))) Then
    
    				if (((L_KesnCnt == H_Touki + 1 ? ChkImpData_Bmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sbmn, H_Zdata.Skmk) : true) && (L_KesnCnt == H_Touki + 1 ? ChkImpData_Tr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Stor, H_Zdata.Skmk) : true))) {
    					L_Filter = "KESN = " + L_KesnCnt + " AND BCOD = '" + H_Zdata.Sbmn + "' AND TRCD = '" + H_Zdata.Stor + "' AND KICD = '" + H_Zdata.Skmk + "'";
    					L_Cmd.CommandText = "SELECT * FROM BTKZAN WHERE " + L_Filter;
    					L_Reader = L_Cmd.ExecuteReader();
    					if (L_Reader.Read()) {
    						L_Exist = true;
    					} else {
    						L_Exist = false;
    					}
    					L_Reader.Close();
    
    
    					if (L_Exist == false) {
    						//  ■■ 部門科目取引先残高レコード作成[貸方] ■■
    						L_Cmd.CommandText = "INSERT INTO BTKZAN (" + " KESN,BCOD,TRCD,KICD,ESGN, " + " R000,S000,R010,S010,R015,S015,R020,S020,R025,S025,R030,S030, " + " R035,S035,R040,S040,R045,S045,R050,S050,R055,S055,R060,S060, " + " R065,S065,R070,S070,R075,S075,R080,S080,R085,S085,R090,S090, " + " R095,S095,R100,S100,R105,S105,R110,S110,R115,S115,R120,S120,R125,S125,GTNK) " + " VALUES " + " ( " + L_KesnCnt + ", '" + H_Zdata.Sbmn + "', '" + H_Zdata.Stor + "', '" + H_Zdata.Skmk
    						L_Cmd.ExecuteNonQuery();
    
    						//  ■■ 部門科目取引先予算レコード作成[貸方] ■■
    						for (int i = 1; i <= 4; i++) {
    							L_Cmd.CommandText = "INSERT INTO BTKYSN" + i.ToString("0") + "(" + " KESN ,BCOD ,TRCD,KICD, " + " Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, " + " Y060, Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, " + " Y120, Y125) " + " VALUES " + " ( " + L_KesnCnt + ", '" + H_Zdata.Sbmn + "', '" + H_Zdata.Stor + "', '" + H_Zdata.Skmk + "', " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ")";
    							L_Cmd.ExecuteNonQuery();
    						}    
    					}
    				}
    			}
                #endregion

                #region ■■■ 部門科目枝番レコード[借方] ■■■
                if ((!string.IsNullOrEmpty(H_Zdata.Rbmn)) && (!string.IsNullOrEmpty(H_Zdata.Reda)) && (Use3CodeStat[0, 1])) {
    				//  借方部門コード有かつ、借方枝番コード有かつ、借方科目コード部門科目枝番使用
    
    				// If ((If(L_KesnCnt = H_Touki + 1, ChkImpData_Bmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rbmn, H_Zdata.Rkmk), True)) And
    				//     (If(L_KesnCnt = H_Touki + 1, ChkImpData_Enm(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Reda, H_Zdata.Rkmk), True)) And
    				//     (If(L_KesnCnt = H_Touki + 1, ChkImpData_Bke(H_Con, H_dtVolum, H_Touki, H_Zdata.Rbmn, H_Zdata.Reda, H_Zdata.Rkmk), True))) Then
    
    				if (((L_KesnCnt == H_Touki + 1 ? ChkImpData_Bmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rbmn, H_Zdata.Rkmk) : true) && (L_KesnCnt == H_Touki + 1 ? ChkImpData_Enm(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Reda, H_Zdata.Rkmk) : true))) {
    					L_Filter = "KESN = " + L_KesnCnt + " AND BCOD = '" + H_Zdata.Rbmn + "' AND KICD = '" + H_Zdata.Rkmk + "' AND ECOD = '" + H_Zdata.Reda + "'";
    					L_Cmd.CommandText = "SELECT * FROM BKEZAN WHERE " + L_Filter;
    					L_Reader = L_Cmd.ExecuteReader();
    					if (L_Reader.Read()) {
    						L_Exist = true;
    					} else {
    						L_Exist = false;
    					}
    					L_Reader.Close();
    
    					if (L_Exist == false) {
    						//  ■■ 部門科目枝番残高レコード作成[借方] ■■
    						L_Cmd.CommandText = "INSERT INTO BKEZAN (" + " KESN,BCOD,KICD,ECOD,DSGN, " + " R000,S000,R010,S010,R015,S015,R020,S020,R025,S025,R030,S030, " + " R035,S035,R040,S040,R045,S045,R050,S050,R055,S055,R060,S060, " + " R065,S065,R070,S070,R075,S075,R080,S080,R085,S085,R090,S090, " + " R095,S095,R100,S100,R105,S105,R110,S110,R115,S115,R120,S120,R125,S125,GTNK) " + " VALUES " + " ( " + L_KesnCnt + ", '" + H_Zdata.Rbmn + "', '" + H_Zdata.Rkmk + "', '" + H_Zdata.Reda
    						L_Cmd.ExecuteNonQuery();
    
    						//  ■■ 部門科目枝番予算レコード作成[借方] ■■
    						for (int i = 1; i <= 4; i++)
                            {
    							L_Cmd.CommandText = "INSERT INTO BKEYSN" + i.ToString("0") + "(" + " KESN ,BCOD ,KICD, ECOD, " + " Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, " + " Y060, Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, " + " Y120, Y125) " + " VALUES " + " ( " + L_KesnCnt + ", '" + H_Zdata.Rbmn + "', '" + H_Zdata.Rkmk + "', '" + H_Zdata.Reda + "', " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ")";
    							L_Cmd.ExecuteNonQuery();
    						}    
    					}
    				}
    			}
                #endregion
                #region ■■■ 部門科目枝番レコード[貸方] ■■■
                if ((!string.IsNullOrEmpty(H_Zdata.Sbmn)) && (!string.IsNullOrEmpty(H_Zdata.Seda)) && (Use3CodeStat[1, 1]))
                {
    				//  貸方部門コード有かつ、貸方枝番コード有かつ、貸方科目コード部門科目枝番使用
    
    				// If ((If(L_KesnCnt = H_Touki + 1, ChkImpData_Bmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sbmn, H_Zdata.Skmk), True)) And
    				//     (If(L_KesnCnt = H_Touki + 1, ChkImpData_Enm(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Seda, H_Zdata.Skmk), True)) And
    				//     (If(L_KesnCnt = H_Touki + 1, ChkImpData_Bke(H_Con, H_dtVolum, H_Touki, H_Zdata.Sbmn, H_Zdata.Seda, H_Zdata.Skmk), True))) Then
    
    
    				if (((L_KesnCnt == H_Touki + 1 ? ChkImpData_Bmn(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sbmn, H_Zdata.Skmk) : true) && (L_KesnCnt == H_Touki + 1 ? ChkImpData_Enm(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Seda, H_Zdata.Skmk) : true))) {
    					L_Filter = "KESN = " + L_KesnCnt + " AND BCOD = '" + H_Zdata.Sbmn + "' AND KICD = '" + H_Zdata.Skmk + "' AND ECOD = '" + H_Zdata.Seda + "'";
    					L_Cmd.CommandText = "SELECT * FROM BKEZAN WHERE " + L_Filter;
    					L_Reader = L_Cmd.ExecuteReader();
    					if (L_Reader.Read()) {
    						L_Exist = true;
    					} else {
    						L_Exist = false;
    					}
    					L_Reader.Close();    
    
    					if (L_Exist == false) {
    						//  ■■ 部門科目枝番残高レコード作成[貸方] ■■
    						L_Cmd.CommandText = "INSERT INTO BKEZAN (" + " KESN,BCOD,KICD,ECOD,DSGN, " + " R000,S000,R010,S010,R015,S015,R020,S020,R025,S025,R030,S030, " + " R035,S035,R040,S040,R045,S045,R050,S050,R055,S055,R060,S060, " + " R065,S065,R070,S070,R075,S075,R080,S080,R085,S085,R090,S090, " + " R095,S095,R100,S100,R105,S105,R110,S110,R115,S115,R120,S120,R125,S125,GTNK) " + " VALUES " + " ( " + L_KesnCnt + ", '" + H_Zdata.Sbmn + "', '" + H_Zdata.Skmk + "', '" + H_Zdata.Seda
    						L_Cmd.ExecuteNonQuery();
    
    						//  ■■ 部門科目枝番予算レコード作成[貸方] ■■
    						for (int i = 1; i <= 4; i++) {
    							L_Cmd.CommandText = "INSERT INTO BKEYSN" + i.ToString("0") + "(" + " KESN ,BCOD ,KICD, ECOD, " + " Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, " + " Y060, Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, " + " Y120, Y125) " + " VALUES " + " ( " + L_KesnCnt + ", '" + H_Zdata.Sbmn + "', '" + H_Zdata.Skmk + "', '" + H_Zdata.Seda + "', " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ")";
    							L_Cmd.ExecuteNonQuery();
    						}
    
    
    					}
    				}
    			}
                #endregion

                #region ■■■ セグメント取引先科目レコード[借方] ■■■
                if ((!string.IsNullOrEmpty(H_Zdata.Rseg)) && (!string.IsNullOrEmpty(H_Zdata.Rtor)) && (Use3CodeStat[0, 2]))
                {
    				//  借方セグメントコード有かつ、借方取引先コード有かつ、借方科目コードセグメント取引先科目枝番使用
    
    				// If ((If(L_KesnCnt = H_Touki + 1, ChkImpData_Seg(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rseg, H_Zdata.Rkmk), True)) And
    				//     (If(L_KesnCnt = H_Touki + 1, ChkImpData_Tr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rtor, H_Zdata.Rkmk), True)) And
    				//     (If(L_KesnCnt = H_Touki + 1, ChkImpData_Stk(H_Con, H_dtVolum, H_Touki, H_Zdata.Rseg, H_Zdata.Rtor, H_Zdata.Rkmk), True))) Then    
    
    				if (((L_KesnCnt == H_Touki + 1 ? ChkImpData_Seg(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rseg, H_Zdata.Rkmk) : true) && (L_KesnCnt == H_Touki + 1 ? ChkImpData_Tr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Rtor, H_Zdata.Rkmk) : true))) {
    
    					L_Filter = "KESN = " + L_KesnCnt + " AND SGCD = '" + H_Zdata.Rseg + "' AND TRCD = '" + H_Zdata.Rtor + "' AND KICD = '" + H_Zdata.Rkmk + "'";
    					L_Cmd.CommandText = "SELECT * FROM STKZAN WHERE " + L_Filter;
    					L_Reader = L_Cmd.ExecuteReader();
    					if (L_Reader.Read()) {
    						L_Exist = true;
    					} else {
    						L_Exist = false;
    					}
    					L_Reader.Close();
    
    
    					if (L_Exist == false) {
    
    						//  ■■ セグメント取引先科目残高レコード作成[借方] ■■
    						L_Cmd.CommandText = "INSERT INTO STKZAN (" + " KESN,SGCD,TRCD,KICD,HSGN, " + " R000,S000,R010,S010,R015,S015,R020,S020,R025,S025,R030,S030, " + " R035,S035,R040,S040,R045,S045,R050,S050,R055,S055,R060,S060, " + " R065,S065,R070,S070,R075,S075,R080,S080,R085,S085,R090,S090, " + " R095,S095,R100,S100,R105,S105,R110,S110,R115,S115,R120,S120,R125,S125) " + " VALUES " + " ( " + L_KesnCnt + ", '" + H_Zdata.Rseg + "', '" + H_Zdata.Rtor + "', '" + H_Zdata.Rkmk
    						L_Cmd.ExecuteNonQuery();    
    
    						//  ■■ セグメント取引先科目予算レコード作成[借方] ■■
    						for (int i = 1; i <= 4; i++) {
    							L_Cmd.CommandText = "INSERT INTO STKYSN" + i.ToString("0") + "(" + " KESN,SGCD,TRCD,KICD, " + " Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, " + " Y060, Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, " + " Y120, Y125) " + " VALUES " + " ( " + L_KesnCnt + ", '" + H_Zdata.Rseg + "', '" + H_Zdata.Rtor + "', '" + H_Zdata.Rkmk + "', " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ")";
    							L_Cmd.ExecuteNonQuery();
    						}
    
    					}
    				}
    			}
                #endregion
                #region ■■■ セグメント取引先科目レコード[貸方] ■■■
                if ((!string.IsNullOrEmpty(H_Zdata.Sseg)) && (!string.IsNullOrEmpty(H_Zdata.Stor)) && (Use3CodeStat[1, 2]))
                {
    				//  貸方セグメントコード有かつ、貸方取引先コード有かつ、貸方科目コードセグメント取引先科目枝番使用
    
    				// 'If ((If(L_KesnCnt = H_Touki + 1, ChkImpData_Seg(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sseg, H_Zdata.Skmk), True)) And
    				// '    (If(L_KesnCnt = H_Touki + 1, ChkImpData_Tr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Stor, H_Zdata.Skmk), True)) And
    				// '    (If(L_KesnCnt = H_Touki + 1, ChkImpData_Stk(H_Con, H_dtVolum, H_Touki, H_Zdata.Sseg, H_Zdata.Stor, H_Zdata.Skmk), True))) Then
    
    
    				if (((L_KesnCnt == H_Touki + 1 ? ChkImpData_Seg(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Sseg, H_Zdata.Skmk) : true) && (L_KesnCnt == H_Touki + 1 ? ChkImpData_Tr(H_Con, H_dtVolum, L_KesnCnt, H_Zdata.Stor, H_Zdata.Skmk) : true))) {
    					L_Filter = "KESN = " + L_KesnCnt + " AND SGCD = '" + H_Zdata.Sseg + "' AND TRCD = '" + H_Zdata.Stor + "' AND KICD = '" + H_Zdata.Skmk + "'";
    					L_Cmd.CommandText = "SELECT * FROM STKZAN WHERE " + L_Filter;
    					L_Reader = L_Cmd.ExecuteReader();
    					if (L_Reader.Read()) {
    						L_Exist = true;
    					} else {
    						L_Exist = false;
    					}
    					L_Reader.Close();
    
    
    					if (L_Exist == false) {
    						//  ■■ セグメント取引先科目残高レコード作成[貸方] ■■
    						L_Cmd.CommandText = "INSERT INTO STKZAN (" + " KESN,SGCD,TRCD,KICD,HSGN, " + " R000,S000,R010,S010,R015,S015,R020,S020,R025,S025,R030,S030, " + " R035,S035,R040,S040,R045,S045,R050,S050,R055,S055,R060,S060, " + " R065,S065,R070,S070,R075,S075,R080,S080,R085,S085,R090,S090, " + " R095,S095,R100,S100,R105,S105,R110,S110,R115,S115,R120,S120,R125,S125) " + " VALUES " + " ( " + L_KesnCnt + ", '" + H_Zdata.Sseg + "', '" + H_Zdata.Stor + "', '" + H_Zdata.Skmk
    						L_Cmd.ExecuteNonQuery();    
    
    						//  ■■ セグメント取引先科目予算レコード作成[貸方] ■■
    						for (int i = 1; i <= 4; i++) {
    							L_Cmd.CommandText = "INSERT INTO STKYSN" + i.ToString("0") + "(" + " KESN,SGCD,TRCD,KICD, " + " Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, " + " Y060, Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, " + " Y120, Y125) " + " VALUES " + " ( " + L_KesnCnt + ", '" + H_Zdata.Sseg + "', '" + H_Zdata.Stor + "', '" + H_Zdata.Skmk + "', " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ")";
    							L_Cmd.ExecuteNonQuery();
    						}    
    					}
    				}
    			}
                #endregion
            }
        }

// ▼ ツルハ様カスタマイズ ▼
        // *===========================================================================================*
        //   部門科目自動登録
        //       ・部門科目残高（BKZAN）
        //       ・部門科目予算１～４（BKYSN1～BKYSN4）
        // *===========================================================================================*
        private void MakeBKZANRecord(IDbConnection H_Con, short L_Kesn, short H_Touki, string L_Bcod, string L_Kicd)
        {
            short       L_KesnCnt = 0;
            IDbCommand  L_Cmd     = default(IDbCommand);
    // Ver02.28.01.02 *-
            IDataReader L_Reader  = default(IDataReader);
            string      L_Filter  = null;
            bool        L_Exist   = false;

            L_Cmd             = H_Con.CreateCommand();
            L_Filter          = "SELECT * FROM BKZAN WHERE KESN = " + L_Kesn + " AND BCOD = '" + L_Bcod + "' AND KICD = '" + L_Kicd + "'";
            L_Cmd.CommandText = L_Filter;
            L_Reader          = L_Cmd.ExecuteReader();
            if (L_Reader.Read())
            {
                L_Exist = true;
            }
            else
            {
                L_Exist = false;
            }
            L_Reader.Close();

            if (L_Exist == false)
            {
    // -*
                // 決算期単位で反復します。最大2周(当期の場合、翌期まで)
                for (L_KesnCnt = L_Kesn; L_KesnCnt <= (L_Kesn == H_Touki ? L_Kesn + 1 : L_Kesn); L_KesnCnt++)
                {
                    L_Cmd = H_Con.CreateCommand();

                    L_Cmd.CommandText = "INSERT INTO BKZAN ( " +
                                                "KESN, BCOD, KICD, BSGN, " +
                                                "R000, S000, R010, S010, R015, S015, R020, S020, R025, S025, R030, S030, " +
                                                "R035, S035, R040, S040, R045, S045, R050, S050, R055, S055, R060, S060, " +
                                                "R065, S065, R070, S070, R075, S075, R080, S080, R085, S085, R090, S090, " +
                                                "R095, S095, R100, S100, R105, S105, R110, S110, R115, S115, R120, S120, " +
                                                "R125, S125, GTNK  )" +
                                            "VALUES " +
                                                "( " + L_KesnCnt + ", '" + L_Bcod + "', '" + L_Kicd + "', 0, " +
                                                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " +
                                                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " +
                                                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " +
                                                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " +
                                                "0, 0, 0 )";
                    L_Cmd.ExecuteNonQuery();

                    for (int i = 1; i < 5; i++)
                    {
                        L_Cmd.CommandText = "INSERT INTO BKYSN" + i.ToString("0") + "( " +
                                                "KESN, BCOD, KICD, " +
                                                "Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, Y060, " +
                                                "Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, Y120, Y125) " +
                                            "VALUES " +
                                                "( " + L_KesnCnt + ", '" + L_Bcod + "', '" + L_Kicd + "', " +
                                                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " +
                                                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )";
                        L_Cmd.ExecuteNonQuery();
                    }
                }
            }
        }
        // *===========================================================================================*
        //   科目取引先自動登録
        //       ・取引先科目残高（TRZAN）
        //       ・取引先科目予算１～４（TRYSN1～TRYSN4）
        // *===========================================================================================*
        private void MakeTRZANRecord(IDbConnection H_Con, short L_Kesn, short H_Touki, string L_Trcd, string L_Kicd)
        {
            short       L_KesnCnt = 0;
            IDbCommand  L_Cmd     = default(IDbCommand);
    // Ver02.28.01.02 *- 
            IDataReader L_Reader  = default(IDataReader);
            string      L_Filter  = null;
            bool        L_Exist   = false;

            L_Cmd             = H_Con.CreateCommand();
            L_Filter          = "SELECT * FROM TRZAN WHERE KESN = " + L_Kesn + " AND TRCD = '" + L_Trcd + "' AND KICD = '" + L_Kicd + "'";
            L_Cmd.CommandText = L_Filter;
            L_Reader          = L_Cmd.ExecuteReader();
            if (L_Reader.Read())
            {
                L_Exist = true;
            }
            else
            {
                L_Exist = false;
            }
            L_Reader.Close();

            if (L_Exist == false)
            {
    // -*
                // 決算期単位で反復します。最大2周(当期の場合、翌期まで)
                for (L_KesnCnt = L_Kesn; L_KesnCnt <= (L_Kesn == H_Touki ? L_Kesn + 1 : L_Kesn); L_KesnCnt++)
                {
                    L_Cmd = H_Con.CreateCommand();

                    // 部門科目残高テーブル
                    L_Cmd.CommandText = "INSERT INTO TRZAN ( " +
                                                "KESN, TRCD, KICD, ESGN, GTNK, " +
                                                "R000, S000, R010, S010, R015, S015, R020, S020, R025, S025, R030, S030, " +
                                                "R035, S035, R040, S040, R045, S045, R050, S050, R055, S055, R060, S060, " +
                                                "R065, S065, R070, S070, R075, S075, R080, S080, R085, S085, R090, S090, " +
                                                "R095, S095, R100, S100, R105, S105, R110, S110, R115, S115, R120, S120, " +
                                                "R125, S125) " +
                                            "VALUES " +
                                                "( " + L_KesnCnt + ", '" + L_Trcd + "', '" + L_Kicd + "', 0, 0, " +
                                                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " +
                                                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " +
                                                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " +
                                                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " +
                                                "0, 0)";
                    L_Cmd.ExecuteNonQuery();
                    // 部門科目予算１～４テーブル
                    for (int i = 1; i < 5; i++)
                    {
                        L_Cmd.CommandText = "INSERT INTO TRYSN" + i.ToString("0") + "( " +
                                                "KESN, TRCD, KICD, " +
                                                "Y000, Y005, Y010, Y015, Y020, Y025, Y030, Y035, Y040, Y045, Y050, Y055, Y060, " +
                                                "Y065, Y070, Y075, Y080, Y085, Y090, Y095, Y100, Y105, Y110, Y115, Y120, Y125) " +
                                            "VALUES " +
                                                "( " + L_KesnCnt + ", '" + L_Trcd + "', '" + L_Kicd + "', " +
                                                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, " +
                                                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )";
                        L_Cmd.ExecuteNonQuery();
                    }
                }
            }
        }
// ▲ ツルハ様カスタマイズ ▲

        #region 各マスター存在チェック
        // *===========================================================================================*
        //    部門科目残高(BKZAN)レコード存在判定
        // 		【パラメータ】
        //            H_Con       :会社DBハンドル
        //            H_dtVolum   :会社情報データ(Volum)
        //            H_Kesn      :決算期(ex. 13)
        //            H_Bocd      :部門コード
        //            H_Kicd      :科目内部コード
        // 		【返送値】
        //            TRUE ：存在する
        // 		　　FALSE：存在しない
        // *===========================================================================================*
        private bool ChkImpData_Bmn(IDbConnection H_Con, DataTable H_dtVolum, short H_Kesn, string H_Bocd, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		DataRow L_VolumRow = default(DataRow);
    
    		functionReturnValue = true;
    
    		L_VolumRow = H_dtVolum.Select("KESN = " + H_Kesn)[0];
    
    		if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMFLG]) == 1)
            {
    			if ((!string.IsNullOrEmpty(H_Bocd)) && (!string.IsNullOrEmpty(H_Kicd)))
                {
    				if (BkzanExists_FNC(H_Con, H_Kesn, H_Bocd, H_Kicd) == false)
                    {
    					functionReturnValue = false;
    				}
    			}
    		}
            else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMFLG]) == 0)
            {
    			if (!string.IsNullOrEmpty(H_Bocd))
                {
    			}
    			functionReturnValue = false;
    		}
    		return functionReturnValue;    
    	}

    	// *===========================================================================================*
    	//    取引先科目残高(TRZAN)レコード存在判定
    	// 		【パラメータ】
    	//            H_Con       :会社DBハンドル
    	//            H_dtVolum   :会社情報データ(Volum)
    	//            H_Kesn      :決算期(ex. 13)
    	//            H_Trcd      :取引先コード
    	//            H_Kicd      :科目内部コード
    	// 		【返送値】
    	//            TRUE ：存在する
    	// 		　　FALSE：存在しない
    	// *===========================================================================================*
    	private bool ChkImpData_Tr(IDbConnection H_Con, DataTable H_dtVolum, short H_Kesn, string H_Trcd, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		DataRow L_VolumRow = default(DataRow);
    
    		functionReturnValue = true;
    
    		L_VolumRow = H_dtVolum.Select("KESN = " + H_Kesn)[0];
    
    		if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRFLG]) == 1)
            {
    			if ((!string.IsNullOrEmpty(H_Trcd)) && (!string.IsNullOrEmpty(H_Kicd)))
                {
    				if (TrzanExists_FNC(H_Con, H_Kesn, H_Trcd, H_Kicd) == false)
                    {
    					functionReturnValue = false;
    				}
    			}
    		}
            else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRFLG]) == 0)
            {
    			if (!string.IsNullOrEmpty(H_Trcd))
                {
    			}
    			functionReturnValue = false;
    		}
    		return functionReturnValue;    
    	}

    	// *===========================================================================================*
    	//    取引先科目外貨残高(GTRZAN)レコード存在判定
    	// 		【パラメータ】
    	//            H_Con       :会社DBハンドル
    	//            H_dtVolum   :会社情報データ(Volum)
    	//            H_Kesn      :決算期(ex. 13)
    	//            H_Trcd      :取引先コード
    	//            H_Kicd      :科目内部コード
    	// 		【返送値】
    	//            TRUE ：存在する
    	// 		　　FALSE：存在しない
    	// *===========================================================================================*
    	private bool ChkImpData_GTr(IDbConnection H_Con, DataTable H_dtVolum, short H_Kesn, string H_Trcd, string H_Kicd, string H_Hei_cd)
    	{
    		bool functionReturnValue = false;
    
    		DataRow L_VolumRow = default(DataRow);
    
    		functionReturnValue = true;
    
    		L_VolumRow = H_dtVolum.Select("KESN = " + H_Kesn)[0];
    
    		if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRFLG]) == 1)
            {
    			if ((!string.IsNullOrEmpty(H_Trcd)) && (!string.IsNullOrEmpty(H_Kicd)))
                {
    				if (GTrzanExists_FNC(H_Con, H_Kesn, H_Trcd, H_Kicd, H_Hei_cd) == false)
                    {
    					functionReturnValue = false;
    				}
    			}
    		}
            else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRFLG]) == 0)
            {
    			if (!string.IsNullOrEmpty(H_Trcd))
                {
    			}
    			functionReturnValue = false;
    		}
    		return functionReturnValue;    
    	}
    
    	// *===========================================================================================*
    	//    取引先科目外貨残高(GTRZAN)レコード存在判定
    	//       ChkImpData_GTr()よりコールされます
    	// 		【パラメータ】
    	//            H_Con  : 会社DBハンドル
    	//            H_Kesn : 決算期(ex. 13)
    	//            H_Trcd : 取引先コード
    	//            H_Kicd : 科目内部コード
    	// 		【返送値】
    	//            TRUE ：存在する
    	// 		　　  FALSE：存在しない
    	// *===========================================================================================*
    	private bool GTrzanExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Trcd, string H_Kicd, string H_Hei_cd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT TRCD FROM GTRZAN WHERE KESN = :p AND TRCD = :p AND KICD = :p AND HEI_CD = :p";

    			AddParameter_FNC(ref L_Cmd, "@KESN",   DbType.Int32,  H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@TRCD",   DbType.String, H_Trcd);
    			AddParameter_FNC(ref L_Cmd, "@KICD",   DbType.String, H_Kicd);
    			AddParameter_FNC(ref L_Cmd, "@HEI_CD", DbType.String, H_Hei_cd);

    			if (G_IsOracle == false)
                {
    				ReplacePlaceHolder_FNC(ref L_Cmd);
    			}
    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result != null) { functionReturnValue = true;  }
            else                  { functionReturnValue = false; }

    		return functionReturnValue;    
    	}

    	// *===========================================================================================*
    	//    部門科目外貨残高(GBKZAN)レコード存在判定
    	// 		【パラメータ】
    	//            H_Con       :会社DBハンドル
    	//            H_dtVolum   :会社情報データ(Volum)
    	//            H_Kesn      :決算期(ex. 13)
    	//            H_Bmcd      :部門コード
    	//            H_Kicd      :科目内部コード
    	// 		【返送値】
    	//            TRUE ：存在する
    	// 		　　FALSE：存在しない
    	// *===========================================================================================*
    	private bool ChkImpData_GBmn(IDbConnection H_Con, DataTable H_dtVolum, short H_Kesn, string H_Bocd, string H_Kicd, string H_Hei_cd)
    	{
    		bool functionReturnValue = false;
    
    		DataRow L_VolumRow = default(DataRow);
    
    		functionReturnValue = true;
    
    		L_VolumRow = H_dtVolum.Select("KESN = " + H_Kesn)[0];
    
    		if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMFLG]) == 1)
            {
    			if ((!string.IsNullOrEmpty(H_Bocd)) && (!string.IsNullOrEmpty(H_Kicd)))
                {
    				if (GBkzanExists_FNC(H_Con, H_Kesn, H_Bocd, H_Kicd, H_Hei_cd) == false)
                    {
    					functionReturnValue = false;
    				}
    			}
    		} else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMFLG]) == 0)
            {
    			if (!string.IsNullOrEmpty(H_Bocd)) {
    			}
    			functionReturnValue = false;
    		}
    		return functionReturnValue;    
    	}

    	// *===========================================================================================*
    	//    部門科目外貨残高(GBKZAN)レコード存在判定
    	//        ChkImpData_GBmn()よりコールされます
    	// 		【パラメータ】
    	//            H_Con       :会社DBハンドル
    	//            H_Kesn      :決算期(ex. 13)
    	//            H_Bmcd      :部門コード
    	//            H_Kicd      :科目内部コード
    	// 		【返送値】
    	//            TRUE ：存在する
    	// 		　　FALSE：存在しない
    	// *===========================================================================================*
    	private bool GBkzanExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Bcod, string H_Kicd, string H_Hei_cd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT BCOD FROM GBKZAN WHERE KESN = :p AND BCOD = :p AND KICD = :p AND HEI_CD = :p";
    			AddParameter_FNC(ref L_Cmd, "@KESN",   DbType.Int32,  H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@BCOD",   DbType.String, H_Bcod);
    			AddParameter_FNC(ref L_Cmd, "@KICD",   DbType.String, H_Kicd);
    			AddParameter_FNC(ref L_Cmd, "@HEI_CD", DbType.String, H_Hei_cd);
    			if (G_IsOracle == false)
                {
    				ReplacePlaceHolder_FNC(ref L_Cmd);
    			}
    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}
    
    	// *===========================================================================================*
    	//    部門取引先科目残高(BTKZAN)レコード存在判定
    	// 		【パラメータ】
    	//            H_Con       :会社DBハンドル
    	//            H_dtVolum   :会社情報データ(Volum)
    	//            H_Kesn      :決算期(ex. 13)
    	//            H_Bmcd      :部門コード
    	//            H_Trcd      :取引先コード
    	//            H_Kicd      :科目内部コード
    	// 		【返送値】
    	//            TRUE ：存在する
    	// 		　　FALSE：存在しない
    	// *===========================================================================================*
    	private bool ChkImpData_Btk(IDbConnection H_Con, DataTable H_dtVolum, short H_Kesn, string H_Bmcd, string H_Trcd, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		DataRow L_VolumRow = default(DataRow);
    
    		functionReturnValue = true;
    
    		L_VolumRow = H_dtVolum.Select("KESN = " + H_Kesn)[0];    
    		if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMFLG]) == 1) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRFLG]) == 1))
            {
    			if ((!string.IsNullOrEmpty(H_Bmcd)) && (!string.IsNullOrEmpty(H_Trcd)) && (!string.IsNullOrEmpty(H_Kicd)))
                {
    				if (BtkzanExists_FNC(H_Con, H_Kesn, H_Bmcd, H_Trcd, H_Kicd) == false)
                    {
    					functionReturnValue = false;
    				}
    			}
    		}
            else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMFLG]) == 0)
            {
    			if (!string.IsNullOrEmpty(H_Bmcd))
                {
    			}
    			functionReturnValue = false;
    		}
            else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRFLG]) == 0)
            {
    			if (!string.IsNullOrEmpty(H_Trcd))
                {
    			}
    			functionReturnValue = false;
    		}
    		return functionReturnValue;    
    	}

    	// *===========================================================================================*
    	//    科目幣種(KMKHEI)レコード存在判定
    	// 		【パラメータ】
    	//            H_Con       :会社DBハンドル
    	//            H_Kesn      :決算期(ex. 13)
    	//            H_Kicd      :科目内部コード
    	// 		【返送値】
    	//            TRUE ：存在する
    	// 		　　FALSE：存在しない
    	// *===========================================================================================*
    	private bool ChkImpData_Khei(IDbConnection H_Con, short H_Kesn, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd             = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT KESN FROM KMKHEI WHERE KESN = :p AND KICD = :p AND HEIKBN = 1";
    			AddParameter_FNC(ref L_Cmd, "@KESN", DbType.Int32,  H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@KICD", DbType.String, H_Kicd);
    			if (G_IsOracle == false)
                {
    				ReplacePlaceHolder_FNC(ref L_Cmd);
    			}
    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}

    	// *===========================================================================================*
    	//    枝番マスタ(ENAME)レコード存在判定
    	// 		【パラメータ】
    	//            H_Con       :会社DBハンドル
    	//            H_dtVolum   :会社情報データ(Volum)
    	//            H_Kesn      :決算期(ex. 13)
    	//            H_Ecod      :枝番コード
    	//            H_Kicd      :科目内部コード
    	// 		【返送値】
    	//            TRUE ：存在する
    	// 		　　FALSE：存在しない
    	// *===========================================================================================*
    	private bool ChkImpData_Enm(IDbConnection H_Con, DataTable H_dtVolum, short H_Kesn, string H_Ecod, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		DataRow L_VolumRow = default(DataRow);
    
    		functionReturnValue = true;
    
    		L_VolumRow = H_dtVolum.Select("KESN = " + H_Kesn)[0];
    		if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDFLG]) == 1)
            {
    			if ((!string.IsNullOrEmpty(H_Ecod)) && (!string.IsNullOrEmpty(H_Kicd)))
                {
    				if (EnameExists_FNC(H_Con, H_Kesn, H_Kicd, H_Ecod) == false)
                    {
    					functionReturnValue = false;
    				}
    			}
    		}
            else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDFLG]) == 0)
            {
    			if (!string.IsNullOrEmpty(H_Ecod))
                {
    			}
    			functionReturnValue = false;
    		}
    		return functionReturnValue;    
    	}

    	// *===========================================================================================*
    	//    枝番外貨残高(GEDZAN)レコード存在判定
    	// 		【パラメータ】
    	//            H_Con       :会社DBハンドル
    	//            H_dtVolum   :会社情報データ(Volum)
    	//            H_Kesn      :決算期(ex. 13)
    	//            H_Ecod      :枝番コード
    	//            H_Kicd      :科目内部コード
    	// 		【返送値】
    	//            TRUE ：存在する
    	// 		　　FALSE：存在しない
    	// *===========================================================================================*
    	private bool ChkImpData_GEnm(IDbConnection H_Con, DataTable H_dtVolum, short H_Kesn, string H_Ecod, string H_Kicd, string H_Hei_cd)
    	{
    		bool functionReturnValue = false;
    
    		DataRow L_VolumRow = default(DataRow);
    
    		functionReturnValue = true;
    
    		L_VolumRow = H_dtVolum.Select("KESN = " + H_Kesn)[0];    
    		if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDFLG]) == 1)
            {
    			if ((!string.IsNullOrEmpty(H_Ecod)) && (!string.IsNullOrEmpty(H_Kicd)))
                {
    				if (GEnmExists_FNC(H_Con, H_Kesn, H_Ecod, H_Kicd, H_Hei_cd) == false)
                    {
    					functionReturnValue = false;
    				}
    			}
    		}
            else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDFLG]) == 0)
            {
    			if (!string.IsNullOrEmpty(H_Ecod))
                {
    			}
    			functionReturnValue = false;
    		}
    		return functionReturnValue;    
    	}

    	// *===========================================================================================*
    	//    枝番外貨残高(GEDZAN)レコード存在判定
    	//        ChkImpData_GEnm()よりコールされます
    	// 		【パラメータ】
    	//            H_Con       :会社DBハンドル
    	//            H_Kesn      :決算期(ex. 13)
    	//            H_Ecod      :枝番コード
    	//            H_Kicd      :科目内部コード
    	// 		【返送値】
    	//            TRUE ：存在する
    	// 		　　FALSE：存在しない
    	// *===========================================================================================*
    	private bool GEnmExists_FNC(IDbConnection H_Con, short H_Kesn, string H_Ecod, string H_Kicd, string H_Hei_cd)
    	{
    		bool functionReturnValue = false;
    
    		IDbCommand L_Cmd    = default(IDbCommand);
    		object     L_Result = null;
    
    		try
            {
    			L_Cmd             = H_Con.CreateCommand();
    			L_Cmd.CommandText = "SELECT ECOD FROM GEDZAN WHERE KESN = :p AND ECOD = :p AND KICD = :p AND HEI_CD = :p";
    			AddParameter_FNC(ref L_Cmd, "@KESN",   DbType.Int32,  H_Kesn);
    			AddParameter_FNC(ref L_Cmd, "@ECOD",   DbType.String, H_Ecod);
    			AddParameter_FNC(ref L_Cmd, "@KICD",   DbType.String, H_Kicd);
    			AddParameter_FNC(ref L_Cmd, "@HEI_CD", DbType.String, H_Hei_cd);
    			if (G_IsOracle == false)
                {
    				ReplacePlaceHolder_FNC(ref L_Cmd);
    			}
    			L_Result = L_Cmd.ExecuteScalar();
    		}
            catch (Exception ex)
            {
    			throw new MyException(MC_RESULT_ERR_DBREAD, ex);
    		}

    		if (L_Result == null) { functionReturnValue = false; }
            else                  { functionReturnValue = true;  }

    		return functionReturnValue;    
    	}

        #region 2024/03/19 未使用のためコメントアウト
        // *===========================================================================================*
        //    部門科目枝番残高(BKEZAN)レコード存在判定
        // 		【パラメータ】
        //            H_Con       :会社DBハンドル
        //            H_dtVolum   :会社情報データ(Volum)
        //            H_Kesn      :決算期(ex. 13)
        //            H_Bmcd      :部門コード
        //            H_Ecod      :枝番コード
        //            H_Kicd      :科目内部コード
        // 		【返送値】
        //            TRUE ：存在する
        // 		　　FALSE：存在しない
        // *===========================================================================================*
//        private bool ChkImpData_Bke(IDbConnection H_Con, DataTable H_dtVolum, short H_Kesn, string H_Bmcd, string H_Ecod, string H_Kicd)
//    	{
//    		bool functionReturnValue = false;
    
//    		DataRow L_VolumRow = default(DataRow);
    
//    		functionReturnValue = true;
    
//    		L_VolumRow = H_dtVolum.Select("KESN = " + H_Kesn)[0];    
//    		if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMFLG]) == 1) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDFLG]) == 1))
//            {
//    			if ((!string.IsNullOrEmpty(H_Bmcd)) && (!string.IsNullOrEmpty(H_Ecod)) && (!string.IsNullOrEmpty(H_Kicd)))
//                {
//    				if (BkezanExists_FNC(H_Con, H_Kesn, H_Bmcd, H_Kicd, H_Ecod) == false)
//                    {
//    					functionReturnValue = false;
//    				}
//    			}
//    		}
//            else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_BMFLG]) == 0)
//            {
//    			if (!string.IsNullOrEmpty(H_Bmcd))
//                {
//    			}
//    			functionReturnValue = false;
//    		}
//            else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_EDFLG]) == 0)
//            {
//    			if (!string.IsNullOrEmpty(H_Ecod))
//                {
//                }
//    			functionReturnValue = false;
//    		}
//    		return functionReturnValue;    
//    	}
        #endregion

        // *===========================================================================================*
        //    セグメント科目残高(SGKZAN)レコード存在判定
        // 		【パラメータ】
        //            H_Con       :会社DBハンドル
        //            H_dtVolum   :会社情報データ(Volum)
        //            H_Kesn      :決算期(ex. 13)
        //            H_Sgcd      :セグメントコード
        //            H_Kicd      :科目内部コード
        // 		【返送値】
        //            TRUE ：存在する
        // 		　　FALSE：存在しない
        // *===========================================================================================*
        private bool ChkImpData_Seg(IDbConnection H_Con, DataTable H_dtVolum, short H_Kesn, string H_Sgcd, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		DataRow L_VolumRow = default(DataRow);
    
    		functionReturnValue = true;
    
    		L_VolumRow = H_dtVolum.Select("KESN = " + H_Kesn)[0];    
    		if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGFLG]) == 1)
            {
    			if ((!string.IsNullOrEmpty(H_Sgcd)) && (!string.IsNullOrEmpty(H_Kicd)))
                {
    				if (SgkzanExists_FNC(H_Con, H_Kesn, H_Sgcd, H_Kicd) == false)
                    {
    					functionReturnValue = false;
    				}
    			}
    		}
            else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGFLG]) == 0)
            {
    			if (!string.IsNullOrEmpty(H_Sgcd))
                {
    			}
    			functionReturnValue = false;
    		}
    		return functionReturnValue;    
    	}
    
    	// *===========================================================================================*
    	//    セグメント取引先科目残高(STKZAN)レコード存在判定
    	// 		【パラメータ】
    	//            H_Con       :会社DBハンドル
    	//            H_dtVolum   :会社情報データ(Volum)
    	//            H_Kesn      :決算期(ex. 13)
    	//            H_Sgcd      :セグメントコード
    	//            H_Trcd      :取引先コード
    	//            H_Kicd      :科目内部コード
    	// 		【返送値】
    	//            TRUE ：存在する
    	// 		　　FALSE：存在しない
    	// *===========================================================================================*
    	private bool ChkImpData_Stk(IDbConnection H_Con, DataTable H_dtVolum, short H_Kesn, string H_Sgcd, string H_Trcd, string H_Kicd)
    	{
    		bool functionReturnValue = false;
    
    		DataRow L_VolumRow = default(DataRow);
    
    		functionReturnValue = true;
    
    		L_VolumRow = H_dtVolum.Select("KESN = " + H_Kesn)[0];    
    		if ((Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGFLG]) == 1) && (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRFLG]) == 1))
            {
    			if ((!string.IsNullOrEmpty(H_Sgcd)) && (!string.IsNullOrEmpty(H_Trcd)) && (!string.IsNullOrEmpty(H_Kicd)))
                {
    				if (StkzanExists_FNC(H_Con, H_Kesn, H_Sgcd, H_Trcd, H_Kicd) == false)
                    {
    					functionReturnValue = false;
    				}
    			}
    		}
            else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_SGFLG]) == 0)
            {
    			if (!string.IsNullOrEmpty(H_Sgcd))
                {
    			}
    			functionReturnValue = false;
    		}
            else if (Convert.ToInt32(L_VolumRow[(int)eVOLUM.VOLUM_TRFLG]) == 0)
            {
    			if (!string.IsNullOrEmpty(H_Trcd))
                {
    			}
    			functionReturnValue = false;
    		}
    		return functionReturnValue;    
    	}
        #endregion

        #region 元からコメントアウト
        // '*===========================================================================================*
        // '   外貨部門取引先科目残高(GBTKZAN)レコード存在判定
        // '		【パラメータ】
        // '           H_Con       :会社DBハンドル
        // '           H_dtVolum   :会社情報データ(Volum)
        // '           H_Kesn      :決算期(ex. 13)
        // '           H_Bmcd      :部門コード
        // '           H_Trcd      :取引先コード
        // '           H_Kicd      :科目内部コード
        // '		【返送値】
        // '           TRUE ：存在する
        // '		　　FALSE：存在しない
        // '*===========================================================================================*
        // Private Function ChkImpData_GBtk(ByVal H_Con As IDbConnection, ByVal H_dtVolum As DataTable, _
        //                                     ByVal H_Kesn As Short, ByVal H_Bmcd As String, ByVal H_Trcd As String, ByVal H_Kicd As String, _
        //                                     ByVal H_Hei_cd As String) _
        //                                    As Boolean

        //     Dim L_VolumRow As DataRow

        //     ChkImpData_GBtk = True

        //     L_VolumRow = H_dtVolum.Select("KESN = " && H_Kesn)(0)

        //     If (L_VolumRow[(int)eVOLUM.VOLUM_BMFLG) = 1) And (L_VolumRow[(int)eVOLUM.VOLUM_TRFLG) = 1) Then
        //         If (H_Bmcd <> "") And (H_Trcd <> "") And (H_Kicd <> "") Then
        //             If GBtkzanExists_FNC(H_Con, H_Kesn, H_Bmcd, H_Trcd, H_Kicd, H_Hei_cd) = False Then
        //                 ChkImpData_GBtk = False
        //             End If
        //         End If
        //     ElseIf L_VolumRow[(int)eVOLUM.VOLUM_BMFLG) = 0 Then
        //         If H_Bmcd <> "" Then
        //         End If
        //         ChkImpData_GBtk = False
        //     ElseIf L_VolumRow[(int)eVOLUM.VOLUM_TRFLG) = 0 Then
        //         If H_Trcd <> "" Then
        //         End If
        //         ChkImpData_GBtk = False
        //     End If

        // End Function
        // '*===========================================================================================*
        // '   部門取引先科目外貨残高(GBTKZAN)レコード存在判定
        // '       ChkImpData_GBtk()よりコールされます
        // '		【パラメータ】
        // '           H_Con       :会社DBハンドル
        // '           H_Kesn      :決算期(ex. 13)
        // '           H_Bmcd      :部門コード
        // '           H_Trcd      :取引先コード
        // '           H_Kicd      :科目内部コード
        // '		【返送値】
        // '           TRUE ：存在する
        // '		　　FALSE：存在しない
        // '*===========================================================================================*
        // Private Function GBtkzanExists_FNC(ByVal H_Con As IDbConnection, ByVal H_Kesn As Short, _
        //                                   ByVal H_Bcod As String, ByVal H_Trcd As String, _
        //                                   ByVal H_Kicd As String, ByVal H_Hei_cd As String) _
        //                                  As Boolean

        //     Dim L_Cmd As IDbCommand
        //     Dim L_Result As Object = Nothing

        //     Try
        //         L_Cmd = H_Con.CreateCommand()
        //         L_Cmd.CommandText = "SELECT TRCD FROM GBTKZAN WHERE KESN = :p AND BCOD = :p AND TRCD = :p AND KICD = :p AND HEI_CD = :p"
        //         AddParameter_FNC(L_Cmd, "@KESN", DbType.Int32, H_Kesn)
        //         AddParameter_FNC(L_Cmd, "@BCOD", DbType.String, H_Bcod)
        //         AddParameter_FNC(L_Cmd, "@TRCD", DbType.String, H_Trcd)
        //         AddParameter_FNC(L_Cmd, "@KICD", DbType.String, H_Kicd)
        //         AddParameter_FNC(L_Cmd, "@HEI_CD", DbType.String, H_Hei_cd)
        //         If G_IsOracle = False Then
        //             ReplacePlaceHolder_FNC(L_Cmd)
        //         End If
        //         L_Result = L_Cmd.ExecuteScalar()
        //     Catch ex As Exception
        //         Throw New MyException(MC_RESULT_ERR_DBREAD, ex)
        //     End Try
        //     If L_Result Is Nothing Then
        //         GBtkzanExists_FNC = False
        //     Else
        //         GBtkzanExists_FNC = True
        //     End If

        // End Function
        // '*===========================================================================================*
        // '   外貨部門科目枝番残高(GBKEZAN)レコード存在判定
        // '		【パラメータ】
        // '           H_Con       :会社DBハンドル
        // '           H_dtVolum   :会社情報データ(Volum)
        // '           H_Kesn      :決算期(ex. 13)
        // '           H_Bmcd      :部門コード
        // '           H_Ecod      :枝番コード
        // '           H_Kicd      :科目内部コード
        // '		【返送値】
        // '           TRUE ：存在する
        // '		　　FALSE：存在しない
        // '*===========================================================================================*
        // Private Function ChkImpData_GBke(ByVal H_Con As IDbConnection, ByVal H_dtVolum As DataTable, _
        //                                     ByVal H_Kesn As Short, ByVal H_Bmcd As String, ByVal H_Ecod As String, ByVal H_Kicd As String, _
        //                                     ByVal H_Hei_cd As String) _
        //                                    As Boolean

        //     Dim L_VolumRow As DataRow

        //     ChkImpData_GBke = True

        //     L_VolumRow = H_dtVolum.Select("KESN = " && H_Kesn)(0)

        //     If (L_VolumRow[(int)eVOLUM.VOLUM_BMFLG) = 1) And (L_VolumRow[(int)eVOLUM.VOLUM_EDFLG) = 1) Then
        //         If (H_Bmcd <> "") And (H_Ecod <> "") And (H_Kicd <> "") Then
        //             If GBkezanExists_FNC(H_Con, H_Kesn, H_Bmcd, H_Kicd, H_Ecod, H_Hei_cd) = False Then
        //                 ChkImpData_GBke = False
        //             End If
        //         End If
        //     ElseIf L_VolumRow[(int)eVOLUM.VOLUM_BMFLG) = 0 Then
        //         If H_Bmcd <> "" Then
        //         End If
        //         ChkImpData_GBke = False
        //     ElseIf L_VolumRow[(int)eVOLUM.VOLUM_EDFLG) = 0 Then
        //         If H_Ecod <> "" Then
        //         End If
        //         ChkImpData_GBke = False
        //     End If

        // End Function
        // '*===========================================================================================*
        // '   部門科目枝番外貨残高(GBKEZAN)レコード存在判定
        // '       ChkImpData_GBke()よりコールされます
        // '		【パラメータ】
        // '           H_Con       :会社DBハンドル
        // '           H_Kesn      :決算期(ex. 13)
        // '           H_Bmcd      :部門コード
        // '           H_Ecod      :枝番コード
        // '           H_Kicd      :科目内部コード
        // '		【返送値】
        // '           TRUE ：存在する
        // '		　　FALSE：存在しない
        // '*===========================================================================================*
        // Private Function GBkezanExists_FNC(ByVal H_Con As IDbConnection, ByVal H_Kesn As Short, _
        //                                   ByVal H_Bcod As String, ByVal H_Kicd As String, _
        //                                   ByVal H_Ecod As String, ByVal H_Hei_cd As String) _
        //                                  As Boolean

        //     Dim L_Cmd As IDbCommand
        //     Dim L_Result As Object = Nothing

        //     Try
        //         L_Cmd = H_Con.CreateCommand()
        //         L_Cmd.CommandText = "SELECT ECOD FROM GBKEZAN WHERE KESN = :p AND BCOD = :p AND KICD = :p AND ECOD = :p AND HEI_CD = :p"
        //         AddParameter_FNC(L_Cmd, "@KESN", DbType.Int32, H_Kesn)
        //         AddParameter_FNC(L_Cmd, "@BCOD", DbType.String, H_Bcod)
        //         AddParameter_FNC(L_Cmd, "@KICD", DbType.String, H_Kicd)
        //         AddParameter_FNC(L_Cmd, "@ECOD", DbType.String, H_Ecod)
        //         AddParameter_FNC(L_Cmd, "@HEI_CD", DbType.String, H_Hei_cd)
        //         If G_IsOracle = False Then
        //             ReplacePlaceHolder_FNC(L_Cmd)
        //         End If
        //         L_Result = L_Cmd.ExecuteScalar()
        //     Catch ex As Exception
        //         Throw New MyException(MC_RESULT_ERR_DBREAD, ex)
        //     End Try
        //     If L_Result Is Nothing Then
        //         GBkezanExists_FNC = False
        //     Else
        //         GBkezanExists_FNC = True
        //     End If

        // End Function
        #endregion

        #region PostgreSQL対応により｢DbFactory｣に移動(コメントアウト)
        // 接続情報にユーザーIDをセット
        //        private void SetUserIdToConnectionInfo_SUB(IDbConnection connection, string userId)
        //    	{
        //    		if (string.IsNullOrEmpty(userId))
        //            {
        //    			return;
        //    		}

        //    		string commandText = null;
        //    		IDbCommand command = connection.CreateCommand();
        //    		if (G_IsOracle)
        //            {
        ////    			commandText = string.Format("CALL DBMS_SESSION.SET_IDENTIFIER('{0}')", userId);
        //    		}
        //            else
        //            {
        //    			commandText = string.Format("SET CONTEXT_INFO {0}", userId);
        //    		}
        //    		command.CommandText = commandText;
        //    		command.ExecuteNonQuery();
        //    	}
        //    	// SQLServerの場合はロックタイムアウトを1秒に設定
        //    	private void SetLockTimeOut_SUB(IDbConnection connection)
        //    	{
        //    		string commandText  = "SET LOCK_TIMEOUT 1000 ";
        //    		IDbCommand command  = connection.CreateCommand();
        //    		command.CommandText = commandText;
        //    		command.ExecuteNonQuery();
        //    	}
        //    	private string CreateConnectionStriong(string CatalogString)
        //    	{
        //    		string ReturnString = null;
        //    		string user         = "ICSP_312IUSER";
        //    		string s1           = DB_DmyStr(1);
        //    		string s2           = DB_DmyStr(2);
        //    		string s3           = DB_DmyStr(3);
        //    		string s4           = DB_DmyStr(4);
        //    		string pass         = "";
        //    		pass += s1.Substring( 8, 1);
        //    		pass += s1.Substring( 2, 1);
        //    		pass += s1.Substring(18, 1);
        //    		pass += s3.Substring( 8, 1);
        //    		pass += s1.Substring(18, 1);
        //    		pass += s1.Substring(19, 1);
        //    		pass += s1.Substring( 3, 1);
        //    		pass += s3.Substring( 8, 1);
        //    		pass += s1.Substring(18, 1);
        //    		pass += s1.Substring( 8, 1);
        //    		pass += s1.Substring( 0, 1);
        //    		pass += s1.Substring(18, 1);
        //    		ReturnString = "Data Source = " + G_ServerName + "\\ICSP" + G_ServerPort + ";Initial Catalog = " + CatalogString + ";Integrated Security = FALSE;User Id=" + user + ";Password=" + pass + ";";

        //    		return ReturnString;
        //    	}
        //    	private string CreateConnectionStriong_Oracle()
        //    	{
        //    		string ReturnString = null;
        //    		string user         = "ICSP_312IUSER";
        //    		string s1           = DB_DmyStr(1);
        //    		string s2           = DB_DmyStr(2);
        //    		string s3           = DB_DmyStr(3);
        //    		string s4           = DB_DmyStr(4);
        //    		string pass         = "";
        //    		pass += s1.Substring( 8, 1);
        //    		pass += s1.Substring( 2, 1);
        //    		pass += s1.Substring(18, 1);
        //    		pass += s3.Substring( 8, 1);
        //    		pass += s1.Substring(18, 1);
        //    		pass += s1.Substring(19, 1);
        //    		pass += s1.Substring( 3, 1);
        //    		pass += s3.Substring( 8, 1);
        //    		pass += s1.Substring(18, 1);
        //    		pass += s1.Substring( 8, 1);
        //    		pass += s1.Substring( 0, 1);
        //    		pass += s1.Substring(18, 1);
        //    		ReturnString = "Data Source = " + G_ServerName + G_ServerPort + "/ICSP;Pooling=false;User Id=" + user + ";Password=" + pass + ";";
        //    		return ReturnString;
        //    	}
        //    	private void SetCurrentSchema_SUB(IDbConnection connection, string SchemaString)
        //    	{
        //    		string commandText  = "ALTER SESSION SET CURRENT_SCHEMA " + SchemaString;
        //    		IDbCommand command  = connection.CreateCommand();
        //    		command.CommandText = commandText;
        //    		command.ExecuteNonQuery();
        //    	}
        //    	private string DB_DmyStr(int no)
        //    	{
        //    		if (no == 1) { return "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; }
        //    		if (no == 2) { return "abcdefghijklmnopqrstuvwxyz"; }
        //    		if (no == 3) { return "!#$%&:()_~|+-*-.;@, ";  		}
        //    		if (no == 4) { return "1234567890";          		}
        //    		return "";
        //    	}
        #endregion

        #region リンク・e文書
        // ------------------------------
        // 拡張子チェック
        // ------------------------------
        private bool ChkExtension(string P_FilePath, int P_Flg1)
    	{    
    		string L_Extension = System.IO.Path.GetExtension(P_FilePath);
    		bool   L_Ret       = false;
    
    		L_Extension = L_Extension.ToUpper();    

// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応 --->
//    		if (P_Flg1 != 3)
            if (P_Flg1 < 3)
// <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応
            {
                // 無条件にPDFファイルを追加 2021/03/31
                //// 無条件で使用可能
                //if (L_Extension == ".BMP" || L_Extension == ".JPEG" || L_Extension == ".PNG" || L_Extension == ".JPG")
                if (L_Extension == ".BMP" || L_Extension == ".JPEG" || L_Extension == ".PNG" || L_Extension == ".JPG" || L_Extension == ".PDF")
                {
    				L_Ret = true;
    			}
                else
                {
                    // 当てはまる拡張子がない場合、永久ループなので修正 2021/03/31
                    //*
                    int chk_count = 0;
                    //*
                    do
                    {
                        // 無条件に移動 2021/03/31
                        //// 会社情報設定により使用可能
                        //if (L_Extension == ".PDF")
                        //{
                        //    if (P_PDF == 1)
                        //    {
                        //        L_Ret = true;
                        //        break;
                        //    }
                        //}

                        if (L_Extension == ".XPS")
                        {
                            //* 無限ループ対応 2021/03/31
                            chk_count = 1;
                            //* 無限ループ対応 2021/03/31
                            if (P_XPS == 1)
                            {
                                L_Ret = true;
                                break;
                            }
                        }

                        if (L_Extension == ".OXPS")
                        {
                            //* 無限ループ対応 2021/03/31
                            chk_count = 1;
                            //* 無限ループ対応 2021/03/31
                            if (P_OXPS == 1)
                            {
                                L_Ret = true;
                                break;
                            }
                        }

                        if (L_Extension == ".DOC" || L_Extension == ".DOCX")
                        {
                            //* 無限ループ対応 2021/03/31
                            chk_count = 1;
                            //* 無限ループ対応 2021/03/31
                            if (P_DOCDOCX == 1)
                            {
                                L_Ret = true;
                                break;
                            }
                        }

                        if (L_Extension == ".XLS" || L_Extension == ".XLSX")
                        {
                            //* 無限ループ対応 2021/03/31
                            chk_count = 1;
                            //* 無限ループ対応 2021/03/31
                            if (P_XLSXLSX == 1)
                            {
                                L_Ret = true;
                                break;
                            }
                        }

// 2022/04/11 Ver02.24.01 e文書任意項目＆拡張子MSG対応 --->
                        if (L_Extension == ".MSG")
                        {
                            chk_count = 1;
                            if (P_MSG == 1)
                            {
                                L_Ret = true;
                                break;
                            }
                        }
// <--- 2022/04/11 Ver02.24.01 e文書任意項目＆拡張子MSG対応

                    //* 無限ループ対応 2021/03/31
                    //*} while (true);
                    } while (chk_count < 1);
                    //* 無限ループ対応 2021/03/31
                }
            }
// 2023/12/26 Ver02.28.01 電子取引(TSなし)拡張子制限排除対応 *-
            else if (P_Flg1 == 5)
            {
                L_Ret = true;
            }
// -*
            else
            {
    			// e文書は「PDF」のみ許可
    			if (L_Extension == ".PDF")
                {
    				L_Ret = true;
    			}
    		}
    
    		return L_Ret;
    	}    
    
    	// ------------------------------
    	// リンク情報チェック
    	// ------------------------------
    	private int ChkLinkInfo(string H_CCOD, string[] H_Data, short H_Touki, ref int H_ErrCnt, ref strucERRORLOGLINK[] H_ErrLogLink)
    	{
    		int functionReturnValue = 0;
    
    		int    L_flg1 = 0;
    		int    L_Ret  = 0;
    		string L_Kesn = "";

            //*
            //mLogger.LogWrite(Logger.Level.INFO, "ファイル名称の文字数チェック");
            //mLogger.LogClose();
            //*
    		// リンク名称の文字数チェック
    		if (LenB_FNC(H_Data[Convert.ToInt32(G_Index_LNAM)]) > 40)
            {
    			SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 2, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_LNAM)], MC_ERRLOG_LINK_0);
    		}    
    		L_flg1 = Convert.ToInt32(H_Data[G_Index_FLG1]);

            //*
            mLogger.LogWrite(Logger.Level.INFO, "ファイル名称の文字数チェック L_flg1: " + L_flg1.ToString());
            mLogger.LogClose();
            //*
            try
            {
    			switch (L_flg1)
                {
    				case 0:
    					// チェックなし
    					L_Ret = 1;
    					break;
    				case 1:    
    					// 拡張子チェック
    					if (ChkExtension(H_Data[Convert.ToInt32(G_Index_LINK)], Convert.ToInt32(H_Data[G_Index_FLG1])) == true)
                        {
    						// リンクの場合は、リンク元のファイルの存在チェックはおこなわない                        
    						L_Ret = 1;
    					}
                        else
                        {
    						SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 4, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_LINK)], MC_ERRLOG_LINK_1);
    					}    
    					break;    
    				case 2:
                        // 拡張子チェック
                        //*
                        //mLogger.LogWrite(Logger.Level.INFO, "拡張子チェック");
                        //mLogger.LogClose();
                        //*

                        if (ChkExtension(H_Data[Convert.ToInt32(G_Index_LINK)], Convert.ToInt32(H_Data[G_Index_FLG1])) == true)
                        {
    						// コピー元ファイル存在チェック
    						if (System.IO.File.Exists(H_Data[Convert.ToInt32(G_Index_LINK)]))
                            {
    							// コピー先フォルダ存在チェック
    							// 当期
    							L_Kesn = H_Touki.ToString();
    							if (System.IO.Directory.Exists(G_LinkPass + "\\CO" + H_CCOD + "\\" + L_Kesn))
                                {
    								L_Ret = 1;
    							}
                                else
                                {
    								System.IO.Directory.CreateDirectory(G_LinkPass + "\\CO" + H_CCOD + "\\" + L_Kesn);
    								L_Ret = 1;
    							}
                                // 翌期
// 2019/12/26 Ver01.19.05.9901 仮翌期フォルダ名称不具合修正 --->
//    							L_Kesn = L_Kesn + 1;
                                L_Kesn = (int.Parse(L_Kesn) + 1).ToString();
// <--- 2019/12/26 Ver01.19.05.9901 仮翌期フォルダ名称不具合修正
                                if (System.IO.Directory.Exists(G_LinkPass + "\\CO" + H_CCOD + "\\" + L_Kesn))
                                {
    								L_Ret = 1;
    							}
                                else
                                {
    								System.IO.Directory.CreateDirectory(G_LinkPass + "\\CO" + H_CCOD + "\\" + L_Kesn);
    								L_Ret = 1;
    							}
    						}
                            else
                            {
    							SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 4, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_LINK)], MC_ERRLOG_LINK_2);
    						}
    					}
                        else
                        {
    						SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 4, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_LINK)], MC_ERRLOG_LINK_1);
    					}    
    					break;
    				case 3:
// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応(条件追加) --->
                    case 4:
                    case 5:
// <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応(条件追加)

    					// *-e文書
    					// <---Ver01.17.04　2019/02/28　hirano　AI-OCR対応
    					// ワークフローとAI-OCRのみ許可
    					if (P_SKUBUN == (int)eSKUBUN.SKUBUN_WORK_FLOW || P_SKUBUN == (int)eSKUBUN.SKUBUN_AIOCR)
                        {
                            // --->Ver01.17.04
                            // e文書の使用判断
                            if (P_Int_SubEDOC == 0)
                            {
                              SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 3, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[G_Index_FLG1], MC_ERRLOG_LINK_4);
                            }
                            else
                            {
                                #region 拡張子チェック(ファイル・フォルダ存在チェック)
                                if (ChkExtension(H_Data[Convert.ToInt32(G_Index_LINK)], Convert.ToInt32(H_Data[G_Index_FLG1])) == true)
                                {
                                    // コピー元ファイルの存在チェック
                                    if (System.IO.File.Exists(H_Data[Convert.ToInt32(G_Index_LINK)]))
                                    {
                                        L_Ret += 1;
                                    }
                                    else
                                    {
                                        SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 4, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_LINK)], MC_ERRLOG_LINK_2);
                                    }

                                    // コピー先フォルダの存在チェック
                                    // 当期
                                    L_Kesn = H_Touki.ToString();
                                    if (System.IO.Directory.Exists(G_EdocPass + "\\CO" + H_CCOD + "\\" + L_Kesn))
                                    {
                                    }
                                    else
                                    {
                                        System.IO.Directory.CreateDirectory(G_EdocPass + "\\CO" + H_CCOD + "\\" + L_Kesn);
                                    }

                                    // 2021/10/14 Ver02.22.13 令和３年改正電帳法対応 --->
                                    if (!System.IO.Directory.Exists(G_EdocNaPass + "\\CO" + H_CCOD + "\\" + L_Kesn))
                                    {
                                        System.IO.Directory.CreateDirectory(G_EdocNaPass + "\\CO" + H_CCOD + "\\" + L_Kesn);
                                    }
                                    // <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応

                                    // 翌期
                                    // 2019/12/26 Ver01.19.05.9901 仮翌期フォルダ名称不具合修正 --->
                                    //    							L_Kesn = L_Kesn + 1;
                                    L_Kesn = (int.Parse(L_Kesn) + 1).ToString();
                                    // <--- 2019/12/26 Ver01.19.05.9901 仮翌期フォルダ名称不具合修正
                                    if (System.IO.Directory.Exists(G_EdocPass + "\\CO" + H_CCOD + "\\" + L_Kesn))
                                    {
                                    }
                                    else
                                    {
                                        System.IO.Directory.CreateDirectory(G_EdocPass + "\\CO" + H_CCOD + "\\" + L_Kesn);
                                    }

                                    // 2021/10/14 Ver02.22.13 令和３年改正電帳法対応 --->
                                    if (!System.IO.Directory.Exists(G_EdocNaPass + "\\CO" + H_CCOD + "\\" + L_Kesn))
                                    {
                                        System.IO.Directory.CreateDirectory(G_EdocNaPass + "\\CO" + H_CCOD + "\\" + L_Kesn);
                                    }
                                    // <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応

                                    L_Ret += 1;
                                }
                                else
                                {
                                    SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 4, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_LINK)], MC_ERRLOG_LINK_1);
                                }
                                #endregion

                                #region e文書番号チェック
                                if (string.IsNullOrEmpty(H_Data[Convert.ToInt32(G_Index_E_EDOC)]))
                                {
                                    SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 5, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_E_EDOC)], MC_ERRLOG_LINK_5);
                                }
                                else
                                {
                                    // e文書番号を18桁から19桁に変更
                                    // If LenB_FNC(H_Data(G_Index_E_EDOC)) > 18 Then
                                    if (LenB_FNC(H_Data[Convert.ToInt32(G_Index_E_EDOC)]) > 19)
                                    {
                                        SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 5, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_E_EDOC)], MC_ERRLOG_LINK_0);
                                    }
                                    else
                                    {
                                        L_Ret += 1;
                                    }
                                }
                                #endregion
                                #region 申請者チェック
                                if (string.IsNullOrEmpty(H_Data[Convert.ToInt32(G_Index_E_NUSR)]))
                                {
                                    SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 10, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_E_NUSR)], MC_ERRLOG_LINK_6);
                                }
                                else
                                {
// Ver02.25.03 申請者名称・最終承認者名称 100バイト対応 --->
//                                  if (LenB_FNC(H_Data[Convert.ToInt32(G_Index_E_NUSR)]) > 40) {
                                    if (LenB_FNC(H_Data[Convert.ToInt32(G_Index_E_NUSR)]) > 100)
                                    {
                                        // 100バイトを超える場合、後ろをカットして継続(末尾の2バイト文字が分断されたら99バイトでカット)
                                        Encoding sjis = Encoding.GetEncoding("Shift_JIS");
                                        int byteCountNUSR = sjis.GetByteCount(H_Data[Convert.ToInt32(G_Index_E_NUSR)]);
                                        byte[] byteNUSR = sjis.GetBytes(H_Data[Convert.ToInt32(G_Index_E_NUSR)]);
                                        string stringNUSR = sjis.GetString(byteNUSR, 0, 100);
                                        if (stringNUSR.EndsWith("\0") || stringNUSR.EndsWith("・"))
                                        {
                                            H_Data[Convert.ToInt32(G_Index_E_NUSR)] = sjis.GetString(byteNUSR, 0, 99);
                                        }
                                        //SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 10, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_E_NUSR)], MC_ERRLOG_LINK_0);
// <--- Ver02.25.03 申請者名称・最終承認者名称 100バイト対応
                                    }
                                        else
                                        {
                                        L_Ret += 1;
                                    }
                                }
                                #endregion
                                #region 最終承認者チェック
                                // <---Ver01.17.04　2019/02/28　hirano　AI-OCR対応
                                // AI-OCRの場合はチェックしない
                                if (P_SKUBUN != (int)eSKUBUN.SKUBUN_AIOCR)
                                {
                                    // --->Ver01.17.04
                                    if (string.IsNullOrEmpty(H_Data[Convert.ToInt32(G_Index_E_SUSR)]))
                                    {
                                        SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 11, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_E_SUSR)], MC_ERRLOG_LINK_7);
                                    }
                                    else
                                    {
// Ver02.25.03 申請者名称・最終承認者名称 100バイト対応 --->
//                                      if (LenB_FNC(H_Data[Convert.ToInt32(G_Index_E_SUSR)]) > 40) {
                                        if (LenB_FNC(H_Data[Convert.ToInt32(G_Index_E_SUSR)]) > 100)
                                        {
                                            // 100バイトを超える場合、後ろをカットして継続(末尾の2バイト文字が分断されたら99バイトでカット)
                                            Encoding sjis = Encoding.GetEncoding("Shift_JIS");
                                            int byteCountSUSR = sjis.GetByteCount(H_Data[Convert.ToInt32(G_Index_E_NUSR)]);
                                            byte[] byteSUSR = sjis.GetBytes(H_Data[Convert.ToInt32(G_Index_E_NUSR)]);
                                            string stringSUSR = sjis.GetString(byteSUSR, 0, 100);
                                            if (stringSUSR.EndsWith("\0") || stringSUSR.EndsWith("・"))
                                            {
                                                H_Data[Convert.ToInt32(G_Index_E_NUSR)] = sjis.GetString(byteSUSR, 0, 99);
                                            }
                                            // -*01.07.03
//                                          SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 11, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_E_SUSR)], MC_ERRLOG_LINK_0);                                        
// <--- Ver02.25.03 申請者名称・最終承認者名称 100バイト対応
                                        }
                                        else
                                        {
                                            L_Ret += 1;
                                        }
                                    }
                                }
                                // Ver01.17.04　2019/02/28　hirano　AI-OCR対応    
                                #endregion
                                #region 書類種別
                                // 現状は「0」固定（念の為、値を書き換える）
                                // ---> Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
                                // H_Data(G_Index_E_SYUBETSU) = 0

                                // 2021/10/14 Ver02.22.13 書類種別(6.領収書控、7.請求書控)対応 --->
                                //                                // 0～5以外の数字の場合
                                //                                if ((Convert.ToInt32(H_Data[G_Index_E_SYUBETSU]) < 0 || Convert.ToInt32(H_Data[G_Index_E_SYUBETSU]) > 5))
                                //                                {
                                // 0～7以外の数字の場合
                                if ((Convert.ToInt32(H_Data[G_Index_E_SYUBETSU]) < 0 || Convert.ToInt32(H_Data[G_Index_E_SYUBETSU]) > 7))
                                {
                                    // <--- 2021/10/14 Ver02.22.13 書類種別(6.領収書控、7.請求書控)対応

                                    // ---> Ver01.14.02 2018.08.02 MDCR_WWK e文書複数書類種別の不具合対応
                                    // SetErrLog_SUB_LINK(H_ErrLogLink, H_ErrCnt, H_Data(G_Index_LNO), 5, H_Data(G_Index_LNAM), H_Data(G_Index_E_SYUBETSU), MC_ERRLOG_LINK_8)
                                    SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 6, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[G_Index_E_SYUBETSU], MC_ERRLOG_LINK_8);
                                    // <--- Ver01.14.02 2018.08.02 MDCR_WWK e文書複数書類種別の不具合対応
                                }
                                else
                                {
                                    L_Ret += 1;
                                }
                                // <--- Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
                                #endregion
                                #region 日付

// 2022/04/11 Ver02.24.01 e文書任意項目対応 --->
                                // 日付必須 → 必須・任意設定の条件追加(必須の場合のみチェック)
                                if (P_LinkDate[Convert.ToInt32(oLinkKeynm2Idx[Convert.ToInt32(H_Data[G_Index_E_SYUBETSU])])] == 0)
                                {
// <--- 2022/04/11 Ver02.24.01 e文書任意項目対応

                                    if (!string.IsNullOrEmpty(H_Data[G_Index_E_SYMD]))
                                    {
                                        // 日付チェック
                                        if (ChkHiduke_FNC(H_Data[G_Index_E_SYMD]) == false)
                                        {
                                            // ---> Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
                                            // SetErrLog_SUB_LINK(H_ErrLogLink, H_ErrCnt, H_Data(G_Index_LNO), 7, H_Data(G_Index_LNAM), H_Data(G_Index_E_SYMD), MC_ERRLOG_LINK_8)
                                            SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 7, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[G_Index_E_SYMD], MC_ERRLOG_LINK_9);
                                            // <--- Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
                                        }
                                        else
                                        {
                                            L_Ret += 1;
                                        }
                                    }
                                    else
                                    {
                                        // ---> Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
                                        // SetErrLog_SUB_LINK(H_ErrLogLink, H_ErrCnt, H_Data(G_Index_LNO), 7, H_Data(G_Index_LNAM), H_Data(G_Index_E_SYMD), MC_ERRLOG_LINK_9)
                                        SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 7, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[G_Index_E_SYMD], MC_ERRLOG_LINK_10);
                                        // <--- Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
                                    }
                                }
                                #endregion
                                #region 金額
// 2022/04/11 Ver02.24.01 e文書任意項目対応 --->
                                // 金額必須 → 必須・任意設定の条件追加(必須の場合のみチェック)
                                if (P_LinkAmount[Convert.ToInt32(oLinkKeynm2Idx[Convert.ToInt32(H_Data[G_Index_E_SYUBETSU])])] == 0)
                                {
// <--- 2022/04/11 Ver02.24.01 e文書任意項目対応

                                    if (string.IsNullOrEmpty(H_Data[G_Index_E_SVALU]))

                                    {
                                        // ---> Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
                                        // SetErrLog_SUB_LINK(H_ErrLogLink, H_ErrCnt, H_Data(G_Index_LNO), 8, H_Data(G_Index_LNAM), H_Data(G_Index_E_SVALU), MC_ERRLOG_LINK_10)
                                        SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 8, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[G_Index_E_SVALU], MC_ERRLOG_LINK_11);
                                        // <--- Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
                                    }
                                    else
                                    {
                                        if (LenB_FNC(H_Data[G_Index_E_SVALU]) > 13)
                                        {
                                            SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 8, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[G_Index_E_SVALU], MC_ERRLOG_LINK_0);
                                        }
                                        else
                                        {
                                            L_Ret += 1;
                                        }
                                    }
                                }
                                #endregion
                                #region 発行者名称
// 2022/04/11 Ver02.24.01 e文書任意項目対応 --->
                                // 発行者名称必須 → 必須・任意設定の条件追加(必須の場合のみチェック)
                                if (P_LinkPublisher[Convert.ToInt32(oLinkKeynm2Idx[Convert.ToInt32(H_Data[G_Index_E_SYUBETSU])])] == 0)
                                {
// <--- 2022/04/11 Ver02.24.01 e文書任意項目対応

                                    if (string.IsNullOrEmpty(H_Data[Convert.ToInt32(G_Index_E_STRNAM)]))
                                    {
                                        // ---> Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
                                        // SetErrLog_SUB_LINK(H_ErrLogLink, H_ErrCnt, H_Data(G_Index_LNO), 9, H_Data(G_Index_LNAM), H_Data(G_Index_E_STRNAM), MC_ERRLOG_LINK_11)
                                        SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 9, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_E_STRNAM)], MC_ERRLOG_LINK_12);
                                        // <--- Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
                                    }
                                    else
                                    {
                                        if (LenB_FNC(H_Data[Convert.ToInt32(G_Index_E_STRNAM)]) > 44)
                                        {
                                            SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 9, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_E_STRNAM)], MC_ERRLOG_LINK_0);
                                        }
                                        else
                                        {
                                            L_Ret += 1;
                                        }
                                    }
                                }
                                #endregion
                                #region 品名
// 2021/10/14 Ver02.22.13 令和３年改正電帳法対応 --->
//                                // ---> Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応
//                                // 「3：e文書（インポート）かつ「3:納品書」の場合は必須
//                                #region 品名
//                                if ((Convert.ToInt32(H_Data[G_Index_E_SYUBETSU]) == 3))
//                                {
//    								  if ((string.IsNullOrEmpty(H_Data[Convert.ToInt32(G_Index_E_HINMEI)])))
//                                    {
//    									  // ---> Ver01.14.02 2018.08.02 MDCR_WWK e文書複数書類種別の不具合対応
//    									  //     SetErrLog_SUB_LINK(H_ErrLogLink, H_ErrCnt, H_Data(G_Index_LNO), 5, H_Data(G_Index_LNAM), H_Data(G_Index_E_HINMEI), MC_ERRLOG_LINK_13)
//    									  // ElseIf LenB_FNC(H_Data(G_Index_E_HINMEI)) > 100 Then
//    									  //     SetErrLog_SUB_LINK(H_ErrLogLink, H_ErrCnt, H_Data(G_Index_LNO), 9, H_Data(G_Index_LNAM), H_Data(G_Index_E_HINMEI), MC_ERRLOG_LINK_0)
//    									  SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 12, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_E_HINMEI)], MC_ERRLOG_LINK_13);
//    								  }
//                                    else if (LenB_FNC(H_Data[Convert.ToInt32(G_Index_E_HINMEI)]) > 100)
//                                    {
//    									  SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 12, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_E_HINMEI)], MC_ERRLOG_LINK_0);
//    									  // <--- Ver01.14.02 2018.08.02 MDCR_WWK e文書複数書類種別の不具合対応
//    								  }
//                                    else
//                                    {
//    									  L_Ret += 1;
//    								  }
//    							  }
//                                // <--- Ver01.14.01 2018.06.18 MDCR_WWK e文書複数書類種別対応

                                // 品名の必須チェックはなし
                                if (LenB_FNC(H_Data[Convert.ToInt32(G_Index_E_HINMEI)]) > 100)
                                {
                                    SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 12, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_E_HINMEI)], MC_ERRLOG_LINK_0);
                                }
                                else
                                {
                                    L_Ret += 1;
                                }
// <--- 2021/10/14 Ver02.22.13 令和３年改正電帳法対応
                                #endregion
                            }
    					}
                        else
                        {
    						SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 3, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[G_Index_FLG1], MC_ERRLOG_LINK_4);
    					}
    
    					if ((L_Ret >= 8)) { L_Ret = 1; }
                        else              { L_Ret = 0; }
    
    					break;    
    			}
    
    			functionReturnValue = L_Ret;    
    		}
            catch
            {
    			SetErrLog_SUB_LINK(ref H_ErrLogLink, ref H_ErrCnt, Convert.ToInt32(H_Data[G_Index_LNO]), 4, H_Data[Convert.ToInt32(G_Index_LNAM)], H_Data[Convert.ToInt32(G_Index_LINK)], MC_ERRLOG_LINK_3);
    			functionReturnValue = 0;
    		}
    		return functionReturnValue;    
    	}
    
    	// ------------------------------
    	// タイムスタンプチェックに必要な値取得
    	// ------------------------------
    	private bool GetTimeStampData(IDbCommand H_Cmd)
    	{    
    		IDbCommand  L_Cmd    = default(IDbCommand);
    		IDataReader L_Reader = default(IDataReader);
    		DateTime    L_Now    = default(DateTime);
            try
            {
                L_Cmd = H_Cmd;
                // 現在の日付取得
//              L_Cmd.CommandText = "SELECT CURRENT_TIMESTAMP";
                L_Cmd.CommandText = G_IsPostgre ? "SELECT CLOCK_TIMESTAMP()" : "SELECT CURRENT_TIMESTAMP";     // <--- 2020/03/06 Ver02.20.01.9901 PostgreSQL対応
                L_Now             = (DateTime)L_Cmd.ExecuteScalar();

// 2020/01/17 Ver01.19.05.9902 VB.NET関数 → C#関数 対応 --->
//              CurrentDate = Convert.ToInt32(Strings.Format(L_Now, "yyyyMMdd"));
                CurrentDate = Convert.ToInt32(L_Now.ToString("yyyyMMdd"));
// <--- 2020/01/07 Ver01.19.05.9902 VB.NET関数 → C#関数 対応

                // タイムスタンプ付与開始日取得
                L_Cmd.CommandText = "select IDATA from OPTION1 where PRGID = 'CCINFOMNT' and KEYNM1 = 'LinkInfo' and KEYNO = 1 order by KEYNM2";
                L_Reader          = L_Cmd.ExecuteReader();
                while (L_Reader.Read())
                {
                    TimeStampStartDate.Add(Convert.ToInt32(L_Reader[0]));
                }
                L_Reader.Close();

                // e文書申請終了日取得
                L_Cmd.CommandText = "select IDATA from OPTION1 where PRGID = 'CCINFOMNT' and KEYNM1 = 'LinkInfo' and KEYNO = 3 order by KEYNM2";
                L_Reader = L_Cmd.ExecuteReader();
                while (L_Reader.Read())
                {
                    if (Convert.ToInt32(L_Reader[0]) == 0)
                    {
                        // 終了日が設定されていない場合は、日付比較のために「99999999」をセット
                        TimeStampEndDate.Add(99999999);
                    }
                    else
                    {
                        TimeStampEndDate.Add(Convert.ToInt32(L_Reader[0]));
                    }
                }
                L_Reader.Close();

// 2022/04/11 Ver02.24.01 e文書任意項目対応 --->
                // 日付（間が抜けても対象の要素にセット）
                int L_Idx = 0;
                L_Cmd.CommandText = "select IDATA, KEYNM2 from OPTION1 where PRGID =  'CCINFOMNT' and KEYNM1 = 'LinkInfo' and KEYNO = 4 order by KEYNM2";
                L_Reader = L_Cmd.ExecuteReader();
                while (L_Reader.Read())
                {
                    L_Idx = 0;
                    while (L_Idx < oLinkKeynm2.Count)
                    {
                        if (oLinkKeynm2[L_Idx] == L_Reader[1].ToString())
                        {
                            P_LinkDate[Convert.ToInt32(oLinkKeynm2Idx[L_Idx])] = Convert.ToInt32(L_Reader[0]);
                            L_Idx = oLinkKeynm2.Count;
                        }
                        L_Idx++;
                    }
                }
                L_Reader.Close();

                // 金額（間が抜けても対象の要素にセット）
                L_Cmd.CommandText = "select IDATA, KEYNM2 from OPTION1 where PRGID =  'CCINFOMNT' and KEYNM1 = 'LinkInfo' and KEYNO = 5 order by KEYNM2";
                L_Reader = L_Cmd.ExecuteReader();
                while (L_Reader.Read())
                {
                    L_Idx = 0;
                    while (L_Idx < oLinkKeynm2.Count)
                    {
                        if (oLinkKeynm2[L_Idx] == L_Reader[1].ToString())
                        {
                            P_LinkAmount[Convert.ToInt32(oLinkKeynm2Idx[L_Idx])] = Convert.ToInt32(L_Reader[0]);
                            L_Idx = oLinkKeynm2.Count;
                        }
                        L_Idx++;
                    }                    
                }
                L_Reader.Close();

                // 発行者名称（間が抜けても対象の要素にセット）
                L_Cmd.CommandText = "select IDATA, KEYNM2 from OPTION1 where PRGID =  'CCINFOMNT' and KEYNM1 = 'LinkInfo' and KEYNO = 6 order by KEYNM2";
                L_Reader = L_Cmd.ExecuteReader();
                while (L_Reader.Read())
                {
                    L_Idx = 0;
                    while (L_Idx < oLinkKeynm2.Count)
                    {
                        if (oLinkKeynm2[L_Idx] == L_Reader[1].ToString())
                        {
                            P_LinkPublisher[Convert.ToInt32(oLinkKeynm2Idx[L_Idx])] = Convert.ToInt32(L_Reader[0]);
                            L_Idx = oLinkKeynm2.Count;
                        }
                        L_Idx++;
                    }                    
                }
                L_Reader.Close();

                #region Ver02.24.01 現時点では不要
//                // 部署入出力以外でもe文書を添付
//                L_Cmd.CommandText = "t IDATA from OPTION1 where PRGID = 'CCINFOMNT' and KEYNM1 = 'LinkInfo' and KEYNM2 = 'BUSYOIGAIEDOCUMENT' and KEYNO = 0";
//                L_Reader = L_Cmd.ExecuteReader();
//                while (L_Reader.Read())
//                {
//                    P_BusyoIgaieDocument = Convert.ToInt32(L_Reader[0]);
//                }
//                L_Reader.Close();

//                // e文書の保存要件チェック
//                L_Cmd.CommandText = "select IDATA from OPTION1 where PRGID = 'CCINFOMNT' and KEYNM1 = 'LinkInfo' and KEYNM2 = 'EDOCUMENTHOZONYOUKEN' and KEYNO = 0";
//                L_Reader = L_Cmd.ExecuteReader();
//                while (L_Reader.Read())
//                {
//                    P_EdocumentHozonYouken = Convert.ToInt32(L_Reader[0]);
//                }
//                L_Reader.Close();
                #endregion
// <--- 2022/04/11 Ver02.24.01 e文書任意項目対応
            }
            catch
            {
                return false;
            }
            finally
            {
                L_Reader.Close();
            }
            return true;
    	}
        #endregion

        #region Ver02.26.01 インボイス対応追加メソッド
        // *===========================================================================================*
    	//    併用売上税額計算方式インポート可否チェック
    	// *===========================================================================================*
        private bool IsImportableHeiyouUriageZeigakuKeisanHousiki(string heiyouUriageZeigakuKeisan, short syoriGroup, short kazeiKubun, int uriageZeiKeisan, string denpyouDate)
        {
            if (Convert.ToInt32(heiyouUriageZeigakuKeisan) == 0)
            {
                return true;
            }

            if (Convert.ToInt32(heiyouUriageZeigakuKeisan) == 1)
            {
                if (IsUriageKeiKamoku(syoriGroup, kazeiKubun) && uriageZeiKeisan == 2 && Convert.ToInt32(denpyouDate).CompareTo(20231001) >= 0)
                {
                    return true;
                }
            }

            return false;
        }

        // *===========================================================================================*
    	//    売上系科目チェック
    	// *===========================================================================================*
        private bool IsUriageKeiKamoku(short syoriGroup, short kazeiKubun)
        {
            // 処理グループが2:資産 または 8:有価証券、かつ課税区分が12:課込売上、14:課抜売上、21:貸倒損込、22:貸倒損抜、23:貸倒回込、24:貸倒回抜のいずれか
            if ((syoriGroup == 2 || syoriGroup == 8) && (kazeiKubun == 12 || kazeiKubun == 14 || kazeiKubun == 21 || kazeiKubun == 22 || kazeiKubun == 23 || kazeiKubun == 24))
            {
                return true;
            }
            // 処理グループが3:負債 または 4:売上、かつ課税区分が1:税込、2:税抜、21:貸倒損込、22:貸倒損抜、23:貸倒回込、24:貸倒回抜のいずれか
            if ((syoriGroup == 3 || syoriGroup == 4) && (kazeiKubun == 1 || kazeiKubun == 2 || kazeiKubun == 21 || kazeiKubun == 22 || kazeiKubun == 23 || kazeiKubun == 24)) 
            {
                return true;
            }
            // 処理グループが7:混在、かつ課税区分が12:課込売上、14:課抜売上のいずれか
            if (syoriGroup == 7 && (kazeiKubun == 12 || kazeiKubun == 14))
            {
                return true;
            }
            // 処理グループが9:売上割引、かつ1:税込、2:税抜のいずれか
            if (syoriGroup == 9 && (kazeiKubun == 1 || kazeiKubun == 2))
            {
                return true;
            }
            // 仮受消費税かつ(計算外、対象外のいずれか
            if (syoriGroup == 22 && (kazeiKubun == 99 || kazeiKubun == 100))
            {
                return true;
            }

            return false;
        }

        // *===========================================================================================*
    	//    仕入税額控除経過措置割合デフォルト取得
    	// *===========================================================================================*
        private string GetSiireZeigakuKouzyoKeikaSotiWariaiDefaultValue(short syoriGroup, short kazeiKubun, string trcd, string denpyouDate)
        {
            bool isSiireKamoku = false;
            isSiireKamoku = IsSiireKeiKamoku(syoriGroup, kazeiKubun);
        
            if (isSiireKamoku && string.IsNullOrEmpty(trcd) == false && menzeiZigyousyaTrcdList.Contains(trcd))
            {
                if (int.Parse(denpyouDate).CompareTo(20231001) >= 0 && int.Parse(denpyouDate).CompareTo(20260930) <= 0)
                {
                    return "1";
                }
        
                if (int.Parse(denpyouDate).CompareTo(20261001) >= 0 && int.Parse(denpyouDate).CompareTo(20290930) <= 0)
                {
                    return "2";
                }
            }
        
            return "0";
        }

        // *===========================================================================================*
    	//    仕入系科目チェック
    	// *===========================================================================================*
        private bool IsSiireKeiKamoku(short syoriGroup, short kazeiKubun)
        {
            // (資産、混在、有価証券のいずれか)かつ(課込仕入、課抜仕入のいずれか)
            if ((syoriGroup == 2 || syoriGroup == 7 || syoriGroup == 8) && (kazeiKubun == 11 || kazeiKubun == 13))
            {
                return true;
            }
            // (仕入、経費、仕入割引のいずれか)かつ(税込、税抜のいずれか)
            if ((syoriGroup == 5 || syoriGroup == 6 || syoriGroup == 10) && (kazeiKubun == 1 || kazeiKubun == 2))
            {
                return true;
            }
            // 仮払消費税かつ(計算外、対象外のいずれか)
            if (syoriGroup == 21 && (kazeiKubun == 99 || kazeiKubun == 100))
            {
                return true;
            }
        
            return false;
        }
        

        // *===========================================================================================*
    	//    免税事業者取引先リスト取得
    	// *===========================================================================================*
        private HashSet<string> GetMenzeiZigyousyaTorihikisakiList(IDbConnection kaisyaDbConnection)
        {
            HashSet<string> menzeiZigyousyaTrcdList = new HashSet<string>();
        
            try
            {
                using (IDbCommand command = kaisyaDbConnection.CreateCommand())
                {
                    command.CommandText = "SELECT TRCD FROM TRNAM WHERE MENZEIJIGYOUSYAFLG = 1 ";
                    command.Parameters.Clear();
                    using (IDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string[] values = new string[1];
                            reader.GetValues(values);
                            menzeiZigyousyaTrcdList.Add(values[0]);
                        }
                        reader.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                throw new MyException(MC_RESULT_ERR_DBREAD, ex);
            }
        
            return menzeiZigyousyaTrcdList;
        }

        // *===========================================================================================*
    	//    仕入税額控除経過措置割合インポート可否チェック
    	// *===========================================================================================*
        private bool IsImportableSiireZeigakuKouzyoKeikaSotiWariai(string siireZeigakuKouzyoKeikaSotiWariai, short syoriGroup, short kazeiKubun, string denpyouDate)
        {
            if (Convert.ToInt32(siireZeigakuKouzyoKeikaSotiWariai) == 0)
            {
                return true;
            }
        
            bool isSiireKamoku = false;
            isSiireKamoku = IsSiireKeiKamoku(syoriGroup, kazeiKubun);
        
            if (Convert.ToInt32(siireZeigakuKouzyoKeikaSotiWariai) == 1 && isSiireKamoku && Convert.ToInt32(denpyouDate) >= 20231001 && Convert.ToInt32(denpyouDate) <= 20260930)
            {
                return true;
            }
        
            if (Convert.ToInt32(siireZeigakuKouzyoKeikaSotiWariai) == 2 && isSiireKamoku && Convert.ToInt32(denpyouDate) >= 20261001 && Convert.ToInt32(denpyouDate) <= 20290930)
            {
                return true;
            }
        
            return false;
        }
        #endregion
    }
}
