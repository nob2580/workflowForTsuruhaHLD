package eteam.database.abstractdao;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.TeikiJouhou;

/**
 * 定期券情報に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class TeikiJouhouAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected TeikiJouhou mapToDto(GMap map){
		return map == null ? null : new TeikiJouhou(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<TeikiJouhou> mapToDto(List<GMap> mapList){
		List<TeikiJouhou> dtoList = new ArrayList<TeikiJouhou>();
		for (var map : mapList) {
			dtoList.add(new TeikiJouhou(map));
		}
		return dtoList;
	}
	
	/**
	 * 定期券情報のレコード有無を判定
	 * @param userId ユーザーID
	 * @param shiyouKaishibi 使用開始日
	 * @param shiyouShuuryoubi 使用終了日
	 * @return true:exist false:not exist
	 */
	public boolean exists(String userId, Date shiyouKaishibi, Date shiyouShuuryoubi) {
		return this.find(userId, shiyouKaishibi, shiyouShuuryoubi) == null ? false : true;
	}
	
	/**
	 * 定期券情報から主キー指定でレコードを取得
	 * @param userId ユーザーID
	 * @param shiyouKaishibi 使用開始日
	 * @param shiyouShuuryoubi 使用終了日
	 * @return 定期券情報DTO
	 */
	public TeikiJouhou find(String userId, Date shiyouKaishibi, Date shiyouShuuryoubi) {
		final String sql = "SELECT * FROM teiki_jouhou WHERE user_id = ? AND shiyou_kaishibi = ? AND shiyou_shuuryoubi = ?";
		return mapToDto(connection.find(sql, userId, shiyouKaishibi, shiyouShuuryoubi));
	}
	
	/**
	 * 定期券情報からレコードを全件取得 ※大量データ取得に注意
	 * @return List<定期券情報DTO>
	 */
	public List<TeikiJouhou> load() {
		final String sql = "SELECT * FROM teiki_jouhou ORDER BY user_id, shiyou_kaishibi, shiyou_shuuryoubi";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 定期券情報から一部キー指定でレコードを取得
	 * @param userId ユーザーID
	 * @return List<定期券情報>DTO
	 */
	public List<TeikiJouhou> load(String userId) {
		final String sql = "SELECT * FROM teiki_jouhou WHERE user_id = ? "
							+ "ORDER BY user_id, shiyou_kaishibi, shiyou_shuuryoubi";
		return mapToDto(connection.load(sql, userId));
	}
	
	/**
	 * 定期券情報から一部キー指定でレコードを取得
	 * @param userId ユーザーID
	 * @param shiyouKaishibi 使用開始日
	 * @return List<定期券情報>DTO
	 */
	public List<TeikiJouhou> load(String userId, Date shiyouKaishibi) {
		final String sql = "SELECT * FROM teiki_jouhou WHERE user_id = ?  AND shiyou_kaishibi = ? "
							+ "ORDER BY user_id, shiyou_kaishibi, shiyou_shuuryoubi";
		return mapToDto(connection.load(sql, userId, shiyouKaishibi));
	}

	/**
	* 定期券情報登録
	* @param dto 定期券情報
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		TeikiJouhou dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO teiki_jouhou "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.userId, dto.shiyouKaishibi, dto.shiyouShuuryoubi, dto.intraTeikiKukan, dto.intraRestoreroute, dto.webTeikiKukan, dto.webTeikiSerializeData, koushinUserId, koushinUserId
					);
	}

	/**
	* 定期券情報の非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したTeikiJouhouの使用を前提
	* @param dto 定期券情報
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		TeikiJouhou dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE teiki_jouhou "
		    + "SET intra_teiki_kukan = ?, intra_restoreroute = ?, web_teiki_kukan = ?, web_teiki_serialize_data = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND user_id = ? AND shiyou_kaishibi = ? AND shiyou_shuuryoubi = ?";
			return connection.update(sql,
				dto.intraTeikiKukan, dto.intraRestoreroute, dto.webTeikiKukan, dto.webTeikiSerializeData, koushinUserId
				,dto.koushinTime, dto.userId, dto.shiyouKaishibi, dto.shiyouShuuryoubi);
    }

	/**
	* 定期券情報登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 定期券情報
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		TeikiJouhou dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO teiki_jouhou "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT teiki_jouhou_pkey "
			+ "DO UPDATE SET intra_teiki_kukan = ?, intra_restoreroute = ?, web_teiki_kukan = ?, web_teiki_serialize_data = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.userId, dto.shiyouKaishibi, dto.shiyouShuuryoubi, dto.intraTeikiKukan, dto.intraRestoreroute, dto.webTeikiKukan, dto.webTeikiSerializeData, koushinUserId, koushinUserId
				, dto.intraTeikiKukan, dto.intraRestoreroute, dto.webTeikiKukan, dto.webTeikiSerializeData, koushinUserId
				);
    }
	
	/**
	 * 定期券情報から主キー指定でレコードを削除
	 * @param userId ユーザーID
	 * @param shiyouKaishibi 使用開始日
	 * @param shiyouShuuryoubi 使用終了日
	 * @return 削除件数
	 */
	public int delete(String userId, Date shiyouKaishibi, Date shiyouShuuryoubi){
		final String sql = "DELETE FROM teiki_jouhou WHERE user_id = ? AND shiyou_kaishibi = ? AND shiyou_shuuryoubi = ?";
		return connection.update(sql, userId, shiyouKaishibi, shiyouShuuryoubi);
	}
	
	/**
	 * 定期券情報から一部キー指定でレコードを削除
	 * @param userId ユーザーID
	 * @return 削除件数
	 */
	public int delete(String userId) {
		final String sql = "DELETE FROM teiki_jouhou WHERE user_id = ? ";
		return connection.update(sql, userId);
	}
	
	/**
	 * 定期券情報から一部キー指定でレコードを削除
	 * @param userId ユーザーID
	 * @param shiyouKaishibi 使用開始日
	 * @return 削除件数
	 */
	public int delete(String userId, Date shiyouKaishibi) {
		final String sql = "DELETE FROM teiki_jouhou WHERE user_id = ?  AND shiyou_kaishibi = ? ";
		return connection.update(sql, userId, shiyouKaishibi);
	}
}
