package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.HoujinCardJouhou;

/**
 * 法人カード使用履歴情報に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class HoujinCardJouhouAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected HoujinCardJouhou mapToDto(GMap map){
		return map == null ? null : new HoujinCardJouhou(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<HoujinCardJouhou> mapToDto(List<GMap> mapList){
		List<HoujinCardJouhou> dtoList = new ArrayList<HoujinCardJouhou>();
		for (var map : mapList) {
			dtoList.add(new HoujinCardJouhou(map));
		}
		return dtoList;
	}
	
	/**
	 * 法人カード使用履歴情報のレコード有無を判定
	 * @param cardJouhouId カード情報ID
	 * @return true:exist false:not exist
	 */
	public boolean exists(long cardJouhouId) {
		return this.find(cardJouhouId) == null ? false : true;
	}
	
	/**
	 * 法人カード使用履歴情報から主キー指定でレコードを取得
	 * @param cardJouhouId カード情報ID
	 * @return 法人カード使用履歴情報DTO
	 */
	public HoujinCardJouhou find(long cardJouhouId) {
		final String sql = "SELECT * FROM houjin_card_jouhou WHERE card_jouhou_id = ?";
		return mapToDto(connection.find(sql, cardJouhouId));
	}
	
	/**
	 * 法人カード使用履歴情報からレコードを全件取得 ※大量データ取得に注意
	 * @return List<法人カード使用履歴情報DTO>
	 */
	public List<HoujinCardJouhou> load() {
		final String sql = "SELECT * FROM houjin_card_jouhou ORDER BY card_jouhou_id";
		return mapToDto(connection.load(sql));
	}

	/**
	* 法人カード使用履歴情報登録
	* @param dto 法人カード使用履歴情報
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		HoujinCardJouhou dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO houjin_card_jouhou "
			+ "( card_shubetsu, torikomi_denpyou_id, busho_cd, shain_bangou, shiyousha, riyoubi, kingaku, card_bangou, kameiten, gyoushu_cd, jyogai_flg, jyogai_riyuu, touroku_user_id, touroku_time, koushin_user_id, koushin_time) "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.cardShubetsu, dto.torikomiDenpyouId, dto.bushoCd, dto.shainBangou, dto.shiyousha, dto.riyoubi, dto.kingaku, dto.cardBangou, dto.kameiten, dto.gyoushuCd, dto.jyogaiFlg, dto.jyogaiRiyuu, koushinUserId, koushinUserId
					);
	}

	/**
	* 法人カード使用履歴情報の非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したHoujinCardJouhouの使用を前提
	* @param dto 法人カード使用履歴情報
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		HoujinCardJouhou dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE houjin_card_jouhou "
		    + "SET card_shubetsu = ?, torikomi_denpyou_id = ?, busho_cd = ?, shain_bangou = ?, shiyousha = ?, riyoubi = ?, kingaku = ?, card_bangou = ?, kameiten = ?, gyoushu_cd = ?, jyogai_flg = ?, jyogai_riyuu = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND card_jouhou_id = ?";
			return connection.update(sql,
				dto.cardShubetsu, dto.torikomiDenpyouId, dto.bushoCd, dto.shainBangou, dto.shiyousha, dto.riyoubi, dto.kingaku, dto.cardBangou, dto.kameiten, dto.gyoushuCd, dto.jyogaiFlg, dto.jyogaiRiyuu, koushinUserId
				,dto.koushinTime, dto.cardJouhouId);
    }

	/**
	* 法人カード使用履歴情報登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 法人カード使用履歴情報
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		HoujinCardJouhou dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO houjin_card_jouhou "
			+ "( card_shubetsu, torikomi_denpyou_id, busho_cd, shain_bangou, shiyousha, riyoubi, kingaku, card_bangou, kameiten, gyoushu_cd, jyogai_flg, jyogai_riyuu, touroku_user_id, touroku_time, koushin_user_id, koushin_time) "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT houjin_card_jouhou_pkey "
			+ "DO UPDATE SET card_shubetsu = ?, torikomi_denpyou_id = ?, busho_cd = ?, shain_bangou = ?, shiyousha = ?, riyoubi = ?, kingaku = ?, card_bangou = ?, kameiten = ?, gyoushu_cd = ?, jyogai_flg = ?, jyogai_riyuu = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.cardShubetsu, dto.torikomiDenpyouId, dto.bushoCd, dto.shainBangou, dto.shiyousha, dto.riyoubi, dto.kingaku, dto.cardBangou, dto.kameiten, dto.gyoushuCd, dto.jyogaiFlg, dto.jyogaiRiyuu, koushinUserId, koushinUserId
				, dto.cardShubetsu, dto.torikomiDenpyouId, dto.bushoCd, dto.shainBangou, dto.shiyousha, dto.riyoubi, dto.kingaku, dto.cardBangou, dto.kameiten, dto.gyoushuCd, dto.jyogaiFlg, dto.jyogaiRiyuu, koushinUserId
				);
    }
	
	/**
	 * 法人カード使用履歴情報から主キー指定でレコードを削除
	 * @param cardJouhouId カード情報ID
	 * @return 削除件数
	 */
	public int delete(long cardJouhouId){
		final String sql = "DELETE FROM houjin_card_jouhou WHERE card_jouhou_id = ?";
		return connection.update(sql, cardJouhouId);
	}
}
