package eteam.database.abstractdao;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.ShozokuBumonWariate;

/**
 * 所属部門割り当てに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class ShozokuBumonWariateAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected ShozokuBumonWariate mapToDto(GMap map){
		return map == null ? null : new ShozokuBumonWariate(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<ShozokuBumonWariate> mapToDto(List<GMap> mapList){
		List<ShozokuBumonWariate> dtoList = new ArrayList<ShozokuBumonWariate>();
		for (var map : mapList) {
			dtoList.add(new ShozokuBumonWariate(map));
		}
		return dtoList;
	}
	
	/**
	 * 所属部門割り当てのレコード有無を判定
	 * @param bumonCd 部門コード
	 * @param bumonRoleId 部門ロールID
	 * @param userId ユーザーID
	 * @param yuukouKigenFrom 有効期限開始日
	 * @return true:exist false:not exist
	 */
	public boolean exists(String bumonCd, String bumonRoleId, String userId, Date yuukouKigenFrom) {
		return this.find(bumonCd, bumonRoleId, userId, yuukouKigenFrom) == null ? false : true;
	}
	
	/**
	 * 所属部門割り当てから主キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @param bumonRoleId 部門ロールID
	 * @param userId ユーザーID
	 * @param yuukouKigenFrom 有効期限開始日
	 * @return 所属部門割り当てDTO
	 */
	public ShozokuBumonWariate find(String bumonCd, String bumonRoleId, String userId, Date yuukouKigenFrom) {
		final String sql = "SELECT * FROM shozoku_bumon_wariate WHERE bumon_cd = ? AND bumon_role_id = ? AND user_id = ? AND yuukou_kigen_from = ?";
		return mapToDto(connection.find(sql, bumonCd, bumonRoleId, userId, yuukouKigenFrom));
	}
	
	/**
	 * 所属部門割り当てからレコードを全件取得 ※大量データ取得に注意
	 * @return List<所属部門割り当てDTO>
	 */
	public List<ShozokuBumonWariate> load() {
		final String sql = "SELECT * FROM shozoku_bumon_wariate ORDER BY bumon_cd, bumon_role_id, user_id, yuukou_kigen_from";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 所属部門割り当てから一部キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @return List<所属部門割り当て>DTO
	 */
	public List<ShozokuBumonWariate> load(String bumonCd) {
		final String sql = "SELECT * FROM shozoku_bumon_wariate WHERE bumon_cd = ? "
							+ "ORDER BY bumon_cd, bumon_role_id, user_id, yuukou_kigen_from";
		return mapToDto(connection.load(sql, bumonCd));
	}
	
	/**
	 * 所属部門割り当てから一部キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @param bumonRoleId 部門ロールID
	 * @return List<所属部門割り当て>DTO
	 */
	public List<ShozokuBumonWariate> load(String bumonCd, String bumonRoleId) {
		final String sql = "SELECT * FROM shozoku_bumon_wariate WHERE bumon_cd = ?  AND bumon_role_id = ? "
							+ "ORDER BY bumon_cd, bumon_role_id, user_id, yuukou_kigen_from";
		return mapToDto(connection.load(sql, bumonCd, bumonRoleId));
	}
	
	/**
	 * 所属部門割り当てから一部キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @param bumonRoleId 部門ロールID
	 * @param userId ユーザーID
	 * @return List<所属部門割り当て>DTO
	 */
	public List<ShozokuBumonWariate> load(String bumonCd, String bumonRoleId, String userId) {
		final String sql = "SELECT * FROM shozoku_bumon_wariate WHERE bumon_cd = ?  AND bumon_role_id = ?  AND user_id = ? "
							+ "ORDER BY bumon_cd, bumon_role_id, user_id, yuukou_kigen_from";
		return mapToDto(connection.load(sql, bumonCd, bumonRoleId, userId));
	}

	/**
	* 所属部門割り当て登録
	* @param dto 所属部門割り当て
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		ShozokuBumonWariate dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO shozoku_bumon_wariate "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.bumonCd, dto.bumonRoleId, dto.userId, dto.daihyouFutanBumonCd, dto.yuukouKigenFrom, dto.yuukouKigenTo, dto.hyoujiJun, koushinUserId, koushinUserId
					);
	}

	/**
	* 所属部門割り当ての非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したShozokuBumonWariateの使用を前提
	* @param dto 所属部門割り当て
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		ShozokuBumonWariate dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE shozoku_bumon_wariate "
		    + "SET daihyou_futan_bumon_cd = ?, yuukou_kigen_to = ?, hyouji_jun = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND bumon_cd = ? AND bumon_role_id = ? AND user_id = ? AND yuukou_kigen_from = ?";
			return connection.update(sql,
				dto.daihyouFutanBumonCd, dto.yuukouKigenTo, dto.hyoujiJun, koushinUserId
				,dto.koushinTime, dto.bumonCd, dto.bumonRoleId, dto.userId, dto.yuukouKigenFrom);
    }

	/**
	* 所属部門割り当て登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 所属部門割り当て
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		ShozokuBumonWariate dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO shozoku_bumon_wariate "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT shozoku_bumon_wariate_pkey "
			+ "DO UPDATE SET daihyou_futan_bumon_cd = ?, yuukou_kigen_to = ?, hyouji_jun = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.bumonCd, dto.bumonRoleId, dto.userId, dto.daihyouFutanBumonCd, dto.yuukouKigenFrom, dto.yuukouKigenTo, dto.hyoujiJun, koushinUserId, koushinUserId
				, dto.daihyouFutanBumonCd, dto.yuukouKigenTo, dto.hyoujiJun, koushinUserId
				);
    }
	
	/**
	 * 所属部門割り当てから主キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @param bumonRoleId 部門ロールID
	 * @param userId ユーザーID
	 * @param yuukouKigenFrom 有効期限開始日
	 * @return 削除件数
	 */
	public int delete(String bumonCd, String bumonRoleId, String userId, Date yuukouKigenFrom){
		final String sql = "DELETE FROM shozoku_bumon_wariate WHERE bumon_cd = ? AND bumon_role_id = ? AND user_id = ? AND yuukou_kigen_from = ?";
		return connection.update(sql, bumonCd, bumonRoleId, userId, yuukouKigenFrom);
	}
	
	/**
	 * 所属部門割り当てから一部キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @return 削除件数
	 */
	public int delete(String bumonCd) {
		final String sql = "DELETE FROM shozoku_bumon_wariate WHERE bumon_cd = ? ";
		return connection.update(sql, bumonCd);
	}
	
	/**
	 * 所属部門割り当てから一部キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @param bumonRoleId 部門ロールID
	 * @return 削除件数
	 */
	public int delete(String bumonCd, String bumonRoleId) {
		final String sql = "DELETE FROM shozoku_bumon_wariate WHERE bumon_cd = ?  AND bumon_role_id = ? ";
		return connection.update(sql, bumonCd, bumonRoleId);
	}
	
	/**
	 * 所属部門割り当てから一部キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @param bumonRoleId 部門ロールID
	 * @param userId ユーザーID
	 * @return 削除件数
	 */
	public int delete(String bumonCd, String bumonRoleId, String userId) {
		final String sql = "DELETE FROM shozoku_bumon_wariate WHERE bumon_cd = ?  AND bumon_role_id = ?  AND user_id = ? ";
		return connection.update(sql, bumonCd, bumonRoleId, userId);
	}
}
