package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.Information;

/**
 * インフォメーションに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class InformationAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected Information mapToDto(GMap map){
		return map == null ? null : new Information(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<Information> mapToDto(List<GMap> mapList){
		List<Information> dtoList = new ArrayList<Information>();
		for (var map : mapList) {
			dtoList.add(new Information(map));
		}
		return dtoList;
	}
	
	/**
	 * インフォメーションのレコード有無を判定
	 * @param infoId インフォメーションID
	 * @return true:exist false:not exist
	 */
	public boolean exists(String infoId) {
		return this.find(infoId) == null ? false : true;
	}
	
	/**
	 * インフォメーションから主キー指定でレコードを取得
	 * @param infoId インフォメーションID
	 * @return インフォメーションDTO
	 */
	public Information find(String infoId) {
		final String sql = "SELECT * FROM information WHERE info_id = ?";
		return mapToDto(connection.find(sql, infoId));
	}
	
	/**
	 * インフォメーションからレコードを全件取得 ※大量データ取得に注意
	 * @return List<インフォメーションDTO>
	 */
	public List<Information> load() {
		final String sql = "SELECT * FROM information ORDER BY info_id";
		return mapToDto(connection.load(sql));
	}

	/**
	* インフォメーション登録
	* @param dto インフォメーション
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		Information dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO information "
			+ "VALUES(?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.infoId, dto.tsuuchiKikanFrom, dto.tsuuchiKikanTo, dto.tsuuchiNaiyou, koushinUserId, koushinUserId
					);
	}

	/**
	* インフォメーションの非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したInformationの使用を前提
	* @param dto インフォメーション
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		Information dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE information "
		    + "SET tsuuchi_kikan_from = ?, tsuuchi_kikan_to = ?, tsuuchi_naiyou = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND info_id = ?";
			return connection.update(sql,
				dto.tsuuchiKikanFrom, dto.tsuuchiKikanTo, dto.tsuuchiNaiyou, koushinUserId
				,dto.koushinTime, dto.infoId);
    }

	/**
	* インフォメーション登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto インフォメーション
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		Information dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO information "
			+ "VALUES(?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT information_pkey "
			+ "DO UPDATE SET tsuuchi_kikan_from = ?, tsuuchi_kikan_to = ?, tsuuchi_naiyou = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.infoId, dto.tsuuchiKikanFrom, dto.tsuuchiKikanTo, dto.tsuuchiNaiyou, koushinUserId, koushinUserId
				, dto.tsuuchiKikanFrom, dto.tsuuchiKikanTo, dto.tsuuchiNaiyou, koushinUserId
				);
    }
	
	/**
	 * インフォメーションから主キー指定でレコードを削除
	 * @param infoId インフォメーションID
	 * @return 削除件数
	 */
	public int delete(String infoId){
		final String sql = "DELETE FROM information WHERE info_id = ?";
		return connection.update(sql, infoId);
	}
}
