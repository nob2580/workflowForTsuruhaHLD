package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KiHeishuMasterKyoten;

/**
 * （期別）幣種マスター(拠点)に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KiHeishuMasterKyotenAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KiHeishuMasterKyoten mapToDto(GMap map){
		return map == null ? null : new KiHeishuMasterKyoten(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KiHeishuMasterKyoten> mapToDto(List<GMap> mapList){
		List<KiHeishuMasterKyoten> dtoList = new ArrayList<KiHeishuMasterKyoten>();
		for (var map : mapList) {
			dtoList.add(new KiHeishuMasterKyoten(map));
		}
		return dtoList;
	}
	
	/**
	 * （期別）幣種マスター(拠点)のレコード有無を判定
	 * @param kesn 内部決算期
	 * @param heishuCd 幣種コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(int kesn, String heishuCd) {
		return this.find(kesn, heishuCd) == null ? false : true;
	}
	
	/**
	 * （期別）幣種マスター(拠点)から主キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param heishuCd 幣種コード
	 * @return （期別）幣種マスター(拠点)DTO
	 */
	public KiHeishuMasterKyoten find(int kesn, String heishuCd) {
		final String sql = "SELECT * FROM ki_heishu_master_kyoten WHERE kesn = ? AND heishu_cd = ?";
		return mapToDto(connection.find(sql, kesn, heishuCd));
	}
	
	/**
	 * （期別）幣種マスター(拠点)からレコードを全件取得 ※大量データ取得に注意
	 * @return List<（期別）幣種マスター(拠点)DTO>
	 */
	public List<KiHeishuMasterKyoten> load() {
		final String sql = "SELECT * FROM ki_heishu_master_kyoten ORDER BY kesn, heishu_cd";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * （期別）幣種マスター(拠点)から一部キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @return List<（期別）幣種マスター(拠点)>DTO
	 */
	public List<KiHeishuMasterKyoten> load(int kesn) {
		final String sql = "SELECT * FROM ki_heishu_master_kyoten WHERE kesn = ? "
							+ "ORDER BY kesn, heishu_cd";
		return mapToDto(connection.load(sql, kesn));
	}

	/**
	* （期別）幣種マスター(拠点)登録
	* @param dto （期別）幣種マスター(拠点)
	* @return 件数
	*/
	public int insert(
		KiHeishuMasterKyoten dto
	){
		final String sql =
				"INSERT INTO ki_heishu_master_kyoten "
			+ "VALUES(?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.kesn, dto.heishuCd, dto.currencyUnit, dto.countryName, dto.conversionUnit, dto.decimalPosition
					);
	}

	/**
	* （期別）幣種マスター(拠点)登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto （期別）幣種マスター(拠点)
	* @return 件数
	*/
	public int upsert(
		KiHeishuMasterKyoten dto
		 ){
		final String sql =
				"INSERT INTO ki_heishu_master_kyoten "
			+ "VALUES(?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT ki_heishu_master_kyoten_pkey "
			+ "DO UPDATE SET currency_unit = ?, country_name = ?, conversion_unit = ?, decimal_position = ? "
			+ "";
			return connection.update(sql,
				dto.kesn, dto.heishuCd, dto.currencyUnit, dto.countryName, dto.conversionUnit, dto.decimalPosition
				, dto.currencyUnit, dto.countryName, dto.conversionUnit, dto.decimalPosition
				);
    }
	
	/**
	 * （期別）幣種マスター(拠点)から主キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param heishuCd 幣種コード
	 * @return 削除件数
	 */
	public int delete(int kesn, String heishuCd){
		final String sql = "DELETE FROM ki_heishu_master_kyoten WHERE kesn = ? AND heishu_cd = ?";
		return connection.update(sql, kesn, heishuCd);
	}
	
	/**
	 * （期別）幣種マスター(拠点)から一部キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @return 削除件数
	 */
	public int delete(int kesn) {
		final String sql = "DELETE FROM ki_heishu_master_kyoten WHERE kesn = ? ";
		return connection.update(sql, kesn);
	}
}
