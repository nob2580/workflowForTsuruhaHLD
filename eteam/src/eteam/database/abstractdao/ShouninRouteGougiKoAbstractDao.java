package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.ShouninRouteGougiKo;

/**
 * 承認ルート合議子に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class ShouninRouteGougiKoAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected ShouninRouteGougiKo mapToDto(GMap map){
		return map == null ? null : new ShouninRouteGougiKo(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<ShouninRouteGougiKo> mapToDto(List<GMap> mapList){
		List<ShouninRouteGougiKo> dtoList = new ArrayList<ShouninRouteGougiKo>();
		for (var map : mapList) {
			dtoList.add(new ShouninRouteGougiKo(map));
		}
		return dtoList;
	}
	
	/**
	 * 承認ルート合議子のレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @param gougiEdano 合議枝番号
	 * @param gougiEdaedano 合議枝々番号
	 * @param userId ユーザーID
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId, int edano, int gougiEdano, int gougiEdaedano, String userId) {
		return this.find(denpyouId, edano, gougiEdano, gougiEdaedano, userId) == null ? false : true;
	}
	
	/**
	 * 承認ルート合議子から主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @param gougiEdano 合議枝番号
	 * @param gougiEdaedano 合議枝々番号
	 * @param userId ユーザーID
	 * @return 承認ルート合議子DTO
	 */
	public ShouninRouteGougiKo find(String denpyouId, int edano, int gougiEdano, int gougiEdaedano, String userId) {
		final String sql = "SELECT * FROM shounin_route_gougi_ko WHERE denpyou_id = ? AND edano = ? AND gougi_edano = ? AND gougi_edaedano = ? AND user_id = ?";
		return mapToDto(connection.find(sql, denpyouId, edano, gougiEdano, gougiEdaedano, userId));
	}
	
	/**
	 * 承認ルート合議子からレコードを全件取得 ※大量データ取得に注意
	 * @return List<承認ルート合議子DTO>
	 */
	public List<ShouninRouteGougiKo> load() {
		final String sql = "SELECT * FROM shounin_route_gougi_ko ORDER BY denpyou_id, edano, gougi_edano, gougi_edaedano, user_id";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 承認ルート合議子から一部キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return List<承認ルート合議子>DTO
	 */
	public List<ShouninRouteGougiKo> load(String denpyouId) {
		final String sql = "SELECT * FROM shounin_route_gougi_ko WHERE denpyou_id = ? "
							+ "ORDER BY denpyou_id, edano, gougi_edano, gougi_edaedano, user_id";
		return mapToDto(connection.load(sql, denpyouId));
	}
	
	/**
	 * 承認ルート合議子から一部キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @return List<承認ルート合議子>DTO
	 */
	public List<ShouninRouteGougiKo> load(String denpyouId, int edano) {
		final String sql = "SELECT * FROM shounin_route_gougi_ko WHERE denpyou_id = ?  AND edano = ? "
							+ "ORDER BY denpyou_id, edano, gougi_edano, gougi_edaedano, user_id";
		return mapToDto(connection.load(sql, denpyouId, edano));
	}
	
	/**
	 * 承認ルート合議子から一部キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @param gougiEdano 合議枝番号
	 * @return List<承認ルート合議子>DTO
	 */
	public List<ShouninRouteGougiKo> load(String denpyouId, int edano, int gougiEdano) {
		final String sql = "SELECT * FROM shounin_route_gougi_ko WHERE denpyou_id = ?  AND edano = ?  AND gougi_edano = ? "
							+ "ORDER BY denpyou_id, edano, gougi_edano, gougi_edaedano, user_id";
		return mapToDto(connection.load(sql, denpyouId, edano, gougiEdano));
	}
	
	/**
	 * 承認ルート合議子から一部キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @param gougiEdano 合議枝番号
	 * @param gougiEdaedano 合議枝々番号
	 * @return List<承認ルート合議子>DTO
	 */
	public List<ShouninRouteGougiKo> load(String denpyouId, int edano, int gougiEdano, int gougiEdaedano) {
		final String sql = "SELECT * FROM shounin_route_gougi_ko WHERE denpyou_id = ?  AND edano = ?  AND gougi_edano = ?  AND gougi_edaedano = ? "
							+ "ORDER BY denpyou_id, edano, gougi_edano, gougi_edaedano, user_id";
		return mapToDto(connection.load(sql, denpyouId, edano, gougiEdano, gougiEdaedano));
	}

	/**
	* 承認ルート合議子登録
	* @param dto 承認ルート合議子
	* @return 件数
	*/
	public int insert(
		ShouninRouteGougiKo dto
	){
		final String sql =
				"INSERT INTO shounin_route_gougi_ko "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.denpyouId, dto.edano, dto.gougiEdano, dto.gougiEdaedano, dto.userId, dto.userFullName, dto.bumonCd, dto.bumonFullName, dto.bumonRoleId, dto.bumonRoleName, dto.gougiGenzaiFlg, dto.shouninShoriKengenNo, dto.shouninShoriKengenName, dto.kihonModelCd, dto.shouninHissuFlg, dto.shouninKenFlg, dto.henkouFlg, dto.shouninNinzuuCd, dto.shouninNinzuuHiritsu, dto.syoriCd, dto.gouginaiGroup, dto.joukyouEdano
					);
	}

	/**
	* 承認ルート合議子登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 承認ルート合議子
	* @return 件数
	*/
	public int upsert(
		ShouninRouteGougiKo dto
		 ){
		final String sql =
				"INSERT INTO shounin_route_gougi_ko "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT shounin_route_gougi_ko_pkey "
			+ "DO UPDATE SET user_full_name = ?, bumon_cd = ?, bumon_full_name = ?, bumon_role_id = ?, bumon_role_name = ?, gougi_genzai_flg = ?, shounin_shori_kengen_no = ?, shounin_shori_kengen_name = ?, kihon_model_cd = ?, shounin_hissu_flg = ?, shounin_ken_flg = ?, henkou_flg = ?, shounin_ninzuu_cd = ?, shounin_ninzuu_hiritsu = ?, syori_cd = ?, gouginai_group = ?, joukyou_edano = ? "
			+ "";
			return connection.update(sql,
				dto.denpyouId, dto.edano, dto.gougiEdano, dto.gougiEdaedano, dto.userId, dto.userFullName, dto.bumonCd, dto.bumonFullName, dto.bumonRoleId, dto.bumonRoleName, dto.gougiGenzaiFlg, dto.shouninShoriKengenNo, dto.shouninShoriKengenName, dto.kihonModelCd, dto.shouninHissuFlg, dto.shouninKenFlg, dto.henkouFlg, dto.shouninNinzuuCd, dto.shouninNinzuuHiritsu, dto.syoriCd, dto.gouginaiGroup, dto.joukyouEdano
				, dto.userFullName, dto.bumonCd, dto.bumonFullName, dto.bumonRoleId, dto.bumonRoleName, dto.gougiGenzaiFlg, dto.shouninShoriKengenNo, dto.shouninShoriKengenName, dto.kihonModelCd, dto.shouninHissuFlg, dto.shouninKenFlg, dto.henkouFlg, dto.shouninNinzuuCd, dto.shouninNinzuuHiritsu, dto.syoriCd, dto.gouginaiGroup, dto.joukyouEdano
				);
    }
	
	/**
	 * 承認ルート合議子から主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @param gougiEdano 合議枝番号
	 * @param gougiEdaedano 合議枝々番号
	 * @param userId ユーザーID
	 * @return 削除件数
	 */
	public int delete(String denpyouId, int edano, int gougiEdano, int gougiEdaedano, String userId){
		final String sql = "DELETE FROM shounin_route_gougi_ko WHERE denpyou_id = ? AND edano = ? AND gougi_edano = ? AND gougi_edaedano = ? AND user_id = ?";
		return connection.update(sql, denpyouId, edano, gougiEdano, gougiEdaedano, userId);
	}
	
	/**
	 * 承認ルート合議子から一部キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int delete(String denpyouId) {
		final String sql = "DELETE FROM shounin_route_gougi_ko WHERE denpyou_id = ? ";
		return connection.update(sql, denpyouId);
	}
	
	/**
	 * 承認ルート合議子から一部キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @return 削除件数
	 */
	public int delete(String denpyouId, int edano) {
		final String sql = "DELETE FROM shounin_route_gougi_ko WHERE denpyou_id = ?  AND edano = ? ";
		return connection.update(sql, denpyouId, edano);
	}
	
	/**
	 * 承認ルート合議子から一部キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @param gougiEdano 合議枝番号
	 * @return 削除件数
	 */
	public int delete(String denpyouId, int edano, int gougiEdano) {
		final String sql = "DELETE FROM shounin_route_gougi_ko WHERE denpyou_id = ?  AND edano = ?  AND gougi_edano = ? ";
		return connection.update(sql, denpyouId, edano, gougiEdano);
	}
	
	/**
	 * 承認ルート合議子から一部キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @param gougiEdano 合議枝番号
	 * @param gougiEdaedano 合議枝々番号
	 * @return 削除件数
	 */
	public int delete(String denpyouId, int edano, int gougiEdano, int gougiEdaedano) {
		final String sql = "DELETE FROM shounin_route_gougi_ko WHERE denpyou_id = ?  AND edano = ?  AND gougi_edano = ?  AND gougi_edaedano = ? ";
		return connection.update(sql, denpyouId, edano, gougiEdano, gougiEdaedano);
	}
}
