package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.EventLog;

/**
 * イベントログに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class EventLogAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected EventLog mapToDto(GMap map){
		return map == null ? null : new EventLog(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<EventLog> mapToDto(List<GMap> mapList){
		List<EventLog> dtoList = new ArrayList<EventLog>();
		for (var map : mapList) {
			dtoList.add(new EventLog(map));
		}
		return dtoList;
	}
	
	/**
	 * イベントログのレコード有無を判定
	 * @param serialNo シリアル番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(long serialNo) {
		return this.find(serialNo) == null ? false : true;
	}
	
	/**
	 * イベントログから主キー指定でレコードを取得
	 * @param serialNo シリアル番号
	 * @return イベントログDTO
	 */
	public EventLog find(long serialNo) {
		final String sql = "SELECT * FROM event_log WHERE serial_no = ?";
		return mapToDto(connection.find(sql, serialNo));
	}
	
	/**
	 * イベントログからレコードを全件取得 ※大量データ取得に注意
	 * @return List<イベントログDTO>
	 */
	public List<EventLog> load() {
		final String sql = "SELECT * FROM event_log ORDER BY serial_no";
		return mapToDto(connection.load(sql));
	}

	/**
	* イベントログ登録
	* @param dto イベントログ
	* @return 件数
	*/
	public int insert(
		EventLog dto
	){
		final String sql =
				"INSERT INTO event_log "
			+ "( start_time, end_time, user_id, gamen_id, event_id, result) "
			+ "VALUES(?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.startTime, dto.endTime, dto.userId, dto.gamenId, dto.eventId, dto.result
					);
	}

	/**
	* イベントログ登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto イベントログ
	* @return 件数
	*/
	public int upsert(
		EventLog dto
		 ){
		final String sql =
				"INSERT INTO event_log "
			+ "( start_time, end_time, user_id, gamen_id, event_id, result) "
			+ "VALUES(?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT event_log_pkey "
			+ "DO UPDATE SET start_time = ?, end_time = ?, user_id = ?, gamen_id = ?, event_id = ?, result = ? "
			+ "";
			return connection.update(sql,
				dto.startTime, dto.endTime, dto.userId, dto.gamenId, dto.eventId, dto.result
				, dto.startTime, dto.endTime, dto.userId, dto.gamenId, dto.eventId, dto.result
				);
    }
	
	/**
	 * イベントログから主キー指定でレコードを削除
	 * @param serialNo シリアル番号
	 * @return 削除件数
	 */
	public int delete(long serialNo){
		final String sql = "DELETE FROM event_log WHERE serial_no = ?";
		return connection.update(sql, serialNo);
	}
}
