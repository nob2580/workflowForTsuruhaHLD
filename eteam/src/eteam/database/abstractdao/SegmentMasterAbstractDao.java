package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.SegmentMaster;

/**
 * セグメントマスターに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class SegmentMasterAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected SegmentMaster mapToDto(GMap map){
		return map == null ? null : new SegmentMaster(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<SegmentMaster> mapToDto(List<GMap> mapList){
		List<SegmentMaster> dtoList = new ArrayList<SegmentMaster>();
		for (var map : mapList) {
			dtoList.add(new SegmentMaster(map));
		}
		return dtoList;
	}
	
	/**
	 * セグメントマスターのレコード有無を判定
	 * @param segmentCd セグメントコード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String segmentCd) {
		return this.find(segmentCd) == null ? false : true;
	}
	
	/**
	 * セグメントマスターから主キー指定でレコードを取得
	 * @param segmentCd セグメントコード
	 * @return セグメントマスターDTO
	 */
	public SegmentMaster find(String segmentCd) {
		final String sql = "SELECT * FROM segment_master WHERE segment_cd = ?";
		return mapToDto(connection.find(sql, segmentCd));
	}
	
	/**
	 * セグメントマスターからレコードを全件取得 ※大量データ取得に注意
	 * @return List<セグメントマスターDTO>
	 */
	public List<SegmentMaster> load() {
		final String sql = "SELECT * FROM segment_master ORDER BY segment_cd";
		return mapToDto(connection.load(sql));
	}

	/**
	* セグメントマスター登録
	* @param dto セグメントマスター
	* @return 件数
	*/
	public int insert(
		SegmentMaster dto
	){
		final String sql =
				"INSERT INTO segment_master "
			+ "VALUES(?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.segmentCd, dto.segmentNameRyakushiki, dto.segmentNameSeishiki
					);
	}

	/**
	* セグメントマスター登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto セグメントマスター
	* @return 件数
	*/
	public int upsert(
		SegmentMaster dto
		 ){
		final String sql =
				"INSERT INTO segment_master "
			+ "VALUES(?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT segment_master_pkey "
			+ "DO UPDATE SET segment_name_ryakushiki = ?, segment_name_seishiki = ? "
			+ "";
			return connection.update(sql,
				dto.segmentCd, dto.segmentNameRyakushiki, dto.segmentNameSeishiki
				, dto.segmentNameRyakushiki, dto.segmentNameSeishiki
				);
    }
	
	/**
	 * セグメントマスターから主キー指定でレコードを削除
	 * @param segmentCd セグメントコード
	 * @return 削除件数
	 */
	public int delete(String segmentCd){
		final String sql = "DELETE FROM segment_master WHERE segment_cd = ?";
		return connection.update(sql, segmentCd);
	}
}
