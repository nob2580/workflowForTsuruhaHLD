package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KiBumon;

/**
 * （期別）部門に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KiBumonAbstractDao extends EteamAbstractLogic {

	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO ki_bumon (kesn, futan_bumon_cd, futan_bumon_name, oya_syuukei_bumon_cd, shiire_kbn, nyuryoku_from_date, nyuryoku_to_date) VALUES "
			+ "(?, ?, ?, ?, ?, ?, ?)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE kesn = ? AND futan_bumon_cd = ? AND oya_syuukei_bumon_cd = ?";

	/**
	 * @param map GMap
	 * @return dto (レコードが存在しなければNull)
	 */
	protected KiBumon mapToDto(GMap map) {
		return map == null ? null : new KiBumon(map);
	}

	/**
	 * @param mapList 検索結果GMap
	 * @return dtoList
	 */
	protected List<KiBumon> mapToDto(List<GMap> mapList) {
		List<KiBumon> dtoList = new ArrayList<KiBumon>();
		for (var map : mapList) {
			dtoList.add(new KiBumon(map));
		}
		return dtoList;
	}

	/**
	 * （期別）部門のレコード有無を判定
	 * @param kesn 内部決算期
	 * @param futanBumonCd 負担部門コード
	 * @param oyaSyuukeiBumonCd 親集計部門コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(int kesn, String futanBumonCd, String oyaSyuukeiBumonCd) {
		return this.find(kesn, futanBumonCd, oyaSyuukeiBumonCd) != null;
	}

	/**
	 * （期別）部門から主キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param futanBumonCd 負担部門コード
	 * @param oyaSyuukeiBumonCd 親集計部門コード
	 * @return （期別）部門DTO
	 */
	public KiBumon find(int kesn, String futanBumonCd, String oyaSyuukeiBumonCd) {
		final String sql = "SELECT * FROM ki_bumon " + this.whereSql;
		return mapToDto(connection.find(sql, kesn, futanBumonCd, oyaSyuukeiBumonCd));
	}

	/**
	 * （期別）部門からレコードを全件取得 ※大量データ取得に注意
	 * @return List<（期別）部門DTO>
	 */
	public List<KiBumon> load() {
		final String sql = "SELECT * FROM ki_bumon  ORDER BY kesn, futan_bumon_cd, oya_syuukei_bumon_cd";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * （期別）部門から一部キー（決算期）指定でレコードを取得
	 * @param kesn 内部決算期
	 * @return List<（期別）部門>DTO
	 */
	public List<KiBumon> loadByKesn(int kesn) {
		final String sql = "SELECT * FROM ki_bumon WHERE kesn = ? "
							+ "ORDER BY kesn, futan_bumon_cd, oya_syuukei_bumon_cd";
		return mapToDto(connection.load(sql, kesn));
	}
	
	/**
	 * （期別）部門から一部キー（決算期、部門コード）指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param futanBumonCd 負担部門コード
	 * @return List<（期別）部門>DTO
	 */
	public List<KiBumon> loadByKesnAndBumonCd(int kesn, String futanBumonCd) {
		final String sql = "SELECT * FROM ki_bumon WHERE kesn = ?  AND futan_bumon_cd = ? "
							+ "ORDER BY kesn, futan_bumon_cd, oya_syuukei_bumon_cd";
		return mapToDto(connection.load(sql, kesn, futanBumonCd));
	}
	/**
	 * （期別）部門登録
	 * @param dto （期別）部門
	 * @return 件数
	 */
	public int insert(KiBumon dto) {
		return connection.update(this.insertSql, dto.kesn, dto.futanBumonCd, dto.futanBumonName, dto.oyaSyuukeiBumonCd, dto.shiireKbn, dto.nyuryokuFromDate, dto.nyuryokuToDate);
	}

	/**
	 * （期別）部門更新
	 * @param dto （期別）部門
	 * @return 件数
	 */
	public int update(KiBumon dto) {
		final String sql = "UPDATE ki_bumon SET  futan_bumon_name = ?, shiire_kbn = ?, nyuryoku_from_date = ?, nyuryoku_to_date = ? " + this.whereSql;
		return connection.update(sql, dto.futanBumonName, dto.shiireKbn, dto.nyuryokuFromDate, dto.nyuryokuToDate, dto.kesn, dto.futanBumonCd, dto.oyaSyuukeiBumonCd);
	}

	/**
	 * （期別）部門登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto （期別）部門
	 * @return 件数
	 */
	public int upsert(KiBumon dto) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT ki_bumon_pkey "
			+ "DO UPDATE SET  futan_bumon_name = ?, shiire_kbn = ?, nyuryoku_from_date = ?, nyuryoku_to_date = ? ";
		return connection.update(sql, dto.kesn, dto.futanBumonCd, dto.futanBumonName, dto.oyaSyuukeiBumonCd, dto.shiireKbn, dto.nyuryokuFromDate, dto.nyuryokuToDate, dto.futanBumonName, dto.shiireKbn, dto.nyuryokuFromDate, dto.nyuryokuToDate);
	}

	/**
	 * （期別）部門から主キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param futanBumonCd 負担部門コード
	 * @param oyaSyuukeiBumonCd 親集計部門コード
	 * @return 削除件数
	 */
	public int delete(int kesn, String futanBumonCd, String oyaSyuukeiBumonCd) {
		final String sql = "DELETE FROM ki_bumon " + this.whereSql;
		return connection.update(sql, kesn, futanBumonCd, oyaSyuukeiBumonCd);
	}
	
	/**
	 * （期別）部門から一部キー（決算期）指定でレコードを削除
	 * @param kesn 内部決算期
	 * @return 削除件数
	 */
	public int deleteByKesn(int kesn) {
		final String sql = "DELETE FROM ki_bumon WHERE kesn = ? ";
		return connection.update(sql, kesn);
	}
	
	/**
	 * （期別）部門から一部キー（決算期、部門コード）指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param futanBumonCd 負担部門コード
	 * @return 削除件数
	 */
	public int deleteByKesnAndBumonCd(int kesn, String futanBumonCd) {
		final String sql = "DELETE FROM ki_bumon WHERE kesn = ?  AND futan_bumon_cd = ? ";
		return connection.update(sql, kesn, futanBumonCd);
	}
}