package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.DenpyouKianHimozuke;

/**
 * 伝票起案紐付に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class DenpyouKianHimozukeAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected DenpyouKianHimozuke mapToDto(GMap map){
		return map == null ? null : new DenpyouKianHimozuke(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<DenpyouKianHimozuke> mapToDto(List<GMap> mapList){
		List<DenpyouKianHimozuke> dtoList = new ArrayList<DenpyouKianHimozuke>();
		for (var map : mapList) {
			dtoList.add(new DenpyouKianHimozuke(map));
		}
		return dtoList;
	}
	
	/**
	 * 伝票起案紐付のレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId) {
		return this.find(denpyouId) == null ? false : true;
	}
	
	/**
	 * 伝票起案紐付から主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return 伝票起案紐付DTO
	 */
	public DenpyouKianHimozuke find(String denpyouId) {
		final String sql = "SELECT * FROM denpyou_kian_himozuke WHERE denpyou_id = ?";
		return mapToDto(connection.find(sql, denpyouId));
	}
	
	/**
	 * 伝票起案紐付からレコードを全件取得 ※大量データ取得に注意
	 * @return List<伝票起案紐付DTO>
	 */
	public List<DenpyouKianHimozuke> load() {
		final String sql = "SELECT * FROM denpyou_kian_himozuke ORDER BY denpyou_id";
		return mapToDto(connection.load(sql));
	}

	/**
	* 伝票起案紐付登録
	* @param dto 伝票起案紐付
	* @return 件数
	*/
	public int insert(
		DenpyouKianHimozuke dto
	){
		final String sql =
				"INSERT INTO denpyou_kian_himozuke "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.denpyouId, dto.bumonCd, dto.nendo, dto.ryakugou, dto.kianBangouFrom, dto.kianBangou, dto.kianSyuryoFlg, dto.kianSyuryoBi, dto.kianDenpyou, dto.kianDenpyouKbn, dto.jisshiNendo, dto.jisshiKianBangou, dto.shishutsuNendo, dto.shishutsuKianBangou, dto.ringiKingaku, dto.ringiKingakuHikitsugimotoDenpyou, dto.ringiKingakuChoukaComment
					);
	}

	/**
	* 伝票起案紐付登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 伝票起案紐付
	* @return 件数
	*/
	public int upsert(
		DenpyouKianHimozuke dto
		 ){
		final String sql =
				"INSERT INTO denpyou_kian_himozuke "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT denpyou_kian_himozuke_pkey "
			+ "DO UPDATE SET bumon_cd = ?, nendo = ?, ryakugou = ?, kian_bangou_from = ?, kian_bangou = ?, kian_syuryo_flg = ?, kian_syuryo_bi = ?, kian_denpyou = ?, kian_denpyou_kbn = ?, jisshi_nendo = ?, jisshi_kian_bangou = ?, shishutsu_nendo = ?, shishutsu_kian_bangou = ?, ringi_kingaku = ?, ringi_kingaku_hikitsugimoto_denpyou = ?, ringi_kingaku_chouka_comment = ? "
			+ "";
			return connection.update(sql,
				dto.denpyouId, dto.bumonCd, dto.nendo, dto.ryakugou, dto.kianBangouFrom, dto.kianBangou, dto.kianSyuryoFlg, dto.kianSyuryoBi, dto.kianDenpyou, dto.kianDenpyouKbn, dto.jisshiNendo, dto.jisshiKianBangou, dto.shishutsuNendo, dto.shishutsuKianBangou, dto.ringiKingaku, dto.ringiKingakuHikitsugimotoDenpyou, dto.ringiKingakuChoukaComment
				, dto.bumonCd, dto.nendo, dto.ryakugou, dto.kianBangouFrom, dto.kianBangou, dto.kianSyuryoFlg, dto.kianSyuryoBi, dto.kianDenpyou, dto.kianDenpyouKbn, dto.jisshiNendo, dto.jisshiKianBangou, dto.shishutsuNendo, dto.shishutsuKianBangou, dto.ringiKingaku, dto.ringiKingakuHikitsugimotoDenpyou, dto.ringiKingakuChoukaComment
				);
    }
	
	/**
	 * 伝票起案紐付から主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int delete(String denpyouId){
		final String sql = "DELETE FROM denpyou_kian_himozuke WHERE denpyou_id = ?";
		return connection.update(sql, denpyouId);
	}
}
