package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.NiniComment;

/**
 * 任意メモに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class NiniCommentAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected NiniComment mapToDto(GMap map){
		return map == null ? null : new NiniComment(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<NiniComment> mapToDto(List<GMap> mapList){
		List<NiniComment> dtoList = new ArrayList<NiniComment>();
		for (var map : mapList) {
			dtoList.add(new NiniComment(map));
		}
		return dtoList;
	}
	
	/**
	 * 任意メモのレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId, int edano) {
		return this.find(denpyouId, edano) == null ? false : true;
	}
	
	/**
	 * 任意メモから主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @return 任意メモDTO
	 */
	public NiniComment find(String denpyouId, int edano) {
		final String sql = "SELECT * FROM nini_comment WHERE denpyou_id = ? AND edano = ?";
		return mapToDto(connection.find(sql, denpyouId, edano));
	}
	
	/**
	 * 任意メモからレコードを全件取得 ※大量データ取得に注意
	 * @return List<任意メモDTO>
	 */
	public List<NiniComment> load() {
		final String sql = "SELECT * FROM nini_comment ORDER BY denpyou_id, edano";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 任意メモから一部キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return List<任意メモ>DTO
	 */
	public List<NiniComment> load(String denpyouId) {
		final String sql = "SELECT * FROM nini_comment WHERE denpyou_id = ? "
							+ "ORDER BY denpyou_id, edano";
		return mapToDto(connection.load(sql, denpyouId));
	}

	/**
	* 任意メモ登録
	* @param dto 任意メモ
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		NiniComment dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO nini_comment "
			+ "VALUES(?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.denpyouId, dto.edano, dto.userId, dto.userFullName, dto.comment, koushinUserId, koushinUserId
					);
	}

	/**
	* 任意メモの非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したNiniCommentの使用を前提
	* @param dto 任意メモ
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		NiniComment dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE nini_comment "
		    + "SET user_id = ?, user_full_name = ?, comment = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND denpyou_id = ? AND edano = ?";
			return connection.update(sql,
				dto.userId, dto.userFullName, dto.comment, koushinUserId
				,dto.koushinTime, dto.denpyouId, dto.edano);
    }

	/**
	* 任意メモ登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 任意メモ
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		NiniComment dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO nini_comment "
			+ "VALUES(?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT nini_comment_pkey "
			+ "DO UPDATE SET user_id = ?, user_full_name = ?, comment = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.denpyouId, dto.edano, dto.userId, dto.userFullName, dto.comment, koushinUserId, koushinUserId
				, dto.userId, dto.userFullName, dto.comment, koushinUserId
				);
    }
	
	/**
	 * 任意メモから主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @return 削除件数
	 */
	public int delete(String denpyouId, int edano){
		final String sql = "DELETE FROM nini_comment WHERE denpyou_id = ? AND edano = ?";
		return connection.update(sql, denpyouId, edano);
	}
	
	/**
	 * 任意メモから一部キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int delete(String denpyouId) {
		final String sql = "DELETE FROM nini_comment WHERE denpyou_id = ? ";
		return connection.update(sql, denpyouId);
	}
}
