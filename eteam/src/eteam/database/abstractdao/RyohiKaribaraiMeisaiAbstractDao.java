package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.RyohiKaribaraiMeisai;

/**
 * 旅費仮払明細に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class RyohiKaribaraiMeisaiAbstractDao extends EteamAbstractLogic {

	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO ryohi_karibarai_meisai (denpyou_id, denpyou_edano, kikan_from, kikan_to, kyuujitsu_nissuu, shubetsu_cd, shubetsu1, shubetsu2, haya_flg, yasu_flg, raku_flg, koutsuu_shudan, shouhyou_shorui_hissu_flg, naiyou, bikou, oufuku_flg, jidounyuuryoku_flg, nissuu, tanka, suuryou_nyuryoku_type, suuryou, suuryou_kigou, meisai_kingaku, touroku_user_id, touroku_time, koushin_user_id, koushin_time) VALUES "
			+ "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE denpyou_id = ? AND denpyou_edano = ?";

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected RyohiKaribaraiMeisai mapToDto(GMap map){
		return map == null ? null : new RyohiKaribaraiMeisai(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<RyohiKaribaraiMeisai> mapToDto(List<GMap> mapList){
		List<RyohiKaribaraiMeisai> dtoList = new ArrayList<RyohiKaribaraiMeisai>();
		for (var map : mapList) {
			dtoList.add(new RyohiKaribaraiMeisai(map));
		}
		return dtoList;
	}
	
	/**
	 * 旅費仮払明細のレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @param denpyouEdano 伝票枝番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId, int denpyouEdano) {
		return this.find(denpyouId, denpyouEdano) == null ? false : true;
	}
	
	/**
	 * 旅費仮払明細から主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @param denpyouEdano 伝票枝番号
	 * @return 旅費仮払明細DTO
	 */
	public RyohiKaribaraiMeisai find(String denpyouId, int denpyouEdano) {
		final String sql = "SELECT * FROM ryohi_karibarai_meisai WHERE denpyou_id = ? AND denpyou_edano = ?";
		return mapToDto(connection.find(sql, denpyouId, denpyouEdano));
	}
	
	/**
	 * 旅費仮払明細からレコードを全件取得 ※大量データ取得に注意
	 * @return List<旅費仮払明細DTO>
	 */
	public List<RyohiKaribaraiMeisai> load() {
		final String sql = "SELECT * FROM ryohi_karibarai_meisai ORDER BY denpyou_id, denpyou_edano";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 旅費仮払明細から一部キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return List<旅費仮払明細>DTO
	 */
	public List<RyohiKaribaraiMeisai> load(String denpyouId) {
		final String sql = "SELECT * FROM ryohi_karibarai_meisai WHERE denpyou_id = ? "
							+ "ORDER BY denpyou_id, denpyou_edano";
		return mapToDto(connection.load(sql, denpyouId));
	}

	/**
	 * 旅費仮払明細登録
	 * @param dto 旅費仮払明細
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int insert(RyohiKaribaraiMeisai dto, String koushinUserId) {
		return connection.update(this.insertSql, dto.denpyouId, dto.denpyouEdano, dto.kikanFrom, dto.kikanTo, dto.kyuujitsuNissuu, dto.shubetsuCd, dto.shubetsu1, dto.shubetsu2, dto.hayaFlg, dto.yasuFlg, dto.rakuFlg, dto.koutsuuShudan, dto.shouhyouShoruiHissuFlg, dto.naiyou, dto.bikou, dto.oufukuFlg, dto.jidounyuuryokuFlg, dto.nissuu, dto.tanka, dto.suuryouNyuryokuType, dto.suuryou, dto.suuryouKigou, dto.meisaiKingaku, koushinUserId, koushinUserId);
	}

	/**
	* 旅費仮払明細の非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したRyohiKaribaraiMeisaiの使用を前提
	* @param dto 旅費仮払明細
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		RyohiKaribaraiMeisai dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE ryohi_karibarai_meisai "
		    + "SET kikan_from = ?, kikan_to = ?, kyuujitsu_nissuu = ?, shubetsu_cd = ?, shubetsu1 = ?, shubetsu2 = ?, haya_flg = ?, yasu_flg = ?, raku_flg = ?, koutsuu_shudan = ?, shouhyou_shorui_hissu_flg = ?, naiyou = ?, bikou = ?, oufuku_flg = ?, jidounyuuryoku_flg = ?, nissuu = ?, tanka = ?, suuryou_nyuryoku_type = ?, suuryou = ?, suuryou_kigou = ?, meisai_kingaku = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND denpyou_id = ? AND denpyou_edano = ?";
			return connection.update(sql,
				dto.kikanFrom, dto.kikanTo, dto.kyuujitsuNissuu, dto.shubetsuCd, dto.shubetsu1, dto.shubetsu2, dto.hayaFlg, dto.yasuFlg, dto.rakuFlg, dto.koutsuuShudan, dto.shouhyouShoruiHissuFlg, dto.naiyou, dto.bikou, dto.oufukuFlg, dto.jidounyuuryokuFlg, dto.nissuu, dto.tanka, dto.suuryouNyuryokuType, dto.suuryou, dto.suuryouKigou, dto.meisaiKingaku, koushinUserId
				,dto.koushinTime, dto.denpyouId, dto.denpyouEdano);
    }


	/**
	 * 旅費仮払明細登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto 旅費仮払明細
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int upsert(RyohiKaribaraiMeisai dto, String koushinUserId) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT ryohi_karibarai_meisai_pkey "
			+ "DO UPDATE SET  kikan_from = ?, kikan_to = ?, kyuujitsu_nissuu = ?, shubetsu_cd = ?, shubetsu1 = ?, shubetsu2 = ?, haya_flg = ?, yasu_flg = ?, raku_flg = ?, koutsuu_shudan = ?, shouhyou_shorui_hissu_flg = ?, naiyou = ?, bikou = ?, oufuku_flg = ?, jidounyuuryoku_flg = ?, nissuu = ?, tanka = ?, suuryou_nyuryoku_type = ?, suuryou = ?, suuryou_kigou = ?, meisai_kingaku = ?, koushin_user_id = ?, koushin_time = current_timestamp ";
		return connection.update(sql, dto.denpyouId, dto.denpyouEdano, dto.kikanFrom, dto.kikanTo, dto.kyuujitsuNissuu, dto.shubetsuCd, dto.shubetsu1, dto.shubetsu2, dto.hayaFlg, dto.yasuFlg, dto.rakuFlg, dto.koutsuuShudan, dto.shouhyouShoruiHissuFlg, dto.naiyou, dto.bikou, dto.oufukuFlg, dto.jidounyuuryokuFlg, dto.nissuu, dto.tanka, dto.suuryouNyuryokuType, dto.suuryou, dto.suuryouKigou, dto.meisaiKingaku, koushinUserId, koushinUserId, dto.kikanFrom, dto.kikanTo, dto.kyuujitsuNissuu, dto.shubetsuCd, dto.shubetsu1, dto.shubetsu2, dto.hayaFlg, dto.yasuFlg, dto.rakuFlg, dto.koutsuuShudan, dto.shouhyouShoruiHissuFlg, dto.naiyou, dto.bikou, dto.oufukuFlg, dto.jidounyuuryokuFlg, dto.nissuu, dto.tanka, dto.suuryouNyuryokuType, dto.suuryou, dto.suuryouKigou, dto.meisaiKingaku, koushinUserId);
	}
	
	/**
	 * 旅費仮払明細から主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @param denpyouEdano 伝票枝番号
	 * @return 削除件数
	 */
	public int delete(String denpyouId, int denpyouEdano){
		final String sql = "DELETE FROM ryohi_karibarai_meisai WHERE denpyou_id = ? AND denpyou_edano = ?";
		return connection.update(sql, denpyouId, denpyouEdano);
	}
	
	/**
	 * 旅費仮払明細から一部キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int delete(String denpyouId) {
		final String sql = "DELETE FROM ryohi_karibarai_meisai WHERE denpyou_id = ? ";
		return connection.update(sql, denpyouId);
	}
}
