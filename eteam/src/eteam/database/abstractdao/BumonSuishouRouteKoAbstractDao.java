package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.BumonSuishouRouteKo;

/**
 * 部門推奨ルート子に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class BumonSuishouRouteKoAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected BumonSuishouRouteKo mapToDto(GMap map){
		return map == null ? null : new BumonSuishouRouteKo(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<BumonSuishouRouteKo> mapToDto(List<GMap> mapList){
		List<BumonSuishouRouteKo> dtoList = new ArrayList<BumonSuishouRouteKo>();
		for (var map : mapList) {
			dtoList.add(new BumonSuishouRouteKo(map));
		}
		return dtoList;
	}
	
	/**
	 * 部門推奨ルート子のレコード有無を判定
	 * @param denpyouKbn 伝票区分
	 * @param bumonCd 部門コード
	 * @param edano 枝番号
	 * @param edaedano 枝枝番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouKbn, String bumonCd, int edano, int edaedano) {
		return this.find(denpyouKbn, bumonCd, edano, edaedano) == null ? false : true;
	}
	
	/**
	 * 部門推奨ルート子から主キー指定でレコードを取得
	 * @param denpyouKbn 伝票区分
	 * @param bumonCd 部門コード
	 * @param edano 枝番号
	 * @param edaedano 枝枝番号
	 * @return 部門推奨ルート子DTO
	 */
	public BumonSuishouRouteKo find(String denpyouKbn, String bumonCd, int edano, int edaedano) {
		final String sql = "SELECT * FROM bumon_suishou_route_ko WHERE denpyou_kbn = ? AND bumon_cd = ? AND edano = ? AND edaedano = ?";
		return mapToDto(connection.find(sql, denpyouKbn, bumonCd, edano, edaedano));
	}
	
	/**
	 * 部門推奨ルート子からレコードを全件取得 ※大量データ取得に注意
	 * @return List<部門推奨ルート子DTO>
	 */
	public List<BumonSuishouRouteKo> load() {
		final String sql = "SELECT * FROM bumon_suishou_route_ko ORDER BY denpyou_kbn, bumon_cd, edano, edaedano";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 部門推奨ルート子から一部キー指定でレコードを取得
	 * @param denpyouKbn 伝票区分
	 * @return List<部門推奨ルート子>DTO
	 */
	public List<BumonSuishouRouteKo> load(String denpyouKbn) {
		final String sql = "SELECT * FROM bumon_suishou_route_ko WHERE denpyou_kbn = ? "
							+ "ORDER BY denpyou_kbn, bumon_cd, edano, edaedano";
		return mapToDto(connection.load(sql, denpyouKbn));
	}
	
	/**
	 * 部門推奨ルート子から一部キー指定でレコードを取得
	 * @param denpyouKbn 伝票区分
	 * @param bumonCd 部門コード
	 * @return List<部門推奨ルート子>DTO
	 */
	public List<BumonSuishouRouteKo> load(String denpyouKbn, String bumonCd) {
		final String sql = "SELECT * FROM bumon_suishou_route_ko WHERE denpyou_kbn = ?  AND bumon_cd = ? "
							+ "ORDER BY denpyou_kbn, bumon_cd, edano, edaedano";
		return mapToDto(connection.load(sql, denpyouKbn, bumonCd));
	}
	
	/**
	 * 部門推奨ルート子から一部キー指定でレコードを取得
	 * @param denpyouKbn 伝票区分
	 * @param bumonCd 部門コード
	 * @param edano 枝番号
	 * @return List<部門推奨ルート子>DTO
	 */
	public List<BumonSuishouRouteKo> load(String denpyouKbn, String bumonCd, int edano) {
		final String sql = "SELECT * FROM bumon_suishou_route_ko WHERE denpyou_kbn = ?  AND bumon_cd = ?  AND edano = ? "
							+ "ORDER BY denpyou_kbn, bumon_cd, edano, edaedano";
		return mapToDto(connection.load(sql, denpyouKbn, bumonCd, edano));
	}

	/**
	* 部門推奨ルート子登録
	* @param dto 部門推奨ルート子
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		BumonSuishouRouteKo dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO bumon_suishou_route_ko "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.denpyouKbn, dto.bumonCd, dto.edano, dto.edaedano, dto.bumonRoleId, dto.shouninShoriKengenNo, dto.gougiPatternNo, dto.gougiEdano, koushinUserId, koushinUserId
					);
	}

	/**
	* 部門推奨ルート子の非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したBumonSuishouRouteKoの使用を前提
	* @param dto 部門推奨ルート子
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		BumonSuishouRouteKo dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE bumon_suishou_route_ko "
		    + "SET bumon_role_id = ?, shounin_shori_kengen_no = ?, gougi_pattern_no = ?, gougi_edano = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND denpyou_kbn = ? AND bumon_cd = ? AND edano = ? AND edaedano = ?";
			return connection.update(sql,
				dto.bumonRoleId, dto.shouninShoriKengenNo, dto.gougiPatternNo, dto.gougiEdano, koushinUserId
				,dto.koushinTime, dto.denpyouKbn, dto.bumonCd, dto.edano, dto.edaedano);
    }

	/**
	* 部門推奨ルート子登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 部門推奨ルート子
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		BumonSuishouRouteKo dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO bumon_suishou_route_ko "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT bumon_suishou_route_ko_pkey "
			+ "DO UPDATE SET bumon_role_id = ?, shounin_shori_kengen_no = ?, gougi_pattern_no = ?, gougi_edano = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.denpyouKbn, dto.bumonCd, dto.edano, dto.edaedano, dto.bumonRoleId, dto.shouninShoriKengenNo, dto.gougiPatternNo, dto.gougiEdano, koushinUserId, koushinUserId
				, dto.bumonRoleId, dto.shouninShoriKengenNo, dto.gougiPatternNo, dto.gougiEdano, koushinUserId
				);
    }
	
	/**
	 * 部門推奨ルート子から主キー指定でレコードを削除
	 * @param denpyouKbn 伝票区分
	 * @param bumonCd 部門コード
	 * @param edano 枝番号
	 * @param edaedano 枝枝番号
	 * @return 削除件数
	 */
	public int delete(String denpyouKbn, String bumonCd, int edano, int edaedano){
		final String sql = "DELETE FROM bumon_suishou_route_ko WHERE denpyou_kbn = ? AND bumon_cd = ? AND edano = ? AND edaedano = ?";
		return connection.update(sql, denpyouKbn, bumonCd, edano, edaedano);
	}
	
	/**
	 * 部門推奨ルート子から一部キー指定でレコードを削除
	 * @param denpyouKbn 伝票区分
	 * @return 削除件数
	 */
	public int delete(String denpyouKbn) {
		final String sql = "DELETE FROM bumon_suishou_route_ko WHERE denpyou_kbn = ? ";
		return connection.update(sql, denpyouKbn);
	}
	
	/**
	 * 部門推奨ルート子から一部キー指定でレコードを削除
	 * @param denpyouKbn 伝票区分
	 * @param bumonCd 部門コード
	 * @return 削除件数
	 */
	public int delete(String denpyouKbn, String bumonCd) {
		final String sql = "DELETE FROM bumon_suishou_route_ko WHERE denpyou_kbn = ?  AND bumon_cd = ? ";
		return connection.update(sql, denpyouKbn, bumonCd);
	}
	
	/**
	 * 部門推奨ルート子から一部キー指定でレコードを削除
	 * @param denpyouKbn 伝票区分
	 * @param bumonCd 部門コード
	 * @param edano 枝番号
	 * @return 削除件数
	 */
	public int delete(String denpyouKbn, String bumonCd, int edano) {
		final String sql = "DELETE FROM bumon_suishou_route_ko WHERE denpyou_kbn = ?  AND bumon_cd = ?  AND edano = ? ";
		return connection.update(sql, denpyouKbn, bumonCd, edano);
	}
}
