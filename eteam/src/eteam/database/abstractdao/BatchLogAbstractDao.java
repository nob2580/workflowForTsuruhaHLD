package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.BatchLog;

/**
 * バッチログに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class BatchLogAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected BatchLog mapToDto(GMap map){
		return map == null ? null : new BatchLog(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<BatchLog> mapToDto(List<GMap> mapList){
		List<BatchLog> dtoList = new ArrayList<BatchLog>();
		for (var map : mapList) {
			dtoList.add(new BatchLog(map));
		}
		return dtoList;
	}
	
	/**
	 * バッチログのレコード有無を判定
	 * @param serialNo シリアル番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(long serialNo) {
		return this.find(serialNo) == null ? false : true;
	}
	
	/**
	 * バッチログから主キー指定でレコードを取得
	 * @param serialNo シリアル番号
	 * @return バッチログDTO
	 */
	public BatchLog find(long serialNo) {
		final String sql = "SELECT * FROM batch_log WHERE serial_no = ?";
		return mapToDto(connection.find(sql, serialNo));
	}
	
	/**
	 * バッチログからレコードを全件取得 ※大量データ取得に注意
	 * @return List<バッチログDTO>
	 */
	public List<BatchLog> load() {
		final String sql = "SELECT * FROM batch_log ORDER BY serial_no";
		return mapToDto(connection.load(sql));
	}

	/**
	* バッチログ登録
	* @param dto バッチログ
	* @return 件数
	*/
	public int insert(
		BatchLog dto
	){
		final String sql =
				"INSERT INTO batch_log "
			+ "( start_time, end_time, batch_name, batch_status, count_name, count, batch_kbn) "
			+ "VALUES(?, ?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.startTime, dto.endTime, dto.batchName, dto.batchStatus, dto.countName, dto.count, dto.batchKbn
					);
	}

	/**
	* バッチログ登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto バッチログ
	* @return 件数
	*/
	public int upsert(
		BatchLog dto
		 ){
		final String sql =
				"INSERT INTO batch_log "
			+ "( start_time, end_time, batch_name, batch_status, count_name, count, batch_kbn) "
			+ "VALUES(?, ?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT batch_log_pkey "
			+ "DO UPDATE SET start_time = ?, end_time = ?, batch_name = ?, batch_status = ?, count_name = ?, count = ?, batch_kbn = ? "
			+ "";
			return connection.update(sql,
				dto.startTime, dto.endTime, dto.batchName, dto.batchStatus, dto.countName, dto.count, dto.batchKbn
				, dto.startTime, dto.endTime, dto.batchName, dto.batchStatus, dto.countName, dto.count, dto.batchKbn
				);
    }
	
	/**
	 * バッチログから主キー指定でレコードを削除
	 * @param serialNo シリアル番号
	 * @return 削除件数
	 */
	public int delete(long serialNo){
		final String sql = "DELETE FROM batch_log WHERE serial_no = ?";
		return connection.update(sql, serialNo);
	}
}
