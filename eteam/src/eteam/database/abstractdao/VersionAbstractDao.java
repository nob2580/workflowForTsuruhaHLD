package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.Version;

/**
 * ヴァージョンに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class VersionAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected Version mapToDto(GMap map){
		return map == null ? null : new Version(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<Version> mapToDto(List<GMap> mapList){
		List<Version> dtoList = new ArrayList<Version>();
		for (var map : mapList) {
			dtoList.add(new Version(map));
		}
		return dtoList;
	}
	
	/**
	 * ヴァージョンのレコード有無を判定
	 * @param version ヴァージョン
	 * @return true:exist false:not exist
	 */
	public boolean exists(String version) {
		return this.find(version) == null ? false : true;
	}
	
	/**
	 * ヴァージョンから主キー指定でレコードを取得
	 * @param version ヴァージョン
	 * @return ヴァージョンDTO
	 */
	public Version find(String version) {
		final String sql = "SELECT * FROM version WHERE version = ?";
		return mapToDto(connection.find(sql, version));
	}
	
	/**
	 * ヴァージョンからレコードを全件取得 ※大量データ取得に注意
	 * @return List<ヴァージョンDTO>
	 */
	public List<Version> load() {
		final String sql = "SELECT * FROM version ORDER BY version";
		return mapToDto(connection.load(sql));
	}

	/**
	* ヴァージョン登録
	* @param dto ヴァージョン
	* @return 件数
	*/
	public int insert(
		Version dto
	){
		final String sql =
				"INSERT INTO version "
			+ "VALUES(? "
			+ ")";
			return connection.update(sql,
					dto.version
					);
	}
	
	/**
	 * ヴァージョンから主キー指定でレコードを削除
	 * @param version ヴァージョン
	 * @return 削除件数
	 */
	public int delete(String version){
		final String sql = "DELETE FROM version WHERE version = ?";
		return connection.update(sql, version);
	}
}
