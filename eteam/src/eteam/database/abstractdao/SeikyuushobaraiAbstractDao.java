package eteam.database.abstractdao;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.Seikyuushobarai;

/**
 * 請求書払いに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class SeikyuushobaraiAbstractDao extends EteamAbstractLogic {

	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO seikyuushobarai (denpyou_id, keijoubi, shiharai_kigen, shiharaibi, masref_flg, shouhyou_shorui_flg, kake_flg, hontai_kingaku_goukei, shouhizeigaku_goukei, shiharai_kingaku_goukei, hf1_cd, hf1_name_ryakushiki, hf2_cd, hf2_name_ryakushiki, hf3_cd, hf3_name_ryakushiki, hf4_cd, hf4_name_ryakushiki, hf5_cd, hf5_name_ryakushiki, hf6_cd, hf6_name_ryakushiki, hf7_cd, hf7_name_ryakushiki, hf8_cd, hf8_name_ryakushiki, hf9_cd, hf9_name_ryakushiki, hf10_cd, hf10_name_ryakushiki, hosoku, touroku_user_id, touroku_time, koushin_user_id, koushin_time, nyuryoku_houshiki, invoice_denpyou) VALUES "
			+ "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp, ?, ?)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE denpyou_id = ?";

	/**
	 * @param map GMap
	 * @return dto (レコードが存在しなければNull)
	 */
	protected Seikyuushobarai mapToDto(GMap map) {
		return map == null ? null : new Seikyuushobarai(map);
	}

	/**
	 * @param mapList 検索結果GMap
	 * @return dtoList
	 */
	protected List<Seikyuushobarai> mapToDto(List<GMap> mapList) {
		List<Seikyuushobarai> dtoList = new ArrayList<Seikyuushobarai>();
		for (var map : mapList) {
			dtoList.add(new Seikyuushobarai(map));
		}
		return dtoList;
	}

	/**
	 * 請求書払いのレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId) {
		return this.find(denpyouId) != null;
	}

	/**
	 * 請求書払いから主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return 請求書払いDTO
	 */
	public Seikyuushobarai find(String denpyouId) {
		final String sql = "SELECT * FROM seikyuushobarai " + this.whereSql;
		return mapToDto(connection.find(sql, denpyouId));
	}

	/**
	 * 請求書払いからレコードを全件取得 ※大量データ取得に注意
	 * @return List<請求書払いDTO>
	 */
	public List<Seikyuushobarai> load() {
		final String sql = "SELECT * FROM seikyuushobarai  ORDER BY denpyou_id";
		return mapToDto(connection.load(sql));
	}

	/**
	 * 請求書払い登録
	 * @param dto 請求書払い
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int insert(Seikyuushobarai dto, String koushinUserId) {
		return connection.update(this.insertSql, dto.denpyouId, dto.keijoubi, dto.shiharaiKigen, dto.shiharaibi, dto.masrefFlg, dto.shouhyouShoruiFlg, dto.kakeFlg, dto.hontaiKingakuGoukei, dto.shouhizeigakuGoukei, dto.shiharaiKingakuGoukei, dto.hf1Cd, dto.hf1NameRyakushiki, dto.hf2Cd, dto.hf2NameRyakushiki, dto.hf3Cd, dto.hf3NameRyakushiki, dto.hf4Cd, dto.hf4NameRyakushiki, dto.hf5Cd, dto.hf5NameRyakushiki, dto.hf6Cd, dto.hf6NameRyakushiki, dto.hf7Cd, dto.hf7NameRyakushiki, dto.hf8Cd, dto.hf8NameRyakushiki, dto.hf9Cd, dto.hf9NameRyakushiki, dto.hf10Cd, dto.hf10NameRyakushiki, dto.hosoku, koushinUserId, koushinUserId, dto.nyuryokuHoushiki, dto.invoiceDenpyou);
	}

	/**
	 * 請求書払い更新
	 * @param dto 請求書払い
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int update(Seikyuushobarai dto, String koushinUserId) {
		final String sql = "UPDATE seikyuushobarai SET  keijoubi = ?, shiharai_kigen = ?, shiharaibi = ?, masref_flg = ?, shouhyou_shorui_flg = ?, kake_flg = ?, hontai_kingaku_goukei = ?, shouhizeigaku_goukei = ?, shiharai_kingaku_goukei = ?, hf1_cd = ?, hf1_name_ryakushiki = ?, hf2_cd = ?, hf2_name_ryakushiki = ?, hf3_cd = ?, hf3_name_ryakushiki = ?, hf4_cd = ?, hf4_name_ryakushiki = ?, hf5_cd = ?, hf5_name_ryakushiki = ?, hf6_cd = ?, hf6_name_ryakushiki = ?, hf7_cd = ?, hf7_name_ryakushiki = ?, hf8_cd = ?, hf8_name_ryakushiki = ?, hf9_cd = ?, hf9_name_ryakushiki = ?, hf10_cd = ?, hf10_name_ryakushiki = ?, hosoku = ?, koushin_user_id = ?, koushin_time = current_timestamp, nyuryoku_houshiki = ?, invoice_denpyou = ? " + this.whereSql;
		return connection.update(sql, dto.keijoubi, dto.shiharaiKigen, dto.shiharaibi, dto.masrefFlg, dto.shouhyouShoruiFlg, dto.kakeFlg, dto.hontaiKingakuGoukei, dto.shouhizeigakuGoukei, dto.shiharaiKingakuGoukei, dto.hf1Cd, dto.hf1NameRyakushiki, dto.hf2Cd, dto.hf2NameRyakushiki, dto.hf3Cd, dto.hf3NameRyakushiki, dto.hf4Cd, dto.hf4NameRyakushiki, dto.hf5Cd, dto.hf5NameRyakushiki, dto.hf6Cd, dto.hf6NameRyakushiki, dto.hf7Cd, dto.hf7NameRyakushiki, dto.hf8Cd, dto.hf8NameRyakushiki, dto.hf9Cd, dto.hf9NameRyakushiki, dto.hf10Cd, dto.hf10NameRyakushiki, dto.hosoku, koushinUserId, dto.nyuryokuHoushiki, dto.invoiceDenpyou, dto.denpyouId);
	}

	/**
	 * 請求書払い登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto 請求書払い
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int upsert(Seikyuushobarai dto, String koushinUserId) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT seikyuushobarai_pkey "
			+ "DO UPDATE SET  keijoubi = ?, shiharai_kigen = ?, shiharaibi = ?, masref_flg = ?, shouhyou_shorui_flg = ?, kake_flg = ?, hontai_kingaku_goukei = ?, shouhizeigaku_goukei = ?, shiharai_kingaku_goukei = ?, hf1_cd = ?, hf1_name_ryakushiki = ?, hf2_cd = ?, hf2_name_ryakushiki = ?, hf3_cd = ?, hf3_name_ryakushiki = ?, hf4_cd = ?, hf4_name_ryakushiki = ?, hf5_cd = ?, hf5_name_ryakushiki = ?, hf6_cd = ?, hf6_name_ryakushiki = ?, hf7_cd = ?, hf7_name_ryakushiki = ?, hf8_cd = ?, hf8_name_ryakushiki = ?, hf9_cd = ?, hf9_name_ryakushiki = ?, hf10_cd = ?, hf10_name_ryakushiki = ?, hosoku = ?, koushin_user_id = ?, koushin_time = current_timestamp, nyuryoku_houshiki = ?, invoice_denpyou = ? ";
		return connection.update(sql, dto.denpyouId, dto.keijoubi, dto.shiharaiKigen, dto.shiharaibi, dto.masrefFlg, dto.shouhyouShoruiFlg, dto.kakeFlg, dto.hontaiKingakuGoukei, dto.shouhizeigakuGoukei, dto.shiharaiKingakuGoukei, dto.hf1Cd, dto.hf1NameRyakushiki, dto.hf2Cd, dto.hf2NameRyakushiki, dto.hf3Cd, dto.hf3NameRyakushiki, dto.hf4Cd, dto.hf4NameRyakushiki, dto.hf5Cd, dto.hf5NameRyakushiki, dto.hf6Cd, dto.hf6NameRyakushiki, dto.hf7Cd, dto.hf7NameRyakushiki, dto.hf8Cd, dto.hf8NameRyakushiki, dto.hf9Cd, dto.hf9NameRyakushiki, dto.hf10Cd, dto.hf10NameRyakushiki, dto.hosoku, koushinUserId, koushinUserId, dto.nyuryokuHoushiki, dto.invoiceDenpyou, dto.keijoubi, dto.shiharaiKigen, dto.shiharaibi, dto.masrefFlg, dto.shouhyouShoruiFlg, dto.kakeFlg, dto.hontaiKingakuGoukei, dto.shouhizeigakuGoukei, dto.shiharaiKingakuGoukei, dto.hf1Cd, dto.hf1NameRyakushiki, dto.hf2Cd, dto.hf2NameRyakushiki, dto.hf3Cd, dto.hf3NameRyakushiki, dto.hf4Cd, dto.hf4NameRyakushiki, dto.hf5Cd, dto.hf5NameRyakushiki, dto.hf6Cd, dto.hf6NameRyakushiki, dto.hf7Cd, dto.hf7NameRyakushiki, dto.hf8Cd, dto.hf8NameRyakushiki, dto.hf9Cd, dto.hf9NameRyakushiki, dto.hf10Cd, dto.hf10NameRyakushiki, dto.hosoku, koushinUserId, dto.nyuryokuHoushiki, dto.invoiceDenpyou);
	}

	/**
	 * 請求書払いから主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int delete(String denpyouId) {
		final String sql = "DELETE FROM seikyuushobarai " + this.whereSql;
		return connection.update(sql, denpyouId);
	}

	/**
	 * 請求書払い申請の支払日を更新する。
	 * @param denpyouId  伝票ID
	 * @param keijoubi   計上日
	 * @param shiharaibi 支払日
	 * @param masrefFlg  マスター参照フラグ
	 * @param userId     ユーザーID
	 * @return 処理件数
	 */
	public int updateShiharaibi(
			String denpyouId,
			Date keijoubi,
			Date shiharaibi,
			String masrefFlg,
			String userId
	) {
		final String sql =
				"UPDATE seikyuushobarai "
			+   "SET keijoubi = ?, shiharaibi = ?, masref_flg = ?, koushin_user_id=?, koushin_time=current_timestamp "
			+ "WHERE denpyou_id = ?";
		return connection.update(sql, keijoubi, shiharaibi, masrefFlg, userId, denpyouId);
	}
}