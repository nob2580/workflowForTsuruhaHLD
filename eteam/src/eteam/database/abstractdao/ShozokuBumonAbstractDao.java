package eteam.database.abstractdao;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.ShozokuBumon;

/**
 * 所属部門に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class ShozokuBumonAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected ShozokuBumon mapToDto(GMap map){
		return map == null ? null : new ShozokuBumon(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<ShozokuBumon> mapToDto(List<GMap> mapList){
		List<ShozokuBumon> dtoList = new ArrayList<ShozokuBumon>();
		for (var map : mapList) {
			dtoList.add(new ShozokuBumon(map));
		}
		return dtoList;
	}
	
	/**
	 * 所属部門のレコード有無を判定
	 * @param bumonCd 部門コード
	 * @param yuukouKigenFrom 有効期限開始日
	 * @return true:exist false:not exist
	 */
	public boolean exists(String bumonCd, Date yuukouKigenFrom) {
		return this.find(bumonCd, yuukouKigenFrom) == null ? false : true;
	}
	
	/**
	 * 所属部門から主キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @param yuukouKigenFrom 有効期限開始日
	 * @return 所属部門DTO
	 */
	public ShozokuBumon find(String bumonCd, Date yuukouKigenFrom) {
		final String sql = "SELECT * FROM shozoku_bumon WHERE bumon_cd = ? AND yuukou_kigen_from = ?";
		return mapToDto(connection.find(sql, bumonCd, yuukouKigenFrom));
	}
	
	/**
	 * 所属部門からレコードを全件取得 ※大量データ取得に注意
	 * @return List<所属部門DTO>
	 */
	public List<ShozokuBumon> load() {
		final String sql = "SELECT * FROM shozoku_bumon ORDER BY bumon_cd, yuukou_kigen_from";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 所属部門から一部キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @return List<所属部門>DTO
	 */
	public List<ShozokuBumon> load(String bumonCd) {
		final String sql = "SELECT * FROM shozoku_bumon WHERE bumon_cd = ? "
							+ "ORDER BY bumon_cd, yuukou_kigen_from";
		return mapToDto(connection.load(sql, bumonCd));
	}

	/**
	* 所属部門登録
	* @param dto 所属部門
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		ShozokuBumon dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO shozoku_bumon "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.bumonCd, dto.bumonName, dto.oyaBumonCd, dto.yuukouKigenFrom, dto.yuukouKigenTo, dto.securityPattern, koushinUserId, koushinUserId
					);
	}

	/**
	* 所属部門の非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したShozokuBumonの使用を前提
	* @param dto 所属部門
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		ShozokuBumon dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE shozoku_bumon "
		    + "SET bumon_name = ?, oya_bumon_cd = ?, yuukou_kigen_to = ?, security_pattern = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND bumon_cd = ? AND yuukou_kigen_from = ?";
			return connection.update(sql,
				dto.bumonName, dto.oyaBumonCd, dto.yuukouKigenTo, dto.securityPattern, koushinUserId
				,dto.koushinTime, dto.bumonCd, dto.yuukouKigenFrom);
    }

	/**
	* 所属部門登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 所属部門
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		ShozokuBumon dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO shozoku_bumon "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT shozoku_bumon_pkey "
			+ "DO UPDATE SET bumon_name = ?, oya_bumon_cd = ?, yuukou_kigen_to = ?, security_pattern = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.bumonCd, dto.bumonName, dto.oyaBumonCd, dto.yuukouKigenFrom, dto.yuukouKigenTo, dto.securityPattern, koushinUserId, koushinUserId
				, dto.bumonName, dto.oyaBumonCd, dto.yuukouKigenTo, dto.securityPattern, koushinUserId
				);
    }
	
	/**
	 * 所属部門から主キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @param yuukouKigenFrom 有効期限開始日
	 * @return 削除件数
	 */
	public int delete(String bumonCd, Date yuukouKigenFrom){
		final String sql = "DELETE FROM shozoku_bumon WHERE bumon_cd = ? AND yuukou_kigen_from = ?";
		return connection.update(sql, bumonCd, yuukouKigenFrom);
	}
	
	/**
	 * 所属部門から一部キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @return 削除件数
	 */
	public int delete(String bumonCd) {
		final String sql = "DELETE FROM shozoku_bumon WHERE bumon_cd = ? ";
		return connection.update(sql, bumonCd);
	}
}
