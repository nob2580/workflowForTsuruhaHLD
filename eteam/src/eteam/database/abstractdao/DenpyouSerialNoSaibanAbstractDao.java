package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.DenpyouSerialNoSaiban;

/**
 * 伝票番号採番に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class DenpyouSerialNoSaibanAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected DenpyouSerialNoSaiban mapToDto(GMap map){
		return map == null ? null : new DenpyouSerialNoSaiban(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<DenpyouSerialNoSaiban> mapToDto(List<GMap> mapList){
		List<DenpyouSerialNoSaiban> dtoList = new ArrayList<DenpyouSerialNoSaiban>();
		for (var map : mapList) {
			dtoList.add(new DenpyouSerialNoSaiban(map));
		}
		return dtoList;
	}
	
	/**
	 * 伝票番号採番のレコード有無を判定
	 * @param sequenceVal シーケンス値
	 * @param maxValue 最大値
	 * @param minValue 最小値
	 * @return true:exist false:not exist
	 */
	public boolean exists(int sequenceVal, int maxValue, int minValue) {
		return this.find(sequenceVal, maxValue, minValue) == null ? false : true;
	}
	
	/**
	 * 伝票番号採番から主キー指定でレコードを取得
	 * @param sequenceVal シーケンス値
	 * @param maxValue 最大値
	 * @param minValue 最小値
	 * @return 伝票番号採番DTO
	 */
	public DenpyouSerialNoSaiban find(int sequenceVal, int maxValue, int minValue) {
		final String sql = "SELECT * FROM denpyou_serial_no_saiban WHERE sequence_val = ? AND max_value = ? AND min_value = ?";
		return mapToDto(connection.find(sql, sequenceVal, maxValue, minValue));
	}
	
	/**
	 * 伝票番号採番からレコードを全件取得 ※大量データ取得に注意
	 * @return List<伝票番号採番DTO>
	 */
	public List<DenpyouSerialNoSaiban> load() {
		final String sql = "SELECT * FROM denpyou_serial_no_saiban ORDER BY sequence_val, max_value, min_value";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 伝票番号採番から一部キー指定でレコードを取得
	 * @param sequenceVal シーケンス値
	 * @return List<伝票番号採番>DTO
	 */
	public List<DenpyouSerialNoSaiban> load(int sequenceVal) {
		final String sql = "SELECT * FROM denpyou_serial_no_saiban WHERE sequence_val = ? "
							+ "ORDER BY sequence_val, max_value, min_value";
		return mapToDto(connection.load(sql, sequenceVal));
	}
	
	/**
	 * 伝票番号採番から一部キー指定でレコードを取得
	 * @param sequenceVal シーケンス値
	 * @param maxValue 最大値
	 * @return List<伝票番号採番>DTO
	 */
	public List<DenpyouSerialNoSaiban> load(int sequenceVal, int maxValue) {
		final String sql = "SELECT * FROM denpyou_serial_no_saiban WHERE sequence_val = ?  AND max_value = ? "
							+ "ORDER BY sequence_val, max_value, min_value";
		return mapToDto(connection.load(sql, sequenceVal, maxValue));
	}

	/**
	* 伝票番号採番登録
	* @param dto 伝票番号採番
	* @return 件数
	*/
	public int insert(
		DenpyouSerialNoSaiban dto
	){
		final String sql =
				"INSERT INTO denpyou_serial_no_saiban "
			+ "VALUES(?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.sequenceVal, dto.maxValue, dto.minValue
					);
	}
	
	/**
	 * 伝票番号採番から主キー指定でレコードを削除
	 * @param sequenceVal シーケンス値
	 * @param maxValue 最大値
	 * @param minValue 最小値
	 * @return 削除件数
	 */
	public int delete(int sequenceVal, int maxValue, int minValue){
		final String sql = "DELETE FROM denpyou_serial_no_saiban WHERE sequence_val = ? AND max_value = ? AND min_value = ?";
		return connection.update(sql, sequenceVal, maxValue, minValue);
	}
	
	/**
	 * 伝票番号採番から一部キー指定でレコードを削除
	 * @param sequenceVal シーケンス値
	 * @return 削除件数
	 */
	public int delete(int sequenceVal) {
		final String sql = "DELETE FROM denpyou_serial_no_saiban WHERE sequence_val = ? ";
		return connection.update(sql, sequenceVal);
	}
	
	/**
	 * 伝票番号採番から一部キー指定でレコードを削除
	 * @param sequenceVal シーケンス値
	 * @param maxValue 最大値
	 * @return 削除件数
	 */
	public int delete(int sequenceVal, int maxValue) {
		final String sql = "DELETE FROM denpyou_serial_no_saiban WHERE sequence_val = ?  AND max_value = ? ";
		return connection.update(sql, sequenceVal, maxValue);
	}
}
