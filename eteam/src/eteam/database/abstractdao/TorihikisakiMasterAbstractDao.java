package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.TorihikisakiMaster;

/**
 * 取引先マスターに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class TorihikisakiMasterAbstractDao extends EteamAbstractLogic {

	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO torihikisaki_master (torihikisaki_cd, torihikisaki_name_ryakushiki, torihikisaki_name_seishiki, torihikisaki_name_hankana, nyuryoku_from_date, nyuryoku_to_date, tekikaku_no, menzei_jigyousha_flg) VALUES "
			+ "(?, ?, ?, ?, ?, ?, ?, ?)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE torihikisaki_cd = ?";

	/**
	 * @param map GMap
	 * @return dto (レコードが存在しなければNull)
	 */
	protected TorihikisakiMaster mapToDto(GMap map) {
		return map == null ? null : new TorihikisakiMaster(map);
	}

	/**
	 * @param mapList 検索結果GMap
	 * @return dtoList
	 */
	protected List<TorihikisakiMaster> mapToDto(List<GMap> mapList) {
		List<TorihikisakiMaster> dtoList = new ArrayList<TorihikisakiMaster>();
		for (var map : mapList) {
			dtoList.add(new TorihikisakiMaster(map));
		}
		return dtoList;
	}

	/**
	 * 取引先マスターのレコード有無を判定
	 * @param torihikisakiCd 取引先コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String torihikisakiCd) {
		return this.find(torihikisakiCd) != null;
	}

	/**
	 * 取引先マスターから主キー指定でレコードを取得
	 * @param torihikisakiCd 取引先コード
	 * @return 取引先マスターDTO
	 */
	public TorihikisakiMaster find(String torihikisakiCd) {
		final String sql = "SELECT * FROM torihikisaki_master " + this.whereSql;
		return mapToDto(connection.find(sql, torihikisakiCd));
	}

	/**
	 * 取引先マスターからレコードを全件取得 ※大量データ取得に注意
	 * @return List<取引先マスターDTO>
	 */
	public List<TorihikisakiMaster> load() {
		final String sql = "SELECT * FROM torihikisaki_master  ORDER BY torihikisaki_cd";
		return mapToDto(connection.load(sql));
	}

	/**
	 * 取引先マスター登録
	 * @param dto 取引先マスター
	 * @return 件数
	 */
	public int insert(TorihikisakiMaster dto) {
		return connection.update(this.insertSql, dto.torihikisakiCd, dto.torihikisakiNameRyakushiki, dto.torihikisakiNameSeishiki, dto.torihikisakiNameHankana, dto.nyuryokuFromDate, dto.nyuryokuToDate, dto.tekikakuNo, dto.menzeiJigyoushaFlg);
	}

	/**
	 * 取引先マスター更新
	 * @param dto 取引先マスター
	 * @return 件数
	 */
	public int update(TorihikisakiMaster dto) {
		final String sql = "UPDATE torihikisaki_master SET  torihikisaki_name_ryakushiki = ?, torihikisaki_name_seishiki = ?, torihikisaki_name_hankana = ?, nyuryoku_from_date = ?, nyuryoku_to_date = ?, tekikaku_no = ?, menzei_jigyousha_flg = ? " + this.whereSql;
		return connection.update(sql, dto.torihikisakiNameRyakushiki, dto.torihikisakiNameSeishiki, dto.torihikisakiNameHankana, dto.nyuryokuFromDate, dto.nyuryokuToDate, dto.tekikakuNo, dto.menzeiJigyoushaFlg, dto.torihikisakiCd);
	}

	/**
	 * 取引先マスター登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto 取引先マスター
	 * @return 件数
	 */
	public int upsert(TorihikisakiMaster dto) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT torihikisaki_master_pkey "
			+ "DO UPDATE SET  torihikisaki_name_ryakushiki = ?, torihikisaki_name_seishiki = ?, torihikisaki_name_hankana = ?, nyuryoku_from_date = ?, nyuryoku_to_date = ?, tekikaku_no = ?, menzei_jigyousha_flg = ? ";
		return connection.update(sql, dto.torihikisakiCd, dto.torihikisakiNameRyakushiki, dto.torihikisakiNameSeishiki, dto.torihikisakiNameHankana, dto.nyuryokuFromDate, dto.nyuryokuToDate, dto.tekikakuNo, dto.menzeiJigyoushaFlg, dto.torihikisakiNameRyakushiki, dto.torihikisakiNameSeishiki, dto.torihikisakiNameHankana, dto.nyuryokuFromDate, dto.nyuryokuToDate, dto.tekikakuNo, dto.menzeiJigyoushaFlg);
	}

	/**
	 * 取引先マスターから主キー指定でレコードを削除
	 * @param torihikisakiCd 取引先コード
	 * @return 削除件数
	 */
	public int delete(String torihikisakiCd) {
		final String sql = "DELETE FROM torihikisaki_master " + this.whereSql;
		return connection.update(sql, torihikisakiCd);
	}
}