package eteam.database.abstractdao;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KiShouhizeiSetting;

/**
 * （期別）消費税設定に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KiShouhizeiSettingAbstractDao extends EteamAbstractLogic {

	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO ki_shouhizei_setting (kesn, shiire_zeigaku_anbun_flg, shouhizei_kbn, hasuu_shori_flg, zeigaku_keisan_flg, shouhizeitaishou_minyuryoku_flg, shisan, uriage, shiire, keihi, bumonbetsu_shori, tokuteishiire, zero_shouhizei, shouhizei_bumon, shouhizei_torihikisaki, shouhizei_edaban, shouhizei_project, shouhizei_segment, shouhizei_uf1, shouhizei_uf2, shouhizei_uf3, shouhizei_kouji, shouhizei_koushu, ukeshouhizei_uriage, ukeshouhizei_shisan, haraishouhizei_shiire, haraishouhizei_keihi, haraisyouhizei_shisan, uriagezeigaku_keisan, shiirezeigaku_keisan, shiirezeigaku_keikasothi) VALUES "
			+ "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE kesn = ?";

	/**
	 * @param map GMap
	 * @return dto (レコードが存在しなければNull)
	 */
	protected KiShouhizeiSetting mapToDto(GMap map) {
		return map == null ? null : new KiShouhizeiSetting(map);
	}

	/**
	 * @param mapList 検索結果GMap
	 * @return dtoList
	 */
	protected List<KiShouhizeiSetting> mapToDto(List<GMap> mapList) {
		List<KiShouhizeiSetting> dtoList = new ArrayList<KiShouhizeiSetting>();
		for (var map : mapList) {
			dtoList.add(new KiShouhizeiSetting(map));
		}
		return dtoList;
	}

	/**
	 * （期別）消費税設定のレコード有無を判定
	 * @param kesn 内部決算期
	 * @return true:exist false:not exist
	 */
	public boolean exists(int kesn) {
		return this.find(kesn) != null;
	}

	/**
	 * （期別）消費税設定から主キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @return （期別）消費税設定DTO
	 */
	public KiShouhizeiSetting find(int kesn) {
		final String sql = "SELECT * FROM ki_shouhizei_setting " + this.whereSql;
		return mapToDto(connection.find(sql, kesn));
	}

	/**
	 * （期別）消費税設定からレコードを全件取得 ※大量データ取得に注意
	 * @return List<（期別）消費税設定DTO>
	 */
	public List<KiShouhizeiSetting> load() {
		final String sql = "SELECT * FROM ki_shouhizei_setting  ORDER BY kesn";
		return mapToDto(connection.load(sql));
	}

	/**
	 * （期別）消費税設定登録
	 * @param dto （期別）消費税設定
	 * @return 件数
	 */
	public int insert(KiShouhizeiSetting dto) {
		return connection.update(this.insertSql, dto.kesn, dto.shiireZeigakuAnbunFlg, dto.shouhizeiKbn, dto.hasuuShoriFlg, dto.zeigakuKeisanFlg, dto.shouhizeitaishouMinyuryokuFlg, dto.shisan, dto.uriage, dto.shiire, dto.keihi, dto.bumonbetsuShori, dto.tokuteishiire, dto.zeroShouhizei, dto.shouhizeiBumon, dto.shouhizeiTorihikisaki, dto.shouhizeiEdaban, dto.shouhizeiProject, dto.shouhizeiSegment, dto.shouhizeiUf1, dto.shouhizeiUf2, dto.shouhizeiUf3, dto.shouhizeiKouji, dto.shouhizeiKoushu, dto.ukeshouhizeiUriage, dto.ukeshouhizeiShisan, dto.haraishouhizeiShiire, dto.haraishouhizeiKeihi, dto.haraisyouhizeiShisan, dto.uriagezeigakuKeisan, dto.shiirezeigakuKeisan, dto.shiirezeigakuKeikasothi);
	}

	/**
	 * （期別）消費税設定更新
	 * @param dto （期別）消費税設定
	 * @return 件数
	 */
	public int update(KiShouhizeiSetting dto) {
		final String sql = "UPDATE ki_shouhizei_setting SET  shiire_zeigaku_anbun_flg = ?, shouhizei_kbn = ?, hasuu_shori_flg = ?, zeigaku_keisan_flg = ?, shouhizeitaishou_minyuryoku_flg = ?, shisan = ?, uriage = ?, shiire = ?, keihi = ?, bumonbetsu_shori = ?, tokuteishiire = ?, zero_shouhizei = ?, shouhizei_bumon = ?, shouhizei_torihikisaki = ?, shouhizei_edaban = ?, shouhizei_project = ?, shouhizei_segment = ?, shouhizei_uf1 = ?, shouhizei_uf2 = ?, shouhizei_uf3 = ?, shouhizei_kouji = ?, shouhizei_koushu = ?, ukeshouhizei_uriage = ?, ukeshouhizei_shisan = ?, haraishouhizei_shiire = ?, haraishouhizei_keihi = ?, haraisyouhizei_shisan = ?, uriagezeigaku_keisan = ?, shiirezeigaku_keisan = ?, shiirezeigaku_keikasothi = ? " + this.whereSql;
		return connection.update(sql, dto.shiireZeigakuAnbunFlg, dto.shouhizeiKbn, dto.hasuuShoriFlg, dto.zeigakuKeisanFlg, dto.shouhizeitaishouMinyuryokuFlg, dto.shisan, dto.uriage, dto.shiire, dto.keihi, dto.bumonbetsuShori, dto.tokuteishiire, dto.zeroShouhizei, dto.shouhizeiBumon, dto.shouhizeiTorihikisaki, dto.shouhizeiEdaban, dto.shouhizeiProject, dto.shouhizeiSegment, dto.shouhizeiUf1, dto.shouhizeiUf2, dto.shouhizeiUf3, dto.shouhizeiKouji, dto.shouhizeiKoushu, dto.ukeshouhizeiUriage, dto.ukeshouhizeiShisan, dto.haraishouhizeiShiire, dto.haraishouhizeiKeihi, dto.haraisyouhizeiShisan, dto.uriagezeigakuKeisan, dto.shiirezeigakuKeisan, dto.shiirezeigakuKeikasothi, dto.kesn);
	}

	/**
	 * （期別）消費税設定登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto （期別）消費税設定
	 * @return 件数
	 */
	public int upsert(KiShouhizeiSetting dto) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT ki_shouhizei_setting_pkey "
			+ "DO UPDATE SET  shiire_zeigaku_anbun_flg = ?, shouhizei_kbn = ?, hasuu_shori_flg = ?, zeigaku_keisan_flg = ?, shouhizeitaishou_minyuryoku_flg = ?, shisan = ?, uriage = ?, shiire = ?, keihi = ?, bumonbetsu_shori = ?, tokuteishiire = ?, zero_shouhizei = ?, shouhizei_bumon = ?, shouhizei_torihikisaki = ?, shouhizei_edaban = ?, shouhizei_project = ?, shouhizei_segment = ?, shouhizei_uf1 = ?, shouhizei_uf2 = ?, shouhizei_uf3 = ?, shouhizei_kouji = ?, shouhizei_koushu = ?, ukeshouhizei_uriage = ?, ukeshouhizei_shisan = ?, haraishouhizei_shiire = ?, haraishouhizei_keihi = ?, haraisyouhizei_shisan = ?, uriagezeigaku_keisan = ?, shiirezeigaku_keisan = ?, shiirezeigaku_keikasothi = ? ";
		return connection.update(sql, dto.kesn, dto.shiireZeigakuAnbunFlg, dto.shouhizeiKbn, dto.hasuuShoriFlg, dto.zeigakuKeisanFlg, dto.shouhizeitaishouMinyuryokuFlg, dto.shisan, dto.uriage, dto.shiire, dto.keihi, dto.bumonbetsuShori, dto.tokuteishiire, dto.zeroShouhizei, dto.shouhizeiBumon, dto.shouhizeiTorihikisaki, dto.shouhizeiEdaban, dto.shouhizeiProject, dto.shouhizeiSegment, dto.shouhizeiUf1, dto.shouhizeiUf2, dto.shouhizeiUf3, dto.shouhizeiKouji, dto.shouhizeiKoushu, dto.ukeshouhizeiUriage, dto.ukeshouhizeiShisan, dto.haraishouhizeiShiire, dto.haraishouhizeiKeihi, dto.haraisyouhizeiShisan, dto.uriagezeigakuKeisan, dto.shiirezeigakuKeisan, dto.shiirezeigakuKeikasothi, dto.shiireZeigakuAnbunFlg, dto.shouhizeiKbn, dto.hasuuShoriFlg, dto.zeigakuKeisanFlg, dto.shouhizeitaishouMinyuryokuFlg, dto.shisan, dto.uriage, dto.shiire, dto.keihi, dto.bumonbetsuShori, dto.tokuteishiire, dto.zeroShouhizei, dto.shouhizeiBumon, dto.shouhizeiTorihikisaki, dto.shouhizeiEdaban, dto.shouhizeiProject, dto.shouhizeiSegment, dto.shouhizeiUf1, dto.shouhizeiUf2, dto.shouhizeiUf3, dto.shouhizeiKouji, dto.shouhizeiKoushu, dto.ukeshouhizeiUriage, dto.ukeshouhizeiShisan, dto.haraishouhizeiShiire, dto.haraishouhizeiKeihi, dto.haraisyouhizeiShisan, dto.uriagezeigakuKeisan, dto.shiirezeigakuKeisan, dto.shiirezeigakuKeikasothi);
	}

	/**
	 * （期別）消費税設定から主キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @return 削除件数
	 */
	public int delete(int kesn) {
		final String sql = "DELETE FROM ki_shouhizei_setting " + this.whereSql;
		return connection.update(sql, kesn);
	}
	
	/**
	 * （期別）消費税設定を取得する。
	 * 現在時点のまたは引数の日付を含む期の消費税設定が取得できない場合は、一番新しい決算期の消費税設定を取得する。
	 * @param date 基準日
	 * @return 検索結果
	 */
	public KiShouhizeiSetting findByDate(Date date) {
		String sqlBase = "SELECT * FROM ki_shouhizei_setting s";
		boolean hasDate = date != null;
		String sqlRange = sqlBase + "  INNER JOIN ki_kesn k ON k.kesn = s.kesn WHERE " + (hasDate ? "?" : "current_date") + " BETWEEN from_date AND to_date";
		GMap ret = hasDate ? connection.find(sqlRange, date) : connection.find(sqlRange);
		if(null == ret) {
			final String sqlLatest = sqlBase + " ORDER BY kesn DESC LIMIT 1";
			ret = connection.find(sqlLatest);
		}
		return mapToDto(ret);
	}
}