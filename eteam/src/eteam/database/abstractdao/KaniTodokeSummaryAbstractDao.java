package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KaniTodokeSummary;

/**
 * 届出ジェネレータサマリに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KaniTodokeSummaryAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KaniTodokeSummary mapToDto(GMap map){
		return map == null ? null : new KaniTodokeSummary(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KaniTodokeSummary> mapToDto(List<GMap> mapList){
		List<KaniTodokeSummary> dtoList = new ArrayList<KaniTodokeSummary>();
		for (var map : mapList) {
			dtoList.add(new KaniTodokeSummary(map));
		}
		return dtoList;
	}
	
	/**
	 * 届出ジェネレータサマリのレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId) {
		return this.find(denpyouId) == null ? false : true;
	}
	
	/**
	 * 届出ジェネレータサマリから主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return 届出ジェネレータサマリDTO
	 */
	public KaniTodokeSummary find(String denpyouId) {
		final String sql = "SELECT * FROM kani_todoke_summary WHERE denpyou_id = ?";
		return mapToDto(connection.find(sql, denpyouId));
	}
	
	/**
	 * 届出ジェネレータサマリからレコードを全件取得 ※大量データ取得に注意
	 * @return List<届出ジェネレータサマリDTO>
	 */
	public List<KaniTodokeSummary> load() {
		final String sql = "SELECT * FROM kani_todoke_summary ORDER BY denpyou_id";
		return mapToDto(connection.load(sql));
	}

	/**
	* 届出ジェネレータサマリ登録
	* @param dto 届出ジェネレータサマリ
	* @return 件数
	*/
	public int insert(
		KaniTodokeSummary dto
	){
		final String sql =
				"INSERT INTO kani_todoke_summary "
			+ "VALUES(?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.denpyouId, dto.ringiKingaku, dto.shishutsuKingakuGoukei, dto.shuunyuuKingakuGoukei, dto.kenmei, dto.naiyou
					);
	}

	/**
	* 届出ジェネレータサマリ登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 届出ジェネレータサマリ
	* @return 件数
	*/
	public int upsert(
		KaniTodokeSummary dto
		 ){
		final String sql =
				"INSERT INTO kani_todoke_summary "
			+ "VALUES(?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT kani_todoke_summary_pkey "
			+ "DO UPDATE SET ringi_kingaku = ?, shishutsu_kingaku_goukei = ?, shuunyuu_kingaku_goukei = ?, kenmei = ?, naiyou = ? "
			+ "";
			return connection.update(sql,
				dto.denpyouId, dto.ringiKingaku, dto.shishutsuKingakuGoukei, dto.shuunyuuKingakuGoukei, dto.kenmei, dto.naiyou
				, dto.ringiKingaku, dto.shishutsuKingakuGoukei, dto.shuunyuuKingakuGoukei, dto.kenmei, dto.naiyou
				);
    }
	
	/**
	 * 届出ジェネレータサマリから主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int delete(String denpyouId){
		final String sql = "DELETE FROM kani_todoke_summary WHERE denpyou_id = ?";
		return connection.update(sql, denpyouId);
	}
}
