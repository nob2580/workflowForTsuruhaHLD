package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.GyoumuRoleKinouSeigyo;

/**
 * 業務ロール機能制御に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class GyoumuRoleKinouSeigyoAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected GyoumuRoleKinouSeigyo mapToDto(GMap map){
		return map == null ? null : new GyoumuRoleKinouSeigyo(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<GyoumuRoleKinouSeigyo> mapToDto(List<GMap> mapList){
		List<GyoumuRoleKinouSeigyo> dtoList = new ArrayList<GyoumuRoleKinouSeigyo>();
		for (var map : mapList) {
			dtoList.add(new GyoumuRoleKinouSeigyo(map));
		}
		return dtoList;
	}
	
	/**
	 * 業務ロール機能制御のレコード有無を判定
	 * @param gyoumuRoleId 業務ロールID
	 * @param gyoumuRoleKinouSeigyoCd 業務ロール機能制御コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String gyoumuRoleId, String gyoumuRoleKinouSeigyoCd) {
		return this.find(gyoumuRoleId, gyoumuRoleKinouSeigyoCd) == null ? false : true;
	}
	
	/**
	 * 業務ロール機能制御から主キー指定でレコードを取得
	 * @param gyoumuRoleId 業務ロールID
	 * @param gyoumuRoleKinouSeigyoCd 業務ロール機能制御コード
	 * @return 業務ロール機能制御DTO
	 */
	public GyoumuRoleKinouSeigyo find(String gyoumuRoleId, String gyoumuRoleKinouSeigyoCd) {
		final String sql = "SELECT * FROM gyoumu_role_kinou_seigyo WHERE gyoumu_role_id = ? AND gyoumu_role_kinou_seigyo_cd = ?";
		return mapToDto(connection.find(sql, gyoumuRoleId, gyoumuRoleKinouSeigyoCd));
	}
	
	/**
	 * 業務ロール機能制御からレコードを全件取得 ※大量データ取得に注意
	 * @return List<業務ロール機能制御DTO>
	 */
	public List<GyoumuRoleKinouSeigyo> load() {
		final String sql = "SELECT * FROM gyoumu_role_kinou_seigyo ORDER BY gyoumu_role_id, gyoumu_role_kinou_seigyo_cd";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 業務ロール機能制御から一部キー指定でレコードを取得
	 * @param gyoumuRoleId 業務ロールID
	 * @return List<業務ロール機能制御>DTO
	 */
	public List<GyoumuRoleKinouSeigyo> load(String gyoumuRoleId) {
		final String sql = "SELECT * FROM gyoumu_role_kinou_seigyo WHERE gyoumu_role_id = ? "
							+ "ORDER BY gyoumu_role_id, gyoumu_role_kinou_seigyo_cd";
		return mapToDto(connection.load(sql, gyoumuRoleId));
	}

	/**
	* 業務ロール機能制御登録
	* @param dto 業務ロール機能制御
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		GyoumuRoleKinouSeigyo dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO gyoumu_role_kinou_seigyo "
			+ "VALUES(?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.gyoumuRoleId, dto.gyoumuRoleKinouSeigyoCd, dto.gyoumuRoleKinouSeigyoKbn, koushinUserId, koushinUserId
					);
	}

	/**
	* 業務ロール機能制御の非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したGyoumuRoleKinouSeigyoの使用を前提
	* @param dto 業務ロール機能制御
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		GyoumuRoleKinouSeigyo dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE gyoumu_role_kinou_seigyo "
		    + "SET gyoumu_role_kinou_seigyo_kbn = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND gyoumu_role_id = ? AND gyoumu_role_kinou_seigyo_cd = ?";
			return connection.update(sql,
				dto.gyoumuRoleKinouSeigyoKbn, koushinUserId
				,dto.koushinTime, dto.gyoumuRoleId, dto.gyoumuRoleKinouSeigyoCd);
    }

	/**
	* 業務ロール機能制御登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 業務ロール機能制御
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		GyoumuRoleKinouSeigyo dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO gyoumu_role_kinou_seigyo "
			+ "VALUES(?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT gyoumu_role_kinou_seigyo_pkey "
			+ "DO UPDATE SET gyoumu_role_kinou_seigyo_kbn = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.gyoumuRoleId, dto.gyoumuRoleKinouSeigyoCd, dto.gyoumuRoleKinouSeigyoKbn, koushinUserId, koushinUserId
				, dto.gyoumuRoleKinouSeigyoKbn, koushinUserId
				);
    }
	
	/**
	 * 業務ロール機能制御から主キー指定でレコードを削除
	 * @param gyoumuRoleId 業務ロールID
	 * @param gyoumuRoleKinouSeigyoCd 業務ロール機能制御コード
	 * @return 削除件数
	 */
	public int delete(String gyoumuRoleId, String gyoumuRoleKinouSeigyoCd){
		final String sql = "DELETE FROM gyoumu_role_kinou_seigyo WHERE gyoumu_role_id = ? AND gyoumu_role_kinou_seigyo_cd = ?";
		return connection.update(sql, gyoumuRoleId, gyoumuRoleKinouSeigyoCd);
	}
	
	/**
	 * 業務ロール機能制御から一部キー指定でレコードを削除
	 * @param gyoumuRoleId 業務ロールID
	 * @return 削除件数
	 */
	public int delete(String gyoumuRoleId) {
		final String sql = "DELETE FROM gyoumu_role_kinou_seigyo WHERE gyoumu_role_id = ? ";
		return connection.update(sql, gyoumuRoleId);
	}
}
