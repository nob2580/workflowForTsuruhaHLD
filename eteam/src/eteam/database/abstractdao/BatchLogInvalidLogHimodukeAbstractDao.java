package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.BatchLogInvalidLogHimoduke;

/**
 * バッチログ不良ログ紐づけに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class BatchLogInvalidLogHimodukeAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected BatchLogInvalidLogHimoduke mapToDto(GMap map){
		return map == null ? null : new BatchLogInvalidLogHimoduke(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<BatchLogInvalidLogHimoduke> mapToDto(List<GMap> mapList){
		List<BatchLogInvalidLogHimoduke> dtoList = new ArrayList<BatchLogInvalidLogHimoduke>();
		for (var map : mapList) {
			dtoList.add(new BatchLogInvalidLogHimoduke(map));
		}
		return dtoList;
	}
	
	/**
	 * バッチログ不良ログ紐づけのレコード有無を判定
	 * @param serialNo シリアル番号
	 * @param edaban 枝番
	 * @return true:exist false:not exist
	 */
	public boolean exists(long serialNo, int edaban) {
		return this.find(serialNo, edaban) == null ? false : true;
	}
	
	/**
	 * バッチログ不良ログ紐づけから主キー指定でレコードを取得
	 * @param serialNo シリアル番号
	 * @param edaban 枝番
	 * @return バッチログ不良ログ紐づけDTO
	 */
	public BatchLogInvalidLogHimoduke find(long serialNo, int edaban) {
		final String sql = "SELECT * FROM batch_log_invalid_log_himoduke WHERE serial_no = ? AND edaban = ?";
		return mapToDto(connection.find(sql, serialNo, edaban));
	}
	
	/**
	 * バッチログ不良ログ紐づけからレコードを全件取得 ※大量データ取得に注意
	 * @return List<バッチログ不良ログ紐づけDTO>
	 */
	public List<BatchLogInvalidLogHimoduke> load() {
		final String sql = "SELECT * FROM batch_log_invalid_log_himoduke ORDER BY serial_no, edaban";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * バッチログ不良ログ紐づけから一部キー指定でレコードを取得
	 * @param serialNo シリアル番号
	 * @return List<バッチログ不良ログ紐づけ>DTO
	 */
	public List<BatchLogInvalidLogHimoduke> load(long serialNo) {
		final String sql = "SELECT * FROM batch_log_invalid_log_himoduke WHERE serial_no = ? "
							+ "ORDER BY serial_no, edaban";
		return mapToDto(connection.load(sql, serialNo));
	}

	/**
	* バッチログ不良ログ紐づけ登録
	* @param dto バッチログ不良ログ紐づけ
	* @return 件数
	*/
	public int insert(
		BatchLogInvalidLogHimoduke dto
	){
		final String sql =
				"INSERT INTO batch_log_invalid_log_himoduke "
			+ "VALUES(?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.serialNo, dto.edaban, dto.fileName
					);
	}

	/**
	* バッチログ不良ログ紐づけ登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto バッチログ不良ログ紐づけ
	* @return 件数
	*/
	public int upsert(
		BatchLogInvalidLogHimoduke dto
		 ){
		final String sql =
				"INSERT INTO batch_log_invalid_log_himoduke "
			+ "VALUES(?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT batch_log_invalid_log_himoduke_pkey "
			+ "DO UPDATE SET file_name = ? "
			+ "";
			return connection.update(sql,
				dto.serialNo, dto.edaban, dto.fileName
				, dto.fileName
				);
    }
	
	/**
	 * バッチログ不良ログ紐づけから主キー指定でレコードを削除
	 * @param serialNo シリアル番号
	 * @param edaban 枝番
	 * @return 削除件数
	 */
	public int delete(long serialNo, int edaban){
		final String sql = "DELETE FROM batch_log_invalid_log_himoduke WHERE serial_no = ? AND edaban = ?";
		return connection.update(sql, serialNo, edaban);
	}
	
	/**
	 * バッチログ不良ログ紐づけから一部キー指定でレコードを削除
	 * @param serialNo シリアル番号
	 * @return 削除件数
	 */
	public int delete(long serialNo) {
		final String sql = "DELETE FROM batch_log_invalid_log_himoduke WHERE serial_no = ? ";
		return connection.update(sql, serialNo);
	}
}
