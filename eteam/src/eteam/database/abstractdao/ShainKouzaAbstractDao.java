package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.ShainKouza;

/**
 * 社員口座に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class ShainKouzaAbstractDao extends EteamAbstractLogic {

	/**
	 * insert定型部
	 */
	protected final String insertSql = "INSERT INTO shain_kouza("
			+ " shain_no, saki_kinyuukikan_cd, saki_ginkou_shiten_cd, saki_yokin_shabetsu, saki_kouza_bangou, saki_kouza_meigi_kanji, saki_kouza_meigi_kana, moto_kinyuukikan_cd, moto_kinyuukikan_shiten_cd, moto_yokinshubetsu, moto_kouza_bangou, zaimu_edaban_cd)"
			+ " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected ShainKouza mapToDto(GMap map){
		return map == null ? null : new ShainKouza(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<ShainKouza> mapToDto(List<GMap> mapList){
		List<ShainKouza> dtoList = new ArrayList<ShainKouza>();
		for (var map : mapList) {
			dtoList.add(new ShainKouza(map));
		}
		return dtoList;
	}

	/**
	 * 社員口座のレコード有無を判定
	 * @param shainNo 社員番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String shainNo) {
		return this.find(shainNo) == null ? false : true;
	}

	/**
	 * 社員口座から主キー指定でレコードを取得
	 * @param shainNo 社員番号
	 * @return 社員口座DTO
	 */
	public ShainKouza find(String shainNo) {
		final String sql = "SELECT * FROM shain_kouza WHERE shain_no = ?";
		return mapToDto(connection.find(sql, shainNo));
	}

	/**
	 * 社員口座からレコードを全件取得 ※大量データ取得に注意
	 * @return List<社員口座DTO>
	 */
	public List<ShainKouza> load() {
		final String sql = "SELECT * FROM shain_kouza ORDER BY shain_no";
		return mapToDto(connection.load(sql));
	}

	/**
	* 社員口座登録
	* @param dto 社員口座
	* @return 件数
	*/
	public int insert(
		ShainKouza dto
	){
			return connection.update(this.insertSql,
					dto.shainNo, dto.sakiKinyuukikanCd, dto.sakiGinkouShitenCd, dto.sakiYokinShabetsu, dto.sakiKouzaBangou, dto.sakiKouzaMeigiKanji, dto.sakiKouzaMeigiKana, dto.motoKinyuukikanCd, dto.motoKinyuukikanShitenCd, dto.motoYokinshubetsu, dto.motoKouzaBangou, dto.zaimuEdabanCd
					);
	}

	/**
	* 社員口座登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 社員口座
	* @return 件数
	*/
	public int upsert(
		ShainKouza dto
		 ){
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT shain_kouza_pkey "
			+ "DO UPDATE SET saki_kinyuukikan_cd = ?, saki_ginkou_shiten_cd = ?, saki_yokin_shabetsu = ?, saki_kouza_bangou = ?, saki_kouza_meigi_kanji = ?, saki_kouza_meigi_kana = ?, moto_kinyuukikan_cd = ?, moto_kinyuukikan_shiten_cd = ?, moto_yokinshubetsu = ?, moto_kouza_bangou = ?, zaimu_edaban_cd = ? "
			+ "";
			return connection.update(sql,
				dto.shainNo, dto.sakiKinyuukikanCd, dto.sakiGinkouShitenCd, dto.sakiYokinShabetsu, dto.sakiKouzaBangou, dto.sakiKouzaMeigiKanji, dto.sakiKouzaMeigiKana, dto.motoKinyuukikanCd, dto.motoKinyuukikanShitenCd, dto.motoYokinshubetsu, dto.motoKouzaBangou, dto.zaimuEdabanCd
				, dto.sakiKinyuukikanCd, dto.sakiGinkouShitenCd, dto.sakiYokinShabetsu, dto.sakiKouzaBangou, dto.sakiKouzaMeigiKanji, dto.sakiKouzaMeigiKana, dto.motoKinyuukikanCd, dto.motoKinyuukikanShitenCd, dto.motoYokinshubetsu, dto.motoKouzaBangou, dto.zaimuEdabanCd
				);
    }

	/**
	 * 社員口座から主キー指定でレコードを削除
	 * @param shainNo 社員番号
	 * @return 削除件数
	 */
	public int delete(String shainNo){
		final String sql = "DELETE FROM shain_kouza WHERE shain_no = ?";
		return connection.update(sql, shainNo);
	}
}
