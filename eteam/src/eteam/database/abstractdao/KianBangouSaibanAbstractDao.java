package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KianBangouSaiban;

/**
 * 起案番号採番に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KianBangouSaibanAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KianBangouSaiban mapToDto(GMap map){
		return map == null ? null : new KianBangouSaiban(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KianBangouSaiban> mapToDto(List<GMap> mapList){
		List<KianBangouSaiban> dtoList = new ArrayList<KianBangouSaiban>();
		for (var map : mapList) {
			dtoList.add(new KianBangouSaiban(map));
		}
		return dtoList;
	}
	
	/**
	 * 起案番号採番のレコード有無を判定
	 * @param bumonCd 部門コード
	 * @param nendo 年度
	 * @param ryakugou 略号
	 * @param kianBangouFrom 開始起案番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String bumonCd, String nendo, String ryakugou, int kianBangouFrom) {
		return this.find(bumonCd, nendo, ryakugou, kianBangouFrom) == null ? false : true;
	}
	
	/**
	 * 起案番号採番から主キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @param nendo 年度
	 * @param ryakugou 略号
	 * @param kianBangouFrom 開始起案番号
	 * @return 起案番号採番DTO
	 */
	public KianBangouSaiban find(String bumonCd, String nendo, String ryakugou, int kianBangouFrom) {
		final String sql = "SELECT * FROM kian_bangou_saiban WHERE bumon_cd = ? AND nendo = ? AND ryakugou = ? AND kian_bangou_from = ?";
		return mapToDto(connection.find(sql, bumonCd, nendo, ryakugou, kianBangouFrom));
	}
	
	/**
	 * 起案番号採番からレコードを全件取得 ※大量データ取得に注意
	 * @return List<起案番号採番DTO>
	 */
	public List<KianBangouSaiban> load() {
		final String sql = "SELECT * FROM kian_bangou_saiban ORDER BY bumon_cd, nendo, ryakugou, kian_bangou_from";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 起案番号採番から一部キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @return List<起案番号採番>DTO
	 */
	public List<KianBangouSaiban> load(String bumonCd) {
		final String sql = "SELECT * FROM kian_bangou_saiban WHERE bumon_cd = ? "
							+ "ORDER BY bumon_cd, nendo, ryakugou, kian_bangou_from";
		return mapToDto(connection.load(sql, bumonCd));
	}
	
	/**
	 * 起案番号採番から一部キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @param nendo 年度
	 * @return List<起案番号採番>DTO
	 */
	public List<KianBangouSaiban> load(String bumonCd, String nendo) {
		final String sql = "SELECT * FROM kian_bangou_saiban WHERE bumon_cd = ?  AND nendo = ? "
							+ "ORDER BY bumon_cd, nendo, ryakugou, kian_bangou_from";
		return mapToDto(connection.load(sql, bumonCd, nendo));
	}
	
	/**
	 * 起案番号採番から一部キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @param nendo 年度
	 * @param ryakugou 略号
	 * @return List<起案番号採番>DTO
	 */
	public List<KianBangouSaiban> load(String bumonCd, String nendo, String ryakugou) {
		final String sql = "SELECT * FROM kian_bangou_saiban WHERE bumon_cd = ?  AND nendo = ?  AND ryakugou = ? "
							+ "ORDER BY bumon_cd, nendo, ryakugou, kian_bangou_from";
		return mapToDto(connection.load(sql, bumonCd, nendo, ryakugou));
	}

	/**
	* 起案番号採番登録
	* @param dto 起案番号採番
	* @return 件数
	*/
	public int insert(
		KianBangouSaiban dto
	){
		final String sql =
				"INSERT INTO kian_bangou_saiban "
			+ "VALUES(?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.bumonCd, dto.nendo, dto.ryakugou, dto.kianBangouFrom, dto.kianBangouLast
					);
	}

	/**
	* 起案番号採番登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 起案番号採番
	* @return 件数
	*/
	public int upsert(
		KianBangouSaiban dto
		 ){
		final String sql =
				"INSERT INTO kian_bangou_saiban "
			+ "VALUES(?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT kian_bangou_saiban_pkey "
			+ "DO UPDATE SET kian_bangou_last = ? "
			+ "";
			return connection.update(sql,
				dto.bumonCd, dto.nendo, dto.ryakugou, dto.kianBangouFrom, dto.kianBangouLast
				, dto.kianBangouLast
				);
    }
	
	/**
	 * 起案番号採番から主キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @param nendo 年度
	 * @param ryakugou 略号
	 * @param kianBangouFrom 開始起案番号
	 * @return 削除件数
	 */
	public int delete(String bumonCd, String nendo, String ryakugou, int kianBangouFrom){
		final String sql = "DELETE FROM kian_bangou_saiban WHERE bumon_cd = ? AND nendo = ? AND ryakugou = ? AND kian_bangou_from = ?";
		return connection.update(sql, bumonCd, nendo, ryakugou, kianBangouFrom);
	}
	
	/**
	 * 起案番号採番から一部キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @return 削除件数
	 */
	public int delete(String bumonCd) {
		final String sql = "DELETE FROM kian_bangou_saiban WHERE bumon_cd = ? ";
		return connection.update(sql, bumonCd);
	}
	
	/**
	 * 起案番号採番から一部キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @param nendo 年度
	 * @return 削除件数
	 */
	public int delete(String bumonCd, String nendo) {
		final String sql = "DELETE FROM kian_bangou_saiban WHERE bumon_cd = ?  AND nendo = ? ";
		return connection.update(sql, bumonCd, nendo);
	}
	
	/**
	 * 起案番号採番から一部キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @param nendo 年度
	 * @param ryakugou 略号
	 * @return 削除件数
	 */
	public int delete(String bumonCd, String nendo, String ryakugou) {
		final String sql = "DELETE FROM kian_bangou_saiban WHERE bumon_cd = ?  AND nendo = ?  AND ryakugou = ? ";
		return connection.update(sql, bumonCd, nendo, ryakugou);
	}
}
