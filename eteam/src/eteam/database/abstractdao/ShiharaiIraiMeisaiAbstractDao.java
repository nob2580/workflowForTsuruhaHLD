package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.ShiharaiIraiMeisai;

/**
 * 支払依頼明細に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class ShiharaiIraiMeisaiAbstractDao extends EteamAbstractLogic {

	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO shiharai_irai_meisai (denpyou_id, denpyou_edano, shiwake_edano, torihiki_name, tekiyou, shiharai_kingaku, kari_futan_bumon_cd, kari_futan_bumon_name, kari_kamoku_cd, kari_kamoku_name, kari_kamoku_edaban_cd, kari_kamoku_edaban_name, kari_kazei_kbn, zeiritsu, keigen_zeiritsu_kbn, uf1_cd, uf1_name_ryakushiki, uf2_cd, uf2_name_ryakushiki, uf3_cd, uf3_name_ryakushiki, uf4_cd, uf4_name_ryakushiki, uf5_cd, uf5_name_ryakushiki, uf6_cd, uf6_name_ryakushiki, uf7_cd, uf7_name_ryakushiki, uf8_cd, uf8_name_ryakushiki, uf9_cd, uf9_name_ryakushiki, uf10_cd, uf10_name_ryakushiki, project_cd, project_name, segment_cd, segment_name_ryakushiki, tekiyou_cd, touroku_user_id, touroku_time, koushin_user_id, koushin_time, bunri_kbn, kari_shiire_kbn, zeinuki_kingaku, shouhizeigaku) VALUES "
			+ "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp, ?, ?, ?, ?)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE denpyou_id = ? AND denpyou_edano = ?";

	/**
	 * @param map GMap
	 * @return dto (レコードが存在しなければNull)
	 */
	protected ShiharaiIraiMeisai mapToDto(GMap map) {
		return map == null ? null : new ShiharaiIraiMeisai(map);
	}

	/**
	 * @param mapList 検索結果GMap
	 * @return dtoList
	 */
	protected List<ShiharaiIraiMeisai> mapToDto(List<GMap> mapList) {
		List<ShiharaiIraiMeisai> dtoList = new ArrayList<ShiharaiIraiMeisai>();
		for (var map : mapList) {
			dtoList.add(new ShiharaiIraiMeisai(map));
		}
		return dtoList;
	}

	/**
	 * 支払依頼明細のレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @param denpyouEdano 伝票枝番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId, int denpyouEdano) {
		return this.find(denpyouId, denpyouEdano) != null;
	}

	/**
	 * 支払依頼明細から主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @param denpyouEdano 伝票枝番号
	 * @return 支払依頼明細DTO
	 */
	public ShiharaiIraiMeisai find(String denpyouId, int denpyouEdano) {
		final String sql = "SELECT * FROM shiharai_irai_meisai " + this.whereSql;
		return mapToDto(connection.find(sql, denpyouId, denpyouEdano));
	}

	/**
	 * 支払依頼明細からレコードを全件取得 ※大量データ取得に注意
	 * @return List<支払依頼明細DTO>
	 */
	public List<ShiharaiIraiMeisai> load() {
		final String sql = "SELECT * FROM shiharai_irai_meisai  ORDER BY denpyou_id, denpyou_edano";
		return mapToDto(connection.load(sql));
	}

	/**
	 * 支払依頼明細から一部キー（伝票ID）指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return List<支払依頼明細>DTO
	 */
	public List<ShiharaiIraiMeisai> loadByDenpyouId(String denpyouId) {
		final String sql = "SELECT * FROM shiharai_irai_meisai WHERE denpyou_id = ? "
							+ "ORDER BY denpyou_id, denpyou_edano";
		return mapToDto(connection.load(sql, denpyouId));
	}

	/**
	 * 支払依頼明細登録
	 * @param dto 支払依頼明細
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int insert(ShiharaiIraiMeisai dto, String koushinUserId) {
		return connection.update(this.insertSql, dto.denpyouId, dto.denpyouEdano, dto.shiwakeEdano, dto.torihikiName, dto.tekiyou, dto.shiharaiKingaku, dto.kariFutanBumonCd, dto.kariFutanBumonName, dto.kariKamokuCd, dto.kariKamokuName, dto.kariKamokuEdabanCd, dto.kariKamokuEdabanName, dto.kariKazeiKbn, dto.zeiritsu, dto.keigenZeiritsuKbn, dto.uf1Cd, dto.uf1NameRyakushiki, dto.uf2Cd, dto.uf2NameRyakushiki, dto.uf3Cd, dto.uf3NameRyakushiki, dto.uf4Cd, dto.uf4NameRyakushiki, dto.uf5Cd, dto.uf5NameRyakushiki, dto.uf6Cd, dto.uf6NameRyakushiki, dto.uf7Cd, dto.uf7NameRyakushiki, dto.uf8Cd, dto.uf8NameRyakushiki, dto.uf9Cd, dto.uf9NameRyakushiki, dto.uf10Cd, dto.uf10NameRyakushiki, dto.projectCd, dto.projectName, dto.segmentCd, dto.segmentNameRyakushiki, dto.tekiyouCd, koushinUserId, koushinUserId, dto.bunriKbn, dto.kariShiireKbn, dto.zeinukiKingaku, dto.shouhizeigaku);
	}

	/**
	 * 支払依頼明細更新
	 * @param dto 支払依頼明細
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int update(ShiharaiIraiMeisai dto, String koushinUserId) {
		final String sql = "UPDATE shiharai_irai_meisai SET  shiwake_edano = ?, torihiki_name = ?, tekiyou = ?, shiharai_kingaku = ?, kari_futan_bumon_cd = ?, kari_futan_bumon_name = ?, kari_kamoku_cd = ?, kari_kamoku_name = ?, kari_kamoku_edaban_cd = ?, kari_kamoku_edaban_name = ?, kari_kazei_kbn = ?, zeiritsu = ?, keigen_zeiritsu_kbn = ?, uf1_cd = ?, uf1_name_ryakushiki = ?, uf2_cd = ?, uf2_name_ryakushiki = ?, uf3_cd = ?, uf3_name_ryakushiki = ?, uf4_cd = ?, uf4_name_ryakushiki = ?, uf5_cd = ?, uf5_name_ryakushiki = ?, uf6_cd = ?, uf6_name_ryakushiki = ?, uf7_cd = ?, uf7_name_ryakushiki = ?, uf8_cd = ?, uf8_name_ryakushiki = ?, uf9_cd = ?, uf9_name_ryakushiki = ?, uf10_cd = ?, uf10_name_ryakushiki = ?, project_cd = ?, project_name = ?, segment_cd = ?, segment_name_ryakushiki = ?, tekiyou_cd = ?, koushin_user_id = ?, koushin_time = current_timestamp, bunri_kbn = ?, kari_shiire_kbn = ?, zeinuki_kingaku = ?, shouhizeigaku = ? " + this.whereSql;
		return connection.update(sql, dto.shiwakeEdano, dto.torihikiName, dto.tekiyou, dto.shiharaiKingaku, dto.kariFutanBumonCd, dto.kariFutanBumonName, dto.kariKamokuCd, dto.kariKamokuName, dto.kariKamokuEdabanCd, dto.kariKamokuEdabanName, dto.kariKazeiKbn, dto.zeiritsu, dto.keigenZeiritsuKbn, dto.uf1Cd, dto.uf1NameRyakushiki, dto.uf2Cd, dto.uf2NameRyakushiki, dto.uf3Cd, dto.uf3NameRyakushiki, dto.uf4Cd, dto.uf4NameRyakushiki, dto.uf5Cd, dto.uf5NameRyakushiki, dto.uf6Cd, dto.uf6NameRyakushiki, dto.uf7Cd, dto.uf7NameRyakushiki, dto.uf8Cd, dto.uf8NameRyakushiki, dto.uf9Cd, dto.uf9NameRyakushiki, dto.uf10Cd, dto.uf10NameRyakushiki, dto.projectCd, dto.projectName, dto.segmentCd, dto.segmentNameRyakushiki, dto.tekiyouCd, koushinUserId, dto.bunriKbn, dto.kariShiireKbn, dto.zeinukiKingaku, dto.shouhizeigaku, dto.denpyouId, dto.denpyouEdano);
	}

	/**
	 * 支払依頼明細登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto 支払依頼明細
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int upsert(ShiharaiIraiMeisai dto, String koushinUserId) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT shiharai_irai_meisai_pkey "
			+ "DO UPDATE SET  shiwake_edano = ?, torihiki_name = ?, tekiyou = ?, shiharai_kingaku = ?, kari_futan_bumon_cd = ?, kari_futan_bumon_name = ?, kari_kamoku_cd = ?, kari_kamoku_name = ?, kari_kamoku_edaban_cd = ?, kari_kamoku_edaban_name = ?, kari_kazei_kbn = ?, zeiritsu = ?, keigen_zeiritsu_kbn = ?, uf1_cd = ?, uf1_name_ryakushiki = ?, uf2_cd = ?, uf2_name_ryakushiki = ?, uf3_cd = ?, uf3_name_ryakushiki = ?, uf4_cd = ?, uf4_name_ryakushiki = ?, uf5_cd = ?, uf5_name_ryakushiki = ?, uf6_cd = ?, uf6_name_ryakushiki = ?, uf7_cd = ?, uf7_name_ryakushiki = ?, uf8_cd = ?, uf8_name_ryakushiki = ?, uf9_cd = ?, uf9_name_ryakushiki = ?, uf10_cd = ?, uf10_name_ryakushiki = ?, project_cd = ?, project_name = ?, segment_cd = ?, segment_name_ryakushiki = ?, tekiyou_cd = ?, koushin_user_id = ?, koushin_time = current_timestamp, bunri_kbn = ?, kari_shiire_kbn = ?, zeinuki_kingaku = ?, shouhizeigaku = ? ";
		return connection.update(sql, dto.denpyouId, dto.denpyouEdano, dto.shiwakeEdano, dto.torihikiName, dto.tekiyou, dto.shiharaiKingaku, dto.kariFutanBumonCd, dto.kariFutanBumonName, dto.kariKamokuCd, dto.kariKamokuName, dto.kariKamokuEdabanCd, dto.kariKamokuEdabanName, dto.kariKazeiKbn, dto.zeiritsu, dto.keigenZeiritsuKbn, dto.uf1Cd, dto.uf1NameRyakushiki, dto.uf2Cd, dto.uf2NameRyakushiki, dto.uf3Cd, dto.uf3NameRyakushiki, dto.uf4Cd, dto.uf4NameRyakushiki, dto.uf5Cd, dto.uf5NameRyakushiki, dto.uf6Cd, dto.uf6NameRyakushiki, dto.uf7Cd, dto.uf7NameRyakushiki, dto.uf8Cd, dto.uf8NameRyakushiki, dto.uf9Cd, dto.uf9NameRyakushiki, dto.uf10Cd, dto.uf10NameRyakushiki, dto.projectCd, dto.projectName, dto.segmentCd, dto.segmentNameRyakushiki, dto.tekiyouCd, koushinUserId, koushinUserId, dto.bunriKbn, dto.kariShiireKbn, dto.zeinukiKingaku, dto.shouhizeigaku, dto.shiwakeEdano, dto.torihikiName, dto.tekiyou, dto.shiharaiKingaku, dto.kariFutanBumonCd, dto.kariFutanBumonName, dto.kariKamokuCd, dto.kariKamokuName, dto.kariKamokuEdabanCd, dto.kariKamokuEdabanName, dto.kariKazeiKbn, dto.zeiritsu, dto.keigenZeiritsuKbn, dto.uf1Cd, dto.uf1NameRyakushiki, dto.uf2Cd, dto.uf2NameRyakushiki, dto.uf3Cd, dto.uf3NameRyakushiki, dto.uf4Cd, dto.uf4NameRyakushiki, dto.uf5Cd, dto.uf5NameRyakushiki, dto.uf6Cd, dto.uf6NameRyakushiki, dto.uf7Cd, dto.uf7NameRyakushiki, dto.uf8Cd, dto.uf8NameRyakushiki, dto.uf9Cd, dto.uf9NameRyakushiki, dto.uf10Cd, dto.uf10NameRyakushiki, dto.projectCd, dto.projectName, dto.segmentCd, dto.segmentNameRyakushiki, dto.tekiyouCd, koushinUserId, dto.bunriKbn, dto.kariShiireKbn, dto.zeinukiKingaku, dto.shouhizeigaku);
	}

	/**
	 * 支払依頼明細から主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @param denpyouEdano 伝票枝番号
	 * @return 削除件数
	 */
	public int delete(String denpyouId, int denpyouEdano) {
		final String sql = "DELETE FROM shiharai_irai_meisai " + this.whereSql;
		return connection.update(sql, denpyouId, denpyouEdano);
	}
	
	/**
	 * 支払依頼明細から一部キー（伝票ID）指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int deleteByDenpyouId(String denpyouId) {
		final String sql = "DELETE FROM shiharai_irai_meisai WHERE denpyou_id = ? ";
		return connection.update(sql, denpyouId);
	}
}
