package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.SaibanKanri;

/**
 * 採番管理に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class SaibanKanriAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected SaibanKanri mapToDto(GMap map){
		return map == null ? null : new SaibanKanri(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<SaibanKanri> mapToDto(List<GMap> mapList){
		List<SaibanKanri> dtoList = new ArrayList<SaibanKanri>();
		for (var map : mapList) {
			dtoList.add(new SaibanKanri(map));
		}
		return dtoList;
	}
	
	/**
	 * 採番管理のレコード有無を判定
	 * @param saibanKbn 採番区分
	 * @return true:exist false:not exist
	 */
	public boolean exists(String saibanKbn) {
		return this.find(saibanKbn) == null ? false : true;
	}
	
	/**
	 * 採番管理から主キー指定でレコードを取得
	 * @param saibanKbn 採番区分
	 * @return 採番管理DTO
	 */
	public SaibanKanri find(String saibanKbn) {
		final String sql = "SELECT * FROM saiban_kanri WHERE saiban_kbn = ?";
		return mapToDto(connection.find(sql, saibanKbn));
	}
	
	/**
	 * 採番管理からレコードを全件取得 ※大量データ取得に注意
	 * @return List<採番管理DTO>
	 */
	public List<SaibanKanri> load() {
		final String sql = "SELECT * FROM saiban_kanri ORDER BY saiban_kbn";
		return mapToDto(connection.load(sql));
	}

	/**
	* 採番管理登録
	* @param dto 採番管理
	* @return 件数
	*/
	public int insert(
		SaibanKanri dto
	){
		final String sql =
				"INSERT INTO saiban_kanri "
			+ "VALUES(?, ? "
			+ ")";
			return connection.update(sql,
					dto.saibanKbn, dto.sequenceVal
					);
	}

	/**
	* 採番管理登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 採番管理
	* @return 件数
	*/
	public int upsert(
		SaibanKanri dto
		 ){
		final String sql =
				"INSERT INTO saiban_kanri "
			+ "VALUES(?, ? "
			+ ") ON CONFLICT ON CONSTRAINT saiban_kanri_pkey "
			+ "DO UPDATE SET sequence_val = ? "
			+ "";
			return connection.update(sql,
				dto.saibanKbn, dto.sequenceVal
				, dto.sequenceVal
				);
    }
	
	/**
	 * 採番管理から主キー指定でレコードを削除
	 * @param saibanKbn 採番区分
	 * @return 削除件数
	 */
	public int delete(String saibanKbn){
		final String sql = "DELETE FROM saiban_kanri WHERE saiban_kbn = ?";
		return connection.update(sql, saibanKbn);
	}
}
