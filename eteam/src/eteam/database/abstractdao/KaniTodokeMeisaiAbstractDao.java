package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KaniTodokeMeisai;

/**
 * 届出ジェネレータ明細に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KaniTodokeMeisaiAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KaniTodokeMeisai mapToDto(GMap map){
		return map == null ? null : new KaniTodokeMeisai(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KaniTodokeMeisai> mapToDto(List<GMap> mapList){
		List<KaniTodokeMeisai> dtoList = new ArrayList<KaniTodokeMeisai>();
		for (var map : mapList) {
			dtoList.add(new KaniTodokeMeisai(map));
		}
		return dtoList;
	}
	
	/**
	 * 届出ジェネレータ明細のレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @param denpyouEdano 伝票枝番号
	 * @param itemName 項目名
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId, int denpyouEdano, String itemName) {
		return this.find(denpyouId, denpyouEdano, itemName) == null ? false : true;
	}
	
	/**
	 * 届出ジェネレータ明細から主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @param denpyouEdano 伝票枝番号
	 * @param itemName 項目名
	 * @return 届出ジェネレータ明細DTO
	 */
	public KaniTodokeMeisai find(String denpyouId, int denpyouEdano, String itemName) {
		final String sql = "SELECT * FROM kani_todoke_meisai WHERE denpyou_id = ? AND denpyou_edano = ? AND item_name = ?";
		return mapToDto(connection.find(sql, denpyouId, denpyouEdano, itemName));
	}
	
	/**
	 * 届出ジェネレータ明細からレコードを全件取得 ※大量データ取得に注意
	 * @return List<届出ジェネレータ明細DTO>
	 */
	public List<KaniTodokeMeisai> load() {
		final String sql = "SELECT * FROM kani_todoke_meisai ORDER BY denpyou_id, denpyou_edano, item_name";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 届出ジェネレータ明細から一部キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return List<届出ジェネレータ明細>DTO
	 */
	public List<KaniTodokeMeisai> load(String denpyouId) {
		final String sql = "SELECT * FROM kani_todoke_meisai WHERE denpyou_id = ? "
							+ "ORDER BY denpyou_id, denpyou_edano, item_name";
		return mapToDto(connection.load(sql, denpyouId));
	}
	
	/**
	 * 届出ジェネレータ明細から一部キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @param denpyouEdano 伝票枝番号
	 * @return List<届出ジェネレータ明細>DTO
	 */
	public List<KaniTodokeMeisai> load(String denpyouId, int denpyouEdano) {
		final String sql = "SELECT * FROM kani_todoke_meisai WHERE denpyou_id = ?  AND denpyou_edano = ? "
							+ "ORDER BY denpyou_id, denpyou_edano, item_name";
		return mapToDto(connection.load(sql, denpyouId, denpyouEdano));
	}

	/**
	* 届出ジェネレータ明細登録
	* @param dto 届出ジェネレータ明細
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		KaniTodokeMeisai dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO kani_todoke_meisai "
			+ "VALUES(?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.denpyouId, dto.denpyouEdano, dto.itemName, dto.value1, dto.value2, koushinUserId, koushinUserId
					);
	}

	/**
	* 届出ジェネレータ明細の非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したKaniTodokeMeisaiの使用を前提
	* @param dto 届出ジェネレータ明細
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		KaniTodokeMeisai dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE kani_todoke_meisai "
		    + "SET value1 = ?, value2 = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND denpyou_id = ? AND denpyou_edano = ? AND item_name = ?";
			return connection.update(sql,
				dto.value1, dto.value2, koushinUserId
				,dto.koushinTime, dto.denpyouId, dto.denpyouEdano, dto.itemName);
    }

	/**
	* 届出ジェネレータ明細登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 届出ジェネレータ明細
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		KaniTodokeMeisai dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO kani_todoke_meisai "
			+ "VALUES(?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT kani_todoke_meisai_pkey "
			+ "DO UPDATE SET value1 = ?, value2 = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.denpyouId, dto.denpyouEdano, dto.itemName, dto.value1, dto.value2, koushinUserId, koushinUserId
				, dto.value1, dto.value2, koushinUserId
				);
    }
	
	/**
	 * 届出ジェネレータ明細から主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @param denpyouEdano 伝票枝番号
	 * @param itemName 項目名
	 * @return 削除件数
	 */
	public int delete(String denpyouId, int denpyouEdano, String itemName){
		final String sql = "DELETE FROM kani_todoke_meisai WHERE denpyou_id = ? AND denpyou_edano = ? AND item_name = ?";
		return connection.update(sql, denpyouId, denpyouEdano, itemName);
	}
	
	/**
	 * 届出ジェネレータ明細から一部キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int delete(String denpyouId) {
		final String sql = "DELETE FROM kani_todoke_meisai WHERE denpyou_id = ? ";
		return connection.update(sql, denpyouId);
	}
	
	/**
	 * 届出ジェネレータ明細から一部キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @param denpyouEdano 伝票枝番号
	 * @return 削除件数
	 */
	public int delete(String denpyouId, int denpyouEdano) {
		final String sql = "DELETE FROM kani_todoke_meisai WHERE denpyou_id = ?  AND denpyou_edano = ? ";
		return connection.update(sql, denpyouId, denpyouEdano);
	}
}
