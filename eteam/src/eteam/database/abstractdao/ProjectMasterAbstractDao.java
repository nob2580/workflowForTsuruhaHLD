package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.ProjectMaster;

/**
 * プロジェクトマスターに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class ProjectMasterAbstractDao extends EteamAbstractLogic {

	/**
	 * insert定型部
	 */
	protected final String insertSql = "INSERT INTO project_master("
			+ "	 project_cd, project_name, shuuryou_kbn)"
			+ "	 VALUES (?, ?, ?);";

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected ProjectMaster mapToDto(GMap map){
		return map == null ? null : new ProjectMaster(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<ProjectMaster> mapToDto(List<GMap> mapList){
		List<ProjectMaster> dtoList = new ArrayList<ProjectMaster>();
		for (var map : mapList) {
			dtoList.add(new ProjectMaster(map));
		}
		return dtoList;
	}

	/**
	 * プロジェクトマスターのレコード有無を判定
	 * @param projectCd プロジェクトコード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String projectCd) {
		return this.find(projectCd) == null ? false : true;
	}

	/**
	 * プロジェクトマスターから主キー指定でレコードを取得
	 * @param projectCd プロジェクトコード
	 * @return プロジェクトマスターDTO
	 */
	public ProjectMaster find(String projectCd) {
		final String sql = "SELECT * FROM project_master WHERE project_cd = ?";
		return mapToDto(connection.find(sql, projectCd));
	}

	/**
	 * プロジェクトマスターからレコードを全件取得 ※大量データ取得に注意
	 * @return List<プロジェクトマスターDTO>
	 */
	public List<ProjectMaster> load() {
		final String sql = "SELECT * FROM project_master ORDER BY project_cd";
		return mapToDto(connection.load(sql));
	}

	/**
	* プロジェクトマスター登録
	* @param dto プロジェクトマスター
	* @return 件数
	*/
	public int insert(
		ProjectMaster dto
	){
			return connection.update(this.insertSql,
					dto.projectCd, dto.projectName, dto.shuuryouKbn
					);
	}

	/**
	* プロジェクトマスター登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto プロジェクトマスター
	* @return 件数
	*/
	public int upsert(
		ProjectMaster dto
		 ){
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT project_master_pkey "
			+ "DO UPDATE SET project_name = ?, shuuryou_kbn = ? ";
			return connection.update(sql,
				dto.projectCd, dto.projectName, dto.shuuryouKbn
				, dto.projectName, dto.shuuryouKbn
				);
    }

	/**
	 * プロジェクトマスターから主キー指定でレコードを削除
	 * @param projectCd プロジェクトコード
	 * @return 削除件数
	 */
	public int delete(String projectCd){
		final String sql = "DELETE FROM project_master WHERE project_cd = ?";
		return connection.update(sql, projectCd);
	}
}
