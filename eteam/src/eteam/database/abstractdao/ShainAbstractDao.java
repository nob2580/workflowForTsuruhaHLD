package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.Shain;

/**
 * 社員に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class ShainAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected Shain mapToDto(GMap map){
		return map == null ? null : new Shain(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<Shain> mapToDto(List<GMap> mapList){
		List<Shain> dtoList = new ArrayList<Shain>();
		for (var map : mapList) {
			dtoList.add(new Shain(map));
		}
		return dtoList;
	}
	
	/**
	 * 社員のレコード有無を判定
	 * @param shainNo 社員番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String shainNo) {
		return this.find(shainNo) == null ? false : true;
	}
	
	/**
	 * 社員から主キー指定でレコードを取得
	 * @param shainNo 社員番号
	 * @return 社員DTO
	 */
	public Shain find(String shainNo) {
		final String sql = "SELECT * FROM shain WHERE shain_no = ?";
		return mapToDto(connection.find(sql, shainNo));
	}
	
	/**
	 * 社員からレコードを全件取得 ※大量データ取得に注意
	 * @return List<社員DTO>
	 */
	public List<Shain> load() {
		final String sql = "SELECT * FROM shain ORDER BY shain_no";
		return mapToDto(connection.load(sql));
	}

	/**
	* 社員登録
	* @param dto 社員
	* @return 件数
	*/
	public int insert(
		Shain dto
	){
		final String sql =
				"INSERT INTO shain "
			+ "VALUES(?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.shainNo, dto.userFullName, dto.daihyouFutanBumonCd, dto.yakushokuCd
					);
	}

	/**
	* 社員登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 社員
	* @return 件数
	*/
	public int upsert(
		Shain dto
		 ){
		final String sql =
				"INSERT INTO shain "
			+ "VALUES(?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT shain_pkey "
			+ "DO UPDATE SET user_full_name = ?, daihyou_futan_bumon_cd = ?, yakushoku_cd = ? "
			+ "";
			return connection.update(sql,
				dto.shainNo, dto.userFullName, dto.daihyouFutanBumonCd, dto.yakushokuCd
				, dto.userFullName, dto.daihyouFutanBumonCd, dto.yakushokuCd
				);
    }
	
	/**
	 * 社員から主キー指定でレコードを削除
	 * @param shainNo 社員番号
	 * @return 削除件数
	 */
	public int delete(String shainNo){
		final String sql = "DELETE FROM shain WHERE shain_no = ?";
		return connection.update(sql, shainNo);
	}
}
