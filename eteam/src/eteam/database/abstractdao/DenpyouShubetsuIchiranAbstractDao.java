package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.DenpyouShubetsuIchiran;

/**
 * 伝票種別一覧に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class DenpyouShubetsuIchiranAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected DenpyouShubetsuIchiran mapToDto(GMap map){
		return map == null ? null : new DenpyouShubetsuIchiran(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<DenpyouShubetsuIchiran> mapToDto(List<GMap> mapList){
		List<DenpyouShubetsuIchiran> dtoList = new ArrayList<DenpyouShubetsuIchiran>();
		for (var map : mapList) {
			dtoList.add(new DenpyouShubetsuIchiran(map));
		}
		return dtoList;
	}
	
	/**
	 * 伝票種別一覧のレコード有無を判定
	 * @param denpyouKbn 伝票区分
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouKbn) {
		return this.find(denpyouKbn) == null ? false : true;
	}
	
	/**
	 * 伝票種別一覧から主キー指定でレコードを取得
	 * @param denpyouKbn 伝票区分
	 * @return 伝票種別一覧DTO
	 */
	public DenpyouShubetsuIchiran find(String denpyouKbn) {
		final String sql = "SELECT * FROM denpyou_shubetsu_ichiran WHERE denpyou_kbn = ?";
		return mapToDto(connection.find(sql, denpyouKbn));
	}
	
	/**
	 * 伝票種別一覧からレコードを全件取得 ※大量データ取得に注意
	 * @return List<伝票種別一覧DTO>
	 */
	public List<DenpyouShubetsuIchiran> load() {
		final String sql = "SELECT * FROM denpyou_shubetsu_ichiran ORDER BY denpyou_kbn";
		return mapToDto(connection.load(sql));
	}

	/**
	* 伝票種別一覧登録
	* @param dto 伝票種別一覧
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		DenpyouShubetsuIchiran dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO denpyou_shubetsu_ichiran "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.denpyouKbn, dto.version, dto.denpyouShubetsu, dto.denpyouKaribaraiNashiShubetsu, dto.denpyouPrintShubetsu, dto.denpyouPrintKaribaraiNashiShubetsu, dto.hyoujiJun, dto.gyoumuShubetsu, dto.naiyou, dto.denpyouShubetsuUrl, dto.yuukouKigenFrom, dto.yuukouKigenTo, dto.kanrenSentakuFlg, dto.kanrenHyoujiFlg, dto.denpyouPrintFlg, dto.kianbangouUnyouFlg, dto.yosanShikkouTaishou, dto.routeHanteiKingaku, dto.routeTorihikiFlg, dto.shouninJyoukyouPrintFlg, dto.shinseiShoriKengenName, dto.shiiresakiFlg, koushinUserId, koushinUserId
					);
	}

	/**
	* 伝票種別一覧の非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したDenpyouShubetsuIchiranの使用を前提
	* @param dto 伝票種別一覧
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		DenpyouShubetsuIchiran dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE denpyou_shubetsu_ichiran "
		    + "SET version = ?, denpyou_shubetsu = ?, denpyou_karibarai_nashi_shubetsu = ?, denpyou_print_shubetsu = ?, denpyou_print_karibarai_nashi_shubetsu = ?, hyouji_jun = ?, gyoumu_shubetsu = ?, naiyou = ?, denpyou_shubetsu_url = ?, yuukou_kigen_from = ?, yuukou_kigen_to = ?, kanren_sentaku_flg = ?, kanren_hyouji_flg = ?, denpyou_print_flg = ?, kianbangou_unyou_flg = ?, yosan_shikkou_taishou = ?, route_hantei_kingaku = ?, route_torihiki_flg = ?, shounin_jyoukyou_print_flg = ?, shinsei_shori_kengen_name = ?, shiiresaki_flg = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND denpyou_kbn = ?";
			return connection.update(sql,
				dto.version, dto.denpyouShubetsu, dto.denpyouKaribaraiNashiShubetsu, dto.denpyouPrintShubetsu, dto.denpyouPrintKaribaraiNashiShubetsu, dto.hyoujiJun, dto.gyoumuShubetsu, dto.naiyou, dto.denpyouShubetsuUrl, dto.yuukouKigenFrom, dto.yuukouKigenTo, dto.kanrenSentakuFlg, dto.kanrenHyoujiFlg, dto.denpyouPrintFlg, dto.kianbangouUnyouFlg, dto.yosanShikkouTaishou, dto.routeHanteiKingaku, dto.routeTorihikiFlg, dto.shouninJyoukyouPrintFlg, dto.shinseiShoriKengenName, dto.shiiresakiFlg, koushinUserId
				,dto.koushinTime, dto.denpyouKbn);
    }

	/**
	* 伝票種別一覧登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 伝票種別一覧
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		DenpyouShubetsuIchiran dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO denpyou_shubetsu_ichiran "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT denpyou_shubetsu_ichiran_pkey "
			+ "DO UPDATE SET version = ?, denpyou_shubetsu = ?, denpyou_karibarai_nashi_shubetsu = ?, denpyou_print_shubetsu = ?, denpyou_print_karibarai_nashi_shubetsu = ?, hyouji_jun = ?, gyoumu_shubetsu = ?, naiyou = ?, denpyou_shubetsu_url = ?, yuukou_kigen_from = ?, yuukou_kigen_to = ?, kanren_sentaku_flg = ?, kanren_hyouji_flg = ?, denpyou_print_flg = ?, kianbangou_unyou_flg = ?, yosan_shikkou_taishou = ?, route_hantei_kingaku = ?, route_torihiki_flg = ?, shounin_jyoukyou_print_flg = ?, shinsei_shori_kengen_name = ?, shiiresaki_flg = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.denpyouKbn, dto.version, dto.denpyouShubetsu, dto.denpyouKaribaraiNashiShubetsu, dto.denpyouPrintShubetsu, dto.denpyouPrintKaribaraiNashiShubetsu, dto.hyoujiJun, dto.gyoumuShubetsu, dto.naiyou, dto.denpyouShubetsuUrl, dto.yuukouKigenFrom, dto.yuukouKigenTo, dto.kanrenSentakuFlg, dto.kanrenHyoujiFlg, dto.denpyouPrintFlg, dto.kianbangouUnyouFlg, dto.yosanShikkouTaishou, dto.routeHanteiKingaku, dto.routeTorihikiFlg, dto.shouninJyoukyouPrintFlg, dto.shinseiShoriKengenName, dto.shiiresakiFlg, koushinUserId, koushinUserId
				, dto.version, dto.denpyouShubetsu, dto.denpyouKaribaraiNashiShubetsu, dto.denpyouPrintShubetsu, dto.denpyouPrintKaribaraiNashiShubetsu, dto.hyoujiJun, dto.gyoumuShubetsu, dto.naiyou, dto.denpyouShubetsuUrl, dto.yuukouKigenFrom, dto.yuukouKigenTo, dto.kanrenSentakuFlg, dto.kanrenHyoujiFlg, dto.denpyouPrintFlg, dto.kianbangouUnyouFlg, dto.yosanShikkouTaishou, dto.routeHanteiKingaku, dto.routeTorihikiFlg, dto.shouninJyoukyouPrintFlg, dto.shinseiShoriKengenName, dto.shiiresakiFlg, koushinUserId
				);
    }
	
	/**
	 * 伝票種別一覧から主キー指定でレコードを削除
	 * @param denpyouKbn 伝票区分
	 * @return 削除件数
	 */
	public int delete(String denpyouKbn){
		final String sql = "DELETE FROM denpyou_shubetsu_ichiran WHERE denpyou_kbn = ?";
		return connection.update(sql, denpyouKbn);
	}
}
