package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.MailTsuuchi;

/**
 * メール通知設定に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class MailTsuuchiAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected MailTsuuchi mapToDto(GMap map){
		return map == null ? null : new MailTsuuchi(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<MailTsuuchi> mapToDto(List<GMap> mapList){
		List<MailTsuuchi> dtoList = new ArrayList<MailTsuuchi>();
		for (var map : mapList) {
			dtoList.add(new MailTsuuchi(map));
		}
		return dtoList;
	}
	
	/**
	 * メール通知設定のレコード有無を判定
	 * @param userId ユーザーID
	 * @param tsuuchiKbn 通知区分
	 * @return true:exist false:not exist
	 */
	public boolean exists(String userId, String tsuuchiKbn) {
		return this.find(userId, tsuuchiKbn) == null ? false : true;
	}
	
	/**
	 * メール通知設定から主キー指定でレコードを取得
	 * @param userId ユーザーID
	 * @param tsuuchiKbn 通知区分
	 * @return メール通知設定DTO
	 */
	public MailTsuuchi find(String userId, String tsuuchiKbn) {
		final String sql = "SELECT * FROM mail_tsuuchi WHERE user_id = ? AND tsuuchi_kbn = ?";
		return mapToDto(connection.find(sql, userId, tsuuchiKbn));
	}
	
	/**
	 * メール通知設定からレコードを全件取得 ※大量データ取得に注意
	 * @return List<メール通知設定DTO>
	 */
	public List<MailTsuuchi> load() {
		final String sql = "SELECT * FROM mail_tsuuchi ORDER BY user_id, tsuuchi_kbn";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * メール通知設定から一部キー指定でレコードを取得
	 * @param userId ユーザーID
	 * @return List<メール通知設定>DTO
	 */
	public List<MailTsuuchi> load(String userId) {
		final String sql = "SELECT * FROM mail_tsuuchi WHERE user_id = ? "
							+ "ORDER BY user_id, tsuuchi_kbn";
		return mapToDto(connection.load(sql, userId));
	}

	/**
	* メール通知設定登録
	* @param dto メール通知設定
	* @return 件数
	*/
	public int insert(
		MailTsuuchi dto
	){
		final String sql =
				"INSERT INTO mail_tsuuchi "
			+ "VALUES(?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.userId, dto.tsuuchiKbn, dto.soushinumu
					);
	}

	/**
	* メール通知設定登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto メール通知設定
	* @return 件数
	*/
	public int upsert(
		MailTsuuchi dto
		 ){
		final String sql =
				"INSERT INTO mail_tsuuchi "
			+ "VALUES(?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT mail_tsuuchi_pkey "
			+ "DO UPDATE SET soushinumu = ? "
			+ "";
			return connection.update(sql,
				dto.userId, dto.tsuuchiKbn, dto.soushinumu
				, dto.soushinumu
				);
    }
	
	/**
	 * メール通知設定から主キー指定でレコードを削除
	 * @param userId ユーザーID
	 * @param tsuuchiKbn 通知区分
	 * @return 削除件数
	 */
	public int delete(String userId, String tsuuchiKbn){
		final String sql = "DELETE FROM mail_tsuuchi WHERE user_id = ? AND tsuuchi_kbn = ?";
		return connection.update(sql, userId, tsuuchiKbn);
	}
	
	/**
	 * メール通知設定から一部キー指定でレコードを削除
	 * @param userId ユーザーID
	 * @return 削除件数
	 */
	public int delete(String userId) {
		final String sql = "DELETE FROM mail_tsuuchi WHERE user_id = ? ";
		return connection.update(sql, userId);
	}
}
