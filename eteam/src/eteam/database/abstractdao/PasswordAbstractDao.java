package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.Password;

/**
 * パスワードに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class PasswordAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected Password mapToDto(GMap map){
		return map == null ? null : new Password(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<Password> mapToDto(List<GMap> mapList){
		List<Password> dtoList = new ArrayList<Password>();
		for (var map : mapList) {
			dtoList.add(new Password(map));
		}
		return dtoList;
	}
	
	/**
	 * パスワードのレコード有無を判定
	 * @param userId ユーザーID
	 * @return true:exist false:not exist
	 */
	public boolean exists(String userId) {
		return this.find(userId) == null ? false : true;
	}
	
	/**
	 * パスワードから主キー指定でレコードを取得
	 * @param userId ユーザーID
	 * @return パスワードDTO
	 */
	public Password find(String userId) {
		final String sql = "SELECT * FROM password WHERE user_id = ?";
		return mapToDto(connection.find(sql, userId));
	}
	
	/**
	 * パスワードからレコードを全件取得 ※大量データ取得に注意
	 * @return List<パスワードDTO>
	 */
	public List<Password> load() {
		final String sql = "SELECT * FROM password ORDER BY user_id";
		return mapToDto(connection.load(sql));
	}

	/**
	* パスワード登録
	* @param dto パスワード
	* @return 件数
	*/
	public int insert(
		Password dto
	){
		final String sql =
				"INSERT INTO password "
			+ "VALUES(?, ? "
			+ ")";
			return connection.update(sql,
					dto.userId, dto.password
					);
	}

	/**
	* パスワード登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto パスワード
	* @return 件数
	*/
	public int upsert(
		Password dto
		 ){
		final String sql =
				"INSERT INTO password "
			+ "VALUES(?, ? "
			+ ") ON CONFLICT ON CONSTRAINT password_pkey "
			+ "DO UPDATE SET password = ? "
			+ "";
			return connection.update(sql,
				dto.userId, dto.password
				, dto.password
				);
    }
	
	/**
	 * パスワードから主キー指定でレコードを削除
	 * @param userId ユーザーID
	 * @return 削除件数
	 */
	public int delete(String userId){
		final String sql = "DELETE FROM password WHERE user_id = ?";
		return connection.update(sql, userId);
	}
}
