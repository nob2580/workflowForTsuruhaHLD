package eteam.database.abstractdao;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KiKesn;

/**
 * （期別）決算期に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KiKesnAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KiKesn mapToDto(GMap map){
		return map == null ? null : new KiKesn(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KiKesn> mapToDto(List<GMap> mapList){
		List<KiKesn> dtoList = new ArrayList<KiKesn>();
		for (var map : mapList) {
			dtoList.add(new KiKesn(map));
		}
		return dtoList;
	}
	
	/**
	 * （期別）決算期のレコード有無を判定
	 * @param kesn 内部決算期
	 * @param kessankiBangou 決算期番号
	 * @param fromDate 開始日
	 * @param toDate 終了日
	 * @return true:exist false:not exist
	 */
	public boolean exists(int kesn, int kessankiBangou, Date fromDate, Date toDate) {
		return this.find(kesn, kessankiBangou, fromDate, toDate) == null ? false : true;
	}
	
	/**
	 * （期別）決算期から主キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param kessankiBangou 決算期番号
	 * @param fromDate 開始日
	 * @param toDate 終了日
	 * @return （期別）決算期DTO
	 */
	public KiKesn find(int kesn, int kessankiBangou, Date fromDate, Date toDate) {
		final String sql = "SELECT * FROM ki_kesn WHERE kesn = ? AND kessanki_bangou = ? AND from_date = ? AND to_date = ?";
		return mapToDto(connection.find(sql, kesn, kessankiBangou, fromDate, toDate));
	}
	
	/**
	 * （期別）決算期からレコードを全件取得 ※大量データ取得に注意
	 * @return List<（期別）決算期DTO>
	 */
	public List<KiKesn> load() {
		final String sql = "SELECT * FROM ki_kesn ORDER BY kesn, kessanki_bangou, from_date, to_date";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * （期別）決算期から一部キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @return List<（期別）決算期>DTO
	 */
	public List<KiKesn> load(int kesn) {
		final String sql = "SELECT * FROM ki_kesn WHERE kesn = ? "
							+ "ORDER BY kesn, kessanki_bangou, from_date, to_date";
		return mapToDto(connection.load(sql, kesn));
	}
	
	/**
	 * （期別）決算期から一部キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param kessankiBangou 決算期番号
	 * @return List<（期別）決算期>DTO
	 */
	public List<KiKesn> load(int kesn, int kessankiBangou) {
		final String sql = "SELECT * FROM ki_kesn WHERE kesn = ?  AND kessanki_bangou = ? "
							+ "ORDER BY kesn, kessanki_bangou, from_date, to_date";
		return mapToDto(connection.load(sql, kesn, kessankiBangou));
	}
	
	/**
	 * （期別）決算期から一部キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param kessankiBangou 決算期番号
	 * @param fromDate 開始日
	 * @return List<（期別）決算期>DTO
	 */
	public List<KiKesn> load(int kesn, int kessankiBangou, Date fromDate) {
		final String sql = "SELECT * FROM ki_kesn WHERE kesn = ?  AND kessanki_bangou = ?  AND from_date = ? "
							+ "ORDER BY kesn, kessanki_bangou, from_date, to_date";
		return mapToDto(connection.load(sql, kesn, kessankiBangou, fromDate));
	}

	/**
	* （期別）決算期登録
	* @param dto （期別）決算期
	* @return 件数
	*/
	public int insert(
		KiKesn dto
	){
		final String sql =
				"INSERT INTO ki_kesn "
			+ "VALUES(?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.kesn, dto.kessankiBangou, dto.fromDate, dto.toDate
					);
	}
	
	/**
	 * （期別）決算期から主キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param kessankiBangou 決算期番号
	 * @param fromDate 開始日
	 * @param toDate 終了日
	 * @return 削除件数
	 */
	public int delete(int kesn, int kessankiBangou, Date fromDate, Date toDate){
		final String sql = "DELETE FROM ki_kesn WHERE kesn = ? AND kessanki_bangou = ? AND from_date = ? AND to_date = ?";
		return connection.update(sql, kesn, kessankiBangou, fromDate, toDate);
	}
	
	/**
	 * （期別）決算期から一部キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @return 削除件数
	 */
	public int delete(int kesn) {
		final String sql = "DELETE FROM ki_kesn WHERE kesn = ? ";
		return connection.update(sql, kesn);
	}
	
	/**
	 * （期別）決算期から一部キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param kessankiBangou 決算期番号
	 * @return 削除件数
	 */
	public int delete(int kesn, int kessankiBangou) {
		final String sql = "DELETE FROM ki_kesn WHERE kesn = ?  AND kessanki_bangou = ? ";
		return connection.update(sql, kesn, kessankiBangou);
	}
	
	/**
	 * （期別）決算期から一部キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param kessankiBangou 決算期番号
	 * @param fromDate 開始日
	 * @return 削除件数
	 */
	public int delete(int kesn, int kessankiBangou, Date fromDate) {
		final String sql = "DELETE FROM ki_kesn WHERE kesn = ?  AND kessanki_bangou = ?  AND from_date = ? ";
		return connection.update(sql, kesn, kessankiBangou, fromDate);
	}
	
	/**
	 * 「(期別)決算期」から指定日が開始日～終了日の範囲内のレコードを取得
	 * @param date 日付
	 * @return 内部決算期
	 */
	public KiKesn findBySingleDate(Date date) {
		final String sql = "SELECT * FROM ki_kesn WHERE ? BETWEEN from_date AND to_date";
		return mapToDto(connection.find(sql, date));
	}
}
