package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.ShouninRoute;

/**
 * 承認ルートに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class ShouninRouteAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected ShouninRoute mapToDto(GMap map){
		return map == null ? null : new ShouninRoute(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<ShouninRoute> mapToDto(List<GMap> mapList){
		List<ShouninRoute> dtoList = new ArrayList<ShouninRoute>();
		for (var map : mapList) {
			dtoList.add(new ShouninRoute(map));
		}
		return dtoList;
	}
	
	/**
	 * 承認ルートのレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId, int edano) {
		return this.find(denpyouId, edano) == null ? false : true;
	}
	
	/**
	 * 承認ルートから主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @return 承認ルートDTO
	 */
	public ShouninRoute find(String denpyouId, int edano) {
		final String sql = "SELECT * FROM shounin_route WHERE denpyou_id = ? AND edano = ?";
		return mapToDto(connection.find(sql, denpyouId, edano));
	}
	
	/**
	 * 承認ルートからレコードを全件取得 ※大量データ取得に注意
	 * @return List<承認ルートDTO>
	 */
	public List<ShouninRoute> load() {
		final String sql = "SELECT * FROM shounin_route ORDER BY denpyou_id, edano";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 承認ルートから一部キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return List<承認ルート>DTO
	 */
	public List<ShouninRoute> load(String denpyouId) {
		final String sql = "SELECT * FROM shounin_route WHERE denpyou_id = ? "
							+ "ORDER BY denpyou_id, edano";
		return mapToDto(connection.load(sql, denpyouId));
	}

	/**
	* 承認ルート登録
	* @param dto 承認ルート
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		ShouninRoute dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO shounin_route "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.denpyouId, dto.edano, dto.userId, dto.userFullName, dto.bumonCd, dto.bumonFullName, dto.bumonRoleId, dto.bumonRoleName, dto.gyoumuRoleId, dto.gyoumuRoleName, dto.genzaiFlg, dto.saishuShouninFlg, dto.joukyouEdano, dto.shouninShoriKengenNo, dto.shouninShoriKengenName, dto.kihonModelCd, dto.shouninHissuFlg, dto.shouninKenFlg, dto.henkouFlg, koushinUserId, koushinUserId
					);
	}

	/**
	* 承認ルートの非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したShouninRouteの使用を前提
	* @param dto 承認ルート
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		ShouninRoute dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE shounin_route "
		    + "SET user_id = ?, user_full_name = ?, bumon_cd = ?, bumon_full_name = ?, bumon_role_id = ?, bumon_role_name = ?, gyoumu_role_id = ?, gyoumu_role_name = ?, genzai_flg = ?, saishu_shounin_flg = ?, joukyou_edano = ?, shounin_shori_kengen_no = ?, shounin_shori_kengen_name = ?, kihon_model_cd = ?, shounin_hissu_flg = ?, shounin_ken_flg = ?, henkou_flg = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND denpyou_id = ? AND edano = ?";
			return connection.update(sql,
				dto.userId, dto.userFullName, dto.bumonCd, dto.bumonFullName, dto.bumonRoleId, dto.bumonRoleName, dto.gyoumuRoleId, dto.gyoumuRoleName, dto.genzaiFlg, dto.saishuShouninFlg, dto.joukyouEdano, dto.shouninShoriKengenNo, dto.shouninShoriKengenName, dto.kihonModelCd, dto.shouninHissuFlg, dto.shouninKenFlg, dto.henkouFlg, koushinUserId
				,dto.koushinTime, dto.denpyouId, dto.edano);
    }

	/**
	* 承認ルート登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 承認ルート
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		ShouninRoute dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO shounin_route "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT shounin_route_pkey "
			+ "DO UPDATE SET user_id = ?, user_full_name = ?, bumon_cd = ?, bumon_full_name = ?, bumon_role_id = ?, bumon_role_name = ?, gyoumu_role_id = ?, gyoumu_role_name = ?, genzai_flg = ?, saishu_shounin_flg = ?, joukyou_edano = ?, shounin_shori_kengen_no = ?, shounin_shori_kengen_name = ?, kihon_model_cd = ?, shounin_hissu_flg = ?, shounin_ken_flg = ?, henkou_flg = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.denpyouId, dto.edano, dto.userId, dto.userFullName, dto.bumonCd, dto.bumonFullName, dto.bumonRoleId, dto.bumonRoleName, dto.gyoumuRoleId, dto.gyoumuRoleName, dto.genzaiFlg, dto.saishuShouninFlg, dto.joukyouEdano, dto.shouninShoriKengenNo, dto.shouninShoriKengenName, dto.kihonModelCd, dto.shouninHissuFlg, dto.shouninKenFlg, dto.henkouFlg, koushinUserId, koushinUserId
				, dto.userId, dto.userFullName, dto.bumonCd, dto.bumonFullName, dto.bumonRoleId, dto.bumonRoleName, dto.gyoumuRoleId, dto.gyoumuRoleName, dto.genzaiFlg, dto.saishuShouninFlg, dto.joukyouEdano, dto.shouninShoriKengenNo, dto.shouninShoriKengenName, dto.kihonModelCd, dto.shouninHissuFlg, dto.shouninKenFlg, dto.henkouFlg, koushinUserId
				);
    }
	
	/**
	 * 承認ルートから主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @return 削除件数
	 */
	public int delete(String denpyouId, int edano){
		final String sql = "DELETE FROM shounin_route WHERE denpyou_id = ? AND edano = ?";
		return connection.update(sql, denpyouId, edano);
	}
	
	/**
	 * 承認ルートから一部キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int delete(String denpyouId) {
		final String sql = "DELETE FROM shounin_route WHERE denpyou_id = ? ";
		return connection.update(sql, denpyouId);
	}
}
