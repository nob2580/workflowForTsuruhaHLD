package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.GyoumuRoleWariate;

/**
 * 業務ロール割り当てに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class GyoumuRoleWariateAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected GyoumuRoleWariate mapToDto(GMap map){
		return map == null ? null : new GyoumuRoleWariate(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<GyoumuRoleWariate> mapToDto(List<GMap> mapList){
		List<GyoumuRoleWariate> dtoList = new ArrayList<GyoumuRoleWariate>();
		for (var map : mapList) {
			dtoList.add(new GyoumuRoleWariate(map));
		}
		return dtoList;
	}
	
	/**
	 * 業務ロール割り当てのレコード有無を判定
	 * @param userId ユーザーID
	 * @param gyoumuRoleId 業務ロールID
	 * @param shoriBumonCd 処理部門コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String userId, String gyoumuRoleId, String shoriBumonCd) {
		return this.find(userId, gyoumuRoleId, shoriBumonCd) == null ? false : true;
	}
	
	/**
	 * 業務ロール割り当てから主キー指定でレコードを取得
	 * @param userId ユーザーID
	 * @param gyoumuRoleId 業務ロールID
	 * @param shoriBumonCd 処理部門コード
	 * @return 業務ロール割り当てDTO
	 */
	public GyoumuRoleWariate find(String userId, String gyoumuRoleId, String shoriBumonCd) {
		final String sql = "SELECT * FROM gyoumu_role_wariate WHERE user_id = ? AND gyoumu_role_id = ? AND shori_bumon_cd = ?";
		return mapToDto(connection.find(sql, userId, gyoumuRoleId, shoriBumonCd));
	}
	
	/**
	 * 業務ロール割り当てからレコードを全件取得 ※大量データ取得に注意
	 * @return List<業務ロール割り当てDTO>
	 */
	public List<GyoumuRoleWariate> load() {
		final String sql = "SELECT * FROM gyoumu_role_wariate ORDER BY user_id, gyoumu_role_id, shori_bumon_cd";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 業務ロール割り当てから一部キー指定でレコードを取得
	 * @param userId ユーザーID
	 * @return List<業務ロール割り当て>DTO
	 */
	public List<GyoumuRoleWariate> load(String userId) {
		final String sql = "SELECT * FROM gyoumu_role_wariate WHERE user_id = ? "
							+ "ORDER BY user_id, gyoumu_role_id, shori_bumon_cd";
		return mapToDto(connection.load(sql, userId));
	}
	
	/**
	 * 業務ロール割り当てから一部キー指定でレコードを取得
	 * @param userId ユーザーID
	 * @param gyoumuRoleId 業務ロールID
	 * @return List<業務ロール割り当て>DTO
	 */
	public List<GyoumuRoleWariate> load(String userId, String gyoumuRoleId) {
		final String sql = "SELECT * FROM gyoumu_role_wariate WHERE user_id = ?  AND gyoumu_role_id = ? "
							+ "ORDER BY user_id, gyoumu_role_id, shori_bumon_cd";
		return mapToDto(connection.load(sql, userId, gyoumuRoleId));
	}

	/**
	* 業務ロール割り当て登録
	* @param dto 業務ロール割り当て
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		GyoumuRoleWariate dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO gyoumu_role_wariate "
			+ "VALUES(?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.userId, dto.gyoumuRoleId, dto.yuukouKigenFrom, dto.yuukouKigenTo, dto.shoriBumonCd, koushinUserId, koushinUserId
					);
	}

	/**
	* 業務ロール割り当ての非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したGyoumuRoleWariateの使用を前提
	* @param dto 業務ロール割り当て
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		GyoumuRoleWariate dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE gyoumu_role_wariate "
		    + "SET yuukou_kigen_from = ?, yuukou_kigen_to = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND user_id = ? AND gyoumu_role_id = ? AND shori_bumon_cd = ?";
			return connection.update(sql,
				dto.yuukouKigenFrom, dto.yuukouKigenTo, koushinUserId
				,dto.koushinTime, dto.userId, dto.gyoumuRoleId, dto.shoriBumonCd);
    }

	/**
	* 業務ロール割り当て登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 業務ロール割り当て
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		GyoumuRoleWariate dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO gyoumu_role_wariate "
			+ "VALUES(?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT gyoumu_role_wariate_pkey "
			+ "DO UPDATE SET yuukou_kigen_from = ?, yuukou_kigen_to = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.userId, dto.gyoumuRoleId, dto.yuukouKigenFrom, dto.yuukouKigenTo, dto.shoriBumonCd, koushinUserId, koushinUserId
				, dto.yuukouKigenFrom, dto.yuukouKigenTo, koushinUserId
				);
    }
	
	/**
	 * 業務ロール割り当てから主キー指定でレコードを削除
	 * @param userId ユーザーID
	 * @param gyoumuRoleId 業務ロールID
	 * @param shoriBumonCd 処理部門コード
	 * @return 削除件数
	 */
	public int delete(String userId, String gyoumuRoleId, String shoriBumonCd){
		final String sql = "DELETE FROM gyoumu_role_wariate WHERE user_id = ? AND gyoumu_role_id = ? AND shori_bumon_cd = ?";
		return connection.update(sql, userId, gyoumuRoleId, shoriBumonCd);
	}
	
	/**
	 * 業務ロール割り当てから一部キー指定でレコードを削除
	 * @param userId ユーザーID
	 * @return 削除件数
	 */
	public int delete(String userId) {
		final String sql = "DELETE FROM gyoumu_role_wariate WHERE user_id = ? ";
		return connection.update(sql, userId);
	}
	
	/**
	 * 業務ロール割り当てから一部キー指定でレコードを削除
	 * @param userId ユーザーID
	 * @param gyoumuRoleId 業務ロールID
	 * @return 削除件数
	 */
	public int delete(String userId, String gyoumuRoleId) {
		final String sql = "DELETE FROM gyoumu_role_wariate WHERE user_id = ?  AND gyoumu_role_id = ? ";
		return connection.update(sql, userId, gyoumuRoleId);
	}
}
