package eteam.database.abstractdao;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KeijoubiShimebi;

/**
 * 計上日締日に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KeijoubiShimebiAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KeijoubiShimebi mapToDto(GMap map){
		return map == null ? null : new KeijoubiShimebi(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KeijoubiShimebi> mapToDto(List<GMap> mapList){
		List<KeijoubiShimebi> dtoList = new ArrayList<KeijoubiShimebi>();
		for (var map : mapList) {
			dtoList.add(new KeijoubiShimebi(map));
		}
		return dtoList;
	}
	
	/**
	 * 計上日締日のレコード有無を判定
	 * @param denpyouKbn 伝票区分
	 * @param shimebi 締日
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouKbn, Date shimebi) {
		return this.find(denpyouKbn, shimebi) == null ? false : true;
	}
	
	/**
	 * 計上日締日から主キー指定でレコードを取得
	 * @param denpyouKbn 伝票区分
	 * @param shimebi 締日
	 * @return 計上日締日DTO
	 */
	public KeijoubiShimebi find(String denpyouKbn, Date shimebi) {
		final String sql = "SELECT * FROM keijoubi_shimebi WHERE denpyou_kbn = ? AND shimebi = ?";
		return mapToDto(connection.find(sql, denpyouKbn, shimebi));
	}
	
	/**
	 * 計上日締日からレコードを全件取得 ※大量データ取得に注意
	 * @return List<計上日締日DTO>
	 */
	public List<KeijoubiShimebi> load() {
		final String sql = "SELECT * FROM keijoubi_shimebi ORDER BY denpyou_kbn, shimebi";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 計上日締日から一部キー指定でレコードを取得
	 * @param denpyouKbn 伝票区分
	 * @return List<計上日締日>DTO
	 */
	public List<KeijoubiShimebi> load(String denpyouKbn) {
		final String sql = "SELECT * FROM keijoubi_shimebi WHERE denpyou_kbn = ? "
							+ "ORDER BY denpyou_kbn, shimebi";
		return mapToDto(connection.load(sql, denpyouKbn));
	}

	/**
	* 計上日締日登録
	* @param dto 計上日締日
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		KeijoubiShimebi dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO keijoubi_shimebi "
			+ "VALUES(?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.denpyouKbn, dto.shimebi, koushinUserId, koushinUserId
					);
	}
	
	/**
	 * 計上日締日から主キー指定でレコードを削除
	 * @param denpyouKbn 伝票区分
	 * @param shimebi 締日
	 * @return 削除件数
	 */
	public int delete(String denpyouKbn, Date shimebi){
		final String sql = "DELETE FROM keijoubi_shimebi WHERE denpyou_kbn = ? AND shimebi = ?";
		return connection.update(sql, denpyouKbn, shimebi);
	}
	
	/**
	 * 計上日締日から一部キー指定でレコードを削除
	 * @param denpyouKbn 伝票区分
	 * @return 削除件数
	 */
	public int delete(String denpyouKbn) {
		final String sql = "DELETE FROM keijoubi_shimebi WHERE denpyou_kbn = ? ";
		return connection.update(sql, denpyouKbn);
	}
	
	/**
	 * 伝票区分による計上日締日 取得
	 * @param denpyouKbn 伝票区分
	 * @return 請求書計上日締日(降順)
	 */
	public Date findMaxShimebiForDenpyouKbn(String denpyouKbn) {
		final String sql = "SELECT MAX(shimebi) shimebi FROM keijoubi_shimebi where denpyou_kbn = ?";
		GMap record = connection.find(sql, denpyouKbn);
		return (record == null) ? null : (Date)record.get("shimebi");
	}
}
