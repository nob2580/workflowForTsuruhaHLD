package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KiKamoku;

/**
 * （期別）科目に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KiKamokuAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KiKamoku mapToDto(GMap map){
		return map == null ? null : new KiKamoku(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KiKamoku> mapToDto(List<GMap> mapList){
		List<KiKamoku> dtoList = new ArrayList<KiKamoku>();
		for (var map : mapList) {
			dtoList.add(new KiKamoku(map));
		}
		return dtoList;
	}
	
	/**
	 * （期別）科目のレコード有無を判定
	 * @param kesn 内部決算期
	 * @param kamokuNaibuCd 科目内部コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(int kesn, String kamokuNaibuCd) {
		return this.find(kesn, kamokuNaibuCd) == null ? false : true;
	}
	
	/**
	 * （期別）科目から主キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param kamokuNaibuCd 科目内部コード
	 * @return （期別）科目DTO
	 */
	public KiKamoku find(int kesn, String kamokuNaibuCd) {
		final String sql = "SELECT * FROM ki_kamoku WHERE kesn = ? AND kamoku_naibu_cd = ?";
		return mapToDto(connection.find(sql, kesn, kamokuNaibuCd));
	}
	
	/**
	 * （期別）科目からレコードを全件取得 ※大量データ取得に注意
	 * @return List<（期別）科目DTO>
	 */
	public List<KiKamoku> load() {
		final String sql = "SELECT * FROM ki_kamoku ORDER BY kesn, kamoku_naibu_cd";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * （期別）科目から一部キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @return List<（期別）科目>DTO
	 */
	public List<KiKamoku> load(int kesn) {
		final String sql = "SELECT * FROM ki_kamoku WHERE kesn = ? "
							+ "ORDER BY kesn, kamoku_naibu_cd";
		return mapToDto(connection.load(sql, kesn));
	}

	/**
	* （期別）科目登録
	* @param dto （期別）科目
	* @return 件数
	*/
	public int insert(
		KiKamoku dto
	){
		final String sql =
				"INSERT INTO ki_kamoku "
			+ "VALUES(?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.kesn, dto.kamokuNaibuCd, dto.kamokuGaibuCd, dto.kamokuNameRyakushiki, dto.taishakuZokusei
					);
	}

	/**
	* （期別）科目登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto （期別）科目
	* @return 件数
	*/
	public int upsert(
		KiKamoku dto
		 ){
		final String sql =
				"INSERT INTO ki_kamoku "
			+ "VALUES(?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT ki_kamoku_pkey "
			+ "DO UPDATE SET kamoku_gaibu_cd = ?, kamoku_name_ryakushiki = ?, taishaku_zokusei = ? "
			+ "";
			return connection.update(sql,
				dto.kesn, dto.kamokuNaibuCd, dto.kamokuGaibuCd, dto.kamokuNameRyakushiki, dto.taishakuZokusei
				, dto.kamokuGaibuCd, dto.kamokuNameRyakushiki, dto.taishakuZokusei
				);
    }
	
	/**
	 * （期別）科目から主キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param kamokuNaibuCd 科目内部コード
	 * @return 削除件数
	 */
	public int delete(int kesn, String kamokuNaibuCd){
		final String sql = "DELETE FROM ki_kamoku WHERE kesn = ? AND kamoku_naibu_cd = ?";
		return connection.update(sql, kesn, kamokuNaibuCd);
	}
	
	/**
	 * （期別）科目から一部キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @return 削除件数
	 */
	public int delete(int kesn) {
		final String sql = "DELETE FROM ki_kamoku WHERE kesn = ? ";
		return connection.update(sql, kesn);
	}
}
