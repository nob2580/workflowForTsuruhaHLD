package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.EkiMaster;

/**
 * 駅マスターに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class EkiMasterAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected EkiMaster mapToDto(GMap map){
		return map == null ? null : new EkiMaster(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<EkiMaster> mapToDto(List<GMap> mapList){
		List<EkiMaster> dtoList = new ArrayList<EkiMaster>();
		for (var map : mapList) {
			dtoList.add(new EkiMaster(map));
		}
		return dtoList;
	}
	
	/**
	 * 駅マスターのレコード有無を判定
	 * @param regionCd 地域コード
	 * @param lineCd 路線コード
	 * @param ekiCd 駅コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String regionCd, String lineCd, String ekiCd) {
		return this.find(regionCd, lineCd, ekiCd) == null ? false : true;
	}
	
	/**
	 * 駅マスターから主キー指定でレコードを取得
	 * @param regionCd 地域コード
	 * @param lineCd 路線コード
	 * @param ekiCd 駅コード
	 * @return 駅マスターDTO
	 */
	public EkiMaster find(String regionCd, String lineCd, String ekiCd) {
		final String sql = "SELECT * FROM eki_master WHERE region_cd = ? AND line_cd = ? AND eki_cd = ?";
		return mapToDto(connection.find(sql, regionCd, lineCd, ekiCd));
	}
	
	/**
	 * 駅マスターからレコードを全件取得 ※大量データ取得に注意
	 * @return List<駅マスターDTO>
	 */
	public List<EkiMaster> load() {
		final String sql = "SELECT * FROM eki_master ORDER BY region_cd, line_cd, eki_cd";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 駅マスターから一部キー指定でレコードを取得
	 * @param regionCd 地域コード
	 * @return List<駅マスター>DTO
	 */
	public List<EkiMaster> load(String regionCd) {
		final String sql = "SELECT * FROM eki_master WHERE region_cd = ? "
							+ "ORDER BY region_cd, line_cd, eki_cd";
		return mapToDto(connection.load(sql, regionCd));
	}
	
	/**
	 * 駅マスターから一部キー指定でレコードを取得
	 * @param regionCd 地域コード
	 * @param lineCd 路線コード
	 * @return List<駅マスター>DTO
	 */
	public List<EkiMaster> load(String regionCd, String lineCd) {
		final String sql = "SELECT * FROM eki_master WHERE region_cd = ?  AND line_cd = ? "
							+ "ORDER BY region_cd, line_cd, eki_cd";
		return mapToDto(connection.load(sql, regionCd, lineCd));
	}

	/**
	* 駅マスター登録
	* @param dto 駅マスター
	* @return 件数
	*/
	public int insert(
		EkiMaster dto
	){
		final String sql =
				"INSERT INTO eki_master "
			+ "VALUES(?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.regionCd, dto.lineCd, dto.ekiCd, dto.lineName, dto.ekiName
					);
	}

	/**
	* 駅マスター登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 駅マスター
	* @return 件数
	*/
	public int upsert(
		EkiMaster dto
		 ){
		final String sql =
				"INSERT INTO eki_master "
			+ "VALUES(?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT eki_master_pkey "
			+ "DO UPDATE SET line_name = ?, eki_name = ? "
			+ "";
			return connection.update(sql,
				dto.regionCd, dto.lineCd, dto.ekiCd, dto.lineName, dto.ekiName
				, dto.lineName, dto.ekiName
				);
    }
	
	/**
	 * 駅マスターから主キー指定でレコードを削除
	 * @param regionCd 地域コード
	 * @param lineCd 路線コード
	 * @param ekiCd 駅コード
	 * @return 削除件数
	 */
	public int delete(String regionCd, String lineCd, String ekiCd){
		final String sql = "DELETE FROM eki_master WHERE region_cd = ? AND line_cd = ? AND eki_cd = ?";
		return connection.update(sql, regionCd, lineCd, ekiCd);
	}
	
	/**
	 * 駅マスターから一部キー指定でレコードを削除
	 * @param regionCd 地域コード
	 * @return 削除件数
	 */
	public int delete(String regionCd) {
		final String sql = "DELETE FROM eki_master WHERE region_cd = ? ";
		return connection.update(sql, regionCd);
	}
	
	/**
	 * 駅マスターから一部キー指定でレコードを削除
	 * @param regionCd 地域コード
	 * @param lineCd 路線コード
	 * @return 削除件数
	 */
	public int delete(String regionCd, String lineCd) {
		final String sql = "DELETE FROM eki_master WHERE region_cd = ?  AND line_cd = ? ";
		return connection.update(sql, regionCd, lineCd);
	}
}
