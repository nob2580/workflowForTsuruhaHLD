package eteam.database.abstractdao;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.DefaultRateKyoten;

/**
 * 月次レート(拠点)に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class DefaultRateKyotenAbstractDao extends EteamAbstractLogic {

	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO default_rate_kyoten (kesn, from_date, to_date, heishu_cd, rate) VALUES "
			+ "(?, ?, ?, ?, ?)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE kesn = ? AND from_date = ? AND to_date = ? AND heishu_cd = ?";

	/**
	 * @param map GMap
	 * @return dto (レコードが存在しなければNull)
	 */
	protected DefaultRateKyoten mapToDto(GMap map) {
		return map == null ? null : new DefaultRateKyoten(map);
	}

	/**
	 * @param mapList 検索結果GMap
	 * @return dtoList
	 */
	protected List<DefaultRateKyoten> mapToDto(List<GMap> mapList) {
		List<DefaultRateKyoten> dtoList = new ArrayList<DefaultRateKyoten>();
		for (var map : mapList) {
			dtoList.add(new DefaultRateKyoten(map));
		}
		return dtoList;
	}

	/**
	 * 月次レート(拠点)のレコード有無を判定
	 * @param kesn 内部決算期
	 * @param fromDate 開始日
	 * @param toDate 終了日
	 * @param heishuCd 幣種コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(short kesn, Date fromDate, Date toDate, String heishuCd) {
		return this.find(kesn, fromDate, toDate, heishuCd) != null;
	}

	/**
	 * 月次レート(拠点)から主キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param fromDate 開始日
	 * @param toDate 終了日
	 * @param heishuCd 幣種コード
	 * @return 月次レート(拠点)DTO
	 */
	public DefaultRateKyoten find(short kesn, Date fromDate, Date toDate, String heishuCd) {
		final String sql = "SELECT * FROM default_rate_kyoten " + this.whereSql;
		return mapToDto(connection.find(sql, kesn, fromDate, toDate, heishuCd));
	}

	/**
	 * 月次レート(拠点)からレコードを全件取得 ※大量データ取得に注意
	 * @return List<月次レート(拠点)DTO>
	 */
	public List<DefaultRateKyoten> load() {
		final String sql = "SELECT * FROM default_rate_kyoten  ORDER BY kesn, from_date, to_date, heishu_cd";
		return mapToDto(connection.load(sql));
	}

	/**
	 * 月次レート(拠点)登録
	 * @param dto 月次レート(拠点)
	 * @return 件数
	 */
	public int insert(DefaultRateKyoten dto) {
		return connection.update(this.insertSql, dto.kesn, dto.fromDate, dto.toDate, dto.heishuCd, dto.rate);
	}

	/**
	 * 月次レート(拠点)登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto 月次レート(拠点)
	 * @return 件数
	 */
	public int upsert(DefaultRateKyoten dto) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT default_rate_kyoten_pkey "
			+ "DO UPDATE SET  rate = ? ";
		return connection.update(sql, dto.kesn, dto.fromDate, dto.toDate, dto.heishuCd, dto.rate, dto.rate);
	}

	/**
	 * 月次レート(拠点)から主キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param fromDate 開始日
	 * @param toDate 終了日
	 * @param heishuCd 幣種コード
	 * @return 削除件数
	 */
	public int delete(short kesn, Date fromDate, Date toDate, String heishuCd) {
		final String sql = "DELETE FROM default_rate_kyoten " + this.whereSql;
		return connection.update(sql, kesn, fromDate, toDate, heishuCd);
	}
}