package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.GazouFile;

/**
 * 画像ファイルに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class GazouFileAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected GazouFile mapToDto(GMap map){
		return map == null ? null : new GazouFile(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<GazouFile> mapToDto(List<GMap> mapList){
		List<GazouFile> dtoList = new ArrayList<GazouFile>();
		for (var map : mapList) {
			dtoList.add(new GazouFile(map));
		}
		return dtoList;
	}
	
	/**
	 * 画像ファイルのレコード有無を判定
	 * @param serialNo シリアル番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(long serialNo) {
		return this.find(serialNo) == null ? false : true;
	}
	
	/**
	 * 画像ファイルから主キー指定でレコードを取得
	 * @param serialNo シリアル番号
	 * @return 画像ファイルDTO
	 */
	public GazouFile find(long serialNo) {
		final String sql = "SELECT * FROM gazou_file WHERE serial_no = ?";
		return mapToDto(connection.find(sql, serialNo));
	}
	
	/**
	 * 画像ファイルからレコードを全件取得 ※大量データ取得に注意
	 * @return List<画像ファイルDTO>
	 */
	public List<GazouFile> load() {
		final String sql = "SELECT * FROM gazou_file ORDER BY serial_no";
		return mapToDto(connection.load(sql));
	}

	/**
	* 画像ファイル登録
	* @param dto 画像ファイル
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		GazouFile dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO gazou_file "
			+ "( file_name, file_size, content_type, binary_data, touroku_user_id, touroku_time, koushin_user_id, koushin_time) "
			+ "VALUES(?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.fileName, dto.fileSize, dto.contentType, dto.binaryData, koushinUserId, koushinUserId
					);
	}

	/**
	* 画像ファイルの非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したGazouFileの使用を前提
	* @param dto 画像ファイル
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		GazouFile dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE gazou_file "
		    + "SET file_name = ?, file_size = ?, content_type = ?, binary_data = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND serial_no = ?";
			return connection.update(sql,
				dto.fileName, dto.fileSize, dto.contentType, dto.binaryData, koushinUserId
				,dto.koushinTime, dto.serialNo);
    }

	/**
	* 画像ファイル登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 画像ファイル
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		GazouFile dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO gazou_file "
			+ "( file_name, file_size, content_type, binary_data, touroku_user_id, touroku_time, koushin_user_id, koushin_time) "
			+ "VALUES(?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT gazou_file_pkey "
			+ "DO UPDATE SET file_name = ?, file_size = ?, content_type = ?, binary_data = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.fileName, dto.fileSize, dto.contentType, dto.binaryData, koushinUserId, koushinUserId
				, dto.fileName, dto.fileSize, dto.contentType, dto.binaryData, koushinUserId
				);
    }
	
	/**
	 * 画像ファイルから主キー指定でレコードを削除
	 * @param serialNo シリアル番号
	 * @return 削除件数
	 */
	public int delete(long serialNo){
		final String sql = "DELETE FROM gazou_file WHERE serial_no = ?";
		return connection.update(sql, serialNo);
	}
}
