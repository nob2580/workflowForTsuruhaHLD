package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.RateMaster;

/**
 * 幣種別レートマスターに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class RateMasterAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected RateMaster mapToDto(GMap map){
		return map == null ? null : new RateMaster(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<RateMaster> mapToDto(List<GMap> mapList){
		List<RateMaster> dtoList = new ArrayList<RateMaster>();
		for (var map : mapList) {
			dtoList.add(new RateMaster(map));
		}
		return dtoList;
	}
	
	/**
	 * 幣種別レートマスターのレコード有無を判定
	 * @param heishuCd 幣種コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String heishuCd) {
		return this.find(heishuCd) == null ? false : true;
	}
	
	/**
	 * 幣種別レートマスターから主キー指定でレコードを取得
	 * @param heishuCd 幣種コード
	 * @return 幣種別レートマスターDTO
	 */
	public RateMaster find(String heishuCd) {
		final String sql = "SELECT * FROM rate_master WHERE heishu_cd = ?";
		return mapToDto(connection.find(sql, heishuCd));
	}
	
	/**
	 * 幣種別レートマスターからレコードを全件取得 ※大量データ取得に注意
	 * @return List<幣種別レートマスターDTO>
	 */
	public List<RateMaster> load() {
		final String sql = "SELECT * FROM rate_master ORDER BY heishu_cd";
		return mapToDto(connection.load(sql));
	}

	/**
	* 幣種別レートマスター登録
	* @param dto 幣種別レートマスター
	* @return 件数
	*/
	public int insert(
		RateMaster dto
	){
		final String sql =
				"INSERT INTO rate_master "
			+ "VALUES(?, ?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.heishuCd, dto.startDate, dto.rate, dto.rate1, dto.rate2, dto.rate3, dto.availabilityFlg
					);
	}

	/**
	* 幣種別レートマスター登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 幣種別レートマスター
	* @return 件数
	*/
	public int upsert(
		RateMaster dto
		 ){
		final String sql =
				"INSERT INTO rate_master "
			+ "VALUES(?, ?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT rate_master_pkey "
			+ "DO UPDATE SET start_date = ?, rate = ?, rate1 = ?, rate2 = ?, rate3 = ?, availability_flg = ? "
			+ "";
			return connection.update(sql,
				dto.heishuCd, dto.startDate, dto.rate, dto.rate1, dto.rate2, dto.rate3, dto.availabilityFlg
				, dto.startDate, dto.rate, dto.rate1, dto.rate2, dto.rate3, dto.availabilityFlg
				);
    }
	
	/**
	 * 幣種別レートマスターから主キー指定でレコードを削除
	 * @param heishuCd 幣種コード
	 * @return 削除件数
	 */
	public int delete(String heishuCd){
		final String sql = "DELETE FROM rate_master WHERE heishu_cd = ?";
		return connection.update(sql, heishuCd);
	}
}
