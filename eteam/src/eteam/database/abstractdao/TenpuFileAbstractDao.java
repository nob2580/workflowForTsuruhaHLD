package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.TenpuFile;

/**
 * 添付ファイルに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class TenpuFileAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected TenpuFile mapToDto(GMap map){
		return map == null ? null : new TenpuFile(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<TenpuFile> mapToDto(List<GMap> mapList){
		List<TenpuFile> dtoList = new ArrayList<TenpuFile>();
		for (var map : mapList) {
			dtoList.add(new TenpuFile(map));
		}
		return dtoList;
	}
	
	/**
	 * 添付ファイルのレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId, int edano) {
		return this.find(denpyouId, edano) == null ? false : true;
	}
	
	/**
	 * 添付ファイルから主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @return 添付ファイルDTO
	 */
	public TenpuFile find(String denpyouId, int edano) {
		final String sql = "SELECT * FROM tenpu_file WHERE denpyou_id = ? AND edano = ?";
		return mapToDto(connection.find(sql, denpyouId, edano));
	}
	
	/**
	 * 添付ファイルからレコードを全件取得 ※大量データ取得に注意
	 * @return List<添付ファイルDTO>
	 */
	public List<TenpuFile> load() {
		final String sql = "SELECT * FROM tenpu_file ORDER BY denpyou_id, edano";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 添付ファイルから一部キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return List<添付ファイル>DTO
	 */
	public List<TenpuFile> load(String denpyouId) {
		final String sql = "SELECT * FROM tenpu_file WHERE denpyou_id = ? "
							+ "ORDER BY denpyou_id, edano";
		return mapToDto(connection.load(sql, denpyouId));
	}

	/**
	* 添付ファイル登録
	* @param dto 添付ファイル
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		TenpuFile dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO tenpu_file "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.denpyouId, dto.edano, dto.fileName, dto.fileSize, dto.contentType, dto.binaryData, koushinUserId, koushinUserId
					);
	}

	/**
	* 添付ファイルの非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したTenpuFileの使用を前提
	* @param dto 添付ファイル
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		TenpuFile dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE tenpu_file "
		    + "SET file_name = ?, file_size = ?, content_type = ?, binary_data = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND denpyou_id = ? AND edano = ?";
			return connection.update(sql,
				dto.fileName, dto.fileSize, dto.contentType, dto.binaryData, koushinUserId
				,dto.koushinTime, dto.denpyouId, dto.edano);
    }

	/**
	* 添付ファイル登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 添付ファイル
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		TenpuFile dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO tenpu_file "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT tenpu_file_pkey "
			+ "DO UPDATE SET file_name = ?, file_size = ?, content_type = ?, binary_data = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.denpyouId, dto.edano, dto.fileName, dto.fileSize, dto.contentType, dto.binaryData, koushinUserId, koushinUserId
				, dto.fileName, dto.fileSize, dto.contentType, dto.binaryData, koushinUserId
				);
    }
	
	/**
	 * 添付ファイルから主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @param edano 枝番号
	 * @return 削除件数
	 */
	public int delete(String denpyouId, int edano){
		final String sql = "DELETE FROM tenpu_file WHERE denpyou_id = ? AND edano = ?";
		return connection.update(sql, denpyouId, edano);
	}
	
	/**
	 * 添付ファイルから一部キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int delete(String denpyouId) {
		final String sql = "DELETE FROM tenpu_file WHERE denpyou_id = ? ";
		return connection.update(sql, denpyouId);
	}
}
