package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KanrenDenpyou;

/**
 * 関連伝票に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KanrenDenpyouAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KanrenDenpyou mapToDto(GMap map){
		return map == null ? null : new KanrenDenpyou(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KanrenDenpyou> mapToDto(List<GMap> mapList){
		List<KanrenDenpyou> dtoList = new ArrayList<KanrenDenpyou>();
		for (var map : mapList) {
			dtoList.add(new KanrenDenpyou(map));
		}
		return dtoList;
	}
	
	/**
	 * 関連伝票のレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @param kanrenDenpyou 関連伝票
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId, String kanrenDenpyou) {
		return this.find(denpyouId, kanrenDenpyou) == null ? false : true;
	}
	
	/**
	 * 関連伝票から主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @param kanrenDenpyou 関連伝票
	 * @return 関連伝票DTO
	 */
	public KanrenDenpyou find(String denpyouId, String kanrenDenpyou) {
		final String sql = "SELECT * FROM kanren_denpyou WHERE denpyou_id = ? AND kanren_denpyou = ?";
		return mapToDto(connection.find(sql, denpyouId, kanrenDenpyou));
	}
	
	/**
	 * 関連伝票からレコードを全件取得 ※大量データ取得に注意
	 * @return List<関連伝票DTO>
	 */
	public List<KanrenDenpyou> load() {
		final String sql = "SELECT * FROM kanren_denpyou ORDER BY denpyou_id, kanren_denpyou";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 関連伝票から一部キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return List<関連伝票>DTO
	 */
	public List<KanrenDenpyou> load(String denpyouId) {
		final String sql = "SELECT * FROM kanren_denpyou WHERE denpyou_id = ? "
							+ "ORDER BY denpyou_id, kanren_denpyou";
		return mapToDto(connection.load(sql, denpyouId));
	}

	/**
	* 関連伝票登録
	* @param dto 関連伝票
	* @return 件数
	*/
	public int insert(
		KanrenDenpyou dto
	){
		final String sql =
				"INSERT INTO kanren_denpyou "
			+ "VALUES(?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.denpyouId, dto.kanrenDenpyou, dto.kanrenDenpyouKbn, dto.kanrenDenpyouKihyoubi, dto.kanrenDenpyouShouninbi
					);
	}

	/**
	* 関連伝票登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 関連伝票
	* @return 件数
	*/
	public int upsert(
		KanrenDenpyou dto
		 ){
		final String sql =
				"INSERT INTO kanren_denpyou "
			+ "VALUES(?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT kanren_denpyou_pkey "
			+ "DO UPDATE SET kanren_denpyou_kbn = ?, kanren_denpyou_kihyoubi = ?, kanren_denpyou_shouninbi = ? "
			+ "";
			return connection.update(sql,
				dto.denpyouId, dto.kanrenDenpyou, dto.kanrenDenpyouKbn, dto.kanrenDenpyouKihyoubi, dto.kanrenDenpyouShouninbi
				, dto.kanrenDenpyouKbn, dto.kanrenDenpyouKihyoubi, dto.kanrenDenpyouShouninbi
				);
    }
	
	/**
	 * 関連伝票から主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @param kanrenDenpyou 関連伝票
	 * @return 削除件数
	 */
	public int delete(String denpyouId, String kanrenDenpyou){
		final String sql = "DELETE FROM kanren_denpyou WHERE denpyou_id = ? AND kanren_denpyou = ?";
		return connection.update(sql, denpyouId, kanrenDenpyou);
	}
	
	/**
	 * 関連伝票から一部キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int delete(String denpyouId) {
		final String sql = "DELETE FROM kanren_denpyou WHERE denpyou_id = ? ";
		return connection.update(sql, denpyouId);
	}
}
