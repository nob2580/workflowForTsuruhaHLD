package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KiKamokuEdaban;

/**
 * （期別）科目枝番に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KiKamokuEdabanAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KiKamokuEdaban mapToDto(GMap map){
		return map == null ? null : new KiKamokuEdaban(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KiKamokuEdaban> mapToDto(List<GMap> mapList){
		List<KiKamokuEdaban> dtoList = new ArrayList<KiKamokuEdaban>();
		for (var map : mapList) {
			dtoList.add(new KiKamokuEdaban(map));
		}
		return dtoList;
	}
	
	/**
	 * （期別）科目枝番のレコード有無を判定
	 * @param kesn 内部決算期
	 * @param kamokuNaibuCd 科目内部コード
	 * @param kamokuEdabanCd 科目枝番コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(int kesn, String kamokuNaibuCd, String kamokuEdabanCd) {
		return this.find(kesn, kamokuNaibuCd, kamokuEdabanCd) == null ? false : true;
	}
	
	/**
	 * （期別）科目枝番から主キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param kamokuNaibuCd 科目内部コード
	 * @param kamokuEdabanCd 科目枝番コード
	 * @return （期別）科目枝番DTO
	 */
	public KiKamokuEdaban find(int kesn, String kamokuNaibuCd, String kamokuEdabanCd) {
		final String sql = "SELECT * FROM ki_kamoku_edaban WHERE kesn = ? AND kamoku_naibu_cd = ? AND kamoku_edaban_cd = ?";
		return mapToDto(connection.find(sql, kesn, kamokuNaibuCd, kamokuEdabanCd));
	}
	
	/**
	 * （期別）科目枝番からレコードを全件取得 ※大量データ取得に注意
	 * @return List<（期別）科目枝番DTO>
	 */
	public List<KiKamokuEdaban> load() {
		final String sql = "SELECT * FROM ki_kamoku_edaban ORDER BY kesn, kamoku_naibu_cd, kamoku_edaban_cd";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * （期別）科目枝番から一部キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @return List<（期別）科目枝番>DTO
	 */
	public List<KiKamokuEdaban> load(int kesn) {
		final String sql = "SELECT * FROM ki_kamoku_edaban WHERE kesn = ? "
							+ "ORDER BY kesn, kamoku_naibu_cd, kamoku_edaban_cd";
		return mapToDto(connection.load(sql, kesn));
	}
	
	/**
	 * （期別）科目枝番から一部キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param kamokuNaibuCd 科目内部コード
	 * @return List<（期別）科目枝番>DTO
	 */
	public List<KiKamokuEdaban> load(int kesn, String kamokuNaibuCd) {
		final String sql = "SELECT * FROM ki_kamoku_edaban WHERE kesn = ?  AND kamoku_naibu_cd = ? "
							+ "ORDER BY kesn, kamoku_naibu_cd, kamoku_edaban_cd";
		return mapToDto(connection.load(sql, kesn, kamokuNaibuCd));
	}

	/**
	* （期別）科目枝番登録
	* @param dto （期別）科目枝番
	* @return 件数
	*/
	public int insert(
		KiKamokuEdaban dto
	){
		final String sql =
				"INSERT INTO ki_kamoku_edaban "
			+ "VALUES(?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.kesn, dto.kamokuNaibuCd, dto.kamokuEdabanCd, dto.edabanName
					);
	}

	/**
	* （期別）科目枝番登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto （期別）科目枝番
	* @return 件数
	*/
	public int upsert(
		KiKamokuEdaban dto
		 ){
		final String sql =
				"INSERT INTO ki_kamoku_edaban "
			+ "VALUES(?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT ki_kamoku_edaban_pkey "
			+ "DO UPDATE SET edaban_name = ? "
			+ "";
			return connection.update(sql,
				dto.kesn, dto.kamokuNaibuCd, dto.kamokuEdabanCd, dto.edabanName
				, dto.edabanName
				);
    }
	
	/**
	 * （期別）科目枝番から主キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param kamokuNaibuCd 科目内部コード
	 * @param kamokuEdabanCd 科目枝番コード
	 * @return 削除件数
	 */
	public int delete(int kesn, String kamokuNaibuCd, String kamokuEdabanCd){
		final String sql = "DELETE FROM ki_kamoku_edaban WHERE kesn = ? AND kamoku_naibu_cd = ? AND kamoku_edaban_cd = ?";
		return connection.update(sql, kesn, kamokuNaibuCd, kamokuEdabanCd);
	}
	
	/**
	 * （期別）科目枝番から一部キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @return 削除件数
	 */
	public int delete(int kesn) {
		final String sql = "DELETE FROM ki_kamoku_edaban WHERE kesn = ? ";
		return connection.update(sql, kesn);
	}
	
	/**
	 * （期別）科目枝番から一部キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param kamokuNaibuCd 科目内部コード
	 * @return 削除件数
	 */
	public int delete(int kesn, String kamokuNaibuCd) {
		final String sql = "DELETE FROM ki_kamoku_edaban WHERE kesn = ?  AND kamoku_naibu_cd = ? ";
		return connection.update(sql, kesn, kamokuNaibuCd);
	}
}
