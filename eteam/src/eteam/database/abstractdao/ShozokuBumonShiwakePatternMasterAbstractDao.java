package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.ShozokuBumonShiwakePatternMaster;

/**
 * 所属部門仕訳パターンマスターに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class ShozokuBumonShiwakePatternMasterAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected ShozokuBumonShiwakePatternMaster mapToDto(GMap map){
		return map == null ? null : new ShozokuBumonShiwakePatternMaster(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<ShozokuBumonShiwakePatternMaster> mapToDto(List<GMap> mapList){
		List<ShozokuBumonShiwakePatternMaster> dtoList = new ArrayList<ShozokuBumonShiwakePatternMaster>();
		for (var map : mapList) {
			dtoList.add(new ShozokuBumonShiwakePatternMaster(map));
		}
		return dtoList;
	}
	
	/**
	 * 所属部門仕訳パターンマスターのレコード有無を判定
	 * @param bumonCd 部門コード
	 * @param denpyouKbn 伝票区分
	 * @param shiwakeEdano 仕訳枝番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String bumonCd, String denpyouKbn, int shiwakeEdano) {
		return this.find(bumonCd, denpyouKbn, shiwakeEdano) == null ? false : true;
	}
	
	/**
	 * 所属部門仕訳パターンマスターから主キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @param denpyouKbn 伝票区分
	 * @param shiwakeEdano 仕訳枝番号
	 * @return 所属部門仕訳パターンマスターDTO
	 */
	public ShozokuBumonShiwakePatternMaster find(String bumonCd, String denpyouKbn, int shiwakeEdano) {
		final String sql = "SELECT * FROM shozoku_bumon_shiwake_pattern_master WHERE bumon_cd = ? AND denpyou_kbn = ? AND shiwake_edano = ?";
		return mapToDto(connection.find(sql, bumonCd, denpyouKbn, shiwakeEdano));
	}
	
	/**
	 * 所属部門仕訳パターンマスターからレコードを全件取得 ※大量データ取得に注意
	 * @return List<所属部門仕訳パターンマスターDTO>
	 */
	public List<ShozokuBumonShiwakePatternMaster> load() {
		final String sql = "SELECT * FROM shozoku_bumon_shiwake_pattern_master ORDER BY bumon_cd, denpyou_kbn, shiwake_edano";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 所属部門仕訳パターンマスターから一部キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @return List<所属部門仕訳パターンマスター>DTO
	 */
	public List<ShozokuBumonShiwakePatternMaster> load(String bumonCd) {
		final String sql = "SELECT * FROM shozoku_bumon_shiwake_pattern_master WHERE bumon_cd = ? "
							+ "ORDER BY bumon_cd, denpyou_kbn, shiwake_edano";
		return mapToDto(connection.load(sql, bumonCd));
	}
	
	/**
	 * 所属部門仕訳パターンマスターから一部キー指定でレコードを取得
	 * @param bumonCd 部門コード
	 * @param denpyouKbn 伝票区分
	 * @return List<所属部門仕訳パターンマスター>DTO
	 */
	public List<ShozokuBumonShiwakePatternMaster> load(String bumonCd, String denpyouKbn) {
		final String sql = "SELECT * FROM shozoku_bumon_shiwake_pattern_master WHERE bumon_cd = ?  AND denpyou_kbn = ? "
							+ "ORDER BY bumon_cd, denpyou_kbn, shiwake_edano";
		return mapToDto(connection.load(sql, bumonCd, denpyouKbn));
	}

	/**
	* 所属部門仕訳パターンマスター登録
	* @param dto 所属部門仕訳パターンマスター
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		ShozokuBumonShiwakePatternMaster dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO shozoku_bumon_shiwake_pattern_master "
			+ "VALUES(?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.bumonCd, dto.denpyouKbn, dto.shiwakeEdano, koushinUserId, koushinUserId
					);
	}
	
	/**
	 * 所属部門仕訳パターンマスターから主キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @param denpyouKbn 伝票区分
	 * @param shiwakeEdano 仕訳枝番号
	 * @return 削除件数
	 */
	public int delete(String bumonCd, String denpyouKbn, int shiwakeEdano){
		final String sql = "DELETE FROM shozoku_bumon_shiwake_pattern_master WHERE bumon_cd = ? AND denpyou_kbn = ? AND shiwake_edano = ?";
		return connection.update(sql, bumonCd, denpyouKbn, shiwakeEdano);
	}
	
	/**
	 * 所属部門仕訳パターンマスターから一部キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @return 削除件数
	 */
	public int delete(String bumonCd) {
		final String sql = "DELETE FROM shozoku_bumon_shiwake_pattern_master WHERE bumon_cd = ? ";
		return connection.update(sql, bumonCd);
	}
	
	/**
	 * 所属部門仕訳パターンマスターから一部キー指定でレコードを削除
	 * @param bumonCd 部門コード
	 * @param denpyouKbn 伝票区分
	 * @return 削除件数
	 */
	public int delete(String bumonCd, String denpyouKbn) {
		final String sql = "DELETE FROM shozoku_bumon_shiwake_pattern_master WHERE bumon_cd = ?  AND denpyou_kbn = ? ";
		return connection.update(sql, bumonCd, denpyouKbn);
	}
	
	/**
	 * 所属部門仕訳パターンマスターテーブルのデータを全て削除する。
	 * @return 削除レコード数
	 */
	public long deleteAllShozokuBumonShiwake(){
		return connection.update("DELETE FROM shozoku_bumon_shiwake_pattern_master ");
	}
}
