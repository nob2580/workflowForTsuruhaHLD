package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.EbunshoData;

/**
 * e文書データに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class EbunshoDataAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected EbunshoData mapToDto(GMap map){
		return map == null ? null : new EbunshoData(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<EbunshoData> mapToDto(List<GMap> mapList){
		List<EbunshoData> dtoList = new ArrayList<EbunshoData>();
		for (var map : mapList) {
			dtoList.add(new EbunshoData(map));
		}
		return dtoList;
	}
	
	/**
	 * e文書データのレコード有無を判定
	 * @param ebunshoNo e文書番号
	 * @param ebunshoEdano e文書枝番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String ebunshoNo, int ebunshoEdano) {
		return this.find(ebunshoNo, ebunshoEdano) == null ? false : true;
	}
	
	/**
	 * e文書データから主キー指定でレコードを取得
	 * @param ebunshoNo e文書番号
	 * @param ebunshoEdano e文書枝番号
	 * @return e文書データDTO
	 */
	public EbunshoData find(String ebunshoNo, int ebunshoEdano) {
		final String sql = "SELECT * FROM ebunsho_data WHERE ebunsho_no = ? AND ebunsho_edano = ?";
		return mapToDto(connection.find(sql, ebunshoNo, ebunshoEdano));
	}
	
	/**
	 * e文書データからレコードを全件取得 ※大量データ取得に注意
	 * @return List<e文書データDTO>
	 */
	public List<EbunshoData> load() {
		final String sql = "SELECT * FROM ebunsho_data ORDER BY ebunsho_no, ebunsho_edano";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * e文書データから一部キー指定でレコードを取得
	 * @param ebunshoNo e文書番号
	 * @return List<e文書データ>DTO
	 */
	public List<EbunshoData> load(String ebunshoNo) {
		final String sql = "SELECT * FROM ebunsho_data WHERE ebunsho_no = ? "
							+ "ORDER BY ebunsho_no, ebunsho_edano";
		return mapToDto(connection.load(sql, ebunshoNo));
	}

	/**
	* e文書データ登録
	* @param dto e文書データ
	* @return 件数
	*/
	public int insert(
		EbunshoData dto
	){
		final String sql =
				"INSERT INTO ebunsho_data "
			+ "VALUES(?, ?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.ebunshoNo, dto.ebunshoEdano, dto.ebunshoShubetsu, dto.ebunshoNengappi, dto.ebunshoKingaku, dto.ebunshoHakkousha, dto.ebunshoHinmei
					);
	}

	/**
	* e文書データ登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto e文書データ
	* @return 件数
	*/
	public int upsert(
		EbunshoData dto
		 ){
		final String sql =
				"INSERT INTO ebunsho_data "
			+ "VALUES(?, ?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT ebunsho_data_pkey "
			+ "DO UPDATE SET ebunsho_shubetsu = ?, ebunsho_nengappi = ?, ebunsho_kingaku = ?, ebunsho_hakkousha = ?, ebunsho_hinmei = ? "
			+ "";
			return connection.update(sql,
				dto.ebunshoNo, dto.ebunshoEdano, dto.ebunshoShubetsu, dto.ebunshoNengappi, dto.ebunshoKingaku, dto.ebunshoHakkousha, dto.ebunshoHinmei
				, dto.ebunshoShubetsu, dto.ebunshoNengappi, dto.ebunshoKingaku, dto.ebunshoHakkousha, dto.ebunshoHinmei
				);
    }
	
	/**
	 * e文書データから主キー指定でレコードを削除
	 * @param ebunshoNo e文書番号
	 * @param ebunshoEdano e文書枝番号
	 * @return 削除件数
	 */
	public int delete(String ebunshoNo, int ebunshoEdano){
		final String sql = "DELETE FROM ebunsho_data WHERE ebunsho_no = ? AND ebunsho_edano = ?";
		return connection.update(sql, ebunshoNo, ebunshoEdano);
	}
	
	/**
	 * e文書データから一部キー指定でレコードを削除
	 * @param ebunshoNo e文書番号
	 * @return 削除件数
	 */
	public int delete(String ebunshoNo) {
		final String sql = "DELETE FROM ebunsho_data WHERE ebunsho_no = ? ";
		return connection.update(sql, ebunshoNo);
	}
}
