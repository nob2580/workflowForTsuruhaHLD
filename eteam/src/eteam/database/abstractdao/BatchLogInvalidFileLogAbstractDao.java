package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.BatchLogInvalidFileLog;

/**
 * 不良データログに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class BatchLogInvalidFileLogAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected BatchLogInvalidFileLog mapToDto(GMap map){
		return map == null ? null : new BatchLogInvalidFileLog(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<BatchLogInvalidFileLog> mapToDto(List<GMap> mapList){
		List<BatchLogInvalidFileLog> dtoList = new ArrayList<BatchLogInvalidFileLog>();
		for (var map : mapList) {
			dtoList.add(new BatchLogInvalidFileLog(map));
		}
		return dtoList;
	}
	
	/**
	 * 不良データログのレコード有無を判定
	 * @param fileName ファイル名
	 * @param gyouNo 行No
	 * @param koumokuNo 項目No
	 * @param koumokuName 項目名称
	 * @param invalidValue 不正な値
	 * @param errorNaiyou エラー内容
	 * @return true:exist false:not exist
	 */
	public boolean exists(String fileName, int gyouNo, int koumokuNo, String koumokuName, String invalidValue, String errorNaiyou) {
		return this.find(fileName, gyouNo, koumokuNo, koumokuName, invalidValue, errorNaiyou) == null ? false : true;
	}
	
	/**
	 * 不良データログから主キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @param gyouNo 行No
	 * @param koumokuNo 項目No
	 * @param koumokuName 項目名称
	 * @param invalidValue 不正な値
	 * @param errorNaiyou エラー内容
	 * @return 不良データログDTO
	 */
	public BatchLogInvalidFileLog find(String fileName, int gyouNo, int koumokuNo, String koumokuName, String invalidValue, String errorNaiyou) {
		final String sql = "SELECT * FROM batch_log_invalid_file_log WHERE file_name = ? AND gyou_no = ? AND koumoku_no = ? AND koumoku_name = ? AND invalid_value = ? AND error_naiyou = ?";
		return mapToDto(connection.find(sql, fileName, gyouNo, koumokuNo, koumokuName, invalidValue, errorNaiyou));
	}
	
	/**
	 * 不良データログからレコードを全件取得 ※大量データ取得に注意
	 * @return List<不良データログDTO>
	 */
	public List<BatchLogInvalidFileLog> load() {
		final String sql = "SELECT * FROM batch_log_invalid_file_log ORDER BY file_name, gyou_no, koumoku_no, koumoku_name, invalid_value, error_naiyou";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 不良データログから一部キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @return List<不良データログ>DTO
	 */
	public List<BatchLogInvalidFileLog> load(String fileName) {
		final String sql = "SELECT * FROM batch_log_invalid_file_log WHERE file_name = ? "
							+ "ORDER BY file_name, gyou_no, koumoku_no, koumoku_name, invalid_value, error_naiyou";
		return mapToDto(connection.load(sql, fileName));
	}
	
	/**
	 * 不良データログから一部キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @param gyouNo 行No
	 * @return List<不良データログ>DTO
	 */
	public List<BatchLogInvalidFileLog> load(String fileName, int gyouNo) {
		final String sql = "SELECT * FROM batch_log_invalid_file_log WHERE file_name = ?  AND gyou_no = ? "
							+ "ORDER BY file_name, gyou_no, koumoku_no, koumoku_name, invalid_value, error_naiyou";
		return mapToDto(connection.load(sql, fileName, gyouNo));
	}
	
	/**
	 * 不良データログから一部キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @param gyouNo 行No
	 * @param koumokuNo 項目No
	 * @return List<不良データログ>DTO
	 */
	public List<BatchLogInvalidFileLog> load(String fileName, int gyouNo, int koumokuNo) {
		final String sql = "SELECT * FROM batch_log_invalid_file_log WHERE file_name = ?  AND gyou_no = ?  AND koumoku_no = ? "
							+ "ORDER BY file_name, gyou_no, koumoku_no, koumoku_name, invalid_value, error_naiyou";
		return mapToDto(connection.load(sql, fileName, gyouNo, koumokuNo));
	}
	
	/**
	 * 不良データログから一部キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @param gyouNo 行No
	 * @param koumokuNo 項目No
	 * @param koumokuName 項目名称
	 * @return List<不良データログ>DTO
	 */
	public List<BatchLogInvalidFileLog> load(String fileName, int gyouNo, int koumokuNo, String koumokuName) {
		final String sql = "SELECT * FROM batch_log_invalid_file_log WHERE file_name = ?  AND gyou_no = ?  AND koumoku_no = ?  AND koumoku_name = ? "
							+ "ORDER BY file_name, gyou_no, koumoku_no, koumoku_name, invalid_value, error_naiyou";
		return mapToDto(connection.load(sql, fileName, gyouNo, koumokuNo, koumokuName));
	}
	
	/**
	 * 不良データログから一部キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @param gyouNo 行No
	 * @param koumokuNo 項目No
	 * @param koumokuName 項目名称
	 * @param invalidValue 不正な値
	 * @return List<不良データログ>DTO
	 */
	public List<BatchLogInvalidFileLog> load(String fileName, int gyouNo, int koumokuNo, String koumokuName, String invalidValue) {
		final String sql = "SELECT * FROM batch_log_invalid_file_log WHERE file_name = ?  AND gyou_no = ?  AND koumoku_no = ?  AND koumoku_name = ?  AND invalid_value = ? "
							+ "ORDER BY file_name, gyou_no, koumoku_no, koumoku_name, invalid_value, error_naiyou";
		return mapToDto(connection.load(sql, fileName, gyouNo, koumokuNo, koumokuName, invalidValue));
	}

	/**
	* 不良データログ登録
	* @param dto 不良データログ
	* @return 件数
	*/
	public int insert(
		BatchLogInvalidFileLog dto
	){
		final String sql =
				"INSERT INTO batch_log_invalid_file_log "
			+ "VALUES(?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.fileName, dto.gyouNo, dto.koumokuNo, dto.koumokuName, dto.invalidValue, dto.errorNaiyou
					);
	}
	
	/**
	 * 不良データログから主キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @param gyouNo 行No
	 * @param koumokuNo 項目No
	 * @param koumokuName 項目名称
	 * @param invalidValue 不正な値
	 * @param errorNaiyou エラー内容
	 * @return 削除件数
	 */
	public int delete(String fileName, int gyouNo, int koumokuNo, String koumokuName, String invalidValue, String errorNaiyou){
		final String sql = "DELETE FROM batch_log_invalid_file_log WHERE file_name = ? AND gyou_no = ? AND koumoku_no = ? AND koumoku_name = ? AND invalid_value = ? AND error_naiyou = ?";
		return connection.update(sql, fileName, gyouNo, koumokuNo, koumokuName, invalidValue, errorNaiyou);
	}
	
	/**
	 * 不良データログから一部キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @return 削除件数
	 */
	public int delete(String fileName) {
		final String sql = "DELETE FROM batch_log_invalid_file_log WHERE file_name = ? ";
		return connection.update(sql, fileName);
	}
	
	/**
	 * 不良データログから一部キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @param gyouNo 行No
	 * @return 削除件数
	 */
	public int delete(String fileName, int gyouNo) {
		final String sql = "DELETE FROM batch_log_invalid_file_log WHERE file_name = ?  AND gyou_no = ? ";
		return connection.update(sql, fileName, gyouNo);
	}
	
	/**
	 * 不良データログから一部キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @param gyouNo 行No
	 * @param koumokuNo 項目No
	 * @return 削除件数
	 */
	public int delete(String fileName, int gyouNo, int koumokuNo) {
		final String sql = "DELETE FROM batch_log_invalid_file_log WHERE file_name = ?  AND gyou_no = ?  AND koumoku_no = ? ";
		return connection.update(sql, fileName, gyouNo, koumokuNo);
	}
	
	/**
	 * 不良データログから一部キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @param gyouNo 行No
	 * @param koumokuNo 項目No
	 * @param koumokuName 項目名称
	 * @return 削除件数
	 */
	public int delete(String fileName, int gyouNo, int koumokuNo, String koumokuName) {
		final String sql = "DELETE FROM batch_log_invalid_file_log WHERE file_name = ?  AND gyou_no = ?  AND koumoku_no = ?  AND koumoku_name = ? ";
		return connection.update(sql, fileName, gyouNo, koumokuNo, koumokuName);
	}
	
	/**
	 * 不良データログから一部キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @param gyouNo 行No
	 * @param koumokuNo 項目No
	 * @param koumokuName 項目名称
	 * @param invalidValue 不正な値
	 * @return 削除件数
	 */
	public int delete(String fileName, int gyouNo, int koumokuNo, String koumokuName, String invalidValue) {
		final String sql = "DELETE FROM batch_log_invalid_file_log WHERE file_name = ?  AND gyou_no = ?  AND koumoku_no = ?  AND koumoku_name = ?  AND invalid_value = ? ";
		return connection.update(sql, fileName, gyouNo, koumokuNo, koumokuName, invalidValue);
	}
}
