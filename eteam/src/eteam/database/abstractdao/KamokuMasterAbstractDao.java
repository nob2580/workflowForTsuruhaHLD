package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KamokuMaster;

/**
 * 科目マスターに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KamokuMasterAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KamokuMaster mapToDto(GMap map){
		return map == null ? null : new KamokuMaster(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KamokuMaster> mapToDto(List<GMap> mapList){
		List<KamokuMaster> dtoList = new ArrayList<KamokuMaster>();
		for (var map : mapList) {
			dtoList.add(new KamokuMaster(map));
		}
		return dtoList;
	}
	
	/**
	 * 科目マスターのレコード有無を判定
	 * @param kamokuGaibuCd 科目外部コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String kamokuGaibuCd) {
		return this.find(kamokuGaibuCd) == null ? false : true;
	}
	
	/**
	 * 科目マスターから主キー指定でレコードを取得
	 * @param kamokuGaibuCd 科目外部コード
	 * @return 科目マスターDTO
	 */
	public KamokuMaster find(String kamokuGaibuCd) {
		final String sql = "SELECT * FROM kamoku_master WHERE kamoku_gaibu_cd = ?";
		return mapToDto(connection.find(sql, kamokuGaibuCd));
	}
	
	/**
	 * 科目マスターからレコードを全件取得 ※大量データ取得に注意
	 * @return List<科目マスターDTO>
	 */
	public List<KamokuMaster> load() {
		final String sql = "SELECT * FROM kamoku_master ORDER BY kamoku_gaibu_cd";
		return mapToDto(connection.load(sql));
	}

	/**
	* 科目マスター登録
	* @param dto 科目マスター
	* @return 件数
	*/
	public int insert(
		KamokuMaster dto
	){
		final String sql =
				"INSERT INTO kamoku_master "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.kamokuGaibuCd, dto.kamokuNaibuCd, dto.kamokuNameRyakushiki, dto.kamokuNameSeishiki, dto.kessankiBangou, dto.chouhyouShaturyokuNo, dto.taishakuZokusei, dto.kamokuGroupKbn, dto.kamokuGroupBangou, dto.shoriGroup, dto.taikakingakuNyuuryokuFlg, dto.kazeiKbn, dto.bunriKbn, dto.shiireKbn, dto.gyoushaKbn, dto.zeiritsuKbn, dto.tokushaHyoujiKbn, dto.edabanMinyuuryokuCheck, dto.torihikisakiMinyuuryokuCheck, dto.bumonMinyuuryokuCheck, dto.bumonEdabanFlg, dto.segmentMinyuuryokuCheck, dto.projectMinyuuryokuCheck, dto.uf1MinyuuryokuCheck, dto.uf2MinyuuryokuCheck, dto.uf3MinyuuryokuCheck, dto.uf4MinyuuryokuCheck, dto.uf5MinyuuryokuCheck, dto.uf6MinyuuryokuCheck, dto.uf7MinyuuryokuCheck, dto.uf8MinyuuryokuCheck, dto.uf9MinyuuryokuCheck, dto.uf10MinyuuryokuCheck, dto.ufKotei1MinyuuryokuCheck, dto.ufKotei2MinyuuryokuCheck, dto.ufKotei3MinyuuryokuCheck, dto.ufKotei4MinyuuryokuCheck, dto.ufKotei5MinyuuryokuCheck, dto.ufKotei6MinyuuryokuCheck, dto.ufKotei7MinyuuryokuCheck, dto.ufKotei8MinyuuryokuCheck, dto.ufKotei9MinyuuryokuCheck, dto.ufKotei10MinyuuryokuCheck, dto.koujiMinyuuryokuCheck, dto.koushaMinyuuryokuCheck, dto.tekiyouCdMinyuuryokuCheck, dto.bumonTorhikisakiKamokuFlg, dto.bumonTorihikisakiEdabanShiyouFlg, dto.torihikisakiKamokuEdabanFlg, dto.segmentTorihikisakiKamokuFlg, dto.karikanjouKeshikomiNoFlg, dto.gaikaFlg
					);
	}

	/**
	* 科目マスター登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 科目マスター
	* @return 件数
	*/
	public int upsert(
		KamokuMaster dto
		 ){
		final String sql =
				"INSERT INTO kamoku_master "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT kamoku_master_pkey "
			+ "DO UPDATE SET kamoku_naibu_cd = ?, kamoku_name_ryakushiki = ?, kamoku_name_seishiki = ?, kessanki_bangou = ?, chouhyou_shaturyoku_no = ?, taishaku_zokusei = ?, kamoku_group_kbn = ?, kamoku_group_bangou = ?, shori_group = ?, taikakingaku_nyuuryoku_flg = ?, kazei_kbn = ?, bunri_kbn = ?, shiire_kbn = ?, gyousha_kbn = ?, zeiritsu_kbn = ?, tokusha_hyouji_kbn = ?, edaban_minyuuryoku_check = ?, torihikisaki_minyuuryoku_check = ?, bumon_minyuuryoku_check = ?, bumon_edaban_flg = ?, segment_minyuuryoku_check = ?, project_minyuuryoku_check = ?, uf1_minyuuryoku_check = ?, uf2_minyuuryoku_check = ?, uf3_minyuuryoku_check = ?, uf4_minyuuryoku_check = ?, uf5_minyuuryoku_check = ?, uf6_minyuuryoku_check = ?, uf7_minyuuryoku_check = ?, uf8_minyuuryoku_check = ?, uf9_minyuuryoku_check = ?, uf10_minyuuryoku_check = ?, uf_kotei1_minyuuryoku_check = ?, uf_kotei2_minyuuryoku_check = ?, uf_kotei3_minyuuryoku_check = ?, uf_kotei4_minyuuryoku_check = ?, uf_kotei5_minyuuryoku_check = ?, uf_kotei6_minyuuryoku_check = ?, uf_kotei7_minyuuryoku_check = ?, uf_kotei8_minyuuryoku_check = ?, uf_kotei9_minyuuryoku_check = ?, uf_kotei10_minyuuryoku_check = ?, kouji_minyuuryoku_check = ?, kousha_minyuuryoku_check = ?, tekiyou_cd_minyuuryoku_check = ?, bumon_torhikisaki_kamoku_flg = ?, bumon_torihikisaki_edaban_shiyou_flg = ?, torihikisaki_kamoku_edaban_flg = ?, segment_torihikisaki_kamoku_flg = ?, karikanjou_keshikomi_no_flg = ?, gaika_flg = ? "
			+ "";
			return connection.update(sql,
				dto.kamokuGaibuCd, dto.kamokuNaibuCd, dto.kamokuNameRyakushiki, dto.kamokuNameSeishiki, dto.kessankiBangou, dto.chouhyouShaturyokuNo, dto.taishakuZokusei, dto.kamokuGroupKbn, dto.kamokuGroupBangou, dto.shoriGroup, dto.taikakingakuNyuuryokuFlg, dto.kazeiKbn, dto.bunriKbn, dto.shiireKbn, dto.gyoushaKbn, dto.zeiritsuKbn, dto.tokushaHyoujiKbn, dto.edabanMinyuuryokuCheck, dto.torihikisakiMinyuuryokuCheck, dto.bumonMinyuuryokuCheck, dto.bumonEdabanFlg, dto.segmentMinyuuryokuCheck, dto.projectMinyuuryokuCheck, dto.uf1MinyuuryokuCheck, dto.uf2MinyuuryokuCheck, dto.uf3MinyuuryokuCheck, dto.uf4MinyuuryokuCheck, dto.uf5MinyuuryokuCheck, dto.uf6MinyuuryokuCheck, dto.uf7MinyuuryokuCheck, dto.uf8MinyuuryokuCheck, dto.uf9MinyuuryokuCheck, dto.uf10MinyuuryokuCheck, dto.ufKotei1MinyuuryokuCheck, dto.ufKotei2MinyuuryokuCheck, dto.ufKotei3MinyuuryokuCheck, dto.ufKotei4MinyuuryokuCheck, dto.ufKotei5MinyuuryokuCheck, dto.ufKotei6MinyuuryokuCheck, dto.ufKotei7MinyuuryokuCheck, dto.ufKotei8MinyuuryokuCheck, dto.ufKotei9MinyuuryokuCheck, dto.ufKotei10MinyuuryokuCheck, dto.koujiMinyuuryokuCheck, dto.koushaMinyuuryokuCheck, dto.tekiyouCdMinyuuryokuCheck, dto.bumonTorhikisakiKamokuFlg, dto.bumonTorihikisakiEdabanShiyouFlg, dto.torihikisakiKamokuEdabanFlg, dto.segmentTorihikisakiKamokuFlg, dto.karikanjouKeshikomiNoFlg, dto.gaikaFlg
				, dto.kamokuNaibuCd, dto.kamokuNameRyakushiki, dto.kamokuNameSeishiki, dto.kessankiBangou, dto.chouhyouShaturyokuNo, dto.taishakuZokusei, dto.kamokuGroupKbn, dto.kamokuGroupBangou, dto.shoriGroup, dto.taikakingakuNyuuryokuFlg, dto.kazeiKbn, dto.bunriKbn, dto.shiireKbn, dto.gyoushaKbn, dto.zeiritsuKbn, dto.tokushaHyoujiKbn, dto.edabanMinyuuryokuCheck, dto.torihikisakiMinyuuryokuCheck, dto.bumonMinyuuryokuCheck, dto.bumonEdabanFlg, dto.segmentMinyuuryokuCheck, dto.projectMinyuuryokuCheck, dto.uf1MinyuuryokuCheck, dto.uf2MinyuuryokuCheck, dto.uf3MinyuuryokuCheck, dto.uf4MinyuuryokuCheck, dto.uf5MinyuuryokuCheck, dto.uf6MinyuuryokuCheck, dto.uf7MinyuuryokuCheck, dto.uf8MinyuuryokuCheck, dto.uf9MinyuuryokuCheck, dto.uf10MinyuuryokuCheck, dto.ufKotei1MinyuuryokuCheck, dto.ufKotei2MinyuuryokuCheck, dto.ufKotei3MinyuuryokuCheck, dto.ufKotei4MinyuuryokuCheck, dto.ufKotei5MinyuuryokuCheck, dto.ufKotei6MinyuuryokuCheck, dto.ufKotei7MinyuuryokuCheck, dto.ufKotei8MinyuuryokuCheck, dto.ufKotei9MinyuuryokuCheck, dto.ufKotei10MinyuuryokuCheck, dto.koujiMinyuuryokuCheck, dto.koushaMinyuuryokuCheck, dto.tekiyouCdMinyuuryokuCheck, dto.bumonTorhikisakiKamokuFlg, dto.bumonTorihikisakiEdabanShiyouFlg, dto.torihikisakiKamokuEdabanFlg, dto.segmentTorihikisakiKamokuFlg, dto.karikanjouKeshikomiNoFlg, dto.gaikaFlg
				);
    }
	
	/**
	 * 科目マスターから主キー指定でレコードを削除
	 * @param kamokuGaibuCd 科目外部コード
	 * @return 削除件数
	 */
	public int delete(String kamokuGaibuCd){
		final String sql = "DELETE FROM kamoku_master WHERE kamoku_gaibu_cd = ?";
		return connection.update(sql, kamokuGaibuCd);
	}
	
	/**
	 * 勘定科目名（略称）取得
	 * @param kamokuCd 勘定科目コード
	 * @return 勘定科目名（略称）---レコードなしならブランク
	 */
	public String findKamokuNameStr(String kamokuCd) {
		final String sql = "SELECT kamoku_name_ryakushiki FROM kamoku_master WHERE kamoku_gaibu_cd = ? ";
		var record = connection.find(sql, kamokuCd);
		return (null == record) ? "" : (String)record.get("kamoku_name_ryakushiki");
	}
	
	/**
	 * 現預金科目の勘定科目コード、勘定科目名（略称）取得
	 * ★★現預金出納帳向け
	 * @return リスト
	 */
	public List<KamokuMaster> loadGenyokin(){

		final String sql = "SELECT kamoku_gaibu_cd, kamoku_name_ryakushiki "
						 + "FROM kamoku_master "
						 + "WHERE (kamoku_naibu_cd LIKE '010010%' OR kamoku_naibu_cd LIKE '010020%') "
						 + "ORDER BY kamoku_gaibu_cd ASC";
		return mapToDto(connection.load(sql));
	}
	
	
	/**
	 * 現預金科目マスターから主キー指定でレコードを取得
	 * @param kamokuGaibuCd 科目外部コード
	 * @return 科目マスターDTO
	 */
	public KamokuMaster findGenyokin(String kamokuGaibuCd) {
		final String sql = "SELECT * FROM kamoku_master WHERE kamoku_gaibu_cd = ? AND (kamoku_naibu_cd LIKE '010010%' OR kamoku_naibu_cd LIKE '010020%')";
		return mapToDto(connection.find(sql, kamokuGaibuCd));
	}
	
	/**
	 * 科目マスターから主キー指定でレコードを取得
	 * @param kamokuNaibuCd 科目内部コード
	 * @return 科目マスターDTO
	 */
	public KamokuMaster findByKamokuNaibuCd(String kamokuNaibuCd) {
		final String sql = "SELECT * FROM kamoku_master WHERE kamoku_naibu_cd = ?";
		return mapToDto(connection.find(sql, kamokuNaibuCd));
	}
}
