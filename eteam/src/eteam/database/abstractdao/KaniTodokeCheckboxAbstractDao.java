package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KaniTodokeCheckbox;

/**
 * 届出ジェネレータ項目チェックボックスに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KaniTodokeCheckboxAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KaniTodokeCheckbox mapToDto(GMap map){
		return map == null ? null : new KaniTodokeCheckbox(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KaniTodokeCheckbox> mapToDto(List<GMap> mapList){
		List<KaniTodokeCheckbox> dtoList = new ArrayList<KaniTodokeCheckbox>();
		for (var map : mapList) {
			dtoList.add(new KaniTodokeCheckbox(map));
		}
		return dtoList;
	}
	
	/**
	 * 届出ジェネレータ項目チェックボックスのレコード有無を判定
	 * @param denpyouKbn 伝票区分
	 * @param version バージョン
	 * @param areaKbn エリア区分
	 * @param itemName 項目名
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouKbn, int version, String areaKbn, String itemName) {
		return this.find(denpyouKbn, version, areaKbn, itemName) == null ? false : true;
	}
	
	/**
	 * 届出ジェネレータ項目チェックボックスから主キー指定でレコードを取得
	 * @param denpyouKbn 伝票区分
	 * @param version バージョン
	 * @param areaKbn エリア区分
	 * @param itemName 項目名
	 * @return 届出ジェネレータ項目チェックボックスDTO
	 */
	public KaniTodokeCheckbox find(String denpyouKbn, int version, String areaKbn, String itemName) {
		final String sql = "SELECT * FROM kani_todoke_checkbox WHERE denpyou_kbn = ? AND version = ? AND area_kbn = ? AND item_name = ?";
		return mapToDto(connection.find(sql, denpyouKbn, version, areaKbn, itemName));
	}
	
	/**
	 * 届出ジェネレータ項目チェックボックスからレコードを全件取得 ※大量データ取得に注意
	 * @return List<届出ジェネレータ項目チェックボックスDTO>
	 */
	public List<KaniTodokeCheckbox> load() {
		final String sql = "SELECT * FROM kani_todoke_checkbox ORDER BY denpyou_kbn, version, area_kbn, item_name";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 届出ジェネレータ項目チェックボックスから一部キー指定でレコードを取得
	 * @param denpyouKbn 伝票区分
	 * @return List<届出ジェネレータ項目チェックボックス>DTO
	 */
	public List<KaniTodokeCheckbox> load(String denpyouKbn) {
		final String sql = "SELECT * FROM kani_todoke_checkbox WHERE denpyou_kbn = ? "
							+ "ORDER BY denpyou_kbn, version, area_kbn, item_name";
		return mapToDto(connection.load(sql, denpyouKbn));
	}
	
	/**
	 * 届出ジェネレータ項目チェックボックスから一部キー指定でレコードを取得
	 * @param denpyouKbn 伝票区分
	 * @param version バージョン
	 * @return List<届出ジェネレータ項目チェックボックス>DTO
	 */
	public List<KaniTodokeCheckbox> load(String denpyouKbn, int version) {
		final String sql = "SELECT * FROM kani_todoke_checkbox WHERE denpyou_kbn = ?  AND version = ? "
							+ "ORDER BY denpyou_kbn, version, area_kbn, item_name";
		return mapToDto(connection.load(sql, denpyouKbn, version));
	}
	
	/**
	 * 届出ジェネレータ項目チェックボックスから一部キー指定でレコードを取得
	 * @param denpyouKbn 伝票区分
	 * @param version バージョン
	 * @param areaKbn エリア区分
	 * @return List<届出ジェネレータ項目チェックボックス>DTO
	 */
	public List<KaniTodokeCheckbox> load(String denpyouKbn, int version, String areaKbn) {
		final String sql = "SELECT * FROM kani_todoke_checkbox WHERE denpyou_kbn = ?  AND version = ?  AND area_kbn = ? "
							+ "ORDER BY denpyou_kbn, version, area_kbn, item_name";
		return mapToDto(connection.load(sql, denpyouKbn, version, areaKbn));
	}

	/**
	* 届出ジェネレータ項目チェックボックス登録
	* @param dto 届出ジェネレータ項目チェックボックス
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		KaniTodokeCheckbox dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO kani_todoke_checkbox "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.denpyouKbn, dto.version, dto.areaKbn, dto.itemName, dto.labelName, dto.hissuFlg, dto.checkboxLabelName, koushinUserId, koushinUserId
					);
	}

	/**
	* 届出ジェネレータ項目チェックボックスの非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したKaniTodokeCheckboxの使用を前提
	* @param dto 届出ジェネレータ項目チェックボックス
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		KaniTodokeCheckbox dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE kani_todoke_checkbox "
		    + "SET label_name = ?, hissu_flg = ?, checkbox_label_name = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND denpyou_kbn = ? AND version = ? AND area_kbn = ? AND item_name = ?";
			return connection.update(sql,
				dto.labelName, dto.hissuFlg, dto.checkboxLabelName, koushinUserId
				,dto.koushinTime, dto.denpyouKbn, dto.version, dto.areaKbn, dto.itemName);
    }

	/**
	* 届出ジェネレータ項目チェックボックス登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 届出ジェネレータ項目チェックボックス
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		KaniTodokeCheckbox dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO kani_todoke_checkbox "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT kani_todoke_checkbox_pkey "
			+ "DO UPDATE SET label_name = ?, hissu_flg = ?, checkbox_label_name = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.denpyouKbn, dto.version, dto.areaKbn, dto.itemName, dto.labelName, dto.hissuFlg, dto.checkboxLabelName, koushinUserId, koushinUserId
				, dto.labelName, dto.hissuFlg, dto.checkboxLabelName, koushinUserId
				);
    }
	
	/**
	 * 届出ジェネレータ項目チェックボックスから主キー指定でレコードを削除
	 * @param denpyouKbn 伝票区分
	 * @param version バージョン
	 * @param areaKbn エリア区分
	 * @param itemName 項目名
	 * @return 削除件数
	 */
	public int delete(String denpyouKbn, int version, String areaKbn, String itemName){
		final String sql = "DELETE FROM kani_todoke_checkbox WHERE denpyou_kbn = ? AND version = ? AND area_kbn = ? AND item_name = ?";
		return connection.update(sql, denpyouKbn, version, areaKbn, itemName);
	}
	
	/**
	 * 届出ジェネレータ項目チェックボックスから一部キー指定でレコードを削除
	 * @param denpyouKbn 伝票区分
	 * @return 削除件数
	 */
	public int delete(String denpyouKbn) {
		final String sql = "DELETE FROM kani_todoke_checkbox WHERE denpyou_kbn = ? ";
		return connection.update(sql, denpyouKbn);
	}
	
	/**
	 * 届出ジェネレータ項目チェックボックスから一部キー指定でレコードを削除
	 * @param denpyouKbn 伝票区分
	 * @param version バージョン
	 * @return 削除件数
	 */
	public int delete(String denpyouKbn, int version) {
		final String sql = "DELETE FROM kani_todoke_checkbox WHERE denpyou_kbn = ?  AND version = ? ";
		return connection.update(sql, denpyouKbn, version);
	}
	
	/**
	 * 届出ジェネレータ項目チェックボックスから一部キー指定でレコードを削除
	 * @param denpyouKbn 伝票区分
	 * @param version バージョン
	 * @param areaKbn エリア区分
	 * @return 削除件数
	 */
	public int delete(String denpyouKbn, int version, String areaKbn) {
		final String sql = "DELETE FROM kani_todoke_checkbox WHERE denpyou_kbn = ?  AND version = ?  AND area_kbn = ? ";
		return connection.update(sql, denpyouKbn, version, areaKbn);
	}
}
