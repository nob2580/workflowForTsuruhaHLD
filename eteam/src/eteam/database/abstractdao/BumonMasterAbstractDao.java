package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.BumonMaster;

/**
 * 負担部門に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class BumonMasterAbstractDao extends EteamAbstractLogic {

	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO bumon_master (futan_bumon_cd, futan_bumon_name, kessanki_bangou, shaukei_bumon_flg, shiire_kbn, nyuryoku_from_date, nyuryoku_to_date) VALUES "
			+ "(?, ?, ?, ?, ?, ?, ?)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE futan_bumon_cd = ?";

	/**
	 * @param map GMap
	 * @return dto (レコードが存在しなければNull)
	 */
	protected BumonMaster mapToDto(GMap map) {
		return map == null ? null : new BumonMaster(map);
	}

	/**
	 * @param mapList 検索結果GMap
	 * @return dtoList
	 */
	protected List<BumonMaster> mapToDto(List<GMap> mapList) {
		List<BumonMaster> dtoList = new ArrayList<BumonMaster>();
		for (var map : mapList) {
			dtoList.add(new BumonMaster(map));
		}
		return dtoList;
	}

	/**
	 * 負担部門のレコード有無を判定
	 * @param futanBumonCd 負担部門コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String futanBumonCd) {
		return this.find(futanBumonCd) != null;
	}

	/**
	 * 負担部門から主キー指定でレコードを取得
	 * @param futanBumonCd 負担部門コード
	 * @return 負担部門DTO
	 */
	public BumonMaster find(String futanBumonCd) {
		final String sql = "SELECT * FROM bumon_master " + this.whereSql;
		return mapToDto(connection.find(sql, futanBumonCd));
	}

	/**
	 * 負担部門からレコードを全件取得 ※大量データ取得に注意
	 * @return List<負担部門DTO>
	 */
	public List<BumonMaster> load() {
		final String sql = "SELECT * FROM bumon_master  ORDER BY futan_bumon_cd";
		return mapToDto(connection.load(sql));
	}

	/**
	 * 負担部門登録
	 * @param dto 負担部門
	 * @return 件数
	 */
	public int insert(BumonMaster dto) {
		return connection.update(this.insertSql, dto.futanBumonCd, dto.futanBumonName, dto.kessankiBangou, dto.shaukeiBumonFlg, dto.shiireKbn, dto.nyuryokuFromDate, dto.nyuryokuToDate);
	}

	/**
	 * 負担部門更新
	 * @param dto 負担部門
	 * @return 件数
	 */
	public int update(BumonMaster dto) {
		final String sql = "UPDATE bumon_master SET  futan_bumon_name = ?, kessanki_bangou = ?, shaukei_bumon_flg = ?, shiire_kbn = ?, nyuryoku_from_date = ?, nyuryoku_to_date = ? " + this.whereSql;
		return connection.update(sql, dto.futanBumonName, dto.kessankiBangou, dto.shaukeiBumonFlg, dto.shiireKbn, dto.nyuryokuFromDate, dto.nyuryokuToDate, dto.futanBumonCd);
	}

	/**
	 * 負担部門登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto 負担部門
	 * @return 件数
	 */
	public int upsert(BumonMaster dto) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT bumon_master_pkey "
			+ "DO UPDATE SET  futan_bumon_name = ?, kessanki_bangou = ?, shaukei_bumon_flg = ?, shiire_kbn = ?, nyuryoku_from_date = ?, nyuryoku_to_date = ? ";
		return connection.update(sql, dto.futanBumonCd, dto.futanBumonName, dto.kessankiBangou, dto.shaukeiBumonFlg, dto.shiireKbn, dto.nyuryokuFromDate, dto.nyuryokuToDate, dto.futanBumonName, dto.kessankiBangou, dto.shaukeiBumonFlg, dto.shiireKbn, dto.nyuryokuFromDate, dto.nyuryokuToDate);
	}

	/**
	 * 負担部門から主キー指定でレコードを削除
	 * @param futanBumonCd 負担部門コード
	 * @return 削除件数
	 */
	public int delete(String futanBumonCd) {
		final String sql = "DELETE FROM bumon_master " + this.whereSql;
		return connection.update(sql, futanBumonCd);
	}
	
	/**
	 * 負担部門名取得
	 * @param futanBumonCd 負担部門コード
	 * @return 負担部門名 引数がnull or blankの場合、該当コードが見つからない場合はblankを返す。
	 */
	public String findFutanBumonName(String futanBumonCd) {
		var dto = this.find(futanBumonCd);
		return (dto == null) ? "" : dto.futanBumonName;
	}
}
