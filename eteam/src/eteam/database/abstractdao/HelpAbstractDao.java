package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.Help;

/**
 * ヘルプに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class HelpAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected Help mapToDto(GMap map){
		return map == null ? null : new Help(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<Help> mapToDto(List<GMap> mapList){
		List<Help> dtoList = new ArrayList<Help>();
		for (var map : mapList) {
			dtoList.add(new Help(map));
		}
		return dtoList;
	}
	
	/**
	 * ヘルプのレコード有無を判定
	 * @param gamenId 画面ID
	 * @return true:exist false:not exist
	 */
	public boolean exists(String gamenId) {
		return this.find(gamenId) == null ? false : true;
	}
	
	/**
	 * ヘルプから主キー指定でレコードを取得
	 * @param gamenId 画面ID
	 * @return ヘルプDTO
	 */
	public Help find(String gamenId) {
		final String sql = "SELECT * FROM help WHERE gamen_id = ?";
		return mapToDto(connection.find(sql, gamenId));
	}
	
	/**
	 * ヘルプからレコードを全件取得 ※大量データ取得に注意
	 * @return List<ヘルプDTO>
	 */
	public List<Help> load() {
		final String sql = "SELECT * FROM help ORDER BY gamen_id";
		return mapToDto(connection.load(sql));
	}

	/**
	* ヘルプ登録
	* @param dto ヘルプ
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		Help dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO help "
			+ "VALUES(?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.gamenId, dto.helpRichText, koushinUserId, koushinUserId
					);
	}

	/**
	* ヘルプの非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したHelpの使用を前提
	* @param dto ヘルプ
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		Help dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE help "
		    + "SET help_rich_text = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND gamen_id = ?";
			return connection.update(sql,
				dto.helpRichText, koushinUserId
				,dto.koushinTime, dto.gamenId);
    }

	/**
	* ヘルプ登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto ヘルプ
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		Help dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO help "
			+ "VALUES(?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT help_pkey "
			+ "DO UPDATE SET help_rich_text = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.gamenId, dto.helpRichText, koushinUserId, koushinUserId
				, dto.helpRichText, koushinUserId
				);
    }
	
	/**
	 * ヘルプから主キー指定でレコードを削除
	 * @param gamenId 画面ID
	 * @return 削除件数
	 */
	public int delete(String gamenId){
		final String sql = "DELETE FROM help WHERE gamen_id = ?";
		return connection.update(sql, gamenId);
	}
}
