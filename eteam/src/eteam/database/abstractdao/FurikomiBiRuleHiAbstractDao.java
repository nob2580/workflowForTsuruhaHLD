package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.FurikomiBiRuleHi;

/**
 * 振込日ルール(日付)に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class FurikomiBiRuleHiAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected FurikomiBiRuleHi mapToDto(GMap map){
		return map == null ? null : new FurikomiBiRuleHi(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<FurikomiBiRuleHi> mapToDto(List<GMap> mapList){
		List<FurikomiBiRuleHi> dtoList = new ArrayList<FurikomiBiRuleHi>();
		for (var map : mapList) {
			dtoList.add(new FurikomiBiRuleHi(map));
		}
		return dtoList;
	}
	
	/**
	 * 振込日ルール(日付)のレコード有無を判定
	 * @param kijunDate 基準日
	 * @return true:exist false:not exist
	 */
	public boolean exists(int kijunDate) {
		return this.find(kijunDate) == null ? false : true;
	}
	
	/**
	 * 振込日ルール(日付)から主キー指定でレコードを取得
	 * @param kijunDate 基準日
	 * @return 振込日ルール(日付)DTO
	 */
	public FurikomiBiRuleHi find(int kijunDate) {
		final String sql = "SELECT * FROM furikomi_bi_rule_hi WHERE kijun_date = ?";
		return mapToDto(connection.find(sql, kijunDate));
	}
	
	/**
	 * 振込日ルール(日付)からレコードを全件取得 ※大量データ取得に注意
	 * @return List<振込日ルール(日付)DTO>
	 */
	public List<FurikomiBiRuleHi> load() {
		final String sql = "SELECT * FROM furikomi_bi_rule_hi ORDER BY kijun_date";
		return mapToDto(connection.load(sql));
	}

	/**
	* 振込日ルール(日付)登録
	* @param dto 振込日ルール(日付)
	* @return 件数
	*/
	public int insert(
		FurikomiBiRuleHi dto
	){
		final String sql =
				"INSERT INTO furikomi_bi_rule_hi "
			+ "VALUES(?, ? "
			+ ")";
			return connection.update(sql,
					dto.kijunDate, dto.furikomiDate
					);
	}

	/**
	* 振込日ルール(日付)登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 振込日ルール(日付)
	* @return 件数
	*/
	public int upsert(
		FurikomiBiRuleHi dto
		 ){
		final String sql =
				"INSERT INTO furikomi_bi_rule_hi "
			+ "VALUES(?, ? "
			+ ") ON CONFLICT ON CONSTRAINT furikomi_bi_rule_hi_pkey "
			+ "DO UPDATE SET furikomi_date = ? "
			+ "";
			return connection.update(sql,
				dto.kijunDate, dto.furikomiDate
				, dto.furikomiDate
				);
    }
	
	/**
	 * 振込日ルール(日付)から主キー指定でレコードを削除
	 * @param kijunDate 基準日
	 * @return 削除件数
	 */
	public int delete(int kijunDate){
		final String sql = "DELETE FROM furikomi_bi_rule_hi WHERE kijun_date = ?";
		return connection.update(sql, kijunDate);
	}
}
