package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.GougiPatternOya;

/**
 * 合議パターン親に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class GougiPatternOyaAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected GougiPatternOya mapToDto(GMap map){
		return map == null ? null : new GougiPatternOya(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<GougiPatternOya> mapToDto(List<GMap> mapList){
		List<GougiPatternOya> dtoList = new ArrayList<GougiPatternOya>();
		for (var map : mapList) {
			dtoList.add(new GougiPatternOya(map));
		}
		return dtoList;
	}
	
	/**
	 * 合議パターン親のレコード有無を判定
	 * @param gougiPatternNo 合議パターン番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(long gougiPatternNo) {
		return this.find(gougiPatternNo) == null ? false : true;
	}
	
	/**
	 * 合議パターン親から主キー指定でレコードを取得
	 * @param gougiPatternNo 合議パターン番号
	 * @return 合議パターン親DTO
	 */
	public GougiPatternOya find(long gougiPatternNo) {
		final String sql = "SELECT * FROM gougi_pattern_oya WHERE gougi_pattern_no = ?";
		return mapToDto(connection.find(sql, gougiPatternNo));
	}
	
	/**
	 * 合議パターン親からレコードを全件取得 ※大量データ取得に注意
	 * @return List<合議パターン親DTO>
	 */
	public List<GougiPatternOya> load() {
		final String sql = "SELECT * FROM gougi_pattern_oya ORDER BY gougi_pattern_no";
		return mapToDto(connection.load(sql));
	}

	/**
	* 合議パターン親登録
	* @param dto 合議パターン親
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		GougiPatternOya dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO gougi_pattern_oya "
			+ "( gougi_name, hyouji_jun, touroku_user_id, touroku_time, koushin_user_id, koushin_time) "
			+ "VALUES(?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.gougiName, dto.hyoujiJun, koushinUserId, koushinUserId
					);
	}

	/**
	* 合議パターン親の非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したGougiPatternOyaの使用を前提
	* @param dto 合議パターン親
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		GougiPatternOya dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE gougi_pattern_oya "
		    + "SET gougi_name = ?, hyouji_jun = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND gougi_pattern_no = ?";
			return connection.update(sql,
				dto.gougiName, dto.hyoujiJun, koushinUserId
				,dto.koushinTime, dto.gougiPatternNo);
    }

	/**
	* 合議パターン親登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 合議パターン親
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		GougiPatternOya dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO gougi_pattern_oya "
			+ "( gougi_name, hyouji_jun, touroku_user_id, touroku_time, koushin_user_id, koushin_time) "
			+ "VALUES(?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT gougi_pattern_oya_pkey "
			+ "DO UPDATE SET gougi_name = ?, hyouji_jun = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.gougiName, dto.hyoujiJun, koushinUserId, koushinUserId
				, dto.gougiName, dto.hyoujiJun, koushinUserId
				);
    }
	
	/**
	 * 合議パターン親から主キー指定でレコードを削除
	 * @param gougiPatternNo 合議パターン番号
	 * @return 削除件数
	 */
	public int delete(long gougiPatternNo){
		final String sql = "DELETE FROM gougi_pattern_oya WHERE gougi_pattern_no = ?";
		return connection.update(sql, gougiPatternNo);
	}
}
