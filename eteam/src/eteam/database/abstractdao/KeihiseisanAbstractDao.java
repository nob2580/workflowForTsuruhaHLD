package eteam.database.abstractdao;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.Keihiseisan;

/**
 * 経費精算に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KeihiseisanAbstractDao extends EteamAbstractLogic {

	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO keihiseisan (denpyou_id, karibarai_denpyou_id, karibarai_on, karibarai_mishiyou_flg, dairiflg, keijoubi, shiharaibi, shiharaikiboubi, shiharaihouhou, hontai_kingaku_goukei, shouhizeigaku_goukei, shiharai_kingaku_goukei, houjin_card_riyou_kingaku, kaisha_tehai_kingaku, sashihiki_shikyuu_kingaku, hf1_cd, hf1_name_ryakushiki, hf2_cd, hf2_name_ryakushiki, hf3_cd, hf3_name_ryakushiki, hf4_cd, hf4_name_ryakushiki, hf5_cd, hf5_name_ryakushiki, hf6_cd, hf6_name_ryakushiki, hf7_cd, hf7_name_ryakushiki, hf8_cd, hf8_name_ryakushiki, hf9_cd, hf9_name_ryakushiki, hf10_cd, hf10_name_ryakushiki, hosoku, touroku_user_id, touroku_time, koushin_user_id, koushin_time, invoice_denpyou) VALUES "
			+ "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp, ?)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE denpyou_id = ?";

	/**
	 * @param map GMap
	 * @return dto (レコードが存在しなければNull)
	 */
	protected Keihiseisan mapToDto(GMap map) {
		return map == null ? null : new Keihiseisan(map);
	}

	/**
	 * @param mapList 検索結果GMap
	 * @return dtoList
	 */
	protected List<Keihiseisan> mapToDto(List<GMap> mapList) {
		List<Keihiseisan> dtoList = new ArrayList<Keihiseisan>();
		for (var map : mapList) {
			dtoList.add(new Keihiseisan(map));
		}
		return dtoList;
	}

	/**
	 * 経費精算のレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId) {
		return this.find(denpyouId) != null;
	}

	/**
	 * 経費精算から主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return 経費精算DTO
	 */
	public Keihiseisan find(String denpyouId) {
		final String sql = "SELECT * FROM keihiseisan " + this.whereSql;
		return mapToDto(connection.find(sql, denpyouId));
	}

	/**
	 * 経費精算からレコードを全件取得 ※大量データ取得に注意
	 * @return List<経費精算DTO>
	 */
	public List<Keihiseisan> load() {
		final String sql = "SELECT * FROM keihiseisan  ORDER BY denpyou_id";
		return mapToDto(connection.load(sql));
	}

	/**
	 * 経費精算登録
	 * @param dto 経費精算
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int insert(Keihiseisan dto, String koushinUserId) {
		return connection.update(this.insertSql, dto.denpyouId, dto.karibaraiDenpyouId, dto.karibaraiOn, dto.karibaraiMishiyouFlg, dto.dairiflg, dto.keijoubi, dto.shiharaibi, dto.shiharaikiboubi, dto.shiharaihouhou, dto.hontaiKingakuGoukei, dto.shouhizeigakuGoukei, dto.shiharaiKingakuGoukei, dto.houjinCardRiyouKingaku, dto.kaishaTehaiKingaku, dto.sashihikiShikyuuKingaku, dto.hf1Cd, dto.hf1NameRyakushiki, dto.hf2Cd, dto.hf2NameRyakushiki, dto.hf3Cd, dto.hf3NameRyakushiki, dto.hf4Cd, dto.hf4NameRyakushiki, dto.hf5Cd, dto.hf5NameRyakushiki, dto.hf6Cd, dto.hf6NameRyakushiki, dto.hf7Cd, dto.hf7NameRyakushiki, dto.hf8Cd, dto.hf8NameRyakushiki, dto.hf9Cd, dto.hf9NameRyakushiki, dto.hf10Cd, dto.hf10NameRyakushiki, dto.hosoku, koushinUserId, koushinUserId, dto.invoiceDenpyou);
	}

	/**
	 * 経費精算更新
	 * @param dto 経費精算
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int update(Keihiseisan dto, String koushinUserId) {
		final String sql = "UPDATE keihiseisan SET  karibarai_denpyou_id = ?, karibarai_on = ?, karibarai_mishiyou_flg = ?, dairiflg = ?, keijoubi = ?, shiharaibi = ?, shiharaikiboubi = ?, shiharaihouhou = ?, hontai_kingaku_goukei = ?, shouhizeigaku_goukei = ?, shiharai_kingaku_goukei = ?, houjin_card_riyou_kingaku = ?, kaisha_tehai_kingaku = ?, sashihiki_shikyuu_kingaku = ?, hf1_cd = ?, hf1_name_ryakushiki = ?, hf2_cd = ?, hf2_name_ryakushiki = ?, hf3_cd = ?, hf3_name_ryakushiki = ?, hf4_cd = ?, hf4_name_ryakushiki = ?, hf5_cd = ?, hf5_name_ryakushiki = ?, hf6_cd = ?, hf6_name_ryakushiki = ?, hf7_cd = ?, hf7_name_ryakushiki = ?, hf8_cd = ?, hf8_name_ryakushiki = ?, hf9_cd = ?, hf9_name_ryakushiki = ?, hf10_cd = ?, hf10_name_ryakushiki = ?, hosoku = ?, koushin_user_id = ?, koushin_time = current_timestamp, invoice_denpyou = ? " + this.whereSql;
		return connection.update(sql, dto.karibaraiDenpyouId, dto.karibaraiOn, dto.karibaraiMishiyouFlg, dto.dairiflg, dto.keijoubi, dto.shiharaibi, dto.shiharaikiboubi, dto.shiharaihouhou, dto.hontaiKingakuGoukei, dto.shouhizeigakuGoukei, dto.shiharaiKingakuGoukei, dto.houjinCardRiyouKingaku, dto.kaishaTehaiKingaku, dto.sashihikiShikyuuKingaku, dto.hf1Cd, dto.hf1NameRyakushiki, dto.hf2Cd, dto.hf2NameRyakushiki, dto.hf3Cd, dto.hf3NameRyakushiki, dto.hf4Cd, dto.hf4NameRyakushiki, dto.hf5Cd, dto.hf5NameRyakushiki, dto.hf6Cd, dto.hf6NameRyakushiki, dto.hf7Cd, dto.hf7NameRyakushiki, dto.hf8Cd, dto.hf8NameRyakushiki, dto.hf9Cd, dto.hf9NameRyakushiki, dto.hf10Cd, dto.hf10NameRyakushiki, dto.hosoku, koushinUserId, dto.invoiceDenpyou, dto.denpyouId);
	}

	/**
	 * 経費精算登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto 経費精算
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int upsert(Keihiseisan dto, String koushinUserId) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT keihiseisan_pkey "
			+ "DO UPDATE SET  karibarai_denpyou_id = ?, karibarai_on = ?, karibarai_mishiyou_flg = ?, dairiflg = ?, keijoubi = ?, shiharaibi = ?, shiharaikiboubi = ?, shiharaihouhou = ?, hontai_kingaku_goukei = ?, shouhizeigaku_goukei = ?, shiharai_kingaku_goukei = ?, houjin_card_riyou_kingaku = ?, kaisha_tehai_kingaku = ?, sashihiki_shikyuu_kingaku = ?, hf1_cd = ?, hf1_name_ryakushiki = ?, hf2_cd = ?, hf2_name_ryakushiki = ?, hf3_cd = ?, hf3_name_ryakushiki = ?, hf4_cd = ?, hf4_name_ryakushiki = ?, hf5_cd = ?, hf5_name_ryakushiki = ?, hf6_cd = ?, hf6_name_ryakushiki = ?, hf7_cd = ?, hf7_name_ryakushiki = ?, hf8_cd = ?, hf8_name_ryakushiki = ?, hf9_cd = ?, hf9_name_ryakushiki = ?, hf10_cd = ?, hf10_name_ryakushiki = ?, hosoku = ?, koushin_user_id = ?, koushin_time = current_timestamp, invoice_denpyou = ? ";
		return connection.update(sql, dto.denpyouId, dto.karibaraiDenpyouId, dto.karibaraiOn, dto.karibaraiMishiyouFlg, dto.dairiflg, dto.keijoubi, dto.shiharaibi, dto.shiharaikiboubi, dto.shiharaihouhou, dto.hontaiKingakuGoukei, dto.shouhizeigakuGoukei, dto.shiharaiKingakuGoukei, dto.houjinCardRiyouKingaku, dto.kaishaTehaiKingaku, dto.sashihikiShikyuuKingaku, dto.hf1Cd, dto.hf1NameRyakushiki, dto.hf2Cd, dto.hf2NameRyakushiki, dto.hf3Cd, dto.hf3NameRyakushiki, dto.hf4Cd, dto.hf4NameRyakushiki, dto.hf5Cd, dto.hf5NameRyakushiki, dto.hf6Cd, dto.hf6NameRyakushiki, dto.hf7Cd, dto.hf7NameRyakushiki, dto.hf8Cd, dto.hf8NameRyakushiki, dto.hf9Cd, dto.hf9NameRyakushiki, dto.hf10Cd, dto.hf10NameRyakushiki, dto.hosoku, koushinUserId, koushinUserId, dto.invoiceDenpyou, dto.karibaraiDenpyouId, dto.karibaraiOn, dto.karibaraiMishiyouFlg, dto.dairiflg, dto.keijoubi, dto.shiharaibi, dto.shiharaikiboubi, dto.shiharaihouhou, dto.hontaiKingakuGoukei, dto.shouhizeigakuGoukei, dto.shiharaiKingakuGoukei, dto.houjinCardRiyouKingaku, dto.kaishaTehaiKingaku, dto.sashihikiShikyuuKingaku, dto.hf1Cd, dto.hf1NameRyakushiki, dto.hf2Cd, dto.hf2NameRyakushiki, dto.hf3Cd, dto.hf3NameRyakushiki, dto.hf4Cd, dto.hf4NameRyakushiki, dto.hf5Cd, dto.hf5NameRyakushiki, dto.hf6Cd, dto.hf6NameRyakushiki, dto.hf7Cd, dto.hf7NameRyakushiki, dto.hf8Cd, dto.hf8NameRyakushiki, dto.hf9Cd, dto.hf9NameRyakushiki, dto.hf10Cd, dto.hf10NameRyakushiki, dto.hosoku, koushinUserId, dto.invoiceDenpyou);
	}

	/**
	 * 経費精算から主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int delete(String denpyouId) {
		final String sql = "DELETE FROM keihiseisan " + this.whereSql;
		return connection.update(sql, denpyouId);
	}

	/**
	 * 経費精算の計上日を更新する。
	 * @param denpyouId  伝票ID
	 * @param keijoubi   計上日
	 * @param userId     ユーザーID
	 * @return 処理件数
	 */
	public int updateKeijoubi(
			String denpyouId,
			Date keijoubi,
			String userId
	) {
		final String sql =
				"UPDATE keihiseisan "
			+   "SET keijoubi = ?, koushin_user_id=?, koushin_time=current_timestamp "
			+ "WHERE denpyou_id = ?";
		return connection.update(sql, keijoubi, userId, denpyouId);
	}
	
	/**
	 * 経費精算の計上日がnullなら計上日を本日の日付にする。
	 * @param denpyouId  伝票ID
	 * @param userId     ユーザーID
	 * @return 処理件数
	 */
	public int updateKeijoubiTodayIfNull(
			String denpyouId,
			String userId
	) {
		String sql = "SELECT * FROM keihiseisan WHERE denpyou_id=?";
		GMap denpyouRecord = connection.find(sql,denpyouId);
		if (denpyouRecord.get("keijoubi") != null ) return 0;
		sql =
			"UPDATE keihiseisan "
			+   "SET keijoubi = ?, koushin_user_id=?, koushin_time=current_timestamp "
			+ "WHERE denpyou_id = ?";
		return connection.update(sql, new java.sql.Date(System.currentTimeMillis()), userId, denpyouId);
	} 
	
	/**
	 * 経費精算の支払日を更新する。
	 * @param denpyouId  伝票ID
	 * @param shiharaibi 支払日
	 * @param userId     ユーザーID
	 * @return 処理件数
	 */
	public int updateShiharaibi(
			String denpyouId,
			Date shiharaibi,
			String userId
	) {
		final String sql =
				"UPDATE keihiseisan "
			+   "SET shiharaibi = ?, koushin_user_id=?, koushin_time=current_timestamp "
			+ "WHERE denpyou_id = ?";
		return connection.update(sql, shiharaibi, userId, denpyouId);
	}

	/**
	 * 指定した仮払伝票の精算完了日を更新
	 * @param karibaraiDenpyouId 伝票ID
	 * @param userId ユーザーID
	 * @return 処理件数
	 */
	public int updateKaribaraiSeisanbi(String karibaraiDenpyouId, String userId) {
		final String sql =
				"UPDATE karibarai "
			+   "SET seisan_kanryoubi = current_date, koushin_user_id=?, koushin_time=current_timestamp "
			+ "WHERE denpyou_id = ?";
		return connection.update(sql, userId, karibaraiDenpyouId);
		
	}
}