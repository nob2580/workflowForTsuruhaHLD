package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KiKamokuSecurity;

/**
 * （期別）科目セキュリティに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KiKamokuSecurityAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KiKamokuSecurity mapToDto(GMap map){
		return map == null ? null : new KiKamokuSecurity(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KiKamokuSecurity> mapToDto(List<GMap> mapList){
		List<KiKamokuSecurity> dtoList = new ArrayList<KiKamokuSecurity>();
		for (var map : mapList) {
			dtoList.add(new KiKamokuSecurity(map));
		}
		return dtoList;
	}
	
	/**
	 * （期別）科目セキュリティのレコード有無を判定
	 * @param kesn 内部決算期
	 * @param sptn セキュリティパターン
	 * @param kamokuNaibuCd 科目内部コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(int kesn, int sptn, String kamokuNaibuCd) {
		return this.find(kesn, sptn, kamokuNaibuCd) == null ? false : true;
	}
	
	/**
	 * （期別）科目セキュリティから主キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param sptn セキュリティパターン
	 * @param kamokuNaibuCd 科目内部コード
	 * @return （期別）科目セキュリティDTO
	 */
	public KiKamokuSecurity find(int kesn, int sptn, String kamokuNaibuCd) {
		final String sql = "SELECT * FROM ki_kamoku_security WHERE kesn = ? AND sptn = ? AND kamoku_naibu_cd = ?";
		return mapToDto(connection.find(sql, kesn, sptn, kamokuNaibuCd));
	}
	
	/**
	 * （期別）科目セキュリティからレコードを全件取得 ※大量データ取得に注意
	 * @return List<（期別）科目セキュリティDTO>
	 */
	public List<KiKamokuSecurity> load() {
		final String sql = "SELECT * FROM ki_kamoku_security ORDER BY kesn, sptn, kamoku_naibu_cd";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * （期別）科目セキュリティから一部キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @return List<（期別）科目セキュリティ>DTO
	 */
	public List<KiKamokuSecurity> load(int kesn) {
		final String sql = "SELECT * FROM ki_kamoku_security WHERE kesn = ? "
							+ "ORDER BY kesn, sptn, kamoku_naibu_cd";
		return mapToDto(connection.load(sql, kesn));
	}
	
	/**
	 * （期別）科目セキュリティから一部キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param sptn セキュリティパターン
	 * @return List<（期別）科目セキュリティ>DTO
	 */
	public List<KiKamokuSecurity> load(int kesn, int sptn) {
		final String sql = "SELECT * FROM ki_kamoku_security WHERE kesn = ?  AND sptn = ? "
							+ "ORDER BY kesn, sptn, kamoku_naibu_cd";
		return mapToDto(connection.load(sql, kesn, sptn));
	}

	/**
	* （期別）科目セキュリティ登録
	* @param dto （期別）科目セキュリティ
	* @return 件数
	*/
	public int insert(
		KiKamokuSecurity dto
	){
		final String sql =
				"INSERT INTO ki_kamoku_security "
			+ "VALUES(?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.kesn, dto.sptn, dto.kamokuNaibuCd
					);
	}
	
	/**
	 * （期別）科目セキュリティから主キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param sptn セキュリティパターン
	 * @param kamokuNaibuCd 科目内部コード
	 * @return 削除件数
	 */
	public int delete(int kesn, int sptn, String kamokuNaibuCd){
		final String sql = "DELETE FROM ki_kamoku_security WHERE kesn = ? AND sptn = ? AND kamoku_naibu_cd = ?";
		return connection.update(sql, kesn, sptn, kamokuNaibuCd);
	}
	
	/**
	 * （期別）科目セキュリティから一部キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @return 削除件数
	 */
	public int delete(int kesn) {
		final String sql = "DELETE FROM ki_kamoku_security WHERE kesn = ? ";
		return connection.update(sql, kesn);
	}
	
	/**
	 * （期別）科目セキュリティから一部キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param sptn セキュリティパターン
	 * @return 削除件数
	 */
	public int delete(int kesn, int sptn) {
		final String sql = "DELETE FROM ki_kamoku_security WHERE kesn = ?  AND sptn = ? ";
		return connection.update(sql, kesn, sptn);
	}
}
