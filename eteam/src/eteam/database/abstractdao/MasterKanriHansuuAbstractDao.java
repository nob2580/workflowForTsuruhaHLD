package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.MasterKanriHansuu;

/**
 * マスター管理版数に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class MasterKanriHansuuAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected MasterKanriHansuu mapToDto(GMap map){
		return map == null ? null : new MasterKanriHansuu(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<MasterKanriHansuu> mapToDto(List<GMap> mapList){
		List<MasterKanriHansuu> dtoList = new ArrayList<MasterKanriHansuu>();
		for (var map : mapList) {
			dtoList.add(new MasterKanriHansuu(map));
		}
		return dtoList;
	}
	
	/**
	 * マスター管理版数のレコード有無を判定
	 * @param masterId マスターID
	 * @param version ヴァージョン
	 * @return true:exist false:not exist
	 */
	public boolean exists(String masterId, int version) {
		return this.find(masterId, version) == null ? false : true;
	}
	
	/**
	 * マスター管理版数から主キー指定でレコードを取得
	 * @param masterId マスターID
	 * @param version ヴァージョン
	 * @return マスター管理版数DTO
	 */
	public MasterKanriHansuu find(String masterId, int version) {
		final String sql = "SELECT * FROM master_kanri_hansuu WHERE master_id = ? AND version = ?";
		return mapToDto(connection.find(sql, masterId, version));
	}
	
	/**
	 * マスター管理版数からレコードを全件取得 ※大量データ取得に注意
	 * @return List<マスター管理版数DTO>
	 */
	public List<MasterKanriHansuu> load() {
		final String sql = "SELECT * FROM master_kanri_hansuu ORDER BY master_id, version";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * マスター管理版数から一部キー指定でレコードを取得
	 * @param masterId マスターID
	 * @return List<マスター管理版数>DTO
	 */
	public List<MasterKanriHansuu> load(String masterId) {
		final String sql = "SELECT * FROM master_kanri_hansuu WHERE master_id = ? "
							+ "ORDER BY master_id, version";
		return mapToDto(connection.load(sql, masterId));
	}

	/**
	* マスター管理版数登録
	* @param dto マスター管理版数
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		MasterKanriHansuu dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO master_kanri_hansuu "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.masterId, dto.version, dto.deleteFlg, dto.fileName, dto.fileSize, dto.contentType, dto.binaryData, koushinUserId, koushinUserId
					);
	}

	/**
	* マスター管理版数の非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したMasterKanriHansuuの使用を前提
	* @param dto マスター管理版数
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		MasterKanriHansuu dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE master_kanri_hansuu "
		    + "SET delete_flg = ?, file_name = ?, file_size = ?, content_type = ?, binary_data = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND master_id = ? AND version = ?";
			return connection.update(sql,
				dto.deleteFlg, dto.fileName, dto.fileSize, dto.contentType, dto.binaryData, koushinUserId
				,dto.koushinTime, dto.masterId, dto.version);
    }

	/**
	* マスター管理版数登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto マスター管理版数
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		MasterKanriHansuu dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO master_kanri_hansuu "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT master_kanri_hansuu_pkey "
			+ "DO UPDATE SET delete_flg = ?, file_name = ?, file_size = ?, content_type = ?, binary_data = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.masterId, dto.version, dto.deleteFlg, dto.fileName, dto.fileSize, dto.contentType, dto.binaryData, koushinUserId, koushinUserId
				, dto.deleteFlg, dto.fileName, dto.fileSize, dto.contentType, dto.binaryData, koushinUserId
				);
    }
	
	/**
	 * マスター管理版数から主キー指定でレコードを削除
	 * @param masterId マスターID
	 * @param version ヴァージョン
	 * @return 削除件数
	 */
	public int delete(String masterId, int version){
		final String sql = "DELETE FROM master_kanri_hansuu WHERE master_id = ? AND version = ?";
		return connection.update(sql, masterId, version);
	}
	
	/**
	 * マスター管理版数から一部キー指定でレコードを削除
	 * @param masterId マスターID
	 * @return 削除件数
	 */
	public int delete(String masterId) {
		final String sql = "DELETE FROM master_kanri_hansuu WHERE master_id = ? ";
		return connection.update(sql, masterId);
	}
}
