package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.Uf3Zandaka;

/**
 * ユニバーサルフィールド３残高に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class Uf3ZandakaAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected Uf3Zandaka mapToDto(GMap map){
		return map == null ? null : new Uf3Zandaka(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<Uf3Zandaka> mapToDto(List<GMap> mapList){
		List<Uf3Zandaka> dtoList = new ArrayList<Uf3Zandaka>();
		for (var map : mapList) {
			dtoList.add(new Uf3Zandaka(map));
		}
		return dtoList;
	}
	
	/**
	 * ユニバーサルフィールド３残高のレコード有無を判定
	 * @param uf3Cd UF3コード
	 * @param kamokuGaibuCd 科目外部コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String uf3Cd, String kamokuGaibuCd) {
		return this.find(uf3Cd, kamokuGaibuCd) == null ? false : true;
	}
	
	/**
	 * ユニバーサルフィールド３残高から主キー指定でレコードを取得
	 * @param uf3Cd UF3コード
	 * @param kamokuGaibuCd 科目外部コード
	 * @return ユニバーサルフィールド３残高DTO
	 */
	public Uf3Zandaka find(String uf3Cd, String kamokuGaibuCd) {
		final String sql = "SELECT * FROM uf3_zandaka WHERE uf3_cd = ? AND kamoku_gaibu_cd = ?";
		return mapToDto(connection.find(sql, uf3Cd, kamokuGaibuCd));
	}
	
	/**
	 * ユニバーサルフィールド３残高からレコードを全件取得 ※大量データ取得に注意
	 * @return List<ユニバーサルフィールド３残高DTO>
	 */
	public List<Uf3Zandaka> load() {
		final String sql = "SELECT * FROM uf3_zandaka ORDER BY uf3_cd, kamoku_gaibu_cd";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * ユニバーサルフィールド３残高から一部キー指定でレコードを取得
	 * @param uf3Cd UF3コード
	 * @return List<ユニバーサルフィールド３残高>DTO
	 */
	public List<Uf3Zandaka> load(String uf3Cd) {
		final String sql = "SELECT * FROM uf3_zandaka WHERE uf3_cd = ? "
							+ "ORDER BY uf3_cd, kamoku_gaibu_cd";
		return mapToDto(connection.load(sql, uf3Cd));
	}

	/**
	* ユニバーサルフィールド３残高登録
	* @param dto ユニバーサルフィールド３残高
	* @return 件数
	*/
	public int insert(
		Uf3Zandaka dto
	){
		final String sql =
				"INSERT INTO uf3_zandaka "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.uf3Cd, dto.kamokuGaibuCd, dto.kessankiBangou, dto.kamokuNaibuCd, dto.uf3NameRyakushiki, dto.chouhyouShaturyokuNo, dto.kamokuNameRyakushiki, dto.kamokuNameSeishiki, dto.taishakuZokusei, dto.kishuZandaka
					);
	}

	/**
	* ユニバーサルフィールド３残高登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto ユニバーサルフィールド３残高
	* @return 件数
	*/
	public int upsert(
		Uf3Zandaka dto
		 ){
		final String sql =
				"INSERT INTO uf3_zandaka "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT uf3_zandaka_pkey "
			+ "DO UPDATE SET kessanki_bangou = ?, kamoku_naibu_cd = ?, uf3_name_ryakushiki = ?, chouhyou_shaturyoku_no = ?, kamoku_name_ryakushiki = ?, kamoku_name_seishiki = ?, taishaku_zokusei = ?, kishu_zandaka = ? "
			+ "";
			return connection.update(sql,
				dto.uf3Cd, dto.kamokuGaibuCd, dto.kessankiBangou, dto.kamokuNaibuCd, dto.uf3NameRyakushiki, dto.chouhyouShaturyokuNo, dto.kamokuNameRyakushiki, dto.kamokuNameSeishiki, dto.taishakuZokusei, dto.kishuZandaka
				, dto.kessankiBangou, dto.kamokuNaibuCd, dto.uf3NameRyakushiki, dto.chouhyouShaturyokuNo, dto.kamokuNameRyakushiki, dto.kamokuNameSeishiki, dto.taishakuZokusei, dto.kishuZandaka
				);
    }
	
	/**
	 * ユニバーサルフィールド３残高から主キー指定でレコードを削除
	 * @param uf3Cd UF3コード
	 * @param kamokuGaibuCd 科目外部コード
	 * @return 削除件数
	 */
	public int delete(String uf3Cd, String kamokuGaibuCd){
		final String sql = "DELETE FROM uf3_zandaka WHERE uf3_cd = ? AND kamoku_gaibu_cd = ?";
		return connection.update(sql, uf3Cd, kamokuGaibuCd);
	}
	
	/**
	 * ユニバーサルフィールド３残高から一部キー指定でレコードを削除
	 * @param uf3Cd UF3コード
	 * @return 削除件数
	 */
	public int delete(String uf3Cd) {
		final String sql = "DELETE FROM uf3_zandaka WHERE uf3_cd = ? ";
		return connection.update(sql, uf3Cd);
	}
}
