package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KiBushoShiwake;

/**
 * （期別）部署入出力仕訳に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KiBushoShiwakeAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected KiBushoShiwake mapToDto(GMap map){
		return map == null ? null : new KiBushoShiwake(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<KiBushoShiwake> mapToDto(List<GMap> mapList){
		List<KiBushoShiwake> dtoList = new ArrayList<KiBushoShiwake>();
		for (var map : mapList) {
			dtoList.add(new KiBushoShiwake(map));
		}
		return dtoList;
	}
	
	/**
	 * （期別）部署入出力仕訳のレコード有無を判定
	 * @param kesn 内部決算期
	 * @param dkei 経過月
	 * @param dseq 伝票SEQ
	 * @param sseq 仕訳SEQ
	 * @return true:exist false:not exist
	 */
	public boolean exists(int kesn, int dkei, int dseq, int sseq) {
		return this.find(kesn, dkei, dseq, sseq) == null ? false : true;
	}
	
	/**
	 * （期別）部署入出力仕訳から主キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param dkei 経過月
	 * @param dseq 伝票SEQ
	 * @param sseq 仕訳SEQ
	 * @return （期別）部署入出力仕訳DTO
	 */
	public KiBushoShiwake find(int kesn, int dkei, int dseq, int sseq) {
		final String sql = "SELECT * FROM ki_busho_shiwake WHERE kesn = ? AND dkei = ? AND dseq = ? AND sseq = ?";
		return mapToDto(connection.find(sql, kesn, dkei, dseq, sseq));
	}
	
	/**
	 * （期別）部署入出力仕訳からレコードを全件取得 ※大量データ取得に注意
	 * @return List<（期別）部署入出力仕訳DTO>
	 */
	public List<KiBushoShiwake> load() {
		final String sql = "SELECT * FROM ki_busho_shiwake ORDER BY kesn, dkei, dseq, sseq";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * （期別）部署入出力仕訳から一部キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @return List<（期別）部署入出力仕訳>DTO
	 */
	public List<KiBushoShiwake> load(int kesn) {
		final String sql = "SELECT * FROM ki_busho_shiwake WHERE kesn = ? "
							+ "ORDER BY kesn, dkei, dseq, sseq";
		return mapToDto(connection.load(sql, kesn));
	}
	
	/**
	 * （期別）部署入出力仕訳から一部キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param dkei 経過月
	 * @return List<（期別）部署入出力仕訳>DTO
	 */
	public List<KiBushoShiwake> load(int kesn, int dkei) {
		final String sql = "SELECT * FROM ki_busho_shiwake WHERE kesn = ?  AND dkei = ? "
							+ "ORDER BY kesn, dkei, dseq, sseq";
		return mapToDto(connection.load(sql, kesn, dkei));
	}
	
	/**
	 * （期別）部署入出力仕訳から一部キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @param dkei 経過月
	 * @param dseq 伝票SEQ
	 * @return List<（期別）部署入出力仕訳>DTO
	 */
	public List<KiBushoShiwake> load(int kesn, int dkei, int dseq) {
		final String sql = "SELECT * FROM ki_busho_shiwake WHERE kesn = ?  AND dkei = ?  AND dseq = ? "
							+ "ORDER BY kesn, dkei, dseq, sseq";
		return mapToDto(connection.load(sql, kesn, dkei, dseq));
	}

	/**
	* （期別）部署入出力仕訳登録
	* @param dto （期別）部署入出力仕訳
	* @return 件数
	*/
	public int insert(
		KiBushoShiwake dto
	){
		final String sql =
				"INSERT INTO ki_busho_shiwake "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.kesn, dto.dkei, dto.dseq, dto.sseq, dto.dymd, dto.dcno, dto.valu, dto.rkmk, dto.reda, dto.rbmn, dto.skmk, dto.seda, dto.sbmn
					);
	}

	/**
	* （期別）部署入出力仕訳登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto （期別）部署入出力仕訳
	* @return 件数
	*/
	public int upsert(
		KiBushoShiwake dto
		 ){
		final String sql =
				"INSERT INTO ki_busho_shiwake "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT ki_busho_shiwake_pkey "
			+ "DO UPDATE SET dymd = ?, dcno = ?, valu = ?, rkmk = ?, reda = ?, rbmn = ?, skmk = ?, seda = ?, sbmn = ? "
			+ "";
			return connection.update(sql,
				dto.kesn, dto.dkei, dto.dseq, dto.sseq, dto.dymd, dto.dcno, dto.valu, dto.rkmk, dto.reda, dto.rbmn, dto.skmk, dto.seda, dto.sbmn
				, dto.dymd, dto.dcno, dto.valu, dto.rkmk, dto.reda, dto.rbmn, dto.skmk, dto.seda, dto.sbmn
				);
    }
	
	/**
	 * （期別）部署入出力仕訳から主キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param dkei 経過月
	 * @param dseq 伝票SEQ
	 * @param sseq 仕訳SEQ
	 * @return 削除件数
	 */
	public int delete(int kesn, int dkei, int dseq, int sseq){
		final String sql = "DELETE FROM ki_busho_shiwake WHERE kesn = ? AND dkei = ? AND dseq = ? AND sseq = ?";
		return connection.update(sql, kesn, dkei, dseq, sseq);
	}
	
	/**
	 * （期別）部署入出力仕訳から一部キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @return 削除件数
	 */
	public int delete(int kesn) {
		final String sql = "DELETE FROM ki_busho_shiwake WHERE kesn = ? ";
		return connection.update(sql, kesn);
	}
	
	/**
	 * （期別）部署入出力仕訳から一部キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param dkei 経過月
	 * @return 削除件数
	 */
	public int delete(int kesn, int dkei) {
		final String sql = "DELETE FROM ki_busho_shiwake WHERE kesn = ?  AND dkei = ? ";
		return connection.update(sql, kesn, dkei);
	}
	
	/**
	 * （期別）部署入出力仕訳から一部キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @param dkei 経過月
	 * @param dseq 伝票SEQ
	 * @return 削除件数
	 */
	public int delete(int kesn, int dkei, int dseq) {
		final String sql = "DELETE FROM ki_busho_shiwake WHERE kesn = ?  AND dkei = ?  AND dseq = ? ";
		return connection.update(sql, kesn, dkei, dseq);
	}
}
