package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.ShiwakePatternVarSetting;

/**
 * 仕訳パターン変数設定に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class ShiwakePatternVarSettingAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected ShiwakePatternVarSetting mapToDto(GMap map){
		return map == null ? null : new ShiwakePatternVarSetting(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<ShiwakePatternVarSetting> mapToDto(List<GMap> mapList){
		List<ShiwakePatternVarSetting> dtoList = new ArrayList<ShiwakePatternVarSetting>();
		for (var map : mapList) {
			dtoList.add(new ShiwakePatternVarSetting(map));
		}
		return dtoList;
	}
	
	/**
	 * 仕訳パターン変数設定のレコード有無を判定
	 * @param shiwakePatternVar 仕訳パターン変数
	 * @return true:exist false:not exist
	 */
	public boolean exists(String shiwakePatternVar) {
		return this.find(shiwakePatternVar) == null ? false : true;
	}
	
	/**
	 * 仕訳パターン変数設定から主キー指定でレコードを取得
	 * @param shiwakePatternVar 仕訳パターン変数
	 * @return 仕訳パターン変数設定DTO
	 */
	public ShiwakePatternVarSetting find(String shiwakePatternVar) {
		final String sql = "SELECT * FROM shiwake_pattern_var_setting WHERE shiwake_pattern_var = ?";
		return mapToDto(connection.find(sql, shiwakePatternVar));
	}
	
	/**
	 * 仕訳パターン変数設定からレコードを全件取得 ※大量データ取得に注意
	 * @return List<仕訳パターン変数設定DTO>
	 */
	public List<ShiwakePatternVarSetting> load() {
		final String sql = "SELECT * FROM shiwake_pattern_var_setting ORDER BY shiwake_pattern_var";
		return mapToDto(connection.load(sql));
	}

	/**
	 * 仕訳パターン変数設定からレコードを全件取得。表示順でOrder ※大量データ取得に注意
	 * @return List<仕訳パターン変数設定DTO>
	 */
	public List<ShiwakePatternVarSetting> loadOrderByHyoujiJun() {
		final String sql = "SELECT * FROM shiwake_pattern_var_setting ORDER BY hyouji_jun";
		return mapToDto(connection.load(sql));
	}

	
	/**
	* 仕訳パターン変数設定登録
	* @param dto 仕訳パターン変数設定
	* @return 件数
	*/
	public int insert(
		ShiwakePatternVarSetting dto
	){
		final String sql =
				"INSERT INTO shiwake_pattern_var_setting "
			+ "VALUES(?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.shiwakePatternVar, dto.shiwakePatternVarName, dto.varSetsumei, dto.sessionVar, dto.columnName, dto.hyoujiJun
					);
	}

	/**
	* 仕訳パターン変数設定登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 仕訳パターン変数設定
	* @return 件数
	*/
	public int upsert(
		ShiwakePatternVarSetting dto
		 ){
		final String sql =
				"INSERT INTO shiwake_pattern_var_setting "
			+ "VALUES(?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT shiwake_pattern_var_setting_pkey "
			+ "DO UPDATE SET shiwake_pattern_var_name = ?, var_setsumei = ?, session_var = ?, column_name = ?, hyouji_jun = ? "
			+ "";
			return connection.update(sql,
				dto.shiwakePatternVar, dto.shiwakePatternVarName, dto.varSetsumei, dto.sessionVar, dto.columnName, dto.hyoujiJun
				, dto.shiwakePatternVarName, dto.varSetsumei, dto.sessionVar, dto.columnName, dto.hyoujiJun
				);
    }
	
	/**
	 * 仕訳パターン変数設定から主キー指定でレコードを削除
	 * @param shiwakePatternVar 仕訳パターン変数
	 * @return 削除件数
	 */
	public int delete(String shiwakePatternVar){
		final String sql = "DELETE FROM shiwake_pattern_var_setting WHERE shiwake_pattern_var = ?";
		return connection.update(sql, shiwakePatternVar);
	}
}
