package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.Kinyuukikan;

/**
 * 金融機関に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KinyuukikanAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected Kinyuukikan mapToDto(GMap map){
		return map == null ? null : new Kinyuukikan(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<Kinyuukikan> mapToDto(List<GMap> mapList){
		List<Kinyuukikan> dtoList = new ArrayList<Kinyuukikan>();
		for (var map : mapList) {
			dtoList.add(new Kinyuukikan(map));
		}
		return dtoList;
	}
	
	/**
	 * 金融機関のレコード有無を判定
	 * @param kinyuukikanCd 金融機関コード
	 * @param kinyuukikanShitenCd 金融機関支店コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String kinyuukikanCd, String kinyuukikanShitenCd) {
		return this.find(kinyuukikanCd, kinyuukikanShitenCd) == null ? false : true;
	}
	
	/**
	 * 金融機関から主キー指定でレコードを取得
	 * @param kinyuukikanCd 金融機関コード
	 * @param kinyuukikanShitenCd 金融機関支店コード
	 * @return 金融機関DTO
	 */
	public Kinyuukikan find(String kinyuukikanCd, String kinyuukikanShitenCd) {
		final String sql = "SELECT * FROM kinyuukikan WHERE kinyuukikan_cd = ? AND kinyuukikan_shiten_cd = ?";
		return mapToDto(connection.find(sql, kinyuukikanCd, kinyuukikanShitenCd));
	}
	
	/**
	 * 金融機関からレコードを全件取得 ※大量データ取得に注意
	 * @return List<金融機関DTO>
	 */
	public List<Kinyuukikan> load() {
		final String sql = "SELECT * FROM kinyuukikan ORDER BY kinyuukikan_cd, kinyuukikan_shiten_cd";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 金融機関から一部キー指定でレコードを取得
	 * @param kinyuukikanCd 金融機関コード
	 * @return List<金融機関>DTO
	 */
	public List<Kinyuukikan> load(String kinyuukikanCd) {
		final String sql = "SELECT * FROM kinyuukikan WHERE kinyuukikan_cd = ? "
							+ "ORDER BY kinyuukikan_cd, kinyuukikan_shiten_cd";
		return mapToDto(connection.load(sql, kinyuukikanCd));
	}

	/**
	* 金融機関登録
	* @param dto 金融機関
	* @return 件数
	*/
	public int insert(
		Kinyuukikan dto
	){
		final String sql =
				"INSERT INTO kinyuukikan "
			+ "VALUES(?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.kinyuukikanCd, dto.kinyuukikanShitenCd, dto.kinyuukikanNameHankana, dto.kinyuukikanNameKana, dto.shitenNameHankana, dto.shitenNameKana
					);
	}

	/**
	* 金融機関登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 金融機関
	* @return 件数
	*/
	public int upsert(
		Kinyuukikan dto
		 ){
		final String sql =
				"INSERT INTO kinyuukikan "
			+ "VALUES(?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT kinyuukikan_pkey "
			+ "DO UPDATE SET kinyuukikan_name_hankana = ?, kinyuukikan_name_kana = ?, shiten_name_hankana = ?, shiten_name_kana = ? "
			+ "";
			return connection.update(sql,
				dto.kinyuukikanCd, dto.kinyuukikanShitenCd, dto.kinyuukikanNameHankana, dto.kinyuukikanNameKana, dto.shitenNameHankana, dto.shitenNameKana
				, dto.kinyuukikanNameHankana, dto.kinyuukikanNameKana, dto.shitenNameHankana, dto.shitenNameKana
				);
    }
	
	/**
	 * 金融機関から主キー指定でレコードを削除
	 * @param kinyuukikanCd 金融機関コード
	 * @param kinyuukikanShitenCd 金融機関支店コード
	 * @return 削除件数
	 */
	public int delete(String kinyuukikanCd, String kinyuukikanShitenCd){
		final String sql = "DELETE FROM kinyuukikan WHERE kinyuukikan_cd = ? AND kinyuukikan_shiten_cd = ?";
		return connection.update(sql, kinyuukikanCd, kinyuukikanShitenCd);
	}
	
	/**
	 * 金融機関から一部キー指定でレコードを削除
	 * @param kinyuukikanCd 金融機関コード
	 * @return 削除件数
	 */
	public int delete(String kinyuukikanCd) {
		final String sql = "DELETE FROM kinyuukikan WHERE kinyuukikan_cd = ? ";
		return connection.update(sql, kinyuukikanCd);
	}
}
