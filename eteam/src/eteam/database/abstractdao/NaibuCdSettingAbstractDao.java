package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.NaibuCdSetting;

/**
 * 内部コード設定に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class NaibuCdSettingAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected NaibuCdSetting mapToDto(GMap map){
		return map == null ? null : new NaibuCdSetting(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<NaibuCdSetting> mapToDto(List<GMap> mapList){
		List<NaibuCdSetting> dtoList = new ArrayList<NaibuCdSetting>();
		for (var map : mapList) {
			dtoList.add(new NaibuCdSetting(map));
		}
		return dtoList;
	}
	
	/**
	 * 内部コード設定のレコード有無を判定
	 * @param naibuCdName 内部コード名
	 * @param naibuCd 内部コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String naibuCdName, String naibuCd) {
		return this.find(naibuCdName, naibuCd) == null ? false : true;
	}
	
	/**
	 * 内部コード設定から主キー指定でレコードを取得
	 * @param naibuCdName 内部コード名
	 * @param naibuCd 内部コード
	 * @return 内部コード設定DTO
	 */
	public NaibuCdSetting find(String naibuCdName, String naibuCd) {
		final String sql = "SELECT * FROM naibu_cd_setting WHERE naibu_cd_name = ? AND naibu_cd = ?";
		return mapToDto(connection.find(sql, naibuCdName, naibuCd));
	}
	
	/**
	 * 内部コード設定からレコードを全件取得 ※大量データ取得に注意
	 * @return List<内部コード設定DTO>
	 */
	public List<NaibuCdSetting> load() {
		final String sql = "SELECT * FROM naibu_cd_setting ORDER BY naibu_cd_name, naibu_cd";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 内部コード設定から一部キー指定でレコードを取得
	 * @param naibuCdName 内部コード名
	 * @return List<内部コード設定>DTO
	 */
	public List<NaibuCdSetting> load(String naibuCdName) {
		final String sql = "SELECT * FROM naibu_cd_setting WHERE naibu_cd_name = ? "
							+ "ORDER BY naibu_cd_name, naibu_cd";
		return mapToDto(connection.load(sql, naibuCdName));
	}

	/**
	 * 内部コード設定取得
	 * naibu_cd_name(内部コード名称)をキーに、naibu_cd_setting(内部コード設定)よりデータを取得します。
	 * @param naibuCdName  内部コード名称 
	 * @return 検索結果
	 */
	public List<NaibuCdSetting> loadByCdNameOrderByHyoujiJun(String naibuCdName) {
		final String sql = "SELECT * FROM naibu_cd_setting WHERE naibu_cd_name = ? ORDER BY hyouji_jun;";
		return mapToDto(connection.load(sql, naibuCdName));
	}
	
	/**
	 * 内部コード設定取得
	 * naibu_cd_name(内部コード名称)をキーに、naibu_cd_setting(内部コード設定)よりデータを取得します。表示順が正のもののみを取得します。
	 * @param naibuCdName  内部コード名称 
	 * @return 検索結果
	 */
	public List<NaibuCdSetting> loadByCdNameOrderByPositiveHyoujiJun(String naibuCdName) {
		final String sql = "SELECT * FROM naibu_cd_setting WHERE naibu_cd_name = ? AND hyouji_jun > 0 ORDER BY hyouji_jun;";
		return mapToDto(connection.load(sql, naibuCdName));
	}
	
	/**
	* 内部コード設定登録
	* @param dto 内部コード設定
	* @return 件数
	*/
	public int insert(
		NaibuCdSetting dto
	){
		final String sql =
				"INSERT INTO naibu_cd_setting "
			+ "VALUES(?, ?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.naibuCdName, dto.naibuCd, dto.name, dto.hyoujiJun, dto.option1, dto.option2, dto.option3
					);
	}

	/**
	* 内部コード設定登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 内部コード設定
	* @return 件数
	*/
	public int upsert(
		NaibuCdSetting dto
		 ){
		final String sql =
				"INSERT INTO naibu_cd_setting "
			+ "VALUES(?, ?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT naibu_cd_setting_pkey "
			+ "DO UPDATE SET name = ?, hyouji_jun = ?, option1 = ?, option2 = ?, option3 = ? "
			+ "";
			return connection.update(sql,
				dto.naibuCdName, dto.naibuCd, dto.name, dto.hyoujiJun, dto.option1, dto.option2, dto.option3
				, dto.name, dto.hyoujiJun, dto.option1, dto.option2, dto.option3
				);
    }
	
	/**
	 * 内部コード設定から主キー指定でレコードを削除
	 * @param naibuCdName 内部コード名
	 * @param naibuCd 内部コード
	 * @return 削除件数
	 */
	public int delete(String naibuCdName, String naibuCd){
		final String sql = "DELETE FROM naibu_cd_setting WHERE naibu_cd_name = ? AND naibu_cd = ?";
		return connection.update(sql, naibuCdName, naibuCd);
	}
	
	/**
	 * 内部コード設定から一部キー指定でレコードを削除
	 * @param naibuCdName 内部コード名
	 * @return 削除件数
	 */
	public int delete(String naibuCdName) {
		final String sql = "DELETE FROM naibu_cd_setting WHERE naibu_cd_name = ? ";
		return connection.update(sql, naibuCdName);
	}
}
