package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.MailSettei;

/**
 * メール設定に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class MailSetteiAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected MailSettei mapToDto(GMap map){
		return map == null ? null : new MailSettei(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<MailSettei> mapToDto(List<GMap> mapList){
		List<MailSettei> dtoList = new ArrayList<MailSettei>();
		for (var map : mapList) {
			dtoList.add(new MailSettei(map));
		}
		return dtoList;
	}
	
	/**
	 * メール設定のレコード有無を判定
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @param ninshouHouhou 認証方法
	 * @param angoukaHouhou 暗号化方法
	 * @param mailAddress メールアドレス
	 * @param mailId メールID
	 * @param mailPassword メールパスワード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String smtpServerName, String portNo, String ninshouHouhou, String angoukaHouhou, String mailAddress, String mailId, String mailPassword) {
		return this.find(smtpServerName, portNo, ninshouHouhou, angoukaHouhou, mailAddress, mailId, mailPassword) == null ? false : true;
	}
	
	/**
	 * メール設定から主キー指定でレコードを取得
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @param ninshouHouhou 認証方法
	 * @param angoukaHouhou 暗号化方法
	 * @param mailAddress メールアドレス
	 * @param mailId メールID
	 * @param mailPassword メールパスワード
	 * @return メール設定DTO
	 */
	public MailSettei find(String smtpServerName, String portNo, String ninshouHouhou, String angoukaHouhou, String mailAddress, String mailId, String mailPassword) {
		final String sql = "SELECT * FROM mail_settei WHERE smtp_server_name = ? AND port_no = ? AND ninshou_houhou = ? AND angouka_houhou = ? AND mail_address = ? AND mail_id = ? AND mail_password = ?";
		return mapToDto(connection.find(sql, smtpServerName, portNo, ninshouHouhou, angoukaHouhou, mailAddress, mailId, mailPassword));
	}
	
	/**
	 * メール設定からレコードを全件取得 ※大量データ取得に注意
	 * @return List<メール設定DTO>
	 */
	public List<MailSettei> load() {
		final String sql = "SELECT * FROM mail_settei ORDER BY smtp_server_name, port_no, ninshou_houhou, angouka_houhou, mail_address, mail_id, mail_password";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * メール設定から一部キー指定でレコードを取得
	 * @param smtpServerName SMTPサーバー名
	 * @return List<メール設定>DTO
	 */
	public List<MailSettei> load(String smtpServerName) {
		final String sql = "SELECT * FROM mail_settei WHERE smtp_server_name = ? "
							+ "ORDER BY smtp_server_name, port_no, ninshou_houhou, angouka_houhou, mail_address, mail_id, mail_password";
		return mapToDto(connection.load(sql, smtpServerName));
	}
	
	/**
	 * メール設定から一部キー指定でレコードを取得
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @return List<メール設定>DTO
	 */
	public List<MailSettei> load(String smtpServerName, String portNo) {
		final String sql = "SELECT * FROM mail_settei WHERE smtp_server_name = ?  AND port_no = ? "
							+ "ORDER BY smtp_server_name, port_no, ninshou_houhou, angouka_houhou, mail_address, mail_id, mail_password";
		return mapToDto(connection.load(sql, smtpServerName, portNo));
	}
	
	/**
	 * メール設定から一部キー指定でレコードを取得
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @param ninshouHouhou 認証方法
	 * @return List<メール設定>DTO
	 */
	public List<MailSettei> load(String smtpServerName, String portNo, String ninshouHouhou) {
		final String sql = "SELECT * FROM mail_settei WHERE smtp_server_name = ?  AND port_no = ?  AND ninshou_houhou = ? "
							+ "ORDER BY smtp_server_name, port_no, ninshou_houhou, angouka_houhou, mail_address, mail_id, mail_password";
		return mapToDto(connection.load(sql, smtpServerName, portNo, ninshouHouhou));
	}
	
	/**
	 * メール設定から一部キー指定でレコードを取得
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @param ninshouHouhou 認証方法
	 * @param angoukaHouhou 暗号化方法
	 * @return List<メール設定>DTO
	 */
	public List<MailSettei> load(String smtpServerName, String portNo, String ninshouHouhou, String angoukaHouhou) {
		final String sql = "SELECT * FROM mail_settei WHERE smtp_server_name = ?  AND port_no = ?  AND ninshou_houhou = ?  AND angouka_houhou = ? "
							+ "ORDER BY smtp_server_name, port_no, ninshou_houhou, angouka_houhou, mail_address, mail_id, mail_password";
		return mapToDto(connection.load(sql, smtpServerName, portNo, ninshouHouhou, angoukaHouhou));
	}
	
	/**
	 * メール設定から一部キー指定でレコードを取得
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @param ninshouHouhou 認証方法
	 * @param angoukaHouhou 暗号化方法
	 * @param mailAddress メールアドレス
	 * @return List<メール設定>DTO
	 */
	public List<MailSettei> load(String smtpServerName, String portNo, String ninshouHouhou, String angoukaHouhou, String mailAddress) {
		final String sql = "SELECT * FROM mail_settei WHERE smtp_server_name = ?  AND port_no = ?  AND ninshou_houhou = ?  AND angouka_houhou = ?  AND mail_address = ? "
							+ "ORDER BY smtp_server_name, port_no, ninshou_houhou, angouka_houhou, mail_address, mail_id, mail_password";
		return mapToDto(connection.load(sql, smtpServerName, portNo, ninshouHouhou, angoukaHouhou, mailAddress));
	}
	
	/**
	 * メール設定から一部キー指定でレコードを取得
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @param ninshouHouhou 認証方法
	 * @param angoukaHouhou 暗号化方法
	 * @param mailAddress メールアドレス
	 * @param mailId メールID
	 * @return List<メール設定>DTO
	 */
	public List<MailSettei> load(String smtpServerName, String portNo, String ninshouHouhou, String angoukaHouhou, String mailAddress, String mailId) {
		final String sql = "SELECT * FROM mail_settei WHERE smtp_server_name = ?  AND port_no = ?  AND ninshou_houhou = ?  AND angouka_houhou = ?  AND mail_address = ?  AND mail_id = ? "
							+ "ORDER BY smtp_server_name, port_no, ninshou_houhou, angouka_houhou, mail_address, mail_id, mail_password";
		return mapToDto(connection.load(sql, smtpServerName, portNo, ninshouHouhou, angoukaHouhou, mailAddress, mailId));
	}

	/**
	* メール設定登録
	* @param dto メール設定
	* @return 件数
	*/
	public int insert(
		MailSettei dto
	){
		final String sql =
				"INSERT INTO mail_settei "
			+ "VALUES(?, ?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.smtpServerName, dto.portNo, dto.ninshouHouhou, dto.angoukaHouhou, dto.mailAddress, dto.mailId, dto.mailPassword
					);
	}
	
	/**
	 * メール設定から主キー指定でレコードを削除
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @param ninshouHouhou 認証方法
	 * @param angoukaHouhou 暗号化方法
	 * @param mailAddress メールアドレス
	 * @param mailId メールID
	 * @param mailPassword メールパスワード
	 * @return 削除件数
	 */
	public int delete(String smtpServerName, String portNo, String ninshouHouhou, String angoukaHouhou, String mailAddress, String mailId, String mailPassword){
		final String sql = "DELETE FROM mail_settei WHERE smtp_server_name = ? AND port_no = ? AND ninshou_houhou = ? AND angouka_houhou = ? AND mail_address = ? AND mail_id = ? AND mail_password = ?";
		return connection.update(sql, smtpServerName, portNo, ninshouHouhou, angoukaHouhou, mailAddress, mailId, mailPassword);
	}
	
	/**
	 * メール設定から一部キー指定でレコードを削除
	 * @param smtpServerName SMTPサーバー名
	 * @return 削除件数
	 */
	public int delete(String smtpServerName) {
		final String sql = "DELETE FROM mail_settei WHERE smtp_server_name = ? ";
		return connection.update(sql, smtpServerName);
	}
	
	/**
	 * メール設定から一部キー指定でレコードを削除
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @return 削除件数
	 */
	public int delete(String smtpServerName, String portNo) {
		final String sql = "DELETE FROM mail_settei WHERE smtp_server_name = ?  AND port_no = ? ";
		return connection.update(sql, smtpServerName, portNo);
	}
	
	/**
	 * メール設定から一部キー指定でレコードを削除
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @param ninshouHouhou 認証方法
	 * @return 削除件数
	 */
	public int delete(String smtpServerName, String portNo, String ninshouHouhou) {
		final String sql = "DELETE FROM mail_settei WHERE smtp_server_name = ?  AND port_no = ?  AND ninshou_houhou = ? ";
		return connection.update(sql, smtpServerName, portNo, ninshouHouhou);
	}
	
	/**
	 * メール設定から一部キー指定でレコードを削除
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @param ninshouHouhou 認証方法
	 * @param angoukaHouhou 暗号化方法
	 * @return 削除件数
	 */
	public int delete(String smtpServerName, String portNo, String ninshouHouhou, String angoukaHouhou) {
		final String sql = "DELETE FROM mail_settei WHERE smtp_server_name = ?  AND port_no = ?  AND ninshou_houhou = ?  AND angouka_houhou = ? ";
		return connection.update(sql, smtpServerName, portNo, ninshouHouhou, angoukaHouhou);
	}
	
	/**
	 * メール設定から一部キー指定でレコードを削除
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @param ninshouHouhou 認証方法
	 * @param angoukaHouhou 暗号化方法
	 * @param mailAddress メールアドレス
	 * @return 削除件数
	 */
	public int delete(String smtpServerName, String portNo, String ninshouHouhou, String angoukaHouhou, String mailAddress) {
		final String sql = "DELETE FROM mail_settei WHERE smtp_server_name = ?  AND port_no = ?  AND ninshou_houhou = ?  AND angouka_houhou = ?  AND mail_address = ? ";
		return connection.update(sql, smtpServerName, portNo, ninshouHouhou, angoukaHouhou, mailAddress);
	}
	
	/**
	 * メール設定から一部キー指定でレコードを削除
	 * @param smtpServerName SMTPサーバー名
	 * @param portNo ポート番号
	 * @param ninshouHouhou 認証方法
	 * @param angoukaHouhou 暗号化方法
	 * @param mailAddress メールアドレス
	 * @param mailId メールID
	 * @return 削除件数
	 */
	public int delete(String smtpServerName, String portNo, String ninshouHouhou, String angoukaHouhou, String mailAddress, String mailId) {
		final String sql = "DELETE FROM mail_settei WHERE smtp_server_name = ?  AND port_no = ?  AND ninshou_houhou = ?  AND angouka_houhou = ?  AND mail_address = ?  AND mail_id = ? ";
		return connection.update(sql, smtpServerName, portNo, ninshouHouhou, angoukaHouhou, mailAddress, mailId);
	}
}
