package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.GaikaSetting;

/**
 * 外貨設定に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class GaikaSettingAbstractDao extends EteamAbstractLogic {

	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO gaika_setting (kesn, gaika_shiyou_flg, houka_kansan_hasuu, rateref) VALUES "
			+ "(?, ?, ?, ?)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE kesn = ?";
	
	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected GaikaSetting mapToDto(GMap map){
		return map == null ? null : new GaikaSetting(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<GaikaSetting> mapToDto(List<GMap> mapList){
		List<GaikaSetting> dtoList = new ArrayList<GaikaSetting>();
		for (var map : mapList) {
			dtoList.add(new GaikaSetting(map));
		}
		return dtoList;
	}
	
	/**
	 * 外貨設定のレコード有無を判定
	 * @param kesn 内部決算期
	 * @return true:exist false:not exist
	 */
	public boolean exists(int kesn) {
		return this.find(kesn) == null ? false : true;
	}
	
	/**
	 * 外貨設定から主キー指定でレコードを取得
	 * @param kesn 内部決算期
	 * @return 外貨設定DTO
	 */
	public GaikaSetting find(int kesn) {
		final String sql = "SELECT * FROM gaika_setting WHERE kesn = ?";
		return mapToDto(connection.find(sql, kesn));
	}
	
	/**
	 * 外貨設定からレコードを全件取得 ※大量データ取得に注意
	 * @return List<外貨設定DTO>
	 */
	public List<GaikaSetting> load() {
		final String sql = "SELECT * FROM gaika_setting ORDER BY kesn";
		return mapToDto(connection.load(sql));
	}

	/**
	 * 外貨設定登録
	 * @param dto 外貨設定
	 * @return 件数
	 */
	public int insert(GaikaSetting dto) {
		return connection.update(this.insertSql, dto.kesn, dto.gaikaShiyouFlg, dto.houkaKansanHasuu, dto.rateref);
	}

	/**
	 * 外貨設定更新
	 * @param dto 外貨設定
	 * @return 件数
	 */
	public int update(GaikaSetting dto) {
		final String sql = "UPDATE gaika_setting SET  gaika_shiyou_flg = ?, houka_kansan_hasuu = ?, rateref = ? " + this.whereSql;
		return connection.update(sql, dto.gaikaShiyouFlg, dto.houkaKansanHasuu, dto.rateref, dto.kesn);
	}

	/**
	 * 外貨設定登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto 外貨設定
	 * @return 件数
	 */
	public int upsert(GaikaSetting dto) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT gaika_setting_pkey "
			+ "DO UPDATE SET  gaika_shiyou_flg = ?, houka_kansan_hasuu = ?, rateref = ? ";
		return connection.update(sql, dto.kesn, dto.gaikaShiyouFlg, dto.houkaKansanHasuu, dto.rateref, dto.gaikaShiyouFlg, dto.houkaKansanHasuu, dto.rateref);
	}

	
	/**
	 * 外貨設定から主キー指定でレコードを削除
	 * @param kesn 内部決算期
	 * @return 削除件数
	 */
	public int delete(int kesn){
		final String sql = "DELETE FROM gaika_setting WHERE kesn = ?";
		return connection.update(sql, kesn);
	}
}
