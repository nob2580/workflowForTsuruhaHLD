package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.DaikouShitei;

/**
 * 代行指定に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class DaikouShiteiAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected DaikouShitei mapToDto(GMap map){
		return map == null ? null : new DaikouShitei(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<DaikouShitei> mapToDto(List<GMap> mapList){
		List<DaikouShitei> dtoList = new ArrayList<DaikouShitei>();
		for (var map : mapList) {
			dtoList.add(new DaikouShitei(map));
		}
		return dtoList;
	}
	
	/**
	 * 代行指定のレコード有無を判定
	 * @param daikouUserId 代行ユーザーID
	 * @param hiDaikouUserId 被代行ユーザーID
	 * @return true:exist false:not exist
	 */
	public boolean exists(String daikouUserId, String hiDaikouUserId) {
		return this.find(daikouUserId, hiDaikouUserId) == null ? false : true;
	}
	
	/**
	 * 代行指定から主キー指定でレコードを取得
	 * @param daikouUserId 代行ユーザーID
	 * @param hiDaikouUserId 被代行ユーザーID
	 * @return 代行指定DTO
	 */
	public DaikouShitei find(String daikouUserId, String hiDaikouUserId) {
		final String sql = "SELECT * FROM daikou_shitei WHERE daikou_user_id = ? AND hi_daikou_user_id = ?";
		return mapToDto(connection.find(sql, daikouUserId, hiDaikouUserId));
	}
	
	/**
	 * 代行指定からレコードを全件取得 ※大量データ取得に注意
	 * @return List<代行指定DTO>
	 */
	public List<DaikouShitei> load() {
		final String sql = "SELECT * FROM daikou_shitei ORDER BY daikou_user_id, hi_daikou_user_id";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 代行指定から一部キー指定でレコードを取得
	 * @param daikouUserId 代行ユーザーID
	 * @return List<代行指定>DTO
	 */
	public List<DaikouShitei> load(String daikouUserId) {
		final String sql = "SELECT * FROM daikou_shitei WHERE daikou_user_id = ? "
							+ "ORDER BY daikou_user_id, hi_daikou_user_id";
		return mapToDto(connection.load(sql, daikouUserId));
	}

	/**
	* 代行指定登録
	* @param dto 代行指定
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		DaikouShitei dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO daikou_shitei "
			+ "VALUES(?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.daikouUserId, dto.hiDaikouUserId, koushinUserId, koushinUserId
					);
	}
	
	/**
	 * 代行指定から主キー指定でレコードを削除
	 * @param daikouUserId 代行ユーザーID
	 * @param hiDaikouUserId 被代行ユーザーID
	 * @return 削除件数
	 */
	public int delete(String daikouUserId, String hiDaikouUserId){
		final String sql = "DELETE FROM daikou_shitei WHERE daikou_user_id = ? AND hi_daikou_user_id = ?";
		return connection.update(sql, daikouUserId, hiDaikouUserId);
	}
	
	/**
	 * 代行指定から一部キー指定でレコードを削除
	 * @param daikouUserId 代行ユーザーID
	 * @return 削除件数
	 */
	public int delete(String daikouUserId) {
		final String sql = "DELETE FROM daikou_shitei WHERE daikou_user_id = ? ";
		return connection.update(sql, daikouUserId);
	}
}
