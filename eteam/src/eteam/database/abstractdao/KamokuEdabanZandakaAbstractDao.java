package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.KamokuEdabanZandaka;

/**
 * 科目枝番残高に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class KamokuEdabanZandakaAbstractDao extends EteamAbstractLogic {

	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO kamoku_edaban_zandaka (kamoku_gaibu_cd, kamoku_edaban_cd, kamoku_naibu_cd, kamoku_name_ryakushiki, kamoku_name_seishiki, edaban_name, kessanki_bangou, chouhyou_shaturyoku_no, taishaku_zokusei, kishu_zandaka, kazei_kbn, bunri_kbn) VALUES "
			+ "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE kamoku_gaibu_cd = ? AND kamoku_edaban_cd = ?";

	/**
	 * @param map GMap
	 * @return dto (レコードが存在しなければNull)
	 */
	protected KamokuEdabanZandaka mapToDto(GMap map) {
		return map == null ? null : new KamokuEdabanZandaka(map);
	}

	/**
	 * @param mapList 検索結果GMap
	 * @return dtoList
	 */
	protected List<KamokuEdabanZandaka> mapToDto(List<GMap> mapList) {
		List<KamokuEdabanZandaka> dtoList = new ArrayList<KamokuEdabanZandaka>();
		for (var map : mapList) {
			dtoList.add(new KamokuEdabanZandaka(map));
		}
		return dtoList;
	}

	/**
	 * 科目枝番残高のレコード有無を判定
	 * @param kamokuGaibuCd 科目外部コード
	 * @param kamokuEdabanCd 科目枝番コード
	 * @return true:exist false:not exist
	 */
	public boolean exists(String kamokuGaibuCd, String kamokuEdabanCd) {
		return this.find(kamokuGaibuCd, kamokuEdabanCd) != null;
	}

	/**
	 * 科目枝番残高から主キー指定でレコードを取得
	 * @param kamokuGaibuCd 科目外部コード
	 * @param kamokuEdabanCd 科目枝番コード
	 * @return 科目枝番残高DTO
	 */
	public KamokuEdabanZandaka find(String kamokuGaibuCd, String kamokuEdabanCd) {
		final String sql = "SELECT * FROM kamoku_edaban_zandaka " + this.whereSql;
		return mapToDto(connection.find(sql, kamokuGaibuCd, kamokuEdabanCd));
	}

	/**
	 * 科目枝番残高からレコードを全件取得 ※大量データ取得に注意
	 * @return List<科目枝番残高DTO>
	 */
	public List<KamokuEdabanZandaka> load() {
		final String sql = "SELECT * FROM kamoku_edaban_zandaka  ORDER BY kamoku_gaibu_cd, kamoku_edaban_cd";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 科目枝番残高から一部キー（科目コード）指定でレコードを取得
	 * @param kamokuGaibuCd 科目外部コード
	 * @return List<科目枝番残高>DTO
	 */
	public List<KamokuEdabanZandaka> loadByKamokuCd(String kamokuGaibuCd) {
		final String sql = "SELECT * FROM kamoku_edaban_zandaka WHERE kamoku_gaibu_cd = ? "
							+ "ORDER BY kamoku_gaibu_cd, kamoku_edaban_cd";
		return mapToDto(connection.load(sql, kamokuGaibuCd));
	}

	/**
	 * 科目枝番残高登録
	 * @param dto 科目枝番残高
	 * @return 件数
	 */
	public int insert(KamokuEdabanZandaka dto) {
		return connection.update(this.insertSql, dto.kamokuGaibuCd, dto.kamokuEdabanCd, dto.kamokuNaibuCd, dto.kamokuNameRyakushiki, dto.kamokuNameSeishiki, dto.edabanName, dto.kessankiBangou, dto.chouhyouShaturyokuNo, dto.taishakuZokusei, dto.kishuZandaka, dto.kazeiKbn, dto.bunriKbn);
	}

	/**
	 * 科目枝番残高更新
	 * @param dto 科目枝番残高
	 * @return 件数
	 */
	public int update(KamokuEdabanZandaka dto) {
		final String sql = "UPDATE kamoku_edaban_zandaka SET  kamoku_naibu_cd = ?, kamoku_name_ryakushiki = ?, kamoku_name_seishiki = ?, edaban_name = ?, kessanki_bangou = ?, chouhyou_shaturyoku_no = ?, taishaku_zokusei = ?, kishu_zandaka = ?, kazei_kbn = ?, bunri_kbn = ? " + this.whereSql;
		return connection.update(sql, dto.kamokuNaibuCd, dto.kamokuNameRyakushiki, dto.kamokuNameSeishiki, dto.edabanName, dto.kessankiBangou, dto.chouhyouShaturyokuNo, dto.taishakuZokusei, dto.kishuZandaka, dto.kazeiKbn, dto.bunriKbn, dto.kamokuGaibuCd, dto.kamokuEdabanCd);
	}

	/**
	 * 科目枝番残高登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto 科目枝番残高
	 * @return 件数
	 */
	public int upsert(KamokuEdabanZandaka dto) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT kamoku_edaban_zandaka_pkey "
			+ "DO UPDATE SET  kamoku_naibu_cd = ?, kamoku_name_ryakushiki = ?, kamoku_name_seishiki = ?, edaban_name = ?, kessanki_bangou = ?, chouhyou_shaturyoku_no = ?, taishaku_zokusei = ?, kishu_zandaka = ?, kazei_kbn = ?, bunri_kbn = ? ";
		return connection.update(sql, dto.kamokuGaibuCd, dto.kamokuEdabanCd, dto.kamokuNaibuCd, dto.kamokuNameRyakushiki, dto.kamokuNameSeishiki, dto.edabanName, dto.kessankiBangou, dto.chouhyouShaturyokuNo, dto.taishakuZokusei, dto.kishuZandaka, dto.kazeiKbn, dto.bunriKbn, dto.kamokuNaibuCd, dto.kamokuNameRyakushiki, dto.kamokuNameSeishiki, dto.edabanName, dto.kessankiBangou, dto.chouhyouShaturyokuNo, dto.taishakuZokusei, dto.kishuZandaka, dto.kazeiKbn, dto.bunriKbn);
	}

	/**
	 * 科目枝番残高から主キー指定でレコードを削除
	 * @param kamokuGaibuCd 科目外部コード
	 * @param kamokuEdabanCd 科目枝番コード
	 * @return 削除件数
	 */
	public int delete(String kamokuGaibuCd, String kamokuEdabanCd) {
		final String sql = "DELETE FROM kamoku_edaban_zandaka " + this.whereSql;
		return connection.update(sql, kamokuGaibuCd, kamokuEdabanCd);
	}
	
	/**
	 * 科目枝番残高から一部キー（科目コード）指定でレコードを削除
	 * @param kamokuGaibuCd 科目外部コード
	 * @return 削除件数
	 */
	public int deleteByKamokuCd(String kamokuGaibuCd) {
		final String sql = "DELETE FROM kamoku_edaban_zandaka WHERE kamoku_gaibu_cd = ? ";
		return connection.update(sql, kamokuGaibuCd);
	}
	
	/**
	 * 科目枝番名取得
	 * @param kamokuCd 勘定科目コード
	 * @param kamokuEdabanCd 勘定科目枝番コード
	 * @return 勘定科目枝番名 引数がnull or blankの場合、該当コードが見つからない場合はblankを返す。
	 */
	public String findEdabanName(String kamokuCd, String kamokuEdabanCd) {
		var dto = this.find(kamokuCd, kamokuEdabanCd);
		return (dto == null) ? "" : dto.edabanName;
	}
}