package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.IcCardRireki;

/**
 * ICカード利用履歴に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class IcCardRirekiAbstractDao extends EteamAbstractLogic {


	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO ic_card_rireki (ic_card_no, ic_card_sequence_no, ic_card_riyoubi, tanmatu_cd, line_cd_from, line_name_from, eki_cd_from, eki_name_from, line_cd_to, line_name_to, eki_cd_to, eki_name_to, kingaku, user_id, jyogai_flg, shori_cd, balance, all_byte) VALUES "
			+ "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE ic_card_no = ? AND ic_card_sequence_no = ?";
	
	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected IcCardRireki mapToDto(GMap map){
		return map == null ? null : new IcCardRireki(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<IcCardRireki> mapToDto(List<GMap> mapList){
		List<IcCardRireki> dtoList = new ArrayList<IcCardRireki>();
		for (var map : mapList) {
			dtoList.add(new IcCardRireki(map));
		}
		return dtoList;
	}
	
	/**
	 * ICカード利用履歴のレコード有無を判定
	 * @param icCardNo ICカード番号
	 * @param icCardSequenceNo ICカードシーケンス番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String icCardNo, String icCardSequenceNo) {
		return this.find(icCardNo, icCardSequenceNo) == null ? false : true;
	}
	
	/**
	 * ICカード利用履歴から主キー指定でレコードを取得
	 * @param icCardNo ICカード番号
	 * @param icCardSequenceNo ICカードシーケンス番号
	 * @return ICカード利用履歴DTO
	 */
	public IcCardRireki find(String icCardNo, String icCardSequenceNo) {
		final String sql = "SELECT * FROM ic_card_rireki WHERE ic_card_no = ? AND ic_card_sequence_no = ?";
		return mapToDto(connection.find(sql, icCardNo, icCardSequenceNo));
	}
	
	/**
	 * ICカード利用履歴からレコードを全件取得 ※大量データ取得に注意
	 * @return List<ICカード利用履歴DTO>
	 */
	public List<IcCardRireki> load() {
		final String sql = "SELECT * FROM ic_card_rireki ORDER BY ic_card_no, ic_card_sequence_no";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * ICカード利用履歴から一部キー指定でレコードを取得
	 * @param icCardNo ICカード番号
	 * @return List<ICカード利用履歴>DTO
	 */
	public List<IcCardRireki> load(String icCardNo) {
		final String sql = "SELECT * FROM ic_card_rireki WHERE ic_card_no = ? "
							+ "ORDER BY ic_card_no, ic_card_sequence_no";
		return mapToDto(connection.load(sql, icCardNo));
	}

	/**
	 *  ICカード利用履歴登録
	 * @param dto  ICカード利用履歴
	 * @return 件数
	 */
	public int insert(IcCardRireki dto) {
		return connection.update(this.insertSql, dto.icCardNo, dto.icCardSequenceNo, dto.icCardRiyoubi, dto.tanmatuCd, dto.lineCdFrom, dto.lineNameFrom, dto.ekiCdFrom, dto.ekiNameFrom, dto.lineCdTo, dto.lineNameTo, dto.ekiCdTo, dto.ekiNameTo, dto.kingaku, dto.userId, dto.jyogaiFlg, dto.shoriCd, dto.balance, dto.allByte);
	}

	/**
	 *  ICカード利用履歴更新
	 * @param dto  ICカード利用履歴
	 * @return 件数
	 */
	public int update(IcCardRireki dto) {
		final String sql = "UPDATE ic_card_rireki SET  ic_card_riyoubi = ?, tanmatu_cd = ?, line_cd_from = ?, line_name_from = ?, eki_cd_from = ?, eki_name_from = ?, line_cd_to = ?, line_name_to = ?, eki_cd_to = ?, eki_name_to = ?, kingaku = ?, user_id = ?, jyogai_flg = ?, shori_cd = ?, balance = ?, all_byte = ? " + this.whereSql;
		return connection.update(sql, dto.icCardRiyoubi, dto.tanmatuCd, dto.lineCdFrom, dto.lineNameFrom, dto.ekiCdFrom, dto.ekiNameFrom, dto.lineCdTo, dto.lineNameTo, dto.ekiCdTo, dto.ekiNameTo, dto.kingaku, dto.userId, dto.jyogaiFlg, dto.shoriCd, dto.balance, dto.allByte, dto.icCardNo, dto.icCardSequenceNo);
	}

	/**
	 *  ICカード利用履歴登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto  ICカード利用履歴
	 * @return 件数
	 */
	public int upsert(IcCardRireki dto) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT ic_card_rireki_pkey "
			+ "DO UPDATE SET  ic_card_riyoubi = ?, tanmatu_cd = ?, line_cd_from = ?, line_name_from = ?, eki_cd_from = ?, eki_name_from = ?, line_cd_to = ?, line_name_to = ?, eki_cd_to = ?, eki_name_to = ?, kingaku = ?, user_id = ?, jyogai_flg = ?, shori_cd = ?, balance = ?, all_byte = ? ";
		return connection.update(sql, dto.icCardNo, dto.icCardSequenceNo, dto.icCardRiyoubi, dto.tanmatuCd, dto.lineCdFrom, dto.lineNameFrom, dto.ekiCdFrom, dto.ekiNameFrom, dto.lineCdTo, dto.lineNameTo, dto.ekiCdTo, dto.ekiNameTo, dto.kingaku, dto.userId, dto.jyogaiFlg, dto.shoriCd, dto.balance, dto.allByte, dto.icCardRiyoubi, dto.tanmatuCd, dto.lineCdFrom, dto.lineNameFrom, dto.ekiCdFrom, dto.ekiNameFrom, dto.lineCdTo, dto.lineNameTo, dto.ekiCdTo, dto.ekiNameTo, dto.kingaku, dto.userId, dto.jyogaiFlg, dto.shoriCd, dto.balance, dto.allByte);
	}
	
	/**
	 * ICカード利用履歴から主キー指定でレコードを削除
	 * @param icCardNo ICカード番号
	 * @param icCardSequenceNo ICカードシーケンス番号
	 * @return 削除件数
	 */
	public int delete(String icCardNo, String icCardSequenceNo){
		final String sql = "DELETE FROM ic_card_rireki WHERE ic_card_no = ? AND ic_card_sequence_no = ?";
		return connection.update(sql, icCardNo, icCardSequenceNo);
	}
	
	/**
	 * ICカード利用履歴から一部キー指定でレコードを削除
	 * @param icCardNo ICカード番号
	 * @return 削除件数
	 */
	public int delete(String icCardNo) {
		final String sql = "DELETE FROM ic_card_rireki WHERE ic_card_no = ? ";
		return connection.update(sql, icCardNo);
	}
}
