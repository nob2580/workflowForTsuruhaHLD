package eteam.database.abstractdao;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.DenpyouIdSaiban;

/**
 * 伝票ID採番に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class DenpyouIdSaibanAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected DenpyouIdSaiban mapToDto(GMap map){
		return map == null ? null : new DenpyouIdSaiban(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<DenpyouIdSaiban> mapToDto(List<GMap> mapList){
		List<DenpyouIdSaiban> dtoList = new ArrayList<DenpyouIdSaiban>();
		for (var map : mapList) {
			dtoList.add(new DenpyouIdSaiban(map));
		}
		return dtoList;
	}
	
	/**
	 * 伝票ID採番のレコード有無を判定
	 * @param tourokuDate 登録日
	 * @param denpyouKbn 伝票区分
	 * @return true:exist false:not exist
	 */
	public boolean exists(Date tourokuDate, String denpyouKbn) {
		return this.find(tourokuDate, denpyouKbn) == null ? false : true;
	}
	
	/**
	 * 伝票ID採番から主キー指定でレコードを取得
	 * @param tourokuDate 登録日
	 * @param denpyouKbn 伝票区分
	 * @return 伝票ID採番DTO
	 */
	public DenpyouIdSaiban find(Date tourokuDate, String denpyouKbn) {
		final String sql = "SELECT * FROM denpyou_id_saiban WHERE touroku_date = ? AND denpyou_kbn = ?";
		return mapToDto(connection.find(sql, tourokuDate, denpyouKbn));
	}
	
	/**
	 * 伝票ID採番からレコードを全件取得 ※大量データ取得に注意
	 * @return List<伝票ID採番DTO>
	 */
	public List<DenpyouIdSaiban> load() {
		final String sql = "SELECT * FROM denpyou_id_saiban ORDER BY touroku_date, denpyou_kbn";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 伝票ID採番から一部キー指定でレコードを取得
	 * @param tourokuDate 登録日
	 * @return List<伝票ID採番>DTO
	 */
	public List<DenpyouIdSaiban> load(Date tourokuDate) {
		final String sql = "SELECT * FROM denpyou_id_saiban WHERE touroku_date = ? "
							+ "ORDER BY touroku_date, denpyou_kbn";
		return mapToDto(connection.load(sql, tourokuDate));
	}

	/**
	* 伝票ID採番登録
	* @param dto 伝票ID採番
	* @return 件数
	*/
	public int insert(
		DenpyouIdSaiban dto
	){
		final String sql =
				"INSERT INTO denpyou_id_saiban "
			+ "VALUES(?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.tourokuDate, dto.denpyouKbn, dto.sequenceVal
					);
	}

	/**
	* 伝票ID採番登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 伝票ID採番
	* @return 件数
	*/
	public int upsert(
		DenpyouIdSaiban dto
		 ){
		final String sql =
				"INSERT INTO denpyou_id_saiban "
			+ "VALUES(?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT denpyou_id_saiban_pkey "
			+ "DO UPDATE SET sequence_val = ? "
			+ "";
			return connection.update(sql,
				dto.tourokuDate, dto.denpyouKbn, dto.sequenceVal
				, dto.sequenceVal
				);
    }
	
	/**
	 * 伝票ID採番から主キー指定でレコードを削除
	 * @param tourokuDate 登録日
	 * @param denpyouKbn 伝票区分
	 * @return 削除件数
	 */
	public int delete(Date tourokuDate, String denpyouKbn){
		final String sql = "DELETE FROM denpyou_id_saiban WHERE touroku_date = ? AND denpyou_kbn = ?";
		return connection.update(sql, tourokuDate, denpyouKbn);
	}
	
	/**
	 * 伝票ID採番から一部キー指定でレコードを削除
	 * @param tourokuDate 登録日
	 * @return 削除件数
	 */
	public int delete(Date tourokuDate) {
		final String sql = "DELETE FROM denpyou_id_saiban WHERE touroku_date = ? ";
		return connection.update(sql, tourokuDate);
	}
}
