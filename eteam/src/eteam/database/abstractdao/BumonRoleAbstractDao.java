package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.BumonRole;

/**
 * 部門ロールに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class BumonRoleAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected BumonRole mapToDto(GMap map){
		return map == null ? null : new BumonRole(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<BumonRole> mapToDto(List<GMap> mapList){
		List<BumonRole> dtoList = new ArrayList<BumonRole>();
		for (var map : mapList) {
			dtoList.add(new BumonRole(map));
		}
		return dtoList;
	}
	
	/**
	 * 部門ロールのレコード有無を判定
	 * @param bumonRoleId 部門ロールID
	 * @return true:exist false:not exist
	 */
	public boolean exists(String bumonRoleId) {
		return this.find(bumonRoleId) == null ? false : true;
	}
	
	/**
	 * 部門ロールから主キー指定でレコードを取得
	 * @param bumonRoleId 部門ロールID
	 * @return 部門ロールDTO
	 */
	public BumonRole find(String bumonRoleId) {
		final String sql = "SELECT * FROM bumon_role WHERE bumon_role_id = ?";
		return mapToDto(connection.find(sql, bumonRoleId));
	}
	
	/**
	 * 部門ロールからレコードを全件取得 ※大量データ取得に注意
	 * @return List<部門ロールDTO>
	 */
	public List<BumonRole> load() {
		final String sql = "SELECT * FROM bumon_role ORDER BY bumon_role_id";
		return mapToDto(connection.load(sql));
	}

	/**
	* 部門ロール登録
	* @param dto 部門ロール
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		BumonRole dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO bumon_role "
			+ "VALUES(?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.bumonRoleId, dto.bumonRoleName, dto.hyoujiJun, koushinUserId, koushinUserId
					);
	}

	/**
	* 部門ロールの非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したBumonRoleの使用を前提
	* @param dto 部門ロール
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		BumonRole dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE bumon_role "
		    + "SET bumon_role_name = ?, hyouji_jun = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND bumon_role_id = ?";
			return connection.update(sql,
				dto.bumonRoleName, dto.hyoujiJun, koushinUserId
				,dto.koushinTime, dto.bumonRoleId);
    }

	/**
	* 部門ロール登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 部門ロール
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		BumonRole dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO bumon_role "
			+ "VALUES(?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT bumon_role_pkey "
			+ "DO UPDATE SET bumon_role_name = ?, hyouji_jun = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.bumonRoleId, dto.bumonRoleName, dto.hyoujiJun, koushinUserId, koushinUserId
				, dto.bumonRoleName, dto.hyoujiJun, koushinUserId
				);
    }
	
	/**
	 * 部門ロールから主キー指定でレコードを削除
	 * @param bumonRoleId 部門ロールID
	 * @return 削除件数
	 */
	public int delete(String bumonRoleId){
		final String sql = "DELETE FROM bumon_role WHERE bumon_role_id = ?";
		return connection.update(sql, bumonRoleId);
	}
}
