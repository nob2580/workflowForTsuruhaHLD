package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.ShouninShoriKengen;

/**
 * 承認処理権限に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class ShouninShoriKengenAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected ShouninShoriKengen mapToDto(GMap map){
		return map == null ? null : new ShouninShoriKengen(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<ShouninShoriKengen> mapToDto(List<GMap> mapList){
		List<ShouninShoriKengen> dtoList = new ArrayList<ShouninShoriKengen>();
		for (var map : mapList) {
			dtoList.add(new ShouninShoriKengen(map));
		}
		return dtoList;
	}
	
	/**
	 * 承認処理権限のレコード有無を判定
	 * @param shouninShoriKengenNo 承認処理権限番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(long shouninShoriKengenNo) {
		return this.find(shouninShoriKengenNo) == null ? false : true;
	}
	
	/**
	 * 承認処理権限から主キー指定でレコードを取得
	 * @param shouninShoriKengenNo 承認処理権限番号
	 * @return 承認処理権限DTO
	 */
	public ShouninShoriKengen find(long shouninShoriKengenNo) {
		final String sql = "SELECT * FROM shounin_shori_kengen WHERE shounin_shori_kengen_no = ?";
		return mapToDto(connection.find(sql, shouninShoriKengenNo));
	}
	
	/**
	 * 承認処理権限からレコードを全件取得 ※大量データ取得に注意
	 * @return List<承認処理権限DTO>
	 */
	public List<ShouninShoriKengen> load() {
		final String sql = "SELECT * FROM shounin_shori_kengen ORDER BY shounin_shori_kengen_no";
		return mapToDto(connection.load(sql));
	}

	/**
	* 承認処理権限登録
	* @param dto 承認処理権限
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int insert(
		ShouninShoriKengen dto
		,String koushinUserId
	){
		final String sql =
				"INSERT INTO shounin_shori_kengen "
			+ "( shounin_shori_kengen_name, kihon_model_cd, shounin_hissu_flg, shounin_ken_flg, henkou_flg, setsumei, shounin_mongon, hanrei_hyouji_cd, hyouji_jun, touroku_user_id, touroku_time, koushin_user_id, koushin_time) "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ")";
			return connection.update(sql,
					dto.shouninShoriKengenName, dto.kihonModelCd, dto.shouninHissuFlg, dto.shouninKenFlg, dto.henkouFlg, dto.setsumei, dto.shouninMongon, dto.hanreiHyoujiCd, dto.hyoujiJun, koushinUserId, koushinUserId
					);
	}

	/**
	* 承認処理権限の非キー全てと共通列を更新
	* 値設定漏れによるデータ消失防止のためDaoで取得したShouninShoriKengenの使用を前提
	* @param dto 承認処理権限
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int update(
		ShouninShoriKengen dto
		,String koushinUserId
		 ){
		final String sql =
				"UPDATE shounin_shori_kengen "
		    + "SET shounin_shori_kengen_name = ?, kihon_model_cd = ?, shounin_hissu_flg = ?, shounin_ken_flg = ?, henkou_flg = ?, setsumei = ?, shounin_mongon = ?, hanrei_hyouji_cd = ?, hyouji_jun = ?, koushin_user_id = ?, koushin_time = current_timestamp "
	 		+ "WHERE koushin_time = ? AND shounin_shori_kengen_no = ?";
			return connection.update(sql,
				dto.shouninShoriKengenName, dto.kihonModelCd, dto.shouninHissuFlg, dto.shouninKenFlg, dto.henkouFlg, dto.setsumei, dto.shouninMongon, dto.hanreiHyoujiCd, dto.hyoujiJun, koushinUserId
				,dto.koushinTime, dto.shouninShoriKengenNo);
    }

	/**
	* 承認処理権限登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 承認処理権限
	* @param koushinUserId 更新ユーザーID
	* @return 件数
	*/
	public int upsert(
		ShouninShoriKengen dto
		,String koushinUserId
		 ){
		final String sql =
				"INSERT INTO shounin_shori_kengen "
			+ "( shounin_shori_kengen_name, kihon_model_cd, shounin_hissu_flg, shounin_ken_flg, henkou_flg, setsumei, shounin_mongon, hanrei_hyouji_cd, hyouji_jun, touroku_user_id, touroku_time, koushin_user_id, koushin_time) "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp "
			+ ") ON CONFLICT ON CONSTRAINT shounin_shori_kengen_pkey "
			+ "DO UPDATE SET shounin_shori_kengen_name = ?, kihon_model_cd = ?, shounin_hissu_flg = ?, shounin_ken_flg = ?, henkou_flg = ?, setsumei = ?, shounin_mongon = ?, hanrei_hyouji_cd = ?, hyouji_jun = ?, koushin_user_id = ?, koushin_time = current_timestamp "
			+ "";
			return connection.update(sql,
				dto.shouninShoriKengenName, dto.kihonModelCd, dto.shouninHissuFlg, dto.shouninKenFlg, dto.henkouFlg, dto.setsumei, dto.shouninMongon, dto.hanreiHyoujiCd, dto.hyoujiJun, koushinUserId, koushinUserId
				, dto.shouninShoriKengenName, dto.kihonModelCd, dto.shouninHissuFlg, dto.shouninKenFlg, dto.henkouFlg, dto.setsumei, dto.shouninMongon, dto.hanreiHyoujiCd, dto.hyoujiJun, koushinUserId
				);
    }
	
	/**
	 * 承認処理権限から主キー指定でレコードを削除
	 * @param shouninShoriKengenNo 承認処理権限番号
	 * @return 削除件数
	 */
	public int delete(long shouninShoriKengenNo){
		final String sql = "DELETE FROM shounin_shori_kengen WHERE shounin_shori_kengen_no = ?";
		return connection.update(sql, shouninShoriKengenNo);
	}
}
