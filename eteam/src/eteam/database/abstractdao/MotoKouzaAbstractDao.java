package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.MotoKouza;

/**
 * 振込元口座に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class MotoKouzaAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected MotoKouza mapToDto(GMap map){
		return map == null ? null : new MotoKouza(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<MotoKouza> mapToDto(List<GMap> mapList){
		List<MotoKouza> dtoList = new ArrayList<MotoKouza>();
		for (var map : mapList) {
			dtoList.add(new MotoKouza(map));
		}
		return dtoList;
	}
	
	/**
	 * 振込元口座のレコード有無を判定
	 * @param motoKinyuukikanCd 振込元金融機関コード
	 * @param motoKinyuukikanShitenCd 振込元金融機関支店コード
	 * @param motoYokinshubetsu 振込元預金種別
	 * @param motoKouzaBangou 振込元口座番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(String motoKinyuukikanCd, String motoKinyuukikanShitenCd, String motoYokinshubetsu, String motoKouzaBangou) {
		return this.find(motoKinyuukikanCd, motoKinyuukikanShitenCd, motoYokinshubetsu, motoKouzaBangou) == null ? false : true;
	}
	
	/**
	 * 振込元口座から主キー指定でレコードを取得
	 * @param motoKinyuukikanCd 振込元金融機関コード
	 * @param motoKinyuukikanShitenCd 振込元金融機関支店コード
	 * @param motoYokinshubetsu 振込元預金種別
	 * @param motoKouzaBangou 振込元口座番号
	 * @return 振込元口座DTO
	 */
	public MotoKouza find(String motoKinyuukikanCd, String motoKinyuukikanShitenCd, String motoYokinshubetsu, String motoKouzaBangou) {
		final String sql = "SELECT * FROM moto_kouza WHERE moto_kinyuukikan_cd = ? AND moto_kinyuukikan_shiten_cd = ? AND moto_yokinshubetsu = ? AND moto_kouza_bangou = ?";
		return mapToDto(connection.find(sql, motoKinyuukikanCd, motoKinyuukikanShitenCd, motoYokinshubetsu, motoKouzaBangou));
	}
	
	/**
	 * 振込元口座からレコードを全件取得 ※大量データ取得に注意
	 * @return List<振込元口座DTO>
	 */
	public List<MotoKouza> load() {
		final String sql = "SELECT * FROM moto_kouza ORDER BY moto_kinyuukikan_cd, moto_kinyuukikan_shiten_cd, moto_yokinshubetsu, moto_kouza_bangou";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 振込元口座から一部キー指定でレコードを取得
	 * @param motoKinyuukikanCd 振込元金融機関コード
	 * @return List<振込元口座>DTO
	 */
	public List<MotoKouza> load(String motoKinyuukikanCd) {
		final String sql = "SELECT * FROM moto_kouza WHERE moto_kinyuukikan_cd = ? "
							+ "ORDER BY moto_kinyuukikan_cd, moto_kinyuukikan_shiten_cd, moto_yokinshubetsu, moto_kouza_bangou";
		return mapToDto(connection.load(sql, motoKinyuukikanCd));
	}
	
	/**
	 * 振込元口座から一部キー指定でレコードを取得
	 * @param motoKinyuukikanCd 振込元金融機関コード
	 * @param motoKinyuukikanShitenCd 振込元金融機関支店コード
	 * @return List<振込元口座>DTO
	 */
	public List<MotoKouza> load(String motoKinyuukikanCd, String motoKinyuukikanShitenCd) {
		final String sql = "SELECT * FROM moto_kouza WHERE moto_kinyuukikan_cd = ?  AND moto_kinyuukikan_shiten_cd = ? "
							+ "ORDER BY moto_kinyuukikan_cd, moto_kinyuukikan_shiten_cd, moto_yokinshubetsu, moto_kouza_bangou";
		return mapToDto(connection.load(sql, motoKinyuukikanCd, motoKinyuukikanShitenCd));
	}
	
	/**
	 * 振込元口座から一部キー指定でレコードを取得
	 * @param motoKinyuukikanCd 振込元金融機関コード
	 * @param motoKinyuukikanShitenCd 振込元金融機関支店コード
	 * @param motoYokinshubetsu 振込元預金種別
	 * @return List<振込元口座>DTO
	 */
	public List<MotoKouza> load(String motoKinyuukikanCd, String motoKinyuukikanShitenCd, String motoYokinshubetsu) {
		final String sql = "SELECT * FROM moto_kouza WHERE moto_kinyuukikan_cd = ?  AND moto_kinyuukikan_shiten_cd = ?  AND moto_yokinshubetsu = ? "
							+ "ORDER BY moto_kinyuukikan_cd, moto_kinyuukikan_shiten_cd, moto_yokinshubetsu, moto_kouza_bangou";
		return mapToDto(connection.load(sql, motoKinyuukikanCd, motoKinyuukikanShitenCd, motoYokinshubetsu));
	}

	/**
	* 振込元口座登録
	* @param dto 振込元口座
	* @return 件数
	*/
	public int insert(
		MotoKouza dto
	){
		final String sql =
				"INSERT INTO moto_kouza "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.motoKinyuukikanCd, dto.motoKinyuukikanShitenCd, dto.motoYokinshubetsu, dto.motoKouzaBangou, dto.motoKinyuukikanNameHankana, dto.motoKinyuukikanShitenNameHankana, dto.shubetsuCd, dto.cdKbn, dto.kaishaCd, dto.kaishaNameHankana, dto.shinkiCd, dto.furikomiKbn
					);
	}

	/**
	* 振込元口座登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto 振込元口座
	* @return 件数
	*/
	public int upsert(
		MotoKouza dto
		 ){
		final String sql =
				"INSERT INTO moto_kouza "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT moto_kouza_pkey "
			+ "DO UPDATE SET moto_kinyuukikan_name_hankana = ?, moto_kinyuukikan_shiten_name_hankana = ?, shubetsu_cd = ?, cd_kbn = ?, kaisha_cd = ?, kaisha_name_hankana = ?, shinki_cd = ?, furikomi_kbn = ? "
			+ "";
			return connection.update(sql,
				dto.motoKinyuukikanCd, dto.motoKinyuukikanShitenCd, dto.motoYokinshubetsu, dto.motoKouzaBangou, dto.motoKinyuukikanNameHankana, dto.motoKinyuukikanShitenNameHankana, dto.shubetsuCd, dto.cdKbn, dto.kaishaCd, dto.kaishaNameHankana, dto.shinkiCd, dto.furikomiKbn
				, dto.motoKinyuukikanNameHankana, dto.motoKinyuukikanShitenNameHankana, dto.shubetsuCd, dto.cdKbn, dto.kaishaCd, dto.kaishaNameHankana, dto.shinkiCd, dto.furikomiKbn
				);
    }
	
	/**
	 * 振込元口座から主キー指定でレコードを削除
	 * @param motoKinyuukikanCd 振込元金融機関コード
	 * @param motoKinyuukikanShitenCd 振込元金融機関支店コード
	 * @param motoYokinshubetsu 振込元預金種別
	 * @param motoKouzaBangou 振込元口座番号
	 * @return 削除件数
	 */
	public int delete(String motoKinyuukikanCd, String motoKinyuukikanShitenCd, String motoYokinshubetsu, String motoKouzaBangou){
		final String sql = "DELETE FROM moto_kouza WHERE moto_kinyuukikan_cd = ? AND moto_kinyuukikan_shiten_cd = ? AND moto_yokinshubetsu = ? AND moto_kouza_bangou = ?";
		return connection.update(sql, motoKinyuukikanCd, motoKinyuukikanShitenCd, motoYokinshubetsu, motoKouzaBangou);
	}
	
	/**
	 * 振込元口座から一部キー指定でレコードを削除
	 * @param motoKinyuukikanCd 振込元金融機関コード
	 * @return 削除件数
	 */
	public int delete(String motoKinyuukikanCd) {
		final String sql = "DELETE FROM moto_kouza WHERE moto_kinyuukikan_cd = ? ";
		return connection.update(sql, motoKinyuukikanCd);
	}
	
	/**
	 * 振込元口座から一部キー指定でレコードを削除
	 * @param motoKinyuukikanCd 振込元金融機関コード
	 * @param motoKinyuukikanShitenCd 振込元金融機関支店コード
	 * @return 削除件数
	 */
	public int delete(String motoKinyuukikanCd, String motoKinyuukikanShitenCd) {
		final String sql = "DELETE FROM moto_kouza WHERE moto_kinyuukikan_cd = ?  AND moto_kinyuukikan_shiten_cd = ? ";
		return connection.update(sql, motoKinyuukikanCd, motoKinyuukikanShitenCd);
	}
	
	/**
	 * 振込元口座から一部キー指定でレコードを削除
	 * @param motoKinyuukikanCd 振込元金融機関コード
	 * @param motoKinyuukikanShitenCd 振込元金融機関支店コード
	 * @param motoYokinshubetsu 振込元預金種別
	 * @return 削除件数
	 */
	public int delete(String motoKinyuukikanCd, String motoKinyuukikanShitenCd, String motoYokinshubetsu) {
		final String sql = "DELETE FROM moto_kouza WHERE moto_kinyuukikan_cd = ?  AND moto_kinyuukikan_shiten_cd = ?  AND moto_yokinshubetsu = ? ";
		return connection.update(sql, motoKinyuukikanCd, motoKinyuukikanShitenCd, motoYokinshubetsu);
	}
}
