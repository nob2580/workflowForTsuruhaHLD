package eteam.database.abstractdao;

import java.math.BigDecimal;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.BatchLogInvalidDenpyouLog;

/**
 * 不良伝票ログに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class BatchLogInvalidDenpyouLogAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected BatchLogInvalidDenpyouLog mapToDto(GMap map){
		return map == null ? null : new BatchLogInvalidDenpyouLog(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<BatchLogInvalidDenpyouLog> mapToDto(List<GMap> mapList){
		List<BatchLogInvalidDenpyouLog> dtoList = new ArrayList<BatchLogInvalidDenpyouLog>();
		for (var map : mapList) {
			dtoList.add(new BatchLogInvalidDenpyouLog(map));
		}
		return dtoList;
	}
	
	/**
	 * 不良伝票ログのレコード有無を判定
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @param denpyouDate 伝票日付
	 * @param denpyouBangou 伝票番号
	 * @param taishakuSagakuKingaku 貸借差額金額
	 * @param gaiyou 概要
	 * @param naiyou 内容
	 * @return true:exist false:not exist
	 */
	public boolean exists(String fileName, int denpyouStartGyou, int denpyouEndGyou, Date denpyouDate, String denpyouBangou, BigDecimal taishakuSagakuKingaku, String gaiyou, String naiyou) {
		return this.find(fileName, denpyouStartGyou, denpyouEndGyou, denpyouDate, denpyouBangou, taishakuSagakuKingaku, gaiyou, naiyou) == null ? false : true;
	}
	
	/**
	 * 不良伝票ログから主キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @param denpyouDate 伝票日付
	 * @param denpyouBangou 伝票番号
	 * @param taishakuSagakuKingaku 貸借差額金額
	 * @param gaiyou 概要
	 * @param naiyou 内容
	 * @return 不良伝票ログDTO
	 */
	public BatchLogInvalidDenpyouLog find(String fileName, int denpyouStartGyou, int denpyouEndGyou, Date denpyouDate, String denpyouBangou, BigDecimal taishakuSagakuKingaku, String gaiyou, String naiyou) {
		final String sql = "SELECT * FROM batch_log_invalid_denpyou_log WHERE file_name = ? AND denpyou_start_gyou = ? AND denpyou_end_gyou = ? AND denpyou_date = ? AND denpyou_bangou = ? AND taishaku_sagaku_kingaku = ? AND gaiyou = ? AND naiyou = ?";
		return mapToDto(connection.find(sql, fileName, denpyouStartGyou, denpyouEndGyou, denpyouDate, denpyouBangou, taishakuSagakuKingaku, gaiyou, naiyou));
	}
	
	/**
	 * 不良伝票ログからレコードを全件取得 ※大量データ取得に注意
	 * @return List<不良伝票ログDTO>
	 */
	public List<BatchLogInvalidDenpyouLog> load() {
		final String sql = "SELECT * FROM batch_log_invalid_denpyou_log ORDER BY file_name, denpyou_start_gyou, denpyou_end_gyou, denpyou_date, denpyou_bangou, taishaku_sagaku_kingaku, gaiyou, naiyou";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @return List<不良伝票ログ>DTO
	 */
	public List<BatchLogInvalidDenpyouLog> load(String fileName) {
		final String sql = "SELECT * FROM batch_log_invalid_denpyou_log WHERE file_name = ? "
							+ "ORDER BY file_name, denpyou_start_gyou, denpyou_end_gyou, denpyou_date, denpyou_bangou, taishaku_sagaku_kingaku, gaiyou, naiyou";
		return mapToDto(connection.load(sql, fileName));
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @return List<不良伝票ログ>DTO
	 */
	public List<BatchLogInvalidDenpyouLog> load(String fileName, int denpyouStartGyou) {
		final String sql = "SELECT * FROM batch_log_invalid_denpyou_log WHERE file_name = ?  AND denpyou_start_gyou = ? "
							+ "ORDER BY file_name, denpyou_start_gyou, denpyou_end_gyou, denpyou_date, denpyou_bangou, taishaku_sagaku_kingaku, gaiyou, naiyou";
		return mapToDto(connection.load(sql, fileName, denpyouStartGyou));
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @return List<不良伝票ログ>DTO
	 */
	public List<BatchLogInvalidDenpyouLog> load(String fileName, int denpyouStartGyou, int denpyouEndGyou) {
		final String sql = "SELECT * FROM batch_log_invalid_denpyou_log WHERE file_name = ?  AND denpyou_start_gyou = ?  AND denpyou_end_gyou = ? "
							+ "ORDER BY file_name, denpyou_start_gyou, denpyou_end_gyou, denpyou_date, denpyou_bangou, taishaku_sagaku_kingaku, gaiyou, naiyou";
		return mapToDto(connection.load(sql, fileName, denpyouStartGyou, denpyouEndGyou));
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @param denpyouDate 伝票日付
	 * @return List<不良伝票ログ>DTO
	 */
	public List<BatchLogInvalidDenpyouLog> load(String fileName, int denpyouStartGyou, int denpyouEndGyou, Date denpyouDate) {
		final String sql = "SELECT * FROM batch_log_invalid_denpyou_log WHERE file_name = ?  AND denpyou_start_gyou = ?  AND denpyou_end_gyou = ?  AND denpyou_date = ? "
							+ "ORDER BY file_name, denpyou_start_gyou, denpyou_end_gyou, denpyou_date, denpyou_bangou, taishaku_sagaku_kingaku, gaiyou, naiyou";
		return mapToDto(connection.load(sql, fileName, denpyouStartGyou, denpyouEndGyou, denpyouDate));
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @param denpyouDate 伝票日付
	 * @param denpyouBangou 伝票番号
	 * @return List<不良伝票ログ>DTO
	 */
	public List<BatchLogInvalidDenpyouLog> load(String fileName, int denpyouStartGyou, int denpyouEndGyou, Date denpyouDate, String denpyouBangou) {
		final String sql = "SELECT * FROM batch_log_invalid_denpyou_log WHERE file_name = ?  AND denpyou_start_gyou = ?  AND denpyou_end_gyou = ?  AND denpyou_date = ?  AND denpyou_bangou = ? "
							+ "ORDER BY file_name, denpyou_start_gyou, denpyou_end_gyou, denpyou_date, denpyou_bangou, taishaku_sagaku_kingaku, gaiyou, naiyou";
		return mapToDto(connection.load(sql, fileName, denpyouStartGyou, denpyouEndGyou, denpyouDate, denpyouBangou));
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @param denpyouDate 伝票日付
	 * @param denpyouBangou 伝票番号
	 * @param taishakuSagakuKingaku 貸借差額金額
	 * @return List<不良伝票ログ>DTO
	 */
	public List<BatchLogInvalidDenpyouLog> load(String fileName, int denpyouStartGyou, int denpyouEndGyou, Date denpyouDate, String denpyouBangou, BigDecimal taishakuSagakuKingaku) {
		final String sql = "SELECT * FROM batch_log_invalid_denpyou_log WHERE file_name = ?  AND denpyou_start_gyou = ?  AND denpyou_end_gyou = ?  AND denpyou_date = ?  AND denpyou_bangou = ?  AND taishaku_sagaku_kingaku = ? "
							+ "ORDER BY file_name, denpyou_start_gyou, denpyou_end_gyou, denpyou_date, denpyou_bangou, taishaku_sagaku_kingaku, gaiyou, naiyou";
		return mapToDto(connection.load(sql, fileName, denpyouStartGyou, denpyouEndGyou, denpyouDate, denpyouBangou, taishakuSagakuKingaku));
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを取得
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @param denpyouDate 伝票日付
	 * @param denpyouBangou 伝票番号
	 * @param taishakuSagakuKingaku 貸借差額金額
	 * @param gaiyou 概要
	 * @return List<不良伝票ログ>DTO
	 */
	public List<BatchLogInvalidDenpyouLog> load(String fileName, int denpyouStartGyou, int denpyouEndGyou, Date denpyouDate, String denpyouBangou, BigDecimal taishakuSagakuKingaku, String gaiyou) {
		final String sql = "SELECT * FROM batch_log_invalid_denpyou_log WHERE file_name = ?  AND denpyou_start_gyou = ?  AND denpyou_end_gyou = ?  AND denpyou_date = ?  AND denpyou_bangou = ?  AND taishaku_sagaku_kingaku = ?  AND gaiyou = ? "
							+ "ORDER BY file_name, denpyou_start_gyou, denpyou_end_gyou, denpyou_date, denpyou_bangou, taishaku_sagaku_kingaku, gaiyou, naiyou";
		return mapToDto(connection.load(sql, fileName, denpyouStartGyou, denpyouEndGyou, denpyouDate, denpyouBangou, taishakuSagakuKingaku, gaiyou));
	}

	/**
	* 不良伝票ログ登録
	* @param dto 不良伝票ログ
	* @return 件数
	*/
	public int insert(
		BatchLogInvalidDenpyouLog dto
	){
		final String sql =
				"INSERT INTO batch_log_invalid_denpyou_log "
			+ "VALUES(?, ?, ?, ?, ?, ?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.fileName, dto.denpyouStartGyou, dto.denpyouEndGyou, dto.denpyouDate, dto.denpyouBangou, dto.taishakuSagakuKingaku, dto.gaiyou, dto.naiyou
					);
	}
	
	/**
	 * 不良伝票ログから主キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @param denpyouDate 伝票日付
	 * @param denpyouBangou 伝票番号
	 * @param taishakuSagakuKingaku 貸借差額金額
	 * @param gaiyou 概要
	 * @param naiyou 内容
	 * @return 削除件数
	 */
	public int delete(String fileName, int denpyouStartGyou, int denpyouEndGyou, Date denpyouDate, String denpyouBangou, BigDecimal taishakuSagakuKingaku, String gaiyou, String naiyou){
		final String sql = "DELETE FROM batch_log_invalid_denpyou_log WHERE file_name = ? AND denpyou_start_gyou = ? AND denpyou_end_gyou = ? AND denpyou_date = ? AND denpyou_bangou = ? AND taishaku_sagaku_kingaku = ? AND gaiyou = ? AND naiyou = ?";
		return connection.update(sql, fileName, denpyouStartGyou, denpyouEndGyou, denpyouDate, denpyouBangou, taishakuSagakuKingaku, gaiyou, naiyou);
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @return 削除件数
	 */
	public int delete(String fileName) {
		final String sql = "DELETE FROM batch_log_invalid_denpyou_log WHERE file_name = ? ";
		return connection.update(sql, fileName);
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @return 削除件数
	 */
	public int delete(String fileName, int denpyouStartGyou) {
		final String sql = "DELETE FROM batch_log_invalid_denpyou_log WHERE file_name = ?  AND denpyou_start_gyou = ? ";
		return connection.update(sql, fileName, denpyouStartGyou);
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @return 削除件数
	 */
	public int delete(String fileName, int denpyouStartGyou, int denpyouEndGyou) {
		final String sql = "DELETE FROM batch_log_invalid_denpyou_log WHERE file_name = ?  AND denpyou_start_gyou = ?  AND denpyou_end_gyou = ? ";
		return connection.update(sql, fileName, denpyouStartGyou, denpyouEndGyou);
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @param denpyouDate 伝票日付
	 * @return 削除件数
	 */
	public int delete(String fileName, int denpyouStartGyou, int denpyouEndGyou, Date denpyouDate) {
		final String sql = "DELETE FROM batch_log_invalid_denpyou_log WHERE file_name = ?  AND denpyou_start_gyou = ?  AND denpyou_end_gyou = ?  AND denpyou_date = ? ";
		return connection.update(sql, fileName, denpyouStartGyou, denpyouEndGyou, denpyouDate);
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @param denpyouDate 伝票日付
	 * @param denpyouBangou 伝票番号
	 * @return 削除件数
	 */
	public int delete(String fileName, int denpyouStartGyou, int denpyouEndGyou, Date denpyouDate, String denpyouBangou) {
		final String sql = "DELETE FROM batch_log_invalid_denpyou_log WHERE file_name = ?  AND denpyou_start_gyou = ?  AND denpyou_end_gyou = ?  AND denpyou_date = ?  AND denpyou_bangou = ? ";
		return connection.update(sql, fileName, denpyouStartGyou, denpyouEndGyou, denpyouDate, denpyouBangou);
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @param denpyouDate 伝票日付
	 * @param denpyouBangou 伝票番号
	 * @param taishakuSagakuKingaku 貸借差額金額
	 * @return 削除件数
	 */
	public int delete(String fileName, int denpyouStartGyou, int denpyouEndGyou, Date denpyouDate, String denpyouBangou, BigDecimal taishakuSagakuKingaku) {
		final String sql = "DELETE FROM batch_log_invalid_denpyou_log WHERE file_name = ?  AND denpyou_start_gyou = ?  AND denpyou_end_gyou = ?  AND denpyou_date = ?  AND denpyou_bangou = ?  AND taishaku_sagaku_kingaku = ? ";
		return connection.update(sql, fileName, denpyouStartGyou, denpyouEndGyou, denpyouDate, denpyouBangou, taishakuSagakuKingaku);
	}
	
	/**
	 * 不良伝票ログから一部キー指定でレコードを削除
	 * @param fileName ファイル名
	 * @param denpyouStartGyou 伝票開始行
	 * @param denpyouEndGyou 伝票終了行
	 * @param denpyouDate 伝票日付
	 * @param denpyouBangou 伝票番号
	 * @param taishakuSagakuKingaku 貸借差額金額
	 * @param gaiyou 概要
	 * @return 削除件数
	 */
	public int delete(String fileName, int denpyouStartGyou, int denpyouEndGyou, Date denpyouDate, String denpyouBangou, BigDecimal taishakuSagakuKingaku, String gaiyou) {
		final String sql = "DELETE FROM batch_log_invalid_denpyou_log WHERE file_name = ?  AND denpyou_start_gyou = ?  AND denpyou_end_gyou = ?  AND denpyou_date = ?  AND denpyou_bangou = ?  AND taishaku_sagaku_kingaku = ?  AND gaiyou = ? ";
		return connection.update(sql, fileName, denpyouStartGyou, denpyouEndGyou, denpyouDate, denpyouBangou, taishakuSagakuKingaku, gaiyou);
	}
}
