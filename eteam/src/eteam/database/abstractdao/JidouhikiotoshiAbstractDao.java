package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.Jidouhikiotoshi;

/**
 * 自動引落に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class JidouhikiotoshiAbstractDao extends EteamAbstractLogic {

	/**
	 * insert文定型部
	 */
	protected final String insertSql = "INSERT INTO jidouhikiotoshi (denpyou_id, keijoubi, hikiotoshibi, hontai_kingaku_goukei, shouhizeigaku_goukei, shiharai_kingaku_goukei, hf1_cd, hf1_name_ryakushiki, hf2_cd, hf2_name_ryakushiki, hf3_cd, hf3_name_ryakushiki, hf4_cd, hf4_name_ryakushiki, hf5_cd, hf5_name_ryakushiki, hf6_cd, hf6_name_ryakushiki, hf7_cd, hf7_name_ryakushiki, hf8_cd, hf8_name_ryakushiki, hf9_cd, hf9_name_ryakushiki, hf10_cd, hf10_name_ryakushiki, hosoku, touroku_user_id, touroku_time, koushin_user_id, koushin_time, shouhyou_shorui_flg, nyuryoku_houshiki, invoice_denpyou) VALUES "
			+ "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, current_timestamp, ?, current_timestamp, ?, ?, ?)";

	/**
	 * 主キー条件定型部
	 */
	protected final String whereSql = " WHERE denpyou_id = ?";

	/**
	 * @param map GMap
	 * @return dto (レコードが存在しなければNull)
	 */
	protected Jidouhikiotoshi mapToDto(GMap map) {
		return map == null ? null : new Jidouhikiotoshi(map);
	}

	/**
	 * @param mapList 検索結果GMap
	 * @return dtoList
	 */
	protected List<Jidouhikiotoshi> mapToDto(List<GMap> mapList) {
		List<Jidouhikiotoshi> dtoList = new ArrayList<Jidouhikiotoshi>();
		for (var map : mapList) {
			dtoList.add(new Jidouhikiotoshi(map));
		}
		return dtoList;
	}

	/**
	 * 自動引落のレコード有無を判定
	 * @param denpyouId 伝票ID
	 * @return true:exist false:not exist
	 */
	public boolean exists(String denpyouId) {
		return this.find(denpyouId) != null;
	}

	/**
	 * 自動引落から主キー指定でレコードを取得
	 * @param denpyouId 伝票ID
	 * @return 自動引落DTO
	 */
	public Jidouhikiotoshi find(String denpyouId) {
		final String sql = "SELECT * FROM jidouhikiotoshi " + this.whereSql;
		return mapToDto(connection.find(sql, denpyouId));
	}

	/**
	 * 自動引落からレコードを全件取得 ※大量データ取得に注意
	 * @return List<自動引落DTO>
	 */
	public List<Jidouhikiotoshi> load() {
		final String sql = "SELECT * FROM jidouhikiotoshi  ORDER BY denpyou_id";
		return mapToDto(connection.load(sql));
	}

	/**
	 * 自動引落登録
	 * @param dto 自動引落
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int insert(Jidouhikiotoshi dto, String koushinUserId) {
		return connection.update(this.insertSql, dto.denpyouId, dto.keijoubi, dto.hikiotoshibi, dto.hontaiKingakuGoukei, dto.shouhizeigakuGoukei, dto.shiharaiKingakuGoukei, dto.hf1Cd, dto.hf1NameRyakushiki, dto.hf2Cd, dto.hf2NameRyakushiki, dto.hf3Cd, dto.hf3NameRyakushiki, dto.hf4Cd, dto.hf4NameRyakushiki, dto.hf5Cd, dto.hf5NameRyakushiki, dto.hf6Cd, dto.hf6NameRyakushiki, dto.hf7Cd, dto.hf7NameRyakushiki, dto.hf8Cd, dto.hf8NameRyakushiki, dto.hf9Cd, dto.hf9NameRyakushiki, dto.hf10Cd, dto.hf10NameRyakushiki, dto.hosoku, koushinUserId, koushinUserId, dto.shouhyouShoruiFlg, dto.nyuryokuHoushiki, dto.invoiceDenpyou);
	}

	/**
	 * 自動引落更新
	 * @param dto 自動引落
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int update(Jidouhikiotoshi dto, String koushinUserId) {
		final String sql = "UPDATE jidouhikiotoshi SET  keijoubi = ?, hikiotoshibi = ?, hontai_kingaku_goukei = ?, shouhizeigaku_goukei = ?, shiharai_kingaku_goukei = ?, hf1_cd = ?, hf1_name_ryakushiki = ?, hf2_cd = ?, hf2_name_ryakushiki = ?, hf3_cd = ?, hf3_name_ryakushiki = ?, hf4_cd = ?, hf4_name_ryakushiki = ?, hf5_cd = ?, hf5_name_ryakushiki = ?, hf6_cd = ?, hf6_name_ryakushiki = ?, hf7_cd = ?, hf7_name_ryakushiki = ?, hf8_cd = ?, hf8_name_ryakushiki = ?, hf9_cd = ?, hf9_name_ryakushiki = ?, hf10_cd = ?, hf10_name_ryakushiki = ?, hosoku = ?, koushin_user_id = ?, koushin_time = current_timestamp, shouhyou_shorui_flg = ?, nyuryoku_houshiki = ?, invoice_denpyou = ? " + this.whereSql;
		return connection.update(sql, dto.keijoubi, dto.hikiotoshibi, dto.hontaiKingakuGoukei, dto.shouhizeigakuGoukei, dto.shiharaiKingakuGoukei, dto.hf1Cd, dto.hf1NameRyakushiki, dto.hf2Cd, dto.hf2NameRyakushiki, dto.hf3Cd, dto.hf3NameRyakushiki, dto.hf4Cd, dto.hf4NameRyakushiki, dto.hf5Cd, dto.hf5NameRyakushiki, dto.hf6Cd, dto.hf6NameRyakushiki, dto.hf7Cd, dto.hf7NameRyakushiki, dto.hf8Cd, dto.hf8NameRyakushiki, dto.hf9Cd, dto.hf9NameRyakushiki, dto.hf10Cd, dto.hf10NameRyakushiki, dto.hosoku, koushinUserId, dto.shouhyouShoruiFlg, dto.nyuryokuHoushiki, dto.invoiceDenpyou, dto.denpyouId);
	}

	/**
	 * 自動引落登録or更新
	 * 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	 * @param dto 自動引落
	 * @param koushinUserId 更新ユーザーID
	 * @return 件数
	 */
	public int upsert(Jidouhikiotoshi dto, String koushinUserId) {
		final String sql = this.insertSql
			+ " ON CONFLICT ON CONSTRAINT jidouhikiotoshi_pkey "
			+ "DO UPDATE SET  keijoubi = ?, hikiotoshibi = ?, hontai_kingaku_goukei = ?, shouhizeigaku_goukei = ?, shiharai_kingaku_goukei = ?, hf1_cd = ?, hf1_name_ryakushiki = ?, hf2_cd = ?, hf2_name_ryakushiki = ?, hf3_cd = ?, hf3_name_ryakushiki = ?, hf4_cd = ?, hf4_name_ryakushiki = ?, hf5_cd = ?, hf5_name_ryakushiki = ?, hf6_cd = ?, hf6_name_ryakushiki = ?, hf7_cd = ?, hf7_name_ryakushiki = ?, hf8_cd = ?, hf8_name_ryakushiki = ?, hf9_cd = ?, hf9_name_ryakushiki = ?, hf10_cd = ?, hf10_name_ryakushiki = ?, hosoku = ?, koushin_user_id = ?, koushin_time = current_timestamp, shouhyou_shorui_flg = ?, nyuryoku_houshiki = ?, invoice_denpyou = ? ";
		return connection.update(sql, dto.denpyouId, dto.keijoubi, dto.hikiotoshibi, dto.hontaiKingakuGoukei, dto.shouhizeigakuGoukei, dto.shiharaiKingakuGoukei, dto.hf1Cd, dto.hf1NameRyakushiki, dto.hf2Cd, dto.hf2NameRyakushiki, dto.hf3Cd, dto.hf3NameRyakushiki, dto.hf4Cd, dto.hf4NameRyakushiki, dto.hf5Cd, dto.hf5NameRyakushiki, dto.hf6Cd, dto.hf6NameRyakushiki, dto.hf7Cd, dto.hf7NameRyakushiki, dto.hf8Cd, dto.hf8NameRyakushiki, dto.hf9Cd, dto.hf9NameRyakushiki, dto.hf10Cd, dto.hf10NameRyakushiki, dto.hosoku, koushinUserId, koushinUserId, dto.shouhyouShoruiFlg, dto.nyuryokuHoushiki, dto.invoiceDenpyou, dto.keijoubi, dto.hikiotoshibi, dto.hontaiKingakuGoukei, dto.shouhizeigakuGoukei, dto.shiharaiKingakuGoukei, dto.hf1Cd, dto.hf1NameRyakushiki, dto.hf2Cd, dto.hf2NameRyakushiki, dto.hf3Cd, dto.hf3NameRyakushiki, dto.hf4Cd, dto.hf4NameRyakushiki, dto.hf5Cd, dto.hf5NameRyakushiki, dto.hf6Cd, dto.hf6NameRyakushiki, dto.hf7Cd, dto.hf7NameRyakushiki, dto.hf8Cd, dto.hf8NameRyakushiki, dto.hf9Cd, dto.hf9NameRyakushiki, dto.hf10Cd, dto.hf10NameRyakushiki, dto.hosoku, koushinUserId, dto.shouhyouShoruiFlg, dto.nyuryokuHoushiki, dto.invoiceDenpyou);
	}

	/**
	 * 自動引落から主キー指定でレコードを削除
	 * @param denpyouId 伝票ID
	 * @return 削除件数
	 */
	public int delete(String denpyouId) {
		final String sql = "DELETE FROM jidouhikiotoshi " + this.whereSql;
		return connection.update(sql, denpyouId);
	}
}