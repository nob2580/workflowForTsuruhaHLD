package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.UserDefaultValue;

/**
 * ユーザー別デフォルト値に対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class UserDefaultValueAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected UserDefaultValue mapToDto(GMap map){
		return map == null ? null : new UserDefaultValue(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<UserDefaultValue> mapToDto(List<GMap> mapList){
		List<UserDefaultValue> dtoList = new ArrayList<UserDefaultValue>();
		for (var map : mapList) {
			dtoList.add(new UserDefaultValue(map));
		}
		return dtoList;
	}
	
	/**
	 * ユーザー別デフォルト値のレコード有無を判定
	 * @param kbn 区分
	 * @param userId ユーザーID
	 * @return true:exist false:not exist
	 */
	public boolean exists(String kbn, String userId) {
		return this.find(kbn, userId) == null ? false : true;
	}
	
	/**
	 * ユーザー別デフォルト値から主キー指定でレコードを取得
	 * @param kbn 区分
	 * @param userId ユーザーID
	 * @return ユーザー別デフォルト値DTO
	 */
	public UserDefaultValue find(String kbn, String userId) {
		final String sql = "SELECT * FROM user_default_value WHERE kbn = ? AND user_id = ?";
		return mapToDto(connection.find(sql, kbn, userId));
	}
	
	/**
	 * ユーザー別デフォルト値からレコードを全件取得 ※大量データ取得に注意
	 * @return List<ユーザー別デフォルト値DTO>
	 */
	public List<UserDefaultValue> load() {
		final String sql = "SELECT * FROM user_default_value ORDER BY kbn, user_id";
		return mapToDto(connection.load(sql));
	}
	
	/**
	 * ユーザー別デフォルト値から一部キー指定でレコードを取得
	 * @param kbn 区分
	 * @return List<ユーザー別デフォルト値>DTO
	 */
	public List<UserDefaultValue> load(String kbn) {
		final String sql = "SELECT * FROM user_default_value WHERE kbn = ? "
							+ "ORDER BY kbn, user_id";
		return mapToDto(connection.load(sql, kbn));
	}

	/**
	* ユーザー別デフォルト値登録
	* @param dto ユーザー別デフォルト値
	* @return 件数
	*/
	public int insert(
		UserDefaultValue dto
	){
		final String sql =
				"INSERT INTO user_default_value "
			+ "VALUES(?, ?, ? "
			+ ")";
			return connection.update(sql,
					dto.kbn, dto.userId, dto.defaultValue
					);
	}

	/**
	* ユーザー別デフォルト値登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto ユーザー別デフォルト値
	* @return 件数
	*/
	public int upsert(
		UserDefaultValue dto
		 ){
		final String sql =
				"INSERT INTO user_default_value "
			+ "VALUES(?, ?, ? "
			+ ") ON CONFLICT ON CONSTRAINT user_default_value_pkey "
			+ "DO UPDATE SET default_value = ? "
			+ "";
			return connection.update(sql,
				dto.kbn, dto.userId, dto.defaultValue
				, dto.defaultValue
				);
    }
	
	/**
	 * ユーザー別デフォルト値から主キー指定でレコードを削除
	 * @param kbn 区分
	 * @param userId ユーザーID
	 * @return 削除件数
	 */
	public int delete(String kbn, String userId){
		final String sql = "DELETE FROM user_default_value WHERE kbn = ? AND user_id = ?";
		return connection.update(sql, kbn, userId);
	}
	
	/**
	 * ユーザー別デフォルト値から一部キー指定でレコードを削除
	 * @param kbn 区分
	 * @return 削除件数
	 */
	public int delete(String kbn) {
		final String sql = "DELETE FROM user_default_value WHERE kbn = ? ";
		return connection.update(sql, kbn);
	}
}
