package eteam.database.abstractdao;

import java.util.ArrayList;
import java.util.List;

import eteam.base.EteamAbstractLogic;
import eteam.base.GMap;
import eteam.database.dto.TempCsvmake;

/**
 * CSV作成用一時テーブルに対する標準データ操作クラス
 * This code was generated by the tool.
 * This code can not be changed.
 * @author CodeGenerator
 */
public abstract class TempCsvmakeAbstractDao extends EteamAbstractLogic {

	/**
	* @param map GMap
	* @return dto (レコードが存在しなければNull)
	*/
	protected TempCsvmake mapToDto(GMap map){
		return map == null ? null : new TempCsvmake(map);
	}

	/**
	* @param mapList 検索結果GMap
	* @return dtoList
	*/
	protected List<TempCsvmake> mapToDto(List<GMap> mapList){
		List<TempCsvmake> dtoList = new ArrayList<TempCsvmake>();
		for (var map : mapList) {
			dtoList.add(new TempCsvmake(map));
		}
		return dtoList;
	}
	
	/**
	 * CSV作成用一時テーブルのレコード有無を判定
	 * @param rowNum 行番号
	 * @return true:exist false:not exist
	 */
	public boolean exists(int rowNum) {
		return this.find(rowNum) == null ? false : true;
	}
	
	/**
	 * CSV作成用一時テーブルから主キー指定でレコードを取得
	 * @param rowNum 行番号
	 * @return CSV作成用一時テーブルDTO
	 */
	public TempCsvmake find(int rowNum) {
		final String sql = "SELECT * FROM temp_csvmake WHERE row_num = ?";
		return mapToDto(connection.find(sql, rowNum));
	}
	
	/**
	 * CSV作成用一時テーブルからレコードを全件取得 ※大量データ取得に注意
	 * @return List<CSV作成用一時テーブルDTO>
	 */
	public List<TempCsvmake> load() {
		final String sql = "SELECT * FROM temp_csvmake ORDER BY row_num";
		return mapToDto(connection.load(sql));
	}

	/**
	* CSV作成用一時テーブル登録
	* @param dto CSV作成用一時テーブル
	* @return 件数
	*/
	public int insert(
		TempCsvmake dto
	){
		final String sql =
				"INSERT INTO temp_csvmake "
			+ "VALUES(?, ? "
			+ ")";
			return connection.update(sql,
					dto.rowNum, dto.dataRowbinary
					);
	}

	/**
	* CSV作成用一時テーブル登録or更新
	* 仕様上Insert/Updateの一方のみ処理される場合は使用不可
	* @param dto CSV作成用一時テーブル
	* @return 件数
	*/
	public int upsert(
		TempCsvmake dto
		 ){
		final String sql =
				"INSERT INTO temp_csvmake "
			+ "VALUES(?, ? "
			+ ") ON CONFLICT ON CONSTRAINT temp_csvmake_pkey "
			+ "DO UPDATE SET data_rowbinary = ? "
			+ "";
			return connection.update(sql,
				dto.rowNum, dto.dataRowbinary
				, dto.dataRowbinary
				);
    }
	
	/**
	 * CSV作成用一時テーブルから主キー指定でレコードを削除
	 * @param rowNum 行番号
	 * @return 削除件数
	 */
	public int delete(int rowNum){
		final String sql = "DELETE FROM temp_csvmake WHERE row_num = ?";
		return connection.update(sql, rowNum);
	}
}
